
vga_test6.elf:     file format elf32-littlenios2
vga_test6.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000020

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x0000dfc4 memsz 0x0000dfc4 flags r-x
    LOAD off    0x0000efe4 vaddr 0x0800dfe4 paddr 0x0800ebb0 align 2**12
         filesz 0x00000bcc memsz 0x00000bcc flags rw-
    LOAD off    0x0001077c vaddr 0x0800f77c paddr 0x0800f77c align 2**12
         filesz 0x00000000 memsz 0x0000021c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         0000c878  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000174c  0800c898  0800c898  0000d898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       00000bcc  0800dfe4  0800ebb0  0000efe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          0000021c  0800f77c  0800f77c  0001077c  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000023  00000000  00000000  0000fbb0  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000b00  00000000  00000000  0000fbd8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000203a5  00000000  00000000  000106d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00007d78  00000000  00000000  00030a7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000939c  00000000  00000000  000387f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000015c4  00000000  00000000  00041b94  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002b8b  00000000  00000000  00043158  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000109e2  00000000  00000000  00045ce3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_alt_sim_info 00000010  00000000  00000000  000566c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000009b8  00000000  00000000  000566d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .thread_model 00000003  00000000  00000000  00059cf7  2**0
                  CONTENTS, READONLY
 16 .cpu          00000003  00000000  00000000  00059cfa  2**0
                  CONTENTS, READONLY
 17 .qsys         00000001  00000000  00000000  00059cfd  2**0
                  CONTENTS, READONLY
 18 .simulation_enabled 00000001  00000000  00000000  00059cfe  2**0
                  CONTENTS, READONLY
 19 .stderr_dev   00000004  00000000  00000000  00059cff  2**0
                  CONTENTS, READONLY
 20 .stdin_dev    00000004  00000000  00000000  00059d03  2**0
                  CONTENTS, READONLY
 21 .stdout_dev   00000004  00000000  00000000  00059d07  2**0
                  CONTENTS, READONLY
 22 .sopc_system_name 0000000c  00000000  00000000  00059d0b  2**0
                  CONTENTS, READONLY
 23 .quartus_project_dir 0000005e  00000000  00000000  00059d17  2**0
                  CONTENTS, READONLY
 24 .jdi          0000374e  00000000  00000000  00059d75  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     0006df72  00000000  00000000  0005d4c3  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .text	00000000 .text
0800c898 l    d  .rodata	00000000 .rodata
0800dfe4 l    d  .rwdata	00000000 .rwdata
0800f77c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../vga_test6_bsp//obj/HAL/src/crt0.o
08000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 display.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 rpg385.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 vfprintf.c
080025f8 l     F .text	00000034 __sprint_r
0800dcc2 l     O .rodata	00000010 blanks.3546
0800dcd2 l     O .rodata	00000010 zeroes.3547
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
08004640 l     F .text	0000023c quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
080060b0 l     F .text	00000008 __fp_lock
080060b8 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0800e4d4 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0800dd08 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0800de50 l     O .rodata	0000000c p05.2466
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
08009df8 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0800ab28 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0800b294 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0800b3b0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0800b3dc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0800b4dc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0800b5d0 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0800b6bc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0800b87c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0800ebac l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0800baf0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0800bc30 l     F .text	00000038 alt_dev_reg
0800ea88 l     O .rwdata	00000048 Char_Buffer_with_DMA
0800ead0 l     O .rwdata	00000054 Pixel_Buffer_DMA
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0800c250 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
080082ac g     F .text	00000074 _mprec_log10
0800839c g     F .text	00000084 __any_on
08009044 g     F .text	00000064 _isatty_r
0800dd38 g     O .rodata	00000028 __mprec_tinytens
0800b7e0 g     F .text	0000005c alt_main
0800b250 g     F .text	00000044 __ashldi3
0800f784 g     O .bss	00000004 numChoices
080090a8 g     F .text	0000006c _lseek_r
08001784 g     F .text	000001b4 addToScreen
0800ebb0 g       *ABS*	00000000 __flash_rwdata_start
0800eb5b g     O .rwdata	00000001 RIGHT
0800a698 g     F .text	0000005c __eqdf2
0800f998 g       *ABS*	00000000 __alt_heap_start
08008b5c g     F .text	0000005c __sseek
08006154 g     F .text	0000010c __sinit
0800eb34 g     O .rwdata	00000004 keycode
0800c0e4 g     F .text	000000f8 alt_up_char_buffer_string
08006dec g     F .text	0000009c _setlocale_r
080060cc g     F .text	00000078 __sfmoreglue
0800b85c g     F .text	00000020 __malloc_unlock
0800c01c g     F .text	000000c8 alt_up_char_buffer_draw
08007168 g     F .text	0000018c memmove
08000db8 g     F .text	000007d4 initEvents
08006144 g     F .text	00000010 _cleanup
080073d0 g     F .text	000000a8 _Balloc
0800eb5d g     O .rwdata	00000001 ESC
0800a750 g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
0800f780 g     O .bss	00000004 week
0800eb3e g     O .rwdata	00000002 BOXCOLOR
0800eb3c g     O .rwdata	00000002 BGCOLOR
08000000 g     F .entry	0000000c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
08008fdc g     F .text	00000068 _fstat_r
0800158c g     F .text	0000013c printChoices
0800f79c g     O .bss	00000004 errno
08001968 g     F .text	0000002c flush
0800f7b0 g     O .bss	00000004 alt_argv
08016b24 g       *ABS*	00000000 _gp
0800f788 g     O .bss	00000004 curTextY
0800eb48 g     O .rwdata	00000004 SCRWIDTH
0800e908 g     O .rwdata	00000180 alt_fd_list
0800dfe4 g     O .rwdata	00000028 eventTexts
0800c3f8 g     F .text	00000090 alt_find_dev
08002390 g     F .text	00000140 memcpy
0800c1dc g     F .text	00000058 alt_up_char_buffer_clear
080060c0 g     F .text	0000000c _cleanup_r
0800a874 g     F .text	000000d4 __floatsidf
0800a818 g     F .text	0000005c __ltdf2
0800c898 g       *ABS*	00000000 __DTOR_END__
080019e8 g     F .text	000000a4 flushChar
08008208 g     F .text	000000a4 __ratio
08001be4 g     F .text	00000014 malloc
0800ac48 g     F .text	00000008 __udivsi3
0800b52c g     F .text	000000a4 isatty
0800dd88 g     O .rodata	000000c8 __mprec_tens
08006e88 g     F .text	0000000c __locale_charset
0800f798 g     O .bss	00000004 __malloc_top_pad
0800eb68 g     O .rwdata	00000004 SELWIDTH
0800eb90 g     O .rwdata	00000004 __mb_cur_max
08006e94 g     F .text	0000000c _localeconv_r
08007800 g     F .text	0000003c __i2b
080067a8 g     F .text	000004e4 __sfvwrite_r
080024d0 g     F .text	00000064 _sbrk_r
0800eb44 g     O .rwdata	00000004 XPADDING
0800eb5c g     O .rwdata	00000001 ENT
08009114 g     F .text	0000006c _read_r
0800e8d4 g     O .rwdata	0000000c __lc_ctype
0800eba4 g     O .rwdata	00000004 alt_max_fd
0800b038 g     F .text	00000104 __unpack_d
08008e8c g     F .text	0000013c _fclose_r
08006080 g     F .text	00000030 fflush
0800f794 g     O .bss	00000004 __malloc_max_sbrked_mem
0800a14c g     F .text	00000054 __adddf3
08007f7c g     F .text	00000148 __b2d
080097d0 g     F .text	00000628 __umoddi3
0800b70c g     F .text	000000d4 lseek
08000000 g       *ABS*	00000000 __alt_mem_sdram_controller_0
0800eb88 g     O .rwdata	00000004 _global_impure_ptr
08008420 g     F .text	000005fc _realloc_r
0800f998 g       *ABS*	00000000 __bss_end
0800eb54 g     O .rwdata	00000004 SCRPIXH
08009180 g     F .text	00000650 __udivdi3
0800dd60 g     O .rodata	00000028 __mprec_bigtens
080075e4 g     F .text	00000104 __s2b
0800aa0c g     F .text	0000011c __floatunsidf
08007d1c g     F .text	00000058 __mcmp
0800636c g     F .text	00000018 __fp_lock_all
08001a8c g     F .text	00000088 VGA_text
0800e8e0 g     O .rwdata	00000028 alt_dev_null
0800eb2c g     O .rwdata	00000004 character_buffer
0800c234 g     F .text	0000001c alt_dcache_flush_all
080076e8 g     F .text	00000068 __hi0bits
0800a948 g     F .text	000000c4 __fixdfsi
0800ebb0 g       *ABS*	00000000 __ram_rwdata_end
0800eb9c g     O .rwdata	00000008 alt_dev_list
0800eb78 g     O .rwdata	00000004 grd
0800bb40 g     F .text	000000f0 write
0800dfe4 g       *ABS*	00000000 __ram_rodata_end
0800b42c g     F .text	000000b0 fstat
0800b20c g     F .text	00000044 __lshrdi3
08007a94 g     F .text	0000012c __pow5mult
0800f7a8 g     O .bss	00000004 __nlocale_changed
0800ac50 g     F .text	00000008 __umodsi3
0800f998 g       *ABS*	00000000 end
0800eb4c g     O .rwdata	00000004 SCRHIGHT
0800bf54 g     F .text	00000088 alt_up_char_buffer_init
0800c898 g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
0800ad68 g     F .text	000000ac __clzsi2
0800635c g     F .text	00000004 __sfp_lock_acquire
08007070 g     F .text	000000f8 memchr
0800262c g     F .text	00001e7c ___vfprintf_internal_r
08002534 g     F .text	00000058 _sprintf_r
080064d8 g     F .text	000002d0 _free_r
0800c6bc g     F .text	000001a0 __call_exitprocs
0800f7a4 g     O .bss	00000004 __mlocale_changed
0800eb80 g     O .rwdata	00000004 __malloc_sbrk_base
08000020 g     F .text	0000003c _start
08007bc0 g     F .text	0000015c __lshift
0800b8cc g     F .text	000000f4 read
0800bc9c g     F .text	000002b8 alt_sys_init
0800c58c g     F .text	00000130 __register_exitproc
08001b14 g     F .text	000000a8 VGA_box
0800783c g     F .text	00000258 __multiply
08001bbc g     F .text	00000028 __mulsi3
0800dfe4 g       *ABS*	00000000 __ram_rwdata_start
0800c898 g       *ABS*	00000000 __ram_rodata_start
0800f7b8 g     O .bss	00000028 __malloc_current_mallinfo
080080c4 g     F .text	00000144 __d2b
0800b13c g     F .text	000000d0 __fpcmp_parts_d
08008e28 g     F .text	00000064 _close_r
0800c510 g     F .text	0000007c memcmp
0800f998 g       *ABS*	00000000 __alt_stack_base
080044cc g     F .text	00000174 __swsetup_r
0800a4e4 g     F .text	000001b4 __divdf3
08006260 g     F .text	000000fc __sfp
08008320 g     F .text	0000007c __copybits
0800e0cc g     O .rwdata	00000408 __malloc_av_
08006368 g     F .text	00000004 __sinit_lock_release
0800a200 g     F .text	000002e4 __muldf3
080016f0 g     F .text	00000050 waitPress
08008a80 g     F .text	00000054 __sread
0800eb5a g     O .rwdata	00000001 LEFT
0800c2a0 g     F .text	000000a0 alt_dev_llist_insert
0800b83c g     F .text	00000020 __malloc_lock
0800ba40 g     F .text	000000b0 sbrk
08005e98 g     F .text	000001e8 _fflush_r
08008d5c g     F .text	000000cc _calloc_r
0800eb50 g     O .rwdata	00000004 SCRPIXW
0800f77c g     O .bss	00000004 choice
0800f77c g       *ABS*	00000000 __bss_start
0800eb74 g     O .rwdata	00000004 hyg
080072f4 g     F .text	000000dc memset
0800eb60 g     O .rwdata	00000004 SELXOFFSET
0800005c g     F .text	00000bb4 main
08001994 g     F .text	00000054 flushPixels
0800f7b4 g     O .bss	00000004 alt_envp
0800f790 g     O .bss	00000004 __malloc_max_total_mem
0800bfdc g     F .text	00000040 alt_up_char_buffer_open_dev
0800eb59 g     O .rwdata	00000001 DOWN
08008bb8 g     F .text	00000008 __sclose
10000000 g       *ABS*	00000000 __alt_heap_limit
08008fc8 g     F .text	00000014 fclose
0800f808 g     O .bss	00000190 _atexit0
0800487c g     F .text	0000161c _dtoa_r
08001c0c g     F .text	00000784 _malloc_r
0800eb24 g     O .rwdata	00000004 openingText
0800eba8 g     O .rwdata	00000004 alt_errno
08006c8c g     F .text	000000a8 _fwalk
0800e00c g     O .rwdata	00000064 choiceTexts
0800ab9c g     F .text	00000050 __divsi3
0800de5c g     O .rodata	00000014 __thenan_df
0800639c g     F .text	0000013c _malloc_trim_r
0800c898 g       *ABS*	00000000 __CTOR_END__
08008bc0 g     F .text	000000a4 strcmp
0800c898 g       *ABS*	00000000 __flash_rodata_start
0800c898 g       *ABS*	00000000 __DTOR_LIST__
0800a6f4 g     F .text	0000005c __nedf2
0800bc68 g     F .text	00000034 alt_irq_init
0800b9c0 g     F .text	00000080 alt_release_fd
0800258c g     F .text	0000006c sprintf
0800de70 g     O .rodata	00000100 __clz_tab
0800f7a0 g     O .bss	00000004 _PathLocale
0800eb30 g     O .rwdata	00000004 pixel_buffer
0800c4c4 g     F .text	00000014 atexit
08008cf0 g     F .text	0000006c _write_r
0800eb28 g     O .rwdata	00000004 Pixel_DMA_controller
08006ea0 g     F .text	0000001c setlocale
0800eb8c g     O .rwdata	00000004 _impure_ptr
0800f7ac g     O .bss	00000004 alt_argc
0800c39c g     F .text	0000005c _do_dtors
0800eb6c g     O .rwdata	00000004 SELCHOICEHEIGHT
08007f1c g     F .text	00000060 __ulp
08008a1c g     F .text	00000038 __isinfd
08006384 g     F .text	00000018 __fp_unlock_all
08000c10 g     F .text	000001a8 Event_new
0800eb38 g     O .rwdata	00000004 press
0800eb94 g     O .rwdata	00000008 alt_fs_list
0800eb7c g     O .rwdata	00000004 diff
0800f78c g     O .bss	00000004 curE
08000020 g       *ABS*	00000000 __ram_exceptions_start
08006ebc g     F .text	0000000c localeconv
080016c8 g     F .text	00000028 blinkText
0800eb40 g     O .rwdata	00000004 YPADDING
0800ebb0 g       *ABS*	00000000 _edata
0800f998 g       *ABS*	00000000 _end
08000020 g       *ABS*	00000000 __ram_exceptions_end
08008ad4 g     F .text	00000088 __swrite
0800eb84 g     O .rwdata	00000004 __malloc_trim_threshold
0800c4a4 g     F .text	00000020 altera_nios2_qsys_irq_init
0800c4d8 g     F .text	00000038 exit
08006d34 g     F .text	000000b8 _fwalk_reent
08007d74 g     F .text	000001a8 __mdiff
0800e070 g     O .rwdata	0000005c choiceResponses
0800abec g     F .text	0000005c __modsi3
10000000 g       *ABS*	00000000 __alt_data_end
08006360 g     F .text	00000004 __sfp_lock_release
0800c85c g     F .text	0000003c _exit
08008a54 g     F .text	0000002c __isnand
0800ac58 g     F .text	00000110 __muldi3
0800eb58 g     O .rwdata	00000001 UP
08006ec8 g     F .text	000001a8 __smakebuf_r
08008c64 g     F .text	0000008c strlen
0800a7b4 g     F .text	00000064 __gedf2
0800f7e0 g     O .bss	00000028 ev
0800eb70 g     O .rwdata	00000004 hap
0800c488 g     F .text	0000001c alt_icache_flush_all
0800eb64 g     O .rwdata	00000004 SELYOFFSET
080044a8 g     F .text	00000024 __vfprintf_internal
0800a1a0 g     F .text	00000060 __subdf3
08001740 g     F .text	00000044 waitRelease
08001938 g     F .text	00000030 initFrame
08007750 g     F .text	000000b0 __lo0bits
0800c340 g     F .text	0000005c _do_ctors
0800b2e4 g     F .text	000000cc close
0800b63c g     F .text	00000080 alt_load
0800ae14 g     F .text	00000224 __pack_d
08001bf8 g     F .text	00000014 free
08006364 g     F .text	00000004 __sinit_lock_acquire
080074a0 g     F .text	00000144 __multadd
08007478 g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08400814 	ori	at,at,32
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .text:

08000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000020:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 8000024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 8000028:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 800002c:	d69ac914 	ori	gp,gp,27428
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000030:	00820034 	movhi	r2,2048
    ori r2, r2, %lo(__bss_start)
 8000034:	10bddf14 	ori	r2,r2,63356

    movhi r3, %hi(__bss_end)
 8000038:	00c20034 	movhi	r3,2048
    ori r3, r3, %lo(__bss_end)
 800003c:	18fe6614 	ori	r3,r3,63896

    beq r2, r3, 1f
 8000040:	10c00326 	beq	r2,r3,8000050 <_start+0x30>

0:
    stw zero, (r2)
 8000044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 800004c:	10fffd36 	bltu	r2,r3,8000044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000050:	800b63c0 	call	800b63c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000054:	800b7e00 	call	800b7e0 <alt_main>

08000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000058:	003fff06 	br	8000058 <alt_after_alt_main>

0800005c <main>:

Event* ev[10];
Event* curE;

int main(void)
{
 800005c:	deffb804 	addi	sp,sp,-288
 8000060:	dfc04715 	stw	ra,284(sp)
 8000064:	df004615 	stw	fp,280(sp)
 8000068:	dcc04515 	stw	r19,276(sp)
 800006c:	dc804415 	stw	r18,272(sp)
 8000070:	dc404315 	stw	r17,268(sp)
 8000074:	dc004215 	stw	r16,264(sp)
 8000078:	df004204 	addi	fp,sp,264
	START:
	initEvents();
 800007c:	8000db80 	call	8000db8 <initEvents>
	curE = ev[0];
 8000080:	00820074 	movhi	r2,2049
 8000084:	10bdf804 	addi	r2,r2,-2080
 8000088:	10800017 	ldw	r2,0(r2)
 800008c:	d0a31a15 	stw	r2,-29592(gp)
	choice = 0;
 8000090:	d0231615 	stw	zero,-29608(gp)
	week = 0;
 8000094:	d0231715 	stw	zero,-29604(gp)

	int TXTBOXX1 = 20;
 8000098:	00800504 	movi	r2,20
 800009c:	e0bfc115 	stw	r2,-252(fp)
	int TXTBOXX2 = SCRPIXW - TXTBOXX1;
 80000a0:	d0e00b17 	ldw	r3,-32724(gp)
 80000a4:	e0bfc117 	ldw	r2,-252(fp)
 80000a8:	1885c83a 	sub	r2,r3,r2
 80000ac:	e0bfc215 	stw	r2,-248(fp)
	int EVBOXY1 = 20;
 80000b0:	00800504 	movi	r2,20
 80000b4:	e0bfc315 	stw	r2,-244(fp)
	int EVBOXY2 = 70 + EVBOXY1;
 80000b8:	e0bfc317 	ldw	r2,-244(fp)
 80000bc:	10801184 	addi	r2,r2,70
 80000c0:	e0bfc415 	stw	r2,-240(fp)
	int CHBOXY1 = EVBOXY2 + 10;
 80000c4:	e0bfc417 	ldw	r2,-240(fp)
 80000c8:	10800284 	addi	r2,r2,10
 80000cc:	e0bfc515 	stw	r2,-236(fp)
	int CHBOXY2 = 100 + CHBOXY1;
 80000d0:	e0bfc517 	ldw	r2,-236(fp)
 80000d4:	10801904 	addi	r2,r2,100
 80000d8:	e0bfc615 	stw	r2,-232(fp)

	hap = 100;
 80000dc:	00801904 	movi	r2,100
 80000e0:	d0a01315 	stw	r2,-32692(gp)
	hyg = 100;
 80000e4:	00801904 	movi	r2,100
 80000e8:	d0a01415 	stw	r2,-32688(gp)
	grd = 100;
 80000ec:	00801904 	movi	r2,100
 80000f0:	d0a01515 	stw	r2,-32684(gp)
	diff = 8;	// arbitrary magic number
 80000f4:	00800204 	movi	r2,8
 80000f8:	d0a01615 	stw	r2,-32680(gp)
	/* the following variables give the size of the pixel buffer */
	//screen_x = 319; screen_y = 239;
	//color = 0x1863;		// a dark grey color
	//VGA_box (0, 0, SCRPIXW, SCRPIXH, Black);	// fill the screen with grey
	// draw a medium-blue box around the above text, based on the character buffer coordinates
	box_x1 = 28; box_x2 = 52; box_y1 = 23; box_y2 = 31;
 80000fc:	00800704 	movi	r2,28
 8000100:	e0bfc715 	stw	r2,-228(fp)
 8000104:	00800d04 	movi	r2,52
 8000108:	e0bfc815 	stw	r2,-224(fp)
 800010c:	008005c4 	movi	r2,23
 8000110:	e0bfc915 	stw	r2,-220(fp)
 8000114:	008007c4 	movi	r2,31
 8000118:	e0bfca15 	stw	r2,-216(fp)
	//ALT_x1 = 0; ALT_x2 = 5/* ALTERA = 6 chars */; ALT_y = 0; ALT_inc_x = 1; ALT_inc_y = 1;
	//VGA_text (ALT_x1, ALT_y, text_ALTERA);
	//flushChar();
	//flush();

	initFrame();
 800011c:	80019380 	call	8001938 <initFrame>
	//flushChar();
	//flushPixels();
	VGA_box (box_x1 * 4, box_y1 * 4, box_x2 * 4, box_y2 * 4, Orange);
 8000120:	e0bfc717 	ldw	r2,-228(fp)
 8000124:	1085883a 	add	r2,r2,r2
 8000128:	1085883a 	add	r2,r2,r2
 800012c:	1009883a 	mov	r4,r2
 8000130:	e0bfc917 	ldw	r2,-220(fp)
 8000134:	1085883a 	add	r2,r2,r2
 8000138:	1085883a 	add	r2,r2,r2
 800013c:	100b883a 	mov	r5,r2
 8000140:	e0bfc817 	ldw	r2,-224(fp)
 8000144:	1085883a 	add	r2,r2,r2
 8000148:	1085883a 	add	r2,r2,r2
 800014c:	1007883a 	mov	r3,r2
 8000150:	e0bfca17 	ldw	r2,-216(fp)
 8000154:	1085883a 	add	r2,r2,r2
 8000158:	1085883a 	add	r2,r2,r2
 800015c:	01bef804 	movi	r6,-1056
 8000160:	d9800015 	stw	r6,0(sp)
 8000164:	180d883a 	mov	r6,r3
 8000168:	100f883a 	mov	r7,r2
 800016c:	8001b140 	call	8001b14 <VGA_box>
	VGA_text(box_x1+9, box_y1+4, "RPG385\0");
 8000170:	e0bfc717 	ldw	r2,-228(fp)
 8000174:	10c00244 	addi	r3,r2,9
 8000178:	e0bfc917 	ldw	r2,-220(fp)
 800017c:	10800104 	addi	r2,r2,4
 8000180:	1809883a 	mov	r4,r3
 8000184:	100b883a 	mov	r5,r2
 8000188:	01820074 	movhi	r6,2049
 800018c:	31b57f04 	addi	r6,r6,-10756
 8000190:	8001a8c0 	call	8001a8c <VGA_text>

	int delay = 0;
 8000194:	e03fc015 	stw	zero,-256(fp)
	while(!((*press & 0x1))){	// while no key pressed
 8000198:	00002206 	br	8000224 <main+0x1c8>
		delay++;
 800019c:	e0bfc017 	ldw	r2,-256(fp)
 80001a0:	10800044 	addi	r2,r2,1
 80001a4:	e0bfc015 	stw	r2,-256(fp)
		if(delay == 50000){
 80001a8:	e0ffc017 	ldw	r3,-256(fp)
 80001ac:	00b0d414 	movui	r2,50000
 80001b0:	18800a1e 	bne	r3,r2,80001dc <main+0x180>
			VGA_text(box_x1-1, box_y1+14, "                             \0");
 80001b4:	e0bfc717 	ldw	r2,-228(fp)
 80001b8:	10ffffc4 	addi	r3,r2,-1
 80001bc:	e0bfc917 	ldw	r2,-220(fp)
 80001c0:	10800384 	addi	r2,r2,14
 80001c4:	1809883a 	mov	r4,r3
 80001c8:	100b883a 	mov	r5,r2
 80001cc:	01820074 	movhi	r6,2049
 80001d0:	31b58104 	addi	r6,r6,-10748
 80001d4:	8001a8c0 	call	8001a8c <VGA_text>
 80001d8:	00001206 	br	8000224 <main+0x1c8>
		}
		else if (delay == 1){
 80001dc:	e0bfc017 	ldw	r2,-256(fp)
 80001e0:	10800058 	cmpnei	r2,r2,1
 80001e4:	10000a1e 	bne	r2,zero,8000210 <main+0x1b4>
			VGA_text(box_x1-1, box_y1+14, "Press any key to continue...\0");
 80001e8:	e0bfc717 	ldw	r2,-228(fp)
 80001ec:	10ffffc4 	addi	r3,r2,-1
 80001f0:	e0bfc917 	ldw	r2,-220(fp)
 80001f4:	10800384 	addi	r2,r2,14
 80001f8:	1809883a 	mov	r4,r3
 80001fc:	100b883a 	mov	r5,r2
 8000200:	01820074 	movhi	r6,2049
 8000204:	31b58904 	addi	r6,r6,-10716
 8000208:	8001a8c0 	call	8001a8c <VGA_text>
 800020c:	00000506 	br	8000224 <main+0x1c8>
		}
		else if(delay == 100000)
 8000210:	e0ffc017 	ldw	r3,-256(fp)
 8000214:	008000b4 	movhi	r2,2
 8000218:	10a1a804 	addi	r2,r2,-31072
 800021c:	1880011e 	bne	r3,r2,8000224 <main+0x1c8>
			delay = 0;
 8000220:	e03fc015 	stw	zero,-256(fp)
	//flushPixels();
	VGA_box (box_x1 * 4, box_y1 * 4, box_x2 * 4, box_y2 * 4, Orange);
	VGA_text(box_x1+9, box_y1+4, "RPG385\0");

	int delay = 0;
	while(!((*press & 0x1))){	// while no key pressed
 8000224:	d0a00517 	ldw	r2,-32748(gp)
 8000228:	10800003 	ldbu	r2,0(r2)
 800022c:	10803fcc 	andi	r2,r2,255
 8000230:	1080004c 	andi	r2,r2,1
 8000234:	103fd926 	beq	r2,zero,800019c <main+0x140>
		}
		else if(delay == 100000)
			delay = 0;

	}
	waitRelease();
 8000238:	80017400 	call	8001740 <waitRelease>

	//curTextY = YPADDING;
	//flushPixels();
	//flushChar();
	//curTextY = YPADDING;
	initFrame();
 800023c:	80019380 	call	8001938 <initFrame>
	*(Pixel_DMA_controller) = 0;	// dummy write to start buffer swap process
 8000240:	d0a00117 	ldw	r2,-32764(gp)
 8000244:	10000015 	stw	zero,0(r2)
	while (1)
	{
			while(week < 10){
 8000248:	00020e06 	br	8000a84 <main+0xa28>
				//addToScreen(XPADDING, "lol\0");
				if ( (*(Pixel_DMA_controller+3) & 1) == 0){ // wait for Status register bit S == 0
 800024c:	d0a00117 	ldw	r2,-32764(gp)
 8000250:	10800304 	addi	r2,r2,12
 8000254:	10800017 	ldw	r2,0(r2)
 8000258:	1080004c 	andi	r2,r2,1
 800025c:	1002091e 	bne	r2,zero,8000a84 <main+0xa28>
					//initFrame();
					VGA_box(TXTBOXX1, EVBOXY1, TXTBOXX2, EVBOXY2, BOXCOLOR);
 8000260:	d0a0068b 	ldhu	r2,-32742(gp)
 8000264:	10bfffcc 	andi	r2,r2,65535
 8000268:	10a0001c 	xori	r2,r2,32768
 800026c:	10a00004 	addi	r2,r2,-32768
 8000270:	d8800015 	stw	r2,0(sp)
 8000274:	e13fc117 	ldw	r4,-252(fp)
 8000278:	e17fc317 	ldw	r5,-244(fp)
 800027c:	e1bfc217 	ldw	r6,-248(fp)
 8000280:	e1ffc417 	ldw	r7,-240(fp)
 8000284:	8001b140 	call	8001b14 <VGA_box>
					VGA_box(TXTBOXX1, CHBOXY1, TXTBOXX2, CHBOXY2, BOXCOLOR);
 8000288:	d0a0068b 	ldhu	r2,-32742(gp)
 800028c:	10bfffcc 	andi	r2,r2,65535
 8000290:	10a0001c 	xori	r2,r2,32768
 8000294:	10a00004 	addi	r2,r2,-32768
 8000298:	d8800015 	stw	r2,0(sp)
 800029c:	e13fc117 	ldw	r4,-252(fp)
 80002a0:	e17fc517 	ldw	r5,-236(fp)
 80002a4:	e1bfc217 	ldw	r6,-248(fp)
 80002a8:	e1ffc617 	ldw	r7,-232(fp)
 80002ac:	8001b140 	call	8001b14 <VGA_box>
					char buf[100];
					sprintf(buf, "Week %i: \n\n\0", week+1);
 80002b0:	d0a31717 	ldw	r2,-29604(gp)
 80002b4:	10800044 	addi	r2,r2,1
 80002b8:	e0ffe704 	addi	r3,fp,-100
 80002bc:	1809883a 	mov	r4,r3
 80002c0:	01420074 	movhi	r5,2049
 80002c4:	29759104 	addi	r5,r5,-10684
 80002c8:	100d883a 	mov	r6,r2
 80002cc:	800258c0 	call	800258c <sprintf>
					addToScreen(XPADDING, buf);
 80002d0:	d0e00817 	ldw	r3,-32736(gp)
 80002d4:	e0bfe704 	addi	r2,fp,-100
 80002d8:	1809883a 	mov	r4,r3
 80002dc:	100b883a 	mov	r5,r2
 80002e0:	80017840 	call	8001784 <addToScreen>
					addToScreen(XPADDING, eventTexts[curE->promptI]);
 80002e4:	d0e00817 	ldw	r3,-32736(gp)
 80002e8:	d0a31a17 	ldw	r2,-29592(gp)
 80002ec:	10800017 	ldw	r2,0(r2)
 80002f0:	01020074 	movhi	r4,2049
 80002f4:	2137f904 	addi	r4,r4,-8220
 80002f8:	1085883a 	add	r2,r2,r2
 80002fc:	1085883a 	add	r2,r2,r2
 8000300:	2085883a 	add	r2,r4,r2
 8000304:	10800017 	ldw	r2,0(r2)
 8000308:	1809883a 	mov	r4,r3
 800030c:	100b883a 	mov	r5,r2
 8000310:	80017840 	call	8001784 <addToScreen>
					//addToScreen(XPADDING, "You wake up and look out to see a blanket of snow about a foot thick. \nThe chancellor sent out an email letting you know that class was NOT canceled today. \nWelcome back to campus.\0");
					printChoices(curE);
 8000314:	d0a31a17 	ldw	r2,-29592(gp)
 8000318:	1009883a 	mov	r4,r2
 800031c:	800158c0 	call	800158c <printChoices>
					VGA_box(SELXOFFSET, SELYOFFSET+choice*SELCHOICEHEIGHT, SELXOFFSET+SELWIDTH, SELYOFFSET+SELWIDTH+choice*SELCHOICEHEIGHT, White);
 8000320:	d4a00f17 	ldw	r18,-32708(gp)
 8000324:	d0e31617 	ldw	r3,-29608(gp)
 8000328:	d0a01217 	ldw	r2,-32696(gp)
 800032c:	1809883a 	mov	r4,r3
 8000330:	100b883a 	mov	r5,r2
 8000334:	8001bbc0 	call	8001bbc <__mulsi3>
 8000338:	1007883a 	mov	r3,r2
 800033c:	d0a01017 	ldw	r2,-32704(gp)
 8000340:	18a3883a 	add	r17,r3,r2
 8000344:	d0e00f17 	ldw	r3,-32708(gp)
 8000348:	d0a01117 	ldw	r2,-32700(gp)
 800034c:	18a1883a 	add	r16,r3,r2
 8000350:	d0e01017 	ldw	r3,-32704(gp)
 8000354:	d0a01117 	ldw	r2,-32700(gp)
 8000358:	18a7883a 	add	r19,r3,r2
 800035c:	d0e31617 	ldw	r3,-29608(gp)
 8000360:	d0a01217 	ldw	r2,-32696(gp)
 8000364:	1809883a 	mov	r4,r3
 8000368:	100b883a 	mov	r5,r2
 800036c:	8001bbc0 	call	8001bbc <__mulsi3>
 8000370:	9885883a 	add	r2,r19,r2
 8000374:	00ffffc4 	movi	r3,-1
 8000378:	d8c00015 	stw	r3,0(sp)
 800037c:	9009883a 	mov	r4,r18
 8000380:	880b883a 	mov	r5,r17
 8000384:	800d883a 	mov	r6,r16
 8000388:	100f883a 	mov	r7,r2
 800038c:	8001b140 	call	8001b14 <VGA_box>

					delay = 0;
 8000390:	e03fc015 	stw	zero,-256(fp)
					while(!((*press & 0x1) && (*keycode == ENT))){
 8000394:	0000f006 	br	8000758 <main+0x6fc>
						if((*press & 0x1) && (*keycode == UP)){
 8000398:	d0a00517 	ldw	r2,-32748(gp)
 800039c:	10800003 	ldbu	r2,0(r2)
 80003a0:	10803fcc 	andi	r2,r2,255
 80003a4:	1080004c 	andi	r2,r2,1
 80003a8:	10004e26 	beq	r2,zero,80004e4 <main+0x488>
 80003ac:	d0a00417 	ldw	r2,-32752(gp)
 80003b0:	10c00003 	ldbu	r3,0(r2)
 80003b4:	d0a00d03 	ldbu	r2,-32716(gp)
 80003b8:	18c03fcc 	andi	r3,r3,255
 80003bc:	18c0201c 	xori	r3,r3,128
 80003c0:	18ffe004 	addi	r3,r3,-128
 80003c4:	10803fcc 	andi	r2,r2,255
 80003c8:	1080201c 	xori	r2,r2,128
 80003cc:	10bfe004 	addi	r2,r2,-128
 80003d0:	1880441e 	bne	r3,r2,80004e4 <main+0x488>
							int temp = choice;
 80003d4:	d0a31617 	ldw	r2,-29608(gp)
 80003d8:	e0bfcb15 	stw	r2,-212(fp)
							choice--;
 80003dc:	d0a31617 	ldw	r2,-29608(gp)
 80003e0:	10bfffc4 	addi	r2,r2,-1
 80003e4:	d0a31615 	stw	r2,-29608(gp)
							if(choice < 0)
 80003e8:	d0a31617 	ldw	r2,-29608(gp)
 80003ec:	1000020e 	bge	r2,zero,80003f8 <main+0x39c>
								choice = 3;
 80003f0:	008000c4 	movi	r2,3
 80003f4:	d0a31615 	stw	r2,-29608(gp)
							VGA_box(SELXOFFSET, SELYOFFSET+temp*SELCHOICEHEIGHT, SELXOFFSET+SELWIDTH, SELYOFFSET+SELWIDTH+temp*SELCHOICEHEIGHT, BOXCOLOR);
 80003f8:	d4a00f17 	ldw	r18,-32708(gp)
 80003fc:	d0a01217 	ldw	r2,-32696(gp)
 8000400:	1009883a 	mov	r4,r2
 8000404:	e17fcb17 	ldw	r5,-212(fp)
 8000408:	8001bbc0 	call	8001bbc <__mulsi3>
 800040c:	1007883a 	mov	r3,r2
 8000410:	d0a01017 	ldw	r2,-32704(gp)
 8000414:	18a3883a 	add	r17,r3,r2
 8000418:	d0e00f17 	ldw	r3,-32708(gp)
 800041c:	d0a01117 	ldw	r2,-32700(gp)
 8000420:	18a1883a 	add	r16,r3,r2
 8000424:	d0e01017 	ldw	r3,-32704(gp)
 8000428:	d0a01117 	ldw	r2,-32700(gp)
 800042c:	18a7883a 	add	r19,r3,r2
 8000430:	d0a01217 	ldw	r2,-32696(gp)
 8000434:	1009883a 	mov	r4,r2
 8000438:	e17fcb17 	ldw	r5,-212(fp)
 800043c:	8001bbc0 	call	8001bbc <__mulsi3>
 8000440:	9885883a 	add	r2,r19,r2
 8000444:	d0e0068b 	ldhu	r3,-32742(gp)
 8000448:	18ffffcc 	andi	r3,r3,65535
 800044c:	18e0001c 	xori	r3,r3,32768
 8000450:	18e00004 	addi	r3,r3,-32768
 8000454:	d8c00015 	stw	r3,0(sp)
 8000458:	9009883a 	mov	r4,r18
 800045c:	880b883a 	mov	r5,r17
 8000460:	800d883a 	mov	r6,r16
 8000464:	100f883a 	mov	r7,r2
 8000468:	8001b140 	call	8001b14 <VGA_box>
							VGA_box(SELXOFFSET, SELYOFFSET+choice*SELCHOICEHEIGHT, SELXOFFSET+SELWIDTH, SELYOFFSET+SELWIDTH+choice*SELCHOICEHEIGHT, White);
 800046c:	d4a00f17 	ldw	r18,-32708(gp)
 8000470:	d0e31617 	ldw	r3,-29608(gp)
 8000474:	d0a01217 	ldw	r2,-32696(gp)
 8000478:	1809883a 	mov	r4,r3
 800047c:	100b883a 	mov	r5,r2
 8000480:	8001bbc0 	call	8001bbc <__mulsi3>
 8000484:	1007883a 	mov	r3,r2
 8000488:	d0a01017 	ldw	r2,-32704(gp)
 800048c:	18a3883a 	add	r17,r3,r2
 8000490:	d0e00f17 	ldw	r3,-32708(gp)
 8000494:	d0a01117 	ldw	r2,-32700(gp)
 8000498:	18a1883a 	add	r16,r3,r2
 800049c:	d0e01017 	ldw	r3,-32704(gp)
 80004a0:	d0a01117 	ldw	r2,-32700(gp)
 80004a4:	18a7883a 	add	r19,r3,r2
 80004a8:	d0e31617 	ldw	r3,-29608(gp)
 80004ac:	d0a01217 	ldw	r2,-32696(gp)
 80004b0:	1809883a 	mov	r4,r3
 80004b4:	100b883a 	mov	r5,r2
 80004b8:	8001bbc0 	call	8001bbc <__mulsi3>
 80004bc:	9885883a 	add	r2,r19,r2
 80004c0:	00ffffc4 	movi	r3,-1
 80004c4:	d8c00015 	stw	r3,0(sp)
 80004c8:	9009883a 	mov	r4,r18
 80004cc:	880b883a 	mov	r5,r17
 80004d0:	800d883a 	mov	r6,r16
 80004d4:	100f883a 	mov	r7,r2
 80004d8:	8001b140 	call	8001b14 <VGA_box>
							waitRelease();
 80004dc:	80017400 	call	8001740 <waitRelease>
					printChoices(curE);
					VGA_box(SELXOFFSET, SELYOFFSET+choice*SELCHOICEHEIGHT, SELXOFFSET+SELWIDTH, SELYOFFSET+SELWIDTH+choice*SELCHOICEHEIGHT, White);

					delay = 0;
					while(!((*press & 0x1) && (*keycode == ENT))){
						if((*press & 0x1) && (*keycode == UP)){
 80004e0:	00005206 	br	800062c <main+0x5d0>
								choice = 3;
							VGA_box(SELXOFFSET, SELYOFFSET+temp*SELCHOICEHEIGHT, SELXOFFSET+SELWIDTH, SELYOFFSET+SELWIDTH+temp*SELCHOICEHEIGHT, BOXCOLOR);
							VGA_box(SELXOFFSET, SELYOFFSET+choice*SELCHOICEHEIGHT, SELXOFFSET+SELWIDTH, SELYOFFSET+SELWIDTH+choice*SELCHOICEHEIGHT, White);
							waitRelease();
						}
						else if((*press & 0x1) && (*keycode == DOWN)){
 80004e4:	d0a00517 	ldw	r2,-32748(gp)
 80004e8:	10800003 	ldbu	r2,0(r2)
 80004ec:	10803fcc 	andi	r2,r2,255
 80004f0:	1080004c 	andi	r2,r2,1
 80004f4:	10004d26 	beq	r2,zero,800062c <main+0x5d0>
 80004f8:	d0a00417 	ldw	r2,-32752(gp)
 80004fc:	10c00003 	ldbu	r3,0(r2)
 8000500:	d0a00d43 	ldbu	r2,-32715(gp)
 8000504:	18c03fcc 	andi	r3,r3,255
 8000508:	18c0201c 	xori	r3,r3,128
 800050c:	18ffe004 	addi	r3,r3,-128
 8000510:	10803fcc 	andi	r2,r2,255
 8000514:	1080201c 	xori	r2,r2,128
 8000518:	10bfe004 	addi	r2,r2,-128
 800051c:	1880431e 	bne	r3,r2,800062c <main+0x5d0>
							int temp = choice;
 8000520:	d0a31617 	ldw	r2,-29608(gp)
 8000524:	e0bfcc15 	stw	r2,-208(fp)
							choice++;
 8000528:	d0a31617 	ldw	r2,-29608(gp)
 800052c:	10800044 	addi	r2,r2,1
 8000530:	d0a31615 	stw	r2,-29608(gp)
							if(choice > 3)
 8000534:	d0a31617 	ldw	r2,-29608(gp)
 8000538:	10800110 	cmplti	r2,r2,4
 800053c:	1000011e 	bne	r2,zero,8000544 <main+0x4e8>
								choice = 0;
 8000540:	d0231615 	stw	zero,-29608(gp)
							VGA_box(SELXOFFSET, SELYOFFSET+temp*SELCHOICEHEIGHT, SELXOFFSET+SELWIDTH, SELYOFFSET+SELWIDTH+temp*SELCHOICEHEIGHT, BOXCOLOR);
 8000544:	d4a00f17 	ldw	r18,-32708(gp)
 8000548:	d0a01217 	ldw	r2,-32696(gp)
 800054c:	1009883a 	mov	r4,r2
 8000550:	e17fcc17 	ldw	r5,-208(fp)
 8000554:	8001bbc0 	call	8001bbc <__mulsi3>
 8000558:	1007883a 	mov	r3,r2
 800055c:	d0a01017 	ldw	r2,-32704(gp)
 8000560:	18a3883a 	add	r17,r3,r2
 8000564:	d0e00f17 	ldw	r3,-32708(gp)
 8000568:	d0a01117 	ldw	r2,-32700(gp)
 800056c:	18a1883a 	add	r16,r3,r2
 8000570:	d0e01017 	ldw	r3,-32704(gp)
 8000574:	d0a01117 	ldw	r2,-32700(gp)
 8000578:	18a7883a 	add	r19,r3,r2
 800057c:	d0a01217 	ldw	r2,-32696(gp)
 8000580:	1009883a 	mov	r4,r2
 8000584:	e17fcc17 	ldw	r5,-208(fp)
 8000588:	8001bbc0 	call	8001bbc <__mulsi3>
 800058c:	9885883a 	add	r2,r19,r2
 8000590:	d0e0068b 	ldhu	r3,-32742(gp)
 8000594:	18ffffcc 	andi	r3,r3,65535
 8000598:	18e0001c 	xori	r3,r3,32768
 800059c:	18e00004 	addi	r3,r3,-32768
 80005a0:	d8c00015 	stw	r3,0(sp)
 80005a4:	9009883a 	mov	r4,r18
 80005a8:	880b883a 	mov	r5,r17
 80005ac:	800d883a 	mov	r6,r16
 80005b0:	100f883a 	mov	r7,r2
 80005b4:	8001b140 	call	8001b14 <VGA_box>
							VGA_box(SELXOFFSET, SELYOFFSET+choice*SELCHOICEHEIGHT, SELXOFFSET+SELWIDTH, SELYOFFSET+SELWIDTH+choice*SELCHOICEHEIGHT, White);
 80005b8:	d4a00f17 	ldw	r18,-32708(gp)
 80005bc:	d0e31617 	ldw	r3,-29608(gp)
 80005c0:	d0a01217 	ldw	r2,-32696(gp)
 80005c4:	1809883a 	mov	r4,r3
 80005c8:	100b883a 	mov	r5,r2
 80005cc:	8001bbc0 	call	8001bbc <__mulsi3>
 80005d0:	1007883a 	mov	r3,r2
 80005d4:	d0a01017 	ldw	r2,-32704(gp)
 80005d8:	18a3883a 	add	r17,r3,r2
 80005dc:	d0e00f17 	ldw	r3,-32708(gp)
 80005e0:	d0a01117 	ldw	r2,-32700(gp)
 80005e4:	18a1883a 	add	r16,r3,r2
 80005e8:	d0e01017 	ldw	r3,-32704(gp)
 80005ec:	d0a01117 	ldw	r2,-32700(gp)
 80005f0:	18a7883a 	add	r19,r3,r2
 80005f4:	d0e31617 	ldw	r3,-29608(gp)
 80005f8:	d0a01217 	ldw	r2,-32696(gp)
 80005fc:	1809883a 	mov	r4,r3
 8000600:	100b883a 	mov	r5,r2
 8000604:	8001bbc0 	call	8001bbc <__mulsi3>
 8000608:	9885883a 	add	r2,r19,r2
 800060c:	00ffffc4 	movi	r3,-1
 8000610:	d8c00015 	stw	r3,0(sp)
 8000614:	9009883a 	mov	r4,r18
 8000618:	880b883a 	mov	r5,r17
 800061c:	800d883a 	mov	r6,r16
 8000620:	100f883a 	mov	r7,r2
 8000624:	8001b140 	call	8001b14 <VGA_box>
							waitRelease();
 8000628:	80017400 	call	8001740 <waitRelease>

						}

						delay++;
 800062c:	e0bfc017 	ldw	r2,-256(fp)
 8000630:	10800044 	addi	r2,r2,1
 8000634:	e0bfc015 	stw	r2,-256(fp)
						if(delay == 40000){
 8000638:	e0ffc017 	ldw	r3,-256(fp)
 800063c:	00a71014 	movui	r2,40000
 8000640:	1880201e 	bne	r3,r2,80006c4 <main+0x668>
							//VGA_text(box_x1-1, box_y1+14, "                             \0");
							VGA_box(SELXOFFSET, SELYOFFSET+choice*SELCHOICEHEIGHT, SELXOFFSET+SELWIDTH, SELYOFFSET+SELWIDTH+choice*SELCHOICEHEIGHT, BOXCOLOR);
 8000644:	d4a00f17 	ldw	r18,-32708(gp)
 8000648:	d0e31617 	ldw	r3,-29608(gp)
 800064c:	d0a01217 	ldw	r2,-32696(gp)
 8000650:	1809883a 	mov	r4,r3
 8000654:	100b883a 	mov	r5,r2
 8000658:	8001bbc0 	call	8001bbc <__mulsi3>
 800065c:	1007883a 	mov	r3,r2
 8000660:	d0a01017 	ldw	r2,-32704(gp)
 8000664:	18a3883a 	add	r17,r3,r2
 8000668:	d0e00f17 	ldw	r3,-32708(gp)
 800066c:	d0a01117 	ldw	r2,-32700(gp)
 8000670:	18a1883a 	add	r16,r3,r2
 8000674:	d0e01017 	ldw	r3,-32704(gp)
 8000678:	d0a01117 	ldw	r2,-32700(gp)
 800067c:	18a7883a 	add	r19,r3,r2
 8000680:	d0e31617 	ldw	r3,-29608(gp)
 8000684:	d0a01217 	ldw	r2,-32696(gp)
 8000688:	1809883a 	mov	r4,r3
 800068c:	100b883a 	mov	r5,r2
 8000690:	8001bbc0 	call	8001bbc <__mulsi3>
 8000694:	9885883a 	add	r2,r19,r2
 8000698:	d0e0068b 	ldhu	r3,-32742(gp)
 800069c:	18ffffcc 	andi	r3,r3,65535
 80006a0:	18e0001c 	xori	r3,r3,32768
 80006a4:	18e00004 	addi	r3,r3,-32768
 80006a8:	d8c00015 	stw	r3,0(sp)
 80006ac:	9009883a 	mov	r4,r18
 80006b0:	880b883a 	mov	r5,r17
 80006b4:	800d883a 	mov	r6,r16
 80006b8:	100f883a 	mov	r7,r2
 80006bc:	8001b140 	call	8001b14 <VGA_box>
 80006c0:	00002506 	br	8000758 <main+0x6fc>
						}
						else if (delay == 1){
 80006c4:	e0bfc017 	ldw	r2,-256(fp)
 80006c8:	10800058 	cmpnei	r2,r2,1
 80006cc:	10001d1e 	bne	r2,zero,8000744 <main+0x6e8>
							VGA_box(SELXOFFSET, SELYOFFSET+choice*SELCHOICEHEIGHT, SELXOFFSET+SELWIDTH, SELYOFFSET+SELWIDTH+choice*SELCHOICEHEIGHT, White);
 80006d0:	d4a00f17 	ldw	r18,-32708(gp)
 80006d4:	d0e31617 	ldw	r3,-29608(gp)
 80006d8:	d0a01217 	ldw	r2,-32696(gp)
 80006dc:	1809883a 	mov	r4,r3
 80006e0:	100b883a 	mov	r5,r2
 80006e4:	8001bbc0 	call	8001bbc <__mulsi3>
 80006e8:	1007883a 	mov	r3,r2
 80006ec:	d0a01017 	ldw	r2,-32704(gp)
 80006f0:	18a3883a 	add	r17,r3,r2
 80006f4:	d0e00f17 	ldw	r3,-32708(gp)
 80006f8:	d0a01117 	ldw	r2,-32700(gp)
 80006fc:	18a1883a 	add	r16,r3,r2
 8000700:	d0e01017 	ldw	r3,-32704(gp)
 8000704:	d0a01117 	ldw	r2,-32700(gp)
 8000708:	18a7883a 	add	r19,r3,r2
 800070c:	d0e31617 	ldw	r3,-29608(gp)
 8000710:	d0a01217 	ldw	r2,-32696(gp)
 8000714:	1809883a 	mov	r4,r3
 8000718:	100b883a 	mov	r5,r2
 800071c:	8001bbc0 	call	8001bbc <__mulsi3>
 8000720:	9885883a 	add	r2,r19,r2
 8000724:	00ffffc4 	movi	r3,-1
 8000728:	d8c00015 	stw	r3,0(sp)
 800072c:	9009883a 	mov	r4,r18
 8000730:	880b883a 	mov	r5,r17
 8000734:	800d883a 	mov	r6,r16
 8000738:	100f883a 	mov	r7,r2
 800073c:	8001b140 	call	8001b14 <VGA_box>
 8000740:	00000506 	br	8000758 <main+0x6fc>
							//VGA_text(box_x1-1, box_y1+14, "Press any key to continue...\0");
						}
						else if(delay == 80000)
 8000744:	e0ffc017 	ldw	r3,-256(fp)
 8000748:	00800074 	movhi	r2,1
 800074c:	108e2004 	addi	r2,r2,14464
 8000750:	1880011e 	bne	r3,r2,8000758 <main+0x6fc>
							delay = 0;
 8000754:	e03fc015 	stw	zero,-256(fp)
					//addToScreen(XPADDING, "You wake up and look out to see a blanket of snow about a foot thick. \nThe chancellor sent out an email letting you know that class was NOT canceled today. \nWelcome back to campus.\0");
					printChoices(curE);
					VGA_box(SELXOFFSET, SELYOFFSET+choice*SELCHOICEHEIGHT, SELXOFFSET+SELWIDTH, SELYOFFSET+SELWIDTH+choice*SELCHOICEHEIGHT, White);

					delay = 0;
					while(!((*press & 0x1) && (*keycode == ENT))){
 8000758:	d0a00517 	ldw	r2,-32748(gp)
 800075c:	10800003 	ldbu	r2,0(r2)
 8000760:	10803fcc 	andi	r2,r2,255
 8000764:	1080004c 	andi	r2,r2,1
 8000768:	103f0b26 	beq	r2,zero,8000398 <main+0x33c>
 800076c:	d0a00417 	ldw	r2,-32752(gp)
 8000770:	10c00003 	ldbu	r3,0(r2)
 8000774:	d0a00e03 	ldbu	r2,-32712(gp)
 8000778:	18c03fcc 	andi	r3,r3,255
 800077c:	18c0201c 	xori	r3,r3,128
 8000780:	18ffe004 	addi	r3,r3,-128
 8000784:	10803fcc 	andi	r2,r2,255
 8000788:	1080201c 	xori	r2,r2,128
 800078c:	10bfe004 	addi	r2,r2,-128
 8000790:	18bf011e 	bne	r3,r2,8000398 <main+0x33c>
						}
						else if(delay == 80000)
							delay = 0;

					}
					waitRelease();
 8000794:	80017400 	call	8001740 <waitRelease>
					VGA_box(SELXOFFSET, SELYOFFSET+choice*SELCHOICEHEIGHT, SELXOFFSET+SELWIDTH, SELYOFFSET+SELWIDTH+choice*SELCHOICEHEIGHT, BOXCOLOR);
 8000798:	d4a00f17 	ldw	r18,-32708(gp)
 800079c:	d0e31617 	ldw	r3,-29608(gp)
 80007a0:	d0a01217 	ldw	r2,-32696(gp)
 80007a4:	1809883a 	mov	r4,r3
 80007a8:	100b883a 	mov	r5,r2
 80007ac:	8001bbc0 	call	8001bbc <__mulsi3>
 80007b0:	1007883a 	mov	r3,r2
 80007b4:	d0a01017 	ldw	r2,-32704(gp)
 80007b8:	18a3883a 	add	r17,r3,r2
 80007bc:	d0e00f17 	ldw	r3,-32708(gp)
 80007c0:	d0a01117 	ldw	r2,-32700(gp)
 80007c4:	18a1883a 	add	r16,r3,r2
 80007c8:	d0e01017 	ldw	r3,-32704(gp)
 80007cc:	d0a01117 	ldw	r2,-32700(gp)
 80007d0:	18a7883a 	add	r19,r3,r2
 80007d4:	d0e31617 	ldw	r3,-29608(gp)
 80007d8:	d0a01217 	ldw	r2,-32696(gp)
 80007dc:	1809883a 	mov	r4,r3
 80007e0:	100b883a 	mov	r5,r2
 80007e4:	8001bbc0 	call	8001bbc <__mulsi3>
 80007e8:	9885883a 	add	r2,r19,r2
 80007ec:	d0e0068b 	ldhu	r3,-32742(gp)
 80007f0:	18ffffcc 	andi	r3,r3,65535
 80007f4:	18e0001c 	xori	r3,r3,32768
 80007f8:	18e00004 	addi	r3,r3,-32768
 80007fc:	d8c00015 	stw	r3,0(sp)
 8000800:	9009883a 	mov	r4,r18
 8000804:	880b883a 	mov	r5,r17
 8000808:	800d883a 	mov	r6,r16
 800080c:	100f883a 	mov	r7,r2
 8000810:	8001b140 	call	8001b14 <VGA_box>
					addToScreen(XPADDING, choiceResponses[((curE->choices)[choice]).responseI]);
 8000814:	d4200817 	ldw	r16,-32736(gp)
 8000818:	d0a31a17 	ldw	r2,-29592(gp)
 800081c:	14400117 	ldw	r17,4(r2)
 8000820:	d0a31617 	ldw	r2,-29608(gp)
 8000824:	1009883a 	mov	r4,r2
 8000828:	01400704 	movi	r5,28
 800082c:	8001bbc0 	call	8001bbc <__mulsi3>
 8000830:	8885883a 	add	r2,r17,r2
 8000834:	10800117 	ldw	r2,4(r2)
 8000838:	00c20074 	movhi	r3,2049
 800083c:	18f81c04 	addi	r3,r3,-8080
 8000840:	1085883a 	add	r2,r2,r2
 8000844:	1085883a 	add	r2,r2,r2
 8000848:	1885883a 	add	r2,r3,r2
 800084c:	10800017 	ldw	r2,0(r2)
 8000850:	8009883a 	mov	r4,r16
 8000854:	100b883a 	mov	r5,r2
 8000858:	80017840 	call	8001784 <addToScreen>
					char temp[100];
					sprintf(temp, "\n%+i HAP, %+i HYG, %+i GRD, %+i DIF \0", ((curE->choices)[choice]).impacts[0], ((curE->choices)[choice]).impacts[1], ((curE->choices)[choice]).impacts[2], ((curE->choices)[choice]).impacts[3]);
 800085c:	d0a31a17 	ldw	r2,-29592(gp)
 8000860:	14000117 	ldw	r16,4(r2)
 8000864:	d0a31617 	ldw	r2,-29608(gp)
 8000868:	1009883a 	mov	r4,r2
 800086c:	01400704 	movi	r5,28
 8000870:	8001bbc0 	call	8001bbc <__mulsi3>
 8000874:	8085883a 	add	r2,r16,r2
 8000878:	14400317 	ldw	r17,12(r2)
 800087c:	d0a31a17 	ldw	r2,-29592(gp)
 8000880:	14000117 	ldw	r16,4(r2)
 8000884:	d0a31617 	ldw	r2,-29608(gp)
 8000888:	1009883a 	mov	r4,r2
 800088c:	01400704 	movi	r5,28
 8000890:	8001bbc0 	call	8001bbc <__mulsi3>
 8000894:	8085883a 	add	r2,r16,r2
 8000898:	14000417 	ldw	r16,16(r2)
 800089c:	d0a31a17 	ldw	r2,-29592(gp)
 80008a0:	14800117 	ldw	r18,4(r2)
 80008a4:	d0a31617 	ldw	r2,-29608(gp)
 80008a8:	1009883a 	mov	r4,r2
 80008ac:	01400704 	movi	r5,28
 80008b0:	8001bbc0 	call	8001bbc <__mulsi3>
 80008b4:	9085883a 	add	r2,r18,r2
 80008b8:	14800517 	ldw	r18,20(r2)
 80008bc:	d0a31a17 	ldw	r2,-29592(gp)
 80008c0:	14c00117 	ldw	r19,4(r2)
 80008c4:	d0a31617 	ldw	r2,-29608(gp)
 80008c8:	1009883a 	mov	r4,r2
 80008cc:	01400704 	movi	r5,28
 80008d0:	8001bbc0 	call	8001bbc <__mulsi3>
 80008d4:	9885883a 	add	r2,r19,r2
 80008d8:	10c00617 	ldw	r3,24(r2)
 80008dc:	e0bfce04 	addi	r2,fp,-200
 80008e0:	dc800015 	stw	r18,0(sp)
 80008e4:	d8c00115 	stw	r3,4(sp)
 80008e8:	1009883a 	mov	r4,r2
 80008ec:	01420074 	movhi	r5,2049
 80008f0:	29759504 	addi	r5,r5,-10668
 80008f4:	880d883a 	mov	r6,r17
 80008f8:	800f883a 	mov	r7,r16
 80008fc:	800258c0 	call	800258c <sprintf>
					addToScreen(XPADDING, temp);
 8000900:	d0e00817 	ldw	r3,-32736(gp)
 8000904:	e0bfce04 	addi	r2,fp,-200
 8000908:	1809883a 	mov	r4,r3
 800090c:	100b883a 	mov	r5,r2
 8000910:	80017840 	call	8001784 <addToScreen>

					// modify and clamp values
					hap += ((curE->choices)[choice]).impacts[0];
 8000914:	d0a31a17 	ldw	r2,-29592(gp)
 8000918:	14000117 	ldw	r16,4(r2)
 800091c:	d0a31617 	ldw	r2,-29608(gp)
 8000920:	1009883a 	mov	r4,r2
 8000924:	01400704 	movi	r5,28
 8000928:	8001bbc0 	call	8001bbc <__mulsi3>
 800092c:	8085883a 	add	r2,r16,r2
 8000930:	10c00317 	ldw	r3,12(r2)
 8000934:	d0a01317 	ldw	r2,-32692(gp)
 8000938:	1885883a 	add	r2,r3,r2
 800093c:	d0a01315 	stw	r2,-32692(gp)
					hap = (hap > 100)? 100: hap;
 8000940:	d0a01317 	ldw	r2,-32692(gp)
 8000944:	10c01950 	cmplti	r3,r2,101
 8000948:	1800011e 	bne	r3,zero,8000950 <main+0x8f4>
 800094c:	00801904 	movi	r2,100
 8000950:	d0a01315 	stw	r2,-32692(gp)
					hyg += ((curE->choices)[choice]).impacts[1];
 8000954:	d0a31a17 	ldw	r2,-29592(gp)
 8000958:	14000117 	ldw	r16,4(r2)
 800095c:	d0a31617 	ldw	r2,-29608(gp)
 8000960:	1009883a 	mov	r4,r2
 8000964:	01400704 	movi	r5,28
 8000968:	8001bbc0 	call	8001bbc <__mulsi3>
 800096c:	8085883a 	add	r2,r16,r2
 8000970:	10c00417 	ldw	r3,16(r2)
 8000974:	d0a01417 	ldw	r2,-32688(gp)
 8000978:	1885883a 	add	r2,r3,r2
 800097c:	d0a01415 	stw	r2,-32688(gp)
					hyg = (hyg > 100)? 100: hyg;
 8000980:	d0a01417 	ldw	r2,-32688(gp)
 8000984:	10c01950 	cmplti	r3,r2,101
 8000988:	1800011e 	bne	r3,zero,8000990 <main+0x934>
 800098c:	00801904 	movi	r2,100
 8000990:	d0a01415 	stw	r2,-32688(gp)
					grd += ((curE->choices)[choice]).impacts[2];
 8000994:	d0a31a17 	ldw	r2,-29592(gp)
 8000998:	14000117 	ldw	r16,4(r2)
 800099c:	d0a31617 	ldw	r2,-29608(gp)
 80009a0:	1009883a 	mov	r4,r2
 80009a4:	01400704 	movi	r5,28
 80009a8:	8001bbc0 	call	8001bbc <__mulsi3>
 80009ac:	8085883a 	add	r2,r16,r2
 80009b0:	10c00517 	ldw	r3,20(r2)
 80009b4:	d0a01517 	ldw	r2,-32684(gp)
 80009b8:	1885883a 	add	r2,r3,r2
 80009bc:	d0a01515 	stw	r2,-32684(gp)
					grd = (grd > 100)? 100: grd;
 80009c0:	d0a01517 	ldw	r2,-32684(gp)
 80009c4:	10c01950 	cmplti	r3,r2,101
 80009c8:	1800011e 	bne	r3,zero,80009d0 <main+0x974>
 80009cc:	00801904 	movi	r2,100
 80009d0:	d0a01515 	stw	r2,-32684(gp)
					diff +=((curE->choices)[choice]).impacts[3];
 80009d4:	d0a31a17 	ldw	r2,-29592(gp)
 80009d8:	14000117 	ldw	r16,4(r2)
 80009dc:	d0a31617 	ldw	r2,-29608(gp)
 80009e0:	1009883a 	mov	r4,r2
 80009e4:	01400704 	movi	r5,28
 80009e8:	8001bbc0 	call	8001bbc <__mulsi3>
 80009ec:	8085883a 	add	r2,r16,r2
 80009f0:	10c00617 	ldw	r3,24(r2)
 80009f4:	d0a01617 	ldw	r2,-32680(gp)
 80009f8:	1885883a 	add	r2,r3,r2
 80009fc:	d0a01615 	stw	r2,-32680(gp)

					addToScreen(XPADDING, "\nPress any key to continue...\0");
 8000a00:	d0a00817 	ldw	r2,-32736(gp)
 8000a04:	1009883a 	mov	r4,r2
 8000a08:	01420074 	movhi	r5,2049
 8000a0c:	29759f04 	addi	r5,r5,-10628
 8000a10:	80017840 	call	8001784 <addToScreen>
					waitPress();
 8000a14:	80016f00 	call	80016f0 <waitPress>

					if(hap < 0 || hyg < 0 || grd < 0)
 8000a18:	d0a01317 	ldw	r2,-32692(gp)
 8000a1c:	10001c16 	blt	r2,zero,8000a90 <main+0xa34>
 8000a20:	d0a01417 	ldw	r2,-32688(gp)
 8000a24:	10001a16 	blt	r2,zero,8000a90 <main+0xa34>
 8000a28:	d0a01517 	ldw	r2,-32684(gp)
 8000a2c:	10001816 	blt	r2,zero,8000a90 <main+0xa34>
						break;	// lose condition

					week++;
 8000a30:	d0a31717 	ldw	r2,-29604(gp)
 8000a34:	10800044 	addi	r2,r2,1
 8000a38:	d0a31715 	stw	r2,-29604(gp)
					curE = ev[((curE->choices)[choice]).nextEventI];
 8000a3c:	d0a31a17 	ldw	r2,-29592(gp)
 8000a40:	14000117 	ldw	r16,4(r2)
 8000a44:	d0a31617 	ldw	r2,-29608(gp)
 8000a48:	1009883a 	mov	r4,r2
 8000a4c:	01400704 	movi	r5,28
 8000a50:	8001bbc0 	call	8001bbc <__mulsi3>
 8000a54:	8085883a 	add	r2,r16,r2
 8000a58:	10800217 	ldw	r2,8(r2)
 8000a5c:	00c20074 	movhi	r3,2049
 8000a60:	18fdf804 	addi	r3,r3,-2080
 8000a64:	1085883a 	add	r2,r2,r2
 8000a68:	1085883a 	add	r2,r2,r2
 8000a6c:	1885883a 	add	r2,r3,r2
 8000a70:	10800017 	ldw	r2,0(r2)
 8000a74:	d0a31a15 	stw	r2,-29592(gp)
					//waitPress();
					initFrame();
 8000a78:	80019380 	call	8001938 <initFrame>
					//flushPixels();
					//flushChar();
					//curTextY = YPADDING;
					//flush();
					*(Pixel_DMA_controller) = 0;
 8000a7c:	d0a00117 	ldw	r2,-32764(gp)
 8000a80:	10000015 	stw	zero,0(r2)
	//curTextY = YPADDING;
	initFrame();
	*(Pixel_DMA_controller) = 0;	// dummy write to start buffer swap process
	while (1)
	{
			while(week < 10){
 8000a84:	d0a31717 	ldw	r2,-29604(gp)
 8000a88:	10800290 	cmplti	r2,r2,10
 8000a8c:	103def1e 	bne	r2,zero,800024c <main+0x1f0>
			/* Execute a swap buffer command. This will allow us to check if the screen has
			 * been redrawn before generating a new animation frame. */

		}

		flushChar();
 8000a90:	80019e80 	call	80019e8 <flushChar>
		curTextY = YPADDING;
 8000a94:	d0a00717 	ldw	r2,-32740(gp)
 8000a98:	d0a31915 	stw	r2,-29596(gp)
		// tally score
		int score = (hap + hyg + grd) * diff;
 8000a9c:	d0e01317 	ldw	r3,-32692(gp)
 8000aa0:	d0a01417 	ldw	r2,-32688(gp)
 8000aa4:	1887883a 	add	r3,r3,r2
 8000aa8:	d0a01517 	ldw	r2,-32684(gp)
 8000aac:	1887883a 	add	r3,r3,r2
 8000ab0:	d0a01617 	ldw	r2,-32680(gp)
 8000ab4:	1809883a 	mov	r4,r3
 8000ab8:	100b883a 	mov	r5,r2
 8000abc:	8001bbc0 	call	8001bbc <__mulsi3>
 8000ac0:	e0bfcd15 	stw	r2,-204(fp)
		if(hap < 0)
 8000ac4:	d0a01317 	ldw	r2,-32692(gp)
 8000ac8:	1000060e 	bge	r2,zero,8000ae4 <main+0xa88>
			addToScreen(XPADDING, "Sadly you worked yourself to the bone this semester, \nand one day you just burned out from \nbeing unhappy all the time. \n\nLooks like you\'ll be taking a gap semester, buddy.\n\n\n\0");
 8000acc:	d0a00817 	ldw	r2,-32736(gp)
 8000ad0:	1009883a 	mov	r4,r2
 8000ad4:	01420074 	movhi	r5,2049
 8000ad8:	2975a704 	addi	r5,r5,-10596
 8000adc:	80017840 	call	8001784 <addToScreen>
 8000ae0:	00001506 	br	8000b38 <main+0xadc>
		else if(hyg < 0)
 8000ae4:	d0a01417 	ldw	r2,-32688(gp)
 8000ae8:	1000060e 	bge	r2,zero,8000b04 <main+0xaa8>
			addToScreen(XPADDING, "You let yourself go, big time. \nAt first, people just gave you a big berth in the hallway, \nthen your friends stopped hanging out with you because of your smell, \nbut now the EPA came and sealed you off in your apartment. \n\nMaybe you can try again next semester, \nafter you\'ve been decontaminated?\n\n\n\0");
 8000aec:	d0a00817 	ldw	r2,-32736(gp)
 8000af0:	1009883a 	mov	r4,r2
 8000af4:	01420074 	movhi	r5,2049
 8000af8:	2975d404 	addi	r5,r5,-10416
 8000afc:	80017840 	call	8001784 <addToScreen>
 8000b00:	00000d06 	br	8000b38 <main+0xadc>
		else if(grd < 0)
 8000b04:	d0a01517 	ldw	r2,-32684(gp)
 8000b08:	1000060e 	bge	r2,zero,8000b24 <main+0xac8>
			addToScreen(XPADDING, "It turns out if you flunk out of all your classes, \nyou get kicked out of them. \nWho knew? \n\nGuess you\'ll have to wait until next semester to try again.\n\n\n\0");
 8000b0c:	d0a00817 	ldw	r2,-32736(gp)
 8000b10:	1009883a 	mov	r4,r2
 8000b14:	01420074 	movhi	r5,2049
 8000b18:	29762004 	addi	r5,r5,-10112
 8000b1c:	80017840 	call	8001784 <addToScreen>
 8000b20:	00000506 	br	8000b38 <main+0xadc>
		else
			addToScreen(XPADDING, "Congrats, you made it through 385 while somehow keeping sane!\nWant to try it again? \n\n\n\0");
 8000b24:	d0a00817 	ldw	r2,-32736(gp)
 8000b28:	1009883a 	mov	r4,r2
 8000b2c:	01420074 	movhi	r5,2049
 8000b30:	29764804 	addi	r5,r5,-9952
 8000b34:	80017840 	call	8001784 <addToScreen>


		char temp[100];
		sprintf(temp, "Happiness: %i\0", hap);
 8000b38:	d0a01317 	ldw	r2,-32692(gp)
 8000b3c:	e0ffce04 	addi	r3,fp,-200
 8000b40:	1809883a 	mov	r4,r3
 8000b44:	01420074 	movhi	r5,2049
 8000b48:	29765f04 	addi	r5,r5,-9860
 8000b4c:	100d883a 	mov	r6,r2
 8000b50:	800258c0 	call	800258c <sprintf>
		addToScreen(XPADDING, temp);
 8000b54:	d0e00817 	ldw	r3,-32736(gp)
 8000b58:	e0bfce04 	addi	r2,fp,-200
 8000b5c:	1809883a 	mov	r4,r3
 8000b60:	100b883a 	mov	r5,r2
 8000b64:	80017840 	call	8001784 <addToScreen>
		sprintf(temp, "Hygiene: %i\0", hyg);
 8000b68:	d0a01417 	ldw	r2,-32688(gp)
 8000b6c:	e0ffce04 	addi	r3,fp,-200
 8000b70:	1809883a 	mov	r4,r3
 8000b74:	01420074 	movhi	r5,2049
 8000b78:	29766304 	addi	r5,r5,-9844
 8000b7c:	100d883a 	mov	r6,r2
 8000b80:	800258c0 	call	800258c <sprintf>
		addToScreen(XPADDING, temp);
 8000b84:	d0e00817 	ldw	r3,-32736(gp)
 8000b88:	e0bfce04 	addi	r2,fp,-200
 8000b8c:	1809883a 	mov	r4,r3
 8000b90:	100b883a 	mov	r5,r2
 8000b94:	80017840 	call	8001784 <addToScreen>
		sprintf(temp, "Grades: %i\0", grd);
 8000b98:	d0a01517 	ldw	r2,-32684(gp)
 8000b9c:	e0ffce04 	addi	r3,fp,-200
 8000ba0:	1809883a 	mov	r4,r3
 8000ba4:	01420074 	movhi	r5,2049
 8000ba8:	29766704 	addi	r5,r5,-9828
 8000bac:	100d883a 	mov	r6,r2
 8000bb0:	800258c0 	call	800258c <sprintf>
		addToScreen(XPADDING, temp);
 8000bb4:	d0e00817 	ldw	r3,-32736(gp)
 8000bb8:	e0bfce04 	addi	r2,fp,-200
 8000bbc:	1809883a 	mov	r4,r3
 8000bc0:	100b883a 	mov	r5,r2
 8000bc4:	80017840 	call	8001784 <addToScreen>
		sprintf(temp, "Total Score: %i\0", score);
 8000bc8:	e0bfce04 	addi	r2,fp,-200
 8000bcc:	1009883a 	mov	r4,r2
 8000bd0:	01420074 	movhi	r5,2049
 8000bd4:	29766a04 	addi	r5,r5,-9816
 8000bd8:	e1bfcd17 	ldw	r6,-204(fp)
 8000bdc:	800258c0 	call	800258c <sprintf>
		addToScreen(XPADDING, temp);
 8000be0:	d0e00817 	ldw	r3,-32736(gp)
 8000be4:	e0bfce04 	addi	r2,fp,-200
 8000be8:	1809883a 	mov	r4,r3
 8000bec:	100b883a 	mov	r5,r2
 8000bf0:	80017840 	call	8001784 <addToScreen>
		addToScreen(XPADDING, "\nPress any key to play again...\0");
 8000bf4:	d0a00817 	ldw	r2,-32736(gp)
 8000bf8:	1009883a 	mov	r4,r2
 8000bfc:	01420074 	movhi	r5,2049
 8000c00:	29766f04 	addi	r5,r5,-9796
 8000c04:	80017840 	call	8001784 <addToScreen>
		waitPress();
 8000c08:	80016f00 	call	80016f0 <waitPress>
 8000c0c:	003d1b06 	br	800007c <main+0x20>

08000c10 <Event_new>:

	}
}


Event* Event_new(int eventTextI, int choiceTextI[], int choiceResponsesI[], int choiceNextEventI[], int choiceImpacts[]){
 8000c10:	defff604 	addi	sp,sp,-40
 8000c14:	dfc00915 	stw	ra,36(sp)
 8000c18:	df000815 	stw	fp,32(sp)
 8000c1c:	df000804 	addi	fp,sp,32
 8000c20:	e13ffc15 	stw	r4,-16(fp)
 8000c24:	e17ffd15 	stw	r5,-12(fp)
 8000c28:	e1bffe15 	stw	r6,-8(fp)
 8000c2c:	e1ffff15 	stw	r7,-4(fp)
	Event* e = malloc(sizeof(Event));
 8000c30:	01000204 	movi	r4,8
 8000c34:	8001be40 	call	8001be4 <malloc>
 8000c38:	e0bffa15 	stw	r2,-24(fp)
	e->promptI = eventTextI;
 8000c3c:	e0bffa17 	ldw	r2,-24(fp)
 8000c40:	e0fffc17 	ldw	r3,-16(fp)
 8000c44:	10c00015 	stw	r3,0(r2)
	e->choices = malloc(4 * sizeof(Choice));
 8000c48:	01001c04 	movi	r4,112
 8000c4c:	8001be40 	call	8001be4 <malloc>
 8000c50:	1007883a 	mov	r3,r2
 8000c54:	e0bffa17 	ldw	r2,-24(fp)
 8000c58:	10c00115 	stw	r3,4(r2)

	int i;
	Choice* c = e->choices;
 8000c5c:	e0bffa17 	ldw	r2,-24(fp)
 8000c60:	10800117 	ldw	r2,4(r2)
 8000c64:	e0bffb15 	stw	r2,-20(fp)
	for(i = 0; i < 4; i++){ // we use nextEventI to mark if this choice is possible (if -1, don't show the choice)
 8000c68:	e03ff815 	stw	zero,-32(fp)
 8000c6c:	00004906 	br	8000d94 <Event_new+0x184>
		c[i].textI = choiceTextI[i];
 8000c70:	e0bff817 	ldw	r2,-32(fp)
 8000c74:	1009883a 	mov	r4,r2
 8000c78:	01400704 	movi	r5,28
 8000c7c:	8001bbc0 	call	8001bbc <__mulsi3>
 8000c80:	e0fffb17 	ldw	r3,-20(fp)
 8000c84:	1887883a 	add	r3,r3,r2
 8000c88:	e0bff817 	ldw	r2,-32(fp)
 8000c8c:	1085883a 	add	r2,r2,r2
 8000c90:	1085883a 	add	r2,r2,r2
 8000c94:	e13ffd17 	ldw	r4,-12(fp)
 8000c98:	2085883a 	add	r2,r4,r2
 8000c9c:	10800017 	ldw	r2,0(r2)
 8000ca0:	18800015 	stw	r2,0(r3)
		c[i].responseI = choiceResponsesI[i];
 8000ca4:	e0bff817 	ldw	r2,-32(fp)
 8000ca8:	1009883a 	mov	r4,r2
 8000cac:	01400704 	movi	r5,28
 8000cb0:	8001bbc0 	call	8001bbc <__mulsi3>
 8000cb4:	e0fffb17 	ldw	r3,-20(fp)
 8000cb8:	1887883a 	add	r3,r3,r2
 8000cbc:	e0bff817 	ldw	r2,-32(fp)
 8000cc0:	1085883a 	add	r2,r2,r2
 8000cc4:	1085883a 	add	r2,r2,r2
 8000cc8:	e13ffe17 	ldw	r4,-8(fp)
 8000ccc:	2085883a 	add	r2,r4,r2
 8000cd0:	10800017 	ldw	r2,0(r2)
 8000cd4:	18800115 	stw	r2,4(r3)
		c[i].nextEventI = choiceNextEventI[i];
 8000cd8:	e0bff817 	ldw	r2,-32(fp)
 8000cdc:	1009883a 	mov	r4,r2
 8000ce0:	01400704 	movi	r5,28
 8000ce4:	8001bbc0 	call	8001bbc <__mulsi3>
 8000ce8:	e0fffb17 	ldw	r3,-20(fp)
 8000cec:	1887883a 	add	r3,r3,r2
 8000cf0:	e0bff817 	ldw	r2,-32(fp)
 8000cf4:	1085883a 	add	r2,r2,r2
 8000cf8:	1085883a 	add	r2,r2,r2
 8000cfc:	e13fff17 	ldw	r4,-4(fp)
 8000d00:	2085883a 	add	r2,r4,r2
 8000d04:	10800017 	ldw	r2,0(r2)
 8000d08:	18800215 	stw	r2,8(r3)
		int a;
		for(a = 0; a < 4; a++)
 8000d0c:	e03ff915 	stw	zero,-28(fp)
 8000d10:	00001a06 	br	8000d7c <Event_new+0x16c>
			c[i].impacts[a] = choiceImpacts[i*4 + a];
 8000d14:	e0bff817 	ldw	r2,-32(fp)
 8000d18:	1009883a 	mov	r4,r2
 8000d1c:	01400704 	movi	r5,28
 8000d20:	8001bbc0 	call	8001bbc <__mulsi3>
 8000d24:	e0fffb17 	ldw	r3,-20(fp)
 8000d28:	1889883a 	add	r4,r3,r2
 8000d2c:	e0bff817 	ldw	r2,-32(fp)
 8000d30:	1085883a 	add	r2,r2,r2
 8000d34:	1085883a 	add	r2,r2,r2
 8000d38:	1007883a 	mov	r3,r2
 8000d3c:	e0bff917 	ldw	r2,-28(fp)
 8000d40:	1885883a 	add	r2,r3,r2
 8000d44:	1085883a 	add	r2,r2,r2
 8000d48:	1085883a 	add	r2,r2,r2
 8000d4c:	e0c00217 	ldw	r3,8(fp)
 8000d50:	1885883a 	add	r2,r3,r2
 8000d54:	10c00017 	ldw	r3,0(r2)
 8000d58:	e0bff917 	ldw	r2,-28(fp)
 8000d5c:	108000c4 	addi	r2,r2,3
 8000d60:	1085883a 	add	r2,r2,r2
 8000d64:	1085883a 	add	r2,r2,r2
 8000d68:	2085883a 	add	r2,r4,r2
 8000d6c:	10c00015 	stw	r3,0(r2)
	for(i = 0; i < 4; i++){ // we use nextEventI to mark if this choice is possible (if -1, don't show the choice)
		c[i].textI = choiceTextI[i];
		c[i].responseI = choiceResponsesI[i];
		c[i].nextEventI = choiceNextEventI[i];
		int a;
		for(a = 0; a < 4; a++)
 8000d70:	e0bff917 	ldw	r2,-28(fp)
 8000d74:	10800044 	addi	r2,r2,1
 8000d78:	e0bff915 	stw	r2,-28(fp)
 8000d7c:	e0bff917 	ldw	r2,-28(fp)
 8000d80:	10800110 	cmplti	r2,r2,4
 8000d84:	103fe31e 	bne	r2,zero,8000d14 <Event_new+0x104>
	e->promptI = eventTextI;
	e->choices = malloc(4 * sizeof(Choice));

	int i;
	Choice* c = e->choices;
	for(i = 0; i < 4; i++){ // we use nextEventI to mark if this choice is possible (if -1, don't show the choice)
 8000d88:	e0bff817 	ldw	r2,-32(fp)
 8000d8c:	10800044 	addi	r2,r2,1
 8000d90:	e0bff815 	stw	r2,-32(fp)
 8000d94:	e0bff817 	ldw	r2,-32(fp)
 8000d98:	10800110 	cmplti	r2,r2,4
 8000d9c:	103fb41e 	bne	r2,zero,8000c70 <Event_new+0x60>
			c[i].impacts[a] = choiceImpacts[i*4 + a];
	}

	//printf("%i\n", c[0].textI);

	return e;
 8000da0:	e0bffa17 	ldw	r2,-24(fp)
}
 8000da4:	e037883a 	mov	sp,fp
 8000da8:	dfc00117 	ldw	ra,4(sp)
 8000dac:	df000017 	ldw	fp,0(sp)
 8000db0:	dec00204 	addi	sp,sp,8
 8000db4:	f800283a 	ret

08000db8 <initEvents>:

void initEvents(){
 8000db8:	defee104 	addi	sp,sp,-1148
 8000dbc:	dfc11e15 	stw	ra,1144(sp)
 8000dc0:	df011d15 	stw	fp,1140(sp)
 8000dc4:	df011d04 	addi	fp,sp,1140
	int* cTI;	// choice text indices
	int* cRI;	// choice response indices
	int* cNI;	// choice next event indices
	int* cI	;	// choice impacts (on happiness, hygiene, grades, difficulty)

	cTI = (int[4]) {0, 1, 2, 3};
 8000dc8:	e03ffc15 	stw	zero,-16(fp)
 8000dcc:	00800044 	movi	r2,1
 8000dd0:	e0bffd15 	stw	r2,-12(fp)
 8000dd4:	00800084 	movi	r2,2
 8000dd8:	e0bffe15 	stw	r2,-8(fp)
 8000ddc:	008000c4 	movi	r2,3
 8000de0:	e0bfff15 	stw	r2,-4(fp)
 8000de4:	e0bffc04 	addi	r2,fp,-16
 8000de8:	e0bee415 	stw	r2,-1136(fp)
	cRI = (int[4]) {0, 0, 3, 5};
 8000dec:	e03ff815 	stw	zero,-32(fp)
 8000df0:	e03ff915 	stw	zero,-28(fp)
 8000df4:	008000c4 	movi	r2,3
 8000df8:	e0bffa15 	stw	r2,-24(fp)
 8000dfc:	00800144 	movi	r2,5
 8000e00:	e0bffb15 	stw	r2,-20(fp)
 8000e04:	e0bff804 	addi	r2,fp,-32
 8000e08:	e0bee515 	stw	r2,-1132(fp)
	cNI = (int[4]) {1, 1, 1, 1};
 8000e0c:	00800044 	movi	r2,1
 8000e10:	e0bff415 	stw	r2,-48(fp)
 8000e14:	00800044 	movi	r2,1
 8000e18:	e0bff515 	stw	r2,-44(fp)
 8000e1c:	00800044 	movi	r2,1
 8000e20:	e0bff615 	stw	r2,-40(fp)
 8000e24:	00800044 	movi	r2,1
 8000e28:	e0bff715 	stw	r2,-36(fp)
 8000e2c:	e0bff404 	addi	r2,fp,-48
 8000e30:	e0bee615 	stw	r2,-1128(fp)
	cI  = (int[16]) { 	0, 0, 0, 0,
 8000e34:	00820074 	movhi	r2,2049
 8000e38:	10b67804 	addi	r2,r2,-9760
 8000e3c:	e13fe404 	addi	r4,fp,-112
 8000e40:	1007883a 	mov	r3,r2
 8000e44:	00801004 	movi	r2,64
 8000e48:	180b883a 	mov	r5,r3
 8000e4c:	100d883a 	mov	r6,r2
 8000e50:	80023900 	call	8002390 <memcpy>
 8000e54:	e0bfe404 	addi	r2,fp,-112
 8000e58:	e0bee715 	stw	r2,-1124(fp)
						0, 0, 0, 0,
						-10, 0, 10, 0,
						15, -5, -20, 2};
	ev[0] = Event_new(0, cTI, cRI, cNI, cI);
 8000e5c:	e0bee717 	ldw	r2,-1124(fp)
 8000e60:	d8800015 	stw	r2,0(sp)
 8000e64:	0009883a 	mov	r4,zero
 8000e68:	e17ee417 	ldw	r5,-1136(fp)
 8000e6c:	e1bee517 	ldw	r6,-1132(fp)
 8000e70:	e1fee617 	ldw	r7,-1128(fp)
 8000e74:	8000c100 	call	8000c10 <Event_new>
 8000e78:	00c20074 	movhi	r3,2049
 8000e7c:	18fdf804 	addi	r3,r3,-2080
 8000e80:	18800015 	stw	r2,0(r3)
	cTI = (int[4]) {4, 5, 6, 3};
 8000e84:	00800104 	movi	r2,4
 8000e88:	e0bfe015 	stw	r2,-128(fp)
 8000e8c:	00800144 	movi	r2,5
 8000e90:	e0bfe115 	stw	r2,-124(fp)
 8000e94:	00800184 	movi	r2,6
 8000e98:	e0bfe215 	stw	r2,-120(fp)
 8000e9c:	008000c4 	movi	r2,3
 8000ea0:	e0bfe315 	stw	r2,-116(fp)
 8000ea4:	e0bfe004 	addi	r2,fp,-128
 8000ea8:	e0bee415 	stw	r2,-1136(fp)
	cRI = (int[4]) {8, 7, 9, 1};
 8000eac:	00800204 	movi	r2,8
 8000eb0:	e0bfdc15 	stw	r2,-144(fp)
 8000eb4:	008001c4 	movi	r2,7
 8000eb8:	e0bfdd15 	stw	r2,-140(fp)
 8000ebc:	00800244 	movi	r2,9
 8000ec0:	e0bfde15 	stw	r2,-136(fp)
 8000ec4:	00800044 	movi	r2,1
 8000ec8:	e0bfdf15 	stw	r2,-132(fp)
 8000ecc:	e0bfdc04 	addi	r2,fp,-144
 8000ed0:	e0bee515 	stw	r2,-1132(fp)
	cNI = (int[4]) {2, 2, 2, 2};
 8000ed4:	00800084 	movi	r2,2
 8000ed8:	e0bfd815 	stw	r2,-160(fp)
 8000edc:	00800084 	movi	r2,2
 8000ee0:	e0bfd915 	stw	r2,-156(fp)
 8000ee4:	00800084 	movi	r2,2
 8000ee8:	e0bfda15 	stw	r2,-152(fp)
 8000eec:	00800084 	movi	r2,2
 8000ef0:	e0bfdb15 	stw	r2,-148(fp)
 8000ef4:	e0bfd804 	addi	r2,fp,-160
 8000ef8:	e0bee615 	stw	r2,-1128(fp)
	cI  = (int[16]) { 	0, 0, 10, 0,
 8000efc:	00820074 	movhi	r2,2049
 8000f00:	10b68804 	addi	r2,r2,-9696
 8000f04:	e13fc804 	addi	r4,fp,-224
 8000f08:	1007883a 	mov	r3,r2
 8000f0c:	00801004 	movi	r2,64
 8000f10:	180b883a 	mov	r5,r3
 8000f14:	100d883a 	mov	r6,r2
 8000f18:	80023900 	call	8002390 <memcpy>
 8000f1c:	e0bfc804 	addi	r2,fp,-224
 8000f20:	e0bee715 	stw	r2,-1124(fp)
						10, 0, -10, 0,
						0, -5, -20, 1,
						15, -5, -20, 2};
	ev[1] = Event_new(1, cTI, cRI, cNI, cI);
 8000f24:	e0bee717 	ldw	r2,-1124(fp)
 8000f28:	d8800015 	stw	r2,0(sp)
 8000f2c:	01000044 	movi	r4,1
 8000f30:	e17ee417 	ldw	r5,-1136(fp)
 8000f34:	e1bee517 	ldw	r6,-1132(fp)
 8000f38:	e1fee617 	ldw	r7,-1128(fp)
 8000f3c:	8000c100 	call	8000c10 <Event_new>
 8000f40:	00c20074 	movhi	r3,2049
 8000f44:	18fdf804 	addi	r3,r3,-2080
 8000f48:	18800115 	stw	r2,4(r3)

	cTI = (int[4]) {7, 8, 9, 3};
 8000f4c:	008001c4 	movi	r2,7
 8000f50:	e0bfc415 	stw	r2,-240(fp)
 8000f54:	00800204 	movi	r2,8
 8000f58:	e0bfc515 	stw	r2,-236(fp)
 8000f5c:	00800244 	movi	r2,9
 8000f60:	e0bfc615 	stw	r2,-232(fp)
 8000f64:	008000c4 	movi	r2,3
 8000f68:	e0bfc715 	stw	r2,-228(fp)
 8000f6c:	e0bfc404 	addi	r2,fp,-240
 8000f70:	e0bee415 	stw	r2,-1136(fp)
	cRI = (int[4]) {12, 3, 11, 2};
 8000f74:	00800304 	movi	r2,12
 8000f78:	e0bfc015 	stw	r2,-256(fp)
 8000f7c:	008000c4 	movi	r2,3
 8000f80:	e0bfc115 	stw	r2,-252(fp)
 8000f84:	008002c4 	movi	r2,11
 8000f88:	e0bfc215 	stw	r2,-248(fp)
 8000f8c:	00800084 	movi	r2,2
 8000f90:	e0bfc315 	stw	r2,-244(fp)
 8000f94:	e0bfc004 	addi	r2,fp,-256
 8000f98:	e0bee515 	stw	r2,-1132(fp)
	cNI = (int[4]) {3, 3, 3, 3};
 8000f9c:	008000c4 	movi	r2,3
 8000fa0:	e0bfbc15 	stw	r2,-272(fp)
 8000fa4:	008000c4 	movi	r2,3
 8000fa8:	e0bfbd15 	stw	r2,-268(fp)
 8000fac:	008000c4 	movi	r2,3
 8000fb0:	e0bfbe15 	stw	r2,-264(fp)
 8000fb4:	008000c4 	movi	r2,3
 8000fb8:	e0bfbf15 	stw	r2,-260(fp)
 8000fbc:	e0bfbc04 	addi	r2,fp,-272
 8000fc0:	e0bee615 	stw	r2,-1128(fp)
	cI  = (int[16]) { 	10, 0, -10, 0,
 8000fc4:	00820074 	movhi	r2,2049
 8000fc8:	10b69804 	addi	r2,r2,-9632
 8000fcc:	e13fac04 	addi	r4,fp,-336
 8000fd0:	1007883a 	mov	r3,r2
 8000fd4:	00801004 	movi	r2,64
 8000fd8:	180b883a 	mov	r5,r3
 8000fdc:	100d883a 	mov	r6,r2
 8000fe0:	80023900 	call	8002390 <memcpy>
 8000fe4:	e0bfac04 	addi	r2,fp,-336
 8000fe8:	e0bee715 	stw	r2,-1124(fp)
						-10, 0, 5, 0,
						10, 0, -5, 0,
						15, -5, -20, 2};
	ev[2] = Event_new(2, cTI, cRI, cNI, cI);
 8000fec:	e0bee717 	ldw	r2,-1124(fp)
 8000ff0:	d8800015 	stw	r2,0(sp)
 8000ff4:	01000084 	movi	r4,2
 8000ff8:	e17ee417 	ldw	r5,-1136(fp)
 8000ffc:	e1bee517 	ldw	r6,-1132(fp)
 8001000:	e1fee617 	ldw	r7,-1128(fp)
 8001004:	8000c100 	call	8000c10 <Event_new>
 8001008:	00c20074 	movhi	r3,2049
 800100c:	18fdf804 	addi	r3,r3,-2080
 8001010:	18800215 	stw	r2,8(r3)

	cTI = (int[4]) {20, 15, 7, 3};
 8001014:	00800504 	movi	r2,20
 8001018:	e0bfa815 	stw	r2,-352(fp)
 800101c:	008003c4 	movi	r2,15
 8001020:	e0bfa915 	stw	r2,-348(fp)
 8001024:	008001c4 	movi	r2,7
 8001028:	e0bfaa15 	stw	r2,-344(fp)
 800102c:	008000c4 	movi	r2,3
 8001030:	e0bfab15 	stw	r2,-340(fp)
 8001034:	e0bfa804 	addi	r2,fp,-352
 8001038:	e0bee415 	stw	r2,-1136(fp)
	cRI = (int[4]) {10, 1, 1, 1};
 800103c:	00800284 	movi	r2,10
 8001040:	e0bfa415 	stw	r2,-368(fp)
 8001044:	00800044 	movi	r2,1
 8001048:	e0bfa515 	stw	r2,-364(fp)
 800104c:	00800044 	movi	r2,1
 8001050:	e0bfa615 	stw	r2,-360(fp)
 8001054:	00800044 	movi	r2,1
 8001058:	e0bfa715 	stw	r2,-356(fp)
 800105c:	e0bfa404 	addi	r2,fp,-368
 8001060:	e0bee515 	stw	r2,-1132(fp)
	cNI = (int[4]) {4, 4, 4, 4};
 8001064:	00800104 	movi	r2,4
 8001068:	e0bfa015 	stw	r2,-384(fp)
 800106c:	00800104 	movi	r2,4
 8001070:	e0bfa115 	stw	r2,-380(fp)
 8001074:	00800104 	movi	r2,4
 8001078:	e0bfa215 	stw	r2,-376(fp)
 800107c:	00800104 	movi	r2,4
 8001080:	e0bfa315 	stw	r2,-372(fp)
 8001084:	e0bfa004 	addi	r2,fp,-384
 8001088:	e0bee615 	stw	r2,-1128(fp)
	cI  = (int[16]) { 	-10, -10, 10, 0,
 800108c:	00820074 	movhi	r2,2049
 8001090:	10b6a804 	addi	r2,r2,-9568
 8001094:	e13f9004 	addi	r4,fp,-448
 8001098:	1007883a 	mov	r3,r2
 800109c:	00801004 	movi	r2,64
 80010a0:	180b883a 	mov	r5,r3
 80010a4:	100d883a 	mov	r6,r2
 80010a8:	80023900 	call	8002390 <memcpy>
 80010ac:	e0bf9004 	addi	r2,fp,-448
 80010b0:	e0bee715 	stw	r2,-1124(fp)
						10, 0, -15, 0,
						10, 0, -15, 0,
						15, -5, -20, 2};
	ev[3] = Event_new(3, cTI, cRI, cNI, cI);
 80010b4:	e0bee717 	ldw	r2,-1124(fp)
 80010b8:	d8800015 	stw	r2,0(sp)
 80010bc:	010000c4 	movi	r4,3
 80010c0:	e17ee417 	ldw	r5,-1136(fp)
 80010c4:	e1bee517 	ldw	r6,-1132(fp)
 80010c8:	e1fee617 	ldw	r7,-1128(fp)
 80010cc:	8000c100 	call	8000c10 <Event_new>
 80010d0:	00c20074 	movhi	r3,2049
 80010d4:	18fdf804 	addi	r3,r3,-2080
 80010d8:	18800315 	stw	r2,12(r3)

	cTI = (int[4]) {11, 12, 13, 3};
 80010dc:	008002c4 	movi	r2,11
 80010e0:	e0bf8c15 	stw	r2,-464(fp)
 80010e4:	00800304 	movi	r2,12
 80010e8:	e0bf8d15 	stw	r2,-460(fp)
 80010ec:	00800344 	movi	r2,13
 80010f0:	e0bf8e15 	stw	r2,-456(fp)
 80010f4:	008000c4 	movi	r2,3
 80010f8:	e0bf8f15 	stw	r2,-452(fp)
 80010fc:	e0bf8c04 	addi	r2,fp,-464
 8001100:	e0bee415 	stw	r2,-1136(fp)
	cRI = (int[4]) {13, 14, 15, 2};
 8001104:	00800344 	movi	r2,13
 8001108:	e0bf8815 	stw	r2,-480(fp)
 800110c:	00800384 	movi	r2,14
 8001110:	e0bf8915 	stw	r2,-476(fp)
 8001114:	008003c4 	movi	r2,15
 8001118:	e0bf8a15 	stw	r2,-472(fp)
 800111c:	00800084 	movi	r2,2
 8001120:	e0bf8b15 	stw	r2,-468(fp)
 8001124:	e0bf8804 	addi	r2,fp,-480
 8001128:	e0bee515 	stw	r2,-1132(fp)
	cNI = (int[4]) {5, 5, 5, 5};
 800112c:	00800144 	movi	r2,5
 8001130:	e0bf8415 	stw	r2,-496(fp)
 8001134:	00800144 	movi	r2,5
 8001138:	e0bf8515 	stw	r2,-492(fp)
 800113c:	00800144 	movi	r2,5
 8001140:	e0bf8615 	stw	r2,-488(fp)
 8001144:	00800144 	movi	r2,5
 8001148:	e0bf8715 	stw	r2,-484(fp)
 800114c:	e0bf8404 	addi	r2,fp,-496
 8001150:	e0bee615 	stw	r2,-1128(fp)
	cI  = (int[16]) { 	0, -10, 10, 0,
 8001154:	00820074 	movhi	r2,2049
 8001158:	10b6b804 	addi	r2,r2,-9504
 800115c:	e13f7404 	addi	r4,fp,-560
 8001160:	1007883a 	mov	r3,r2
 8001164:	00801004 	movi	r2,64
 8001168:	180b883a 	mov	r5,r3
 800116c:	100d883a 	mov	r6,r2
 8001170:	80023900 	call	8002390 <memcpy>
 8001174:	e0bf7404 	addi	r2,fp,-560
 8001178:	e0bee715 	stw	r2,-1124(fp)
						10, 0, -10, 0,
						15, -10, -5, 0,
						15, -5, -20, 2};
	ev[4] = Event_new(4, cTI, cRI, cNI, cI);
 800117c:	e0bee717 	ldw	r2,-1124(fp)
 8001180:	d8800015 	stw	r2,0(sp)
 8001184:	01000104 	movi	r4,4
 8001188:	e17ee417 	ldw	r5,-1136(fp)
 800118c:	e1bee517 	ldw	r6,-1132(fp)
 8001190:	e1fee617 	ldw	r7,-1128(fp)
 8001194:	8000c100 	call	8000c10 <Event_new>
 8001198:	00c20074 	movhi	r3,2049
 800119c:	18fdf804 	addi	r3,r3,-2080
 80011a0:	18800415 	stw	r2,16(r3)

	cTI = (int[4]) {3, 3, 3, 3};
 80011a4:	008000c4 	movi	r2,3
 80011a8:	e0bf7015 	stw	r2,-576(fp)
 80011ac:	008000c4 	movi	r2,3
 80011b0:	e0bf7115 	stw	r2,-572(fp)
 80011b4:	008000c4 	movi	r2,3
 80011b8:	e0bf7215 	stw	r2,-568(fp)
 80011bc:	008000c4 	movi	r2,3
 80011c0:	e0bf7315 	stw	r2,-564(fp)
 80011c4:	e0bf7004 	addi	r2,fp,-576
 80011c8:	e0bee415 	stw	r2,-1136(fp)
	cRI = (int[4]) {22, 22, 22, 22};
 80011cc:	00800584 	movi	r2,22
 80011d0:	e0bf6c15 	stw	r2,-592(fp)
 80011d4:	00800584 	movi	r2,22
 80011d8:	e0bf6d15 	stw	r2,-588(fp)
 80011dc:	00800584 	movi	r2,22
 80011e0:	e0bf6e15 	stw	r2,-584(fp)
 80011e4:	00800584 	movi	r2,22
 80011e8:	e0bf6f15 	stw	r2,-580(fp)
 80011ec:	e0bf6c04 	addi	r2,fp,-592
 80011f0:	e0bee515 	stw	r2,-1132(fp)
	cNI = (int[4]) {6, 6, 6, 6};
 80011f4:	00800184 	movi	r2,6
 80011f8:	e0bf6815 	stw	r2,-608(fp)
 80011fc:	00800184 	movi	r2,6
 8001200:	e0bf6915 	stw	r2,-604(fp)
 8001204:	00800184 	movi	r2,6
 8001208:	e0bf6a15 	stw	r2,-600(fp)
 800120c:	00800184 	movi	r2,6
 8001210:	e0bf6b15 	stw	r2,-596(fp)
 8001214:	e0bf6804 	addi	r2,fp,-608
 8001218:	e0bee615 	stw	r2,-1128(fp)
	cI  = (int[16]) { 	15, -5, -10, 2,
 800121c:	00820074 	movhi	r2,2049
 8001220:	10b6c804 	addi	r2,r2,-9440
 8001224:	e13f5804 	addi	r4,fp,-672
 8001228:	1007883a 	mov	r3,r2
 800122c:	00801004 	movi	r2,64
 8001230:	180b883a 	mov	r5,r3
 8001234:	100d883a 	mov	r6,r2
 8001238:	80023900 	call	8002390 <memcpy>
 800123c:	e0bf5804 	addi	r2,fp,-672
 8001240:	e0bee715 	stw	r2,-1124(fp)
						15, -5, -10, 2,
						15, -5, -10, 2,
						15, -5, -10, 2};
	ev[5] = Event_new(5, cTI, cRI, cNI, cI);
 8001244:	e0bee717 	ldw	r2,-1124(fp)
 8001248:	d8800015 	stw	r2,0(sp)
 800124c:	01000144 	movi	r4,5
 8001250:	e17ee417 	ldw	r5,-1136(fp)
 8001254:	e1bee517 	ldw	r6,-1132(fp)
 8001258:	e1fee617 	ldw	r7,-1128(fp)
 800125c:	8000c100 	call	8000c10 <Event_new>
 8001260:	00c20074 	movhi	r3,2049
 8001264:	18fdf804 	addi	r3,r3,-2080
 8001268:	18800515 	stw	r2,20(r3)

	cTI = (int[4]) {14, 15, 16, 3};
 800126c:	00800384 	movi	r2,14
 8001270:	e0bf5415 	stw	r2,-688(fp)
 8001274:	008003c4 	movi	r2,15
 8001278:	e0bf5515 	stw	r2,-684(fp)
 800127c:	00800404 	movi	r2,16
 8001280:	e0bf5615 	stw	r2,-680(fp)
 8001284:	008000c4 	movi	r2,3
 8001288:	e0bf5715 	stw	r2,-676(fp)
 800128c:	e0bf5404 	addi	r2,fp,-688
 8001290:	e0bee415 	stw	r2,-1136(fp)
	cRI = (int[4]) {10, 2, 20, 20};
 8001294:	00800284 	movi	r2,10
 8001298:	e0bf5015 	stw	r2,-704(fp)
 800129c:	00800084 	movi	r2,2
 80012a0:	e0bf5115 	stw	r2,-700(fp)
 80012a4:	00800504 	movi	r2,20
 80012a8:	e0bf5215 	stw	r2,-696(fp)
 80012ac:	00800504 	movi	r2,20
 80012b0:	e0bf5315 	stw	r2,-692(fp)
 80012b4:	e0bf5004 	addi	r2,fp,-704
 80012b8:	e0bee515 	stw	r2,-1132(fp)
	cNI = (int[4]) {7, 7, 7, 7};
 80012bc:	008001c4 	movi	r2,7
 80012c0:	e0bf4c15 	stw	r2,-720(fp)
 80012c4:	008001c4 	movi	r2,7
 80012c8:	e0bf4d15 	stw	r2,-716(fp)
 80012cc:	008001c4 	movi	r2,7
 80012d0:	e0bf4e15 	stw	r2,-712(fp)
 80012d4:	008001c4 	movi	r2,7
 80012d8:	e0bf4f15 	stw	r2,-708(fp)
 80012dc:	e0bf4c04 	addi	r2,fp,-720
 80012e0:	e0bee615 	stw	r2,-1128(fp)
	cI  = (int[16]) { 	0, 0, 5, 0,
 80012e4:	00820074 	movhi	r2,2049
 80012e8:	10b6d804 	addi	r2,r2,-9376
 80012ec:	e13f3c04 	addi	r4,fp,-784
 80012f0:	1007883a 	mov	r3,r2
 80012f4:	00801004 	movi	r2,64
 80012f8:	180b883a 	mov	r5,r3
 80012fc:	100d883a 	mov	r6,r2
 8001300:	80023900 	call	8002390 <memcpy>
 8001304:	e0bf3c04 	addi	r2,fp,-784
 8001308:	e0bee715 	stw	r2,-1124(fp)
						5, 0, -15, 1,
						-10, 0, 10, 0,
						15, -5, -20, 2};
	ev[6] = Event_new(6, cTI, cRI, cNI, cI);
 800130c:	e0bee717 	ldw	r2,-1124(fp)
 8001310:	d8800015 	stw	r2,0(sp)
 8001314:	01000184 	movi	r4,6
 8001318:	e17ee417 	ldw	r5,-1136(fp)
 800131c:	e1bee517 	ldw	r6,-1132(fp)
 8001320:	e1fee617 	ldw	r7,-1128(fp)
 8001324:	8000c100 	call	8000c10 <Event_new>
 8001328:	00c20074 	movhi	r3,2049
 800132c:	18fdf804 	addi	r3,r3,-2080
 8001330:	18800615 	stw	r2,24(r3)

	cTI = (int[4]) {17, 18, 19, 3};
 8001334:	00800444 	movi	r2,17
 8001338:	e0bf3815 	stw	r2,-800(fp)
 800133c:	00800484 	movi	r2,18
 8001340:	e0bf3915 	stw	r2,-796(fp)
 8001344:	008004c4 	movi	r2,19
 8001348:	e0bf3a15 	stw	r2,-792(fp)
 800134c:	008000c4 	movi	r2,3
 8001350:	e0bf3b15 	stw	r2,-788(fp)
 8001354:	e0bf3804 	addi	r2,fp,-800
 8001358:	e0bee415 	stw	r2,-1136(fp)
	cRI = (int[4]) {16, 6, 17, 0};
 800135c:	00800404 	movi	r2,16
 8001360:	e0bf3415 	stw	r2,-816(fp)
 8001364:	00800184 	movi	r2,6
 8001368:	e0bf3515 	stw	r2,-812(fp)
 800136c:	00800444 	movi	r2,17
 8001370:	e0bf3615 	stw	r2,-808(fp)
 8001374:	e03f3715 	stw	zero,-804(fp)
 8001378:	e0bf3404 	addi	r2,fp,-816
 800137c:	e0bee515 	stw	r2,-1132(fp)
	cNI = (int[4]) {8, 8, 8, 8};
 8001380:	00800204 	movi	r2,8
 8001384:	e0bf3015 	stw	r2,-832(fp)
 8001388:	00800204 	movi	r2,8
 800138c:	e0bf3115 	stw	r2,-828(fp)
 8001390:	00800204 	movi	r2,8
 8001394:	e0bf3215 	stw	r2,-824(fp)
 8001398:	00800204 	movi	r2,8
 800139c:	e0bf3315 	stw	r2,-820(fp)
 80013a0:	e0bf3004 	addi	r2,fp,-832
 80013a4:	e0bee615 	stw	r2,-1128(fp)
	cI  = (int[16]) { 	0, 0, 0, 0,
 80013a8:	00820074 	movhi	r2,2049
 80013ac:	10b6e804 	addi	r2,r2,-9312
 80013b0:	e13f2004 	addi	r4,fp,-896
 80013b4:	1007883a 	mov	r3,r2
 80013b8:	00801004 	movi	r2,64
 80013bc:	180b883a 	mov	r5,r3
 80013c0:	100d883a 	mov	r6,r2
 80013c4:	80023900 	call	8002390 <memcpy>
 80013c8:	e0bf2004 	addi	r2,fp,-896
 80013cc:	e0bee715 	stw	r2,-1124(fp)
						5, 5, 0, 0,
						0, -20, 0, 1,
						15, -5, -20, 2};
	ev[7] = Event_new(7, cTI, cRI, cNI, cI);
 80013d0:	e0bee717 	ldw	r2,-1124(fp)
 80013d4:	d8800015 	stw	r2,0(sp)
 80013d8:	010001c4 	movi	r4,7
 80013dc:	e17ee417 	ldw	r5,-1136(fp)
 80013e0:	e1bee517 	ldw	r6,-1132(fp)
 80013e4:	e1fee617 	ldw	r7,-1128(fp)
 80013e8:	8000c100 	call	8000c10 <Event_new>
 80013ec:	00c20074 	movhi	r3,2049
 80013f0:	18fdf804 	addi	r3,r3,-2080
 80013f4:	18800715 	stw	r2,28(r3)

	cTI = (int[4]) {20, 21, 22, 3};
 80013f8:	00800504 	movi	r2,20
 80013fc:	e0bf1c15 	stw	r2,-912(fp)
 8001400:	00800544 	movi	r2,21
 8001404:	e0bf1d15 	stw	r2,-908(fp)
 8001408:	00800584 	movi	r2,22
 800140c:	e0bf1e15 	stw	r2,-904(fp)
 8001410:	008000c4 	movi	r2,3
 8001414:	e0bf1f15 	stw	r2,-900(fp)
 8001418:	e0bf1c04 	addi	r2,fp,-912
 800141c:	e0bee415 	stw	r2,-1136(fp)
	cRI = (int[4]) {18, 18, 18, 18};
 8001420:	00800484 	movi	r2,18
 8001424:	e0bf1815 	stw	r2,-928(fp)
 8001428:	00800484 	movi	r2,18
 800142c:	e0bf1915 	stw	r2,-924(fp)
 8001430:	00800484 	movi	r2,18
 8001434:	e0bf1a15 	stw	r2,-920(fp)
 8001438:	00800484 	movi	r2,18
 800143c:	e0bf1b15 	stw	r2,-916(fp)
 8001440:	e0bf1804 	addi	r2,fp,-928
 8001444:	e0bee515 	stw	r2,-1132(fp)
	cNI = (int[4]) {9, 9, 9, 9};
 8001448:	00800244 	movi	r2,9
 800144c:	e0bf1415 	stw	r2,-944(fp)
 8001450:	00800244 	movi	r2,9
 8001454:	e0bf1515 	stw	r2,-940(fp)
 8001458:	00800244 	movi	r2,9
 800145c:	e0bf1615 	stw	r2,-936(fp)
 8001460:	00800244 	movi	r2,9
 8001464:	e0bf1715 	stw	r2,-932(fp)
 8001468:	e0bf1404 	addi	r2,fp,-944
 800146c:	e0bee615 	stw	r2,-1128(fp)
	cI  = (int[16]) { 	-15, 0, -20, 0,
 8001470:	00820074 	movhi	r2,2049
 8001474:	10b6f804 	addi	r2,r2,-9248
 8001478:	e13f0404 	addi	r4,fp,-1008
 800147c:	1007883a 	mov	r3,r2
 8001480:	00801004 	movi	r2,64
 8001484:	180b883a 	mov	r5,r3
 8001488:	100d883a 	mov	r6,r2
 800148c:	80023900 	call	8002390 <memcpy>
 8001490:	e0bf0404 	addi	r2,fp,-1008
 8001494:	e0bee715 	stw	r2,-1124(fp)
						-15, 0, -20, 0,
						-15, 0, -20, 0,
						-15, 0, -20, 0};
	ev[8] = Event_new(8, cTI, cRI, cNI, cI);
 8001498:	e0bee717 	ldw	r2,-1124(fp)
 800149c:	d8800015 	stw	r2,0(sp)
 80014a0:	01000204 	movi	r4,8
 80014a4:	e17ee417 	ldw	r5,-1136(fp)
 80014a8:	e1bee517 	ldw	r6,-1132(fp)
 80014ac:	e1fee617 	ldw	r7,-1128(fp)
 80014b0:	8000c100 	call	8000c10 <Event_new>
 80014b4:	00c20074 	movhi	r3,2049
 80014b8:	18fdf804 	addi	r3,r3,-2080
 80014bc:	18800815 	stw	r2,32(r3)

	cTI = (int[4]) {23, 20, 24, 3};
 80014c0:	008005c4 	movi	r2,23
 80014c4:	e0bf0015 	stw	r2,-1024(fp)
 80014c8:	00800504 	movi	r2,20
 80014cc:	e0bf0115 	stw	r2,-1020(fp)
 80014d0:	00800604 	movi	r2,24
 80014d4:	e0bf0215 	stw	r2,-1016(fp)
 80014d8:	008000c4 	movi	r2,3
 80014dc:	e0bf0315 	stw	r2,-1012(fp)
 80014e0:	e0bf0004 	addi	r2,fp,-1024
 80014e4:	e0bee415 	stw	r2,-1136(fp)
	cRI = (int[4]) {21, 19, 1, 6};
 80014e8:	00800544 	movi	r2,21
 80014ec:	e0befc15 	stw	r2,-1040(fp)
 80014f0:	008004c4 	movi	r2,19
 80014f4:	e0befd15 	stw	r2,-1036(fp)
 80014f8:	00800044 	movi	r2,1
 80014fc:	e0befe15 	stw	r2,-1032(fp)
 8001500:	00800184 	movi	r2,6
 8001504:	e0beff15 	stw	r2,-1028(fp)
 8001508:	e0befc04 	addi	r2,fp,-1040
 800150c:	e0bee515 	stw	r2,-1132(fp)
	cNI = (int[4]) {0, 0, 0, 0};
 8001510:	e03ef815 	stw	zero,-1056(fp)
 8001514:	e03ef915 	stw	zero,-1052(fp)
 8001518:	e03efa15 	stw	zero,-1048(fp)
 800151c:	e03efb15 	stw	zero,-1044(fp)
 8001520:	e0bef804 	addi	r2,fp,-1056
 8001524:	e0bee615 	stw	r2,-1128(fp)
	cI  = (int[16]) { 	-10, -10, 10, 1,
 8001528:	00820074 	movhi	r2,2049
 800152c:	10b70804 	addi	r2,r2,-9184
 8001530:	e13ee804 	addi	r4,fp,-1120
 8001534:	1007883a 	mov	r3,r2
 8001538:	00801004 	movi	r2,64
 800153c:	180b883a 	mov	r5,r3
 8001540:	100d883a 	mov	r6,r2
 8001544:	80023900 	call	8002390 <memcpy>
 8001548:	e0bee804 	addi	r2,fp,-1120
 800154c:	e0bee715 	stw	r2,-1124(fp)
						-15, -10, 15, 1,
						10, 0, -20, 1,
						15, -5, -20, 2};
	ev[9] = Event_new(9, cTI, cRI, cNI, cI);
 8001550:	e0bee717 	ldw	r2,-1124(fp)
 8001554:	d8800015 	stw	r2,0(sp)
 8001558:	01000244 	movi	r4,9
 800155c:	e17ee417 	ldw	r5,-1136(fp)
 8001560:	e1bee517 	ldw	r6,-1132(fp)
 8001564:	e1fee617 	ldw	r7,-1128(fp)
 8001568:	8000c100 	call	8000c10 <Event_new>
 800156c:	00c20074 	movhi	r3,2049
 8001570:	18fdf804 	addi	r3,r3,-2080
 8001574:	18800915 	stw	r2,36(r3)

}
 8001578:	e037883a 	mov	sp,fp
 800157c:	dfc00117 	ldw	ra,4(sp)
 8001580:	df000017 	ldw	fp,0(sp)
 8001584:	dec00204 	addi	sp,sp,8
 8001588:	f800283a 	ret

0800158c <printChoices>:

void printChoices(Event* e){
 800158c:	deffe104 	addi	sp,sp,-124
 8001590:	dfc01e15 	stw	ra,120(sp)
 8001594:	df001d15 	stw	fp,116(sp)
 8001598:	dc001c15 	stw	r16,112(sp)
 800159c:	df001c04 	addi	fp,sp,112
 80015a0:	e13fff15 	stw	r4,-4(fp)
	curTextY = 26;
 80015a4:	00800684 	movi	r2,26
 80015a8:	d0a31915 	stw	r2,-29596(gp)
	//numChoices = 0;

	addToScreen(XPADDING, "What do you do?\n\0");
 80015ac:	d0a00817 	ldw	r2,-32736(gp)
 80015b0:	1009883a 	mov	r4,r2
 80015b4:	01420074 	movhi	r5,2049
 80015b8:	29771804 	addi	r5,r5,-9120
 80015bc:	80017840 	call	8001784 <addToScreen>

	int i;
	Choice* a = e->choices;
 80015c0:	e0bfff17 	ldw	r2,-4(fp)
 80015c4:	10800117 	ldw	r2,4(r2)
 80015c8:	e0bfe515 	stw	r2,-108(fp)
	for(i = 0; i < 4; i++){
 80015cc:	e03fe415 	stw	zero,-112(fp)
 80015d0:	00002a06 	br	800167c <printChoices+0xf0>
		if(a[i].nextEventI != -1){ // we don't print a choice with nextEvent index of -1
 80015d4:	e0bfe417 	ldw	r2,-112(fp)
 80015d8:	1009883a 	mov	r4,r2
 80015dc:	01400704 	movi	r5,28
 80015e0:	8001bbc0 	call	8001bbc <__mulsi3>
 80015e4:	e0ffe517 	ldw	r3,-108(fp)
 80015e8:	1885883a 	add	r2,r3,r2
 80015ec:	10800217 	ldw	r2,8(r2)
 80015f0:	10bfffe0 	cmpeqi	r2,r2,-1
 80015f4:	10001e1e 	bne	r2,zero,8001670 <printChoices+0xe4>
			//numChoices++;
			char buf[100];
			sprintf(buf, "%c. %s\n\n", (char)(i+97), choiceTexts[(a[i]).textI]);
 80015f8:	e0bfe417 	ldw	r2,-112(fp)
 80015fc:	10801844 	addi	r2,r2,97
 8001600:	14003fcc 	andi	r16,r2,255
 8001604:	8400201c 	xori	r16,r16,128
 8001608:	843fe004 	addi	r16,r16,-128
 800160c:	e0bfe417 	ldw	r2,-112(fp)
 8001610:	1009883a 	mov	r4,r2
 8001614:	01400704 	movi	r5,28
 8001618:	8001bbc0 	call	8001bbc <__mulsi3>
 800161c:	e0ffe517 	ldw	r3,-108(fp)
 8001620:	1885883a 	add	r2,r3,r2
 8001624:	10800017 	ldw	r2,0(r2)
 8001628:	00c20074 	movhi	r3,2049
 800162c:	18f80304 	addi	r3,r3,-8180
 8001630:	1085883a 	add	r2,r2,r2
 8001634:	1085883a 	add	r2,r2,r2
 8001638:	1885883a 	add	r2,r3,r2
 800163c:	10800017 	ldw	r2,0(r2)
 8001640:	e0ffe604 	addi	r3,fp,-104
 8001644:	1809883a 	mov	r4,r3
 8001648:	01420074 	movhi	r5,2049
 800164c:	29771d04 	addi	r5,r5,-9100
 8001650:	800d883a 	mov	r6,r16
 8001654:	100f883a 	mov	r7,r2
 8001658:	800258c0 	call	800258c <sprintf>
			addToScreen(XPADDING, buf);
 800165c:	d0e00817 	ldw	r3,-32736(gp)
 8001660:	e0bfe604 	addi	r2,fp,-104
 8001664:	1809883a 	mov	r4,r3
 8001668:	100b883a 	mov	r5,r2
 800166c:	80017840 	call	8001784 <addToScreen>

	addToScreen(XPADDING, "What do you do?\n\0");

	int i;
	Choice* a = e->choices;
	for(i = 0; i < 4; i++){
 8001670:	e0bfe417 	ldw	r2,-112(fp)
 8001674:	10800044 	addi	r2,r2,1
 8001678:	e0bfe415 	stw	r2,-112(fp)
 800167c:	e0bfe417 	ldw	r2,-112(fp)
 8001680:	10800110 	cmplti	r2,r2,4
 8001684:	103fd31e 	bne	r2,zero,80015d4 <printChoices+0x48>
			sprintf(buf, "%c. %s\n\n", (char)(i+97), choiceTexts[(a[i]).textI]);
			addToScreen(XPADDING, buf);
			//prints("%c. %s\n", (char)(i+97), choiceTexts[(a[i]).textI]);
		}
	}
	curTextY += 2;
 8001688:	d0a31917 	ldw	r2,-29596(gp)
 800168c:	10800084 	addi	r2,r2,2
 8001690:	d0a31915 	stw	r2,-29596(gp)
	if(curTextY >= (SCRHIGHT - YPADDING) ){
 8001694:	d0e00a17 	ldw	r3,-32728(gp)
 8001698:	d0a00717 	ldw	r2,-32740(gp)
 800169c:	1885c83a 	sub	r2,r3,r2
 80016a0:	d0e31917 	ldw	r3,-29596(gp)
 80016a4:	18800216 	blt	r3,r2,80016b0 <printChoices+0x124>
		curTextY = YPADDING;
 80016a8:	d0a00717 	ldw	r2,-32740(gp)
 80016ac:	d0a31915 	stw	r2,-29596(gp)
	}
	//prints("\n\n");
}
 80016b0:	e037883a 	mov	sp,fp
 80016b4:	dfc00217 	ldw	ra,8(sp)
 80016b8:	df000117 	ldw	fp,4(sp)
 80016bc:	dc000017 	ldw	r16,0(sp)
 80016c0:	dec00304 	addi	sp,sp,12
 80016c4:	f800283a 	ret

080016c8 <blinkText>:

// this function assumes only one line of text, which is sanely selected
void blinkText(int x, int y, char* text){
 80016c8:	defffc04 	addi	sp,sp,-16
 80016cc:	df000315 	stw	fp,12(sp)
 80016d0:	df000304 	addi	fp,sp,12
 80016d4:	e13ffd15 	stw	r4,-12(fp)
 80016d8:	e17ffe15 	stw	r5,-8(fp)
 80016dc:	e1bfff15 	stw	r6,-4(fp)
	// implementation would work better with interrupts
}
 80016e0:	e037883a 	mov	sp,fp
 80016e4:	df000017 	ldw	fp,0(sp)
 80016e8:	dec00104 	addi	sp,sp,4
 80016ec:	f800283a 	ret

080016f0 <waitPress>:

void waitPress(){
 80016f0:	defffd04 	addi	sp,sp,-12
 80016f4:	dfc00215 	stw	ra,8(sp)
 80016f8:	df000115 	stw	fp,4(sp)
 80016fc:	df000104 	addi	fp,sp,4
	int i = 0;
 8001700:	e03fff15 	stw	zero,-4(fp)
	while(!((*press & 0x1))){	// while no key pressed
 8001704:	00000306 	br	8001714 <waitPress+0x24>
		i++;	// wait
 8001708:	e0bfff17 	ldw	r2,-4(fp)
 800170c:	10800044 	addi	r2,r2,1
 8001710:	e0bfff15 	stw	r2,-4(fp)
	// implementation would work better with interrupts
}

void waitPress(){
	int i = 0;
	while(!((*press & 0x1))){	// while no key pressed
 8001714:	d0a00517 	ldw	r2,-32748(gp)
 8001718:	10800003 	ldbu	r2,0(r2)
 800171c:	10803fcc 	andi	r2,r2,255
 8001720:	1080004c 	andi	r2,r2,1
 8001724:	103ff826 	beq	r2,zero,8001708 <waitPress+0x18>
		i++;	// wait
	}
	waitRelease();	// then wait for a release of the key
 8001728:	80017400 	call	8001740 <waitRelease>
}
 800172c:	e037883a 	mov	sp,fp
 8001730:	dfc00117 	ldw	ra,4(sp)
 8001734:	df000017 	ldw	fp,0(sp)
 8001738:	dec00204 	addi	sp,sp,8
 800173c:	f800283a 	ret

08001740 <waitRelease>:

void waitRelease(){
 8001740:	defffe04 	addi	sp,sp,-8
 8001744:	df000115 	stw	fp,4(sp)
 8001748:	df000104 	addi	fp,sp,4
	int i = 0;
 800174c:	e03fff15 	stw	zero,-4(fp)
	while(*press & 0x1){
 8001750:	00000306 	br	8001760 <waitRelease+0x20>
		i++;
 8001754:	e0bfff17 	ldw	r2,-4(fp)
 8001758:	10800044 	addi	r2,r2,1
 800175c:	e0bfff15 	stw	r2,-4(fp)
	waitRelease();	// then wait for a release of the key
}

void waitRelease(){
	int i = 0;
	while(*press & 0x1){
 8001760:	d0a00517 	ldw	r2,-32748(gp)
 8001764:	10800003 	ldbu	r2,0(r2)
 8001768:	10803fcc 	andi	r2,r2,255
 800176c:	1080004c 	andi	r2,r2,1
 8001770:	103ff81e 	bne	r2,zero,8001754 <waitRelease+0x14>
		i++;
	}
}
 8001774:	e037883a 	mov	sp,fp
 8001778:	df000017 	ldw	fp,0(sp)
 800177c:	dec00104 	addi	sp,sp,4
 8001780:	f800283a 	ret

08001784 <addToScreen>:

void addToScreen(int x, char* text_ptr)
{
 8001784:	deffe204 	addi	sp,sp,-120
 8001788:	dfc01d15 	stw	ra,116(sp)
 800178c:	df001c15 	stw	fp,112(sp)
 8001790:	df001c04 	addi	fp,sp,112
 8001794:	e13ffe15 	stw	r4,-8(fp)
 8001798:	e17fff15 	stw	r5,-4(fp)
	//char cur = text_ptr[0];
	char buf[100];	// buffer to parse multi-line strings
	buf[0] = '\0'; // init first one, in case we are passed a string of just '\0'
 800179c:	e03fe505 	stb	zero,-108(fp)
	int pos = 0;
 80017a0:	e03fe415 	stw	zero,-112(fp)

	while ( *(text_ptr) ){	// while char array not terminated
 80017a4:	00004506 	br	80018bc <addToScreen+0x138>
		if(*(text_ptr) == '\n'){	// if current char is a newline
 80017a8:	e0bfff17 	ldw	r2,-4(fp)
 80017ac:	10800003 	ldbu	r2,0(r2)
 80017b0:	10803fcc 	andi	r2,r2,255
 80017b4:	1080201c 	xori	r2,r2,128
 80017b8:	10bfe004 	addi	r2,r2,-128
 80017bc:	10800298 	cmpnei	r2,r2,10
 80017c0:	1000161e 	bne	r2,zero,800181c <addToScreen+0x98>
			buf[pos] = '\0';		// terminate the buffer
 80017c4:	e0ffe504 	addi	r3,fp,-108
 80017c8:	e0bfe417 	ldw	r2,-112(fp)
 80017cc:	1885883a 	add	r2,r3,r2
 80017d0:	10000005 	stb	zero,0(r2)
			VGA_text(x, curTextY, buf);	// push to screen
 80017d4:	d0e31917 	ldw	r3,-29596(gp)
 80017d8:	e0bfe504 	addi	r2,fp,-108
 80017dc:	e13ffe17 	ldw	r4,-8(fp)
 80017e0:	180b883a 	mov	r5,r3
 80017e4:	100d883a 	mov	r6,r2
 80017e8:	8001a8c0 	call	8001a8c <VGA_text>
			pos = 0;				// reset buffer position
 80017ec:	e03fe415 	stw	zero,-112(fp)

			curTextY++;				// increment Y, with bounds
 80017f0:	d0a31917 	ldw	r2,-29596(gp)
 80017f4:	10800044 	addi	r2,r2,1
 80017f8:	d0a31915 	stw	r2,-29596(gp)
			if(curTextY >= SCRHIGHT - YPADDING){
 80017fc:	d0e00a17 	ldw	r3,-32728(gp)
 8001800:	d0a00717 	ldw	r2,-32740(gp)
 8001804:	1885c83a 	sub	r2,r3,r2
 8001808:	d0e31917 	ldw	r3,-29596(gp)
 800180c:	18802816 	blt	r3,r2,80018b0 <addToScreen+0x12c>
				curTextY = YPADDING;
 8001810:	d0a00717 	ldw	r2,-32740(gp)
 8001814:	d0a31915 	stw	r2,-29596(gp)
 8001818:	00002506 	br	80018b0 <addToScreen+0x12c>
			}
		}
		else{	// if current char isn't a newline
			if(pos + x >= (SCRWIDTH - x) ){ // we hit the edge of our writable screen space
 800181c:	e0ffe417 	ldw	r3,-112(fp)
 8001820:	e0bffe17 	ldw	r2,-8(fp)
 8001824:	1887883a 	add	r3,r3,r2
 8001828:	d1200917 	ldw	r4,-32732(gp)
 800182c:	e0bffe17 	ldw	r2,-8(fp)
 8001830:	2085c83a 	sub	r2,r4,r2
 8001834:	18801516 	blt	r3,r2,800188c <addToScreen+0x108>
				buf[pos] = '\0';		// terminate the buffer
 8001838:	e0ffe504 	addi	r3,fp,-108
 800183c:	e0bfe417 	ldw	r2,-112(fp)
 8001840:	1885883a 	add	r2,r3,r2
 8001844:	10000005 	stb	zero,0(r2)
				VGA_text(x, curTextY, buf);	// push to screen
 8001848:	d0e31917 	ldw	r3,-29596(gp)
 800184c:	e0bfe504 	addi	r2,fp,-108
 8001850:	e13ffe17 	ldw	r4,-8(fp)
 8001854:	180b883a 	mov	r5,r3
 8001858:	100d883a 	mov	r6,r2
 800185c:	8001a8c0 	call	8001a8c <VGA_text>
				pos = 0;				// reset buffer position
 8001860:	e03fe415 	stw	zero,-112(fp)

				curTextY++;				// increment Y, with bounds
 8001864:	d0a31917 	ldw	r2,-29596(gp)
 8001868:	10800044 	addi	r2,r2,1
 800186c:	d0a31915 	stw	r2,-29596(gp)
				if(curTextY >= SCRHIGHT - YPADDING){
 8001870:	d0e00a17 	ldw	r3,-32728(gp)
 8001874:	d0a00717 	ldw	r2,-32740(gp)
 8001878:	1885c83a 	sub	r2,r3,r2
 800187c:	d0e31917 	ldw	r3,-29596(gp)
 8001880:	18800216 	blt	r3,r2,800188c <addToScreen+0x108>
					curTextY = YPADDING;
 8001884:	d0a00717 	ldw	r2,-32740(gp)
 8001888:	d0a31915 	stw	r2,-29596(gp)
				}
			}

			buf[pos] = *(text_ptr);	// add it to the buffer
 800188c:	e0bfff17 	ldw	r2,-4(fp)
 8001890:	10c00003 	ldbu	r3,0(r2)
 8001894:	e13fe504 	addi	r4,fp,-108
 8001898:	e0bfe417 	ldw	r2,-112(fp)
 800189c:	2085883a 	add	r2,r4,r2
 80018a0:	10c00005 	stb	r3,0(r2)
			pos++;
 80018a4:	e0bfe417 	ldw	r2,-112(fp)
 80018a8:	10800044 	addi	r2,r2,1
 80018ac:	e0bfe415 	stw	r2,-112(fp)
		}

		text_ptr++;	// move on
 80018b0:	e0bfff17 	ldw	r2,-4(fp)
 80018b4:	10800044 	addi	r2,r2,1
 80018b8:	e0bfff15 	stw	r2,-4(fp)
	//char cur = text_ptr[0];
	char buf[100];	// buffer to parse multi-line strings
	buf[0] = '\0'; // init first one, in case we are passed a string of just '\0'
	int pos = 0;

	while ( *(text_ptr) ){	// while char array not terminated
 80018bc:	e0bfff17 	ldw	r2,-4(fp)
 80018c0:	10800003 	ldbu	r2,0(r2)
 80018c4:	10803fcc 	andi	r2,r2,255
 80018c8:	1080201c 	xori	r2,r2,128
 80018cc:	10bfe004 	addi	r2,r2,-128
 80018d0:	103fb51e 	bne	r2,zero,80017a8 <addToScreen+0x24>
			pos++;
		}

		text_ptr++;	// move on
	}
	buf[pos] = '\0';
 80018d4:	e0ffe504 	addi	r3,fp,-108
 80018d8:	e0bfe417 	ldw	r2,-112(fp)
 80018dc:	1885883a 	add	r2,r3,r2
 80018e0:	10000005 	stb	zero,0(r2)
	VGA_text(x, curTextY, buf);	// push out whatever's left in the buffer (last sentence)
 80018e4:	d0e31917 	ldw	r3,-29596(gp)
 80018e8:	e0bfe504 	addi	r2,fp,-108
 80018ec:	e13ffe17 	ldw	r4,-8(fp)
 80018f0:	180b883a 	mov	r5,r3
 80018f4:	100d883a 	mov	r6,r2
 80018f8:	8001a8c0 	call	8001a8c <VGA_text>
	//VGA_text(x, curTextY, text_ptr);
	curTextY++;
 80018fc:	d0a31917 	ldw	r2,-29596(gp)
 8001900:	10800044 	addi	r2,r2,1
 8001904:	d0a31915 	stw	r2,-29596(gp)
	if(curTextY >= (SCRHIGHT - YPADDING) ){
 8001908:	d0e00a17 	ldw	r3,-32728(gp)
 800190c:	d0a00717 	ldw	r2,-32740(gp)
 8001910:	1885c83a 	sub	r2,r3,r2
 8001914:	d0e31917 	ldw	r3,-29596(gp)
 8001918:	18800216 	blt	r3,r2,8001924 <addToScreen+0x1a0>
		curTextY = YPADDING;
 800191c:	d0a00717 	ldw	r2,-32740(gp)
 8001920:	d0a31915 	stw	r2,-29596(gp)
	}
}
 8001924:	e037883a 	mov	sp,fp
 8001928:	dfc00117 	ldw	ra,4(sp)
 800192c:	df000017 	ldw	fp,0(sp)
 8001930:	dec00204 	addi	sp,sp,8
 8001934:	f800283a 	ret

08001938 <initFrame>:

void initFrame()
{
 8001938:	defffe04 	addi	sp,sp,-8
 800193c:	dfc00115 	stw	ra,4(sp)
 8001940:	df000015 	stw	fp,0(sp)
 8001944:	d839883a 	mov	fp,sp
	flush();
 8001948:	80019680 	call	8001968 <flush>
	curTextY = YPADDING;
 800194c:	d0a00717 	ldw	r2,-32740(gp)
 8001950:	d0a31915 	stw	r2,-29596(gp)
}
 8001954:	e037883a 	mov	sp,fp
 8001958:	dfc00117 	ldw	ra,4(sp)
 800195c:	df000017 	ldw	fp,0(sp)
 8001960:	dec00204 	addi	sp,sp,8
 8001964:	f800283a 	ret

08001968 <flush>:

void flush(){
 8001968:	defffe04 	addi	sp,sp,-8
 800196c:	dfc00115 	stw	ra,4(sp)
 8001970:	df000015 	stw	fp,0(sp)
 8001974:	d839883a 	mov	fp,sp
	flushPixels();
 8001978:	80019940 	call	8001994 <flushPixels>
	flushChar();
 800197c:	80019e80 	call	80019e8 <flushChar>
}
 8001980:	e037883a 	mov	sp,fp
 8001984:	dfc00117 	ldw	ra,4(sp)
 8001988:	df000017 	ldw	fp,0(sp)
 800198c:	dec00204 	addi	sp,sp,8
 8001990:	f800283a 	ret

08001994 <flushPixels>:

// this function is cursed i think
void flushPixels(){
 8001994:	defffd04 	addi	sp,sp,-12
 8001998:	dfc00215 	stw	ra,8(sp)
 800199c:	df000115 	stw	fp,4(sp)
 80019a0:	df000104 	addi	fp,sp,4
	VGA_box (0, 0, SCRPIXW, SCRPIXH, BGCOLOR);
 80019a4:	d0e00b17 	ldw	r3,-32724(gp)
 80019a8:	d0a00c17 	ldw	r2,-32720(gp)
 80019ac:	d120060b 	ldhu	r4,-32744(gp)
 80019b0:	213fffcc 	andi	r4,r4,65535
 80019b4:	2120001c 	xori	r4,r4,32768
 80019b8:	21200004 	addi	r4,r4,-32768
 80019bc:	d9000015 	stw	r4,0(sp)
 80019c0:	0009883a 	mov	r4,zero
 80019c4:	000b883a 	mov	r5,zero
 80019c8:	180d883a 	mov	r6,r3
 80019cc:	100f883a 	mov	r7,r2
 80019d0:	8001b140 	call	8001b14 <VGA_box>
}
 80019d4:	e037883a 	mov	sp,fp
 80019d8:	dfc00117 	ldw	ra,4(sp)
 80019dc:	df000017 	ldw	fp,0(sp)
 80019e0:	dec00204 	addi	sp,sp,8
 80019e4:	f800283a 	ret

080019e8 <flushChar>:

void flushChar()
{
 80019e8:	deffe404 	addi	sp,sp,-112
 80019ec:	dfc01b15 	stw	ra,108(sp)
 80019f0:	df001a15 	stw	fp,104(sp)
 80019f4:	df001a04 	addi	fp,sp,104
	char temp[100];
	//int screenWidth = 81;
	//int screenHeight = 59;
	int i = 0;
 80019f8:	e03fe615 	stw	zero,-104(fp)
	for(i = 0; i < SCRWIDTH-1; i++){
 80019fc:	e03fe615 	stw	zero,-104(fp)
 8001a00:	00000806 	br	8001a24 <flushChar+0x3c>
		temp[i] = ' ';
 8001a04:	e0ffe704 	addi	r3,fp,-100
 8001a08:	e0bfe617 	ldw	r2,-104(fp)
 8001a0c:	1885883a 	add	r2,r3,r2
 8001a10:	00c00804 	movi	r3,32
 8001a14:	10c00005 	stb	r3,0(r2)
{
	char temp[100];
	//int screenWidth = 81;
	//int screenHeight = 59;
	int i = 0;
	for(i = 0; i < SCRWIDTH-1; i++){
 8001a18:	e0bfe617 	ldw	r2,-104(fp)
 8001a1c:	10800044 	addi	r2,r2,1
 8001a20:	e0bfe615 	stw	r2,-104(fp)
 8001a24:	d0a00917 	ldw	r2,-32732(gp)
 8001a28:	10bfffc4 	addi	r2,r2,-1
 8001a2c:	e0ffe617 	ldw	r3,-104(fp)
 8001a30:	18bff416 	blt	r3,r2,8001a04 <flushChar+0x1c>
		temp[i] = ' ';
	}
	temp[SCRWIDTH] = '\0';
 8001a34:	d0a00917 	ldw	r2,-32732(gp)
 8001a38:	e0ffe704 	addi	r3,fp,-100
 8001a3c:	1885883a 	add	r2,r3,r2
 8001a40:	10000005 	stb	zero,0(r2)

	for(i = 0; i <= SCRHIGHT; i++)
 8001a44:	e03fe615 	stw	zero,-104(fp)
 8001a48:	00000806 	br	8001a6c <flushChar+0x84>
		VGA_text(0, i, temp);
 8001a4c:	e0bfe704 	addi	r2,fp,-100
 8001a50:	0009883a 	mov	r4,zero
 8001a54:	e17fe617 	ldw	r5,-104(fp)
 8001a58:	100d883a 	mov	r6,r2
 8001a5c:	8001a8c0 	call	8001a8c <VGA_text>
	for(i = 0; i < SCRWIDTH-1; i++){
		temp[i] = ' ';
	}
	temp[SCRWIDTH] = '\0';

	for(i = 0; i <= SCRHIGHT; i++)
 8001a60:	e0bfe617 	ldw	r2,-104(fp)
 8001a64:	10800044 	addi	r2,r2,1
 8001a68:	e0bfe615 	stw	r2,-104(fp)
 8001a6c:	d0e00a17 	ldw	r3,-32728(gp)
 8001a70:	e0bfe617 	ldw	r2,-104(fp)
 8001a74:	18bff50e 	bge	r3,r2,8001a4c <flushChar+0x64>
		VGA_text(0, i, temp);
}
 8001a78:	e037883a 	mov	sp,fp
 8001a7c:	dfc00117 	ldw	ra,4(sp)
 8001a80:	df000017 	ldw	fp,0(sp)
 8001a84:	dec00204 	addi	sp,sp,8
 8001a88:	f800283a 	ret

08001a8c <VGA_text>:

/****************************************************************************************
 * Subroutine to send a string of text to the VGA monitor
****************************************************************************************/
void VGA_text(int x, int y, char * text_ptr)
{
 8001a8c:	defffb04 	addi	sp,sp,-20
 8001a90:	df000415 	stw	fp,16(sp)
 8001a94:	df000404 	addi	fp,sp,16
 8001a98:	e13ffd15 	stw	r4,-12(fp)
 8001a9c:	e17ffe15 	stw	r5,-8(fp)
 8001aa0:	e1bfff15 	stw	r6,-4(fp)
	int offset;

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
 8001aa4:	e0bffe17 	ldw	r2,-8(fp)
 8001aa8:	100691fa 	slli	r3,r2,7
 8001aac:	e0bffd17 	ldw	r2,-12(fp)
 8001ab0:	1885883a 	add	r2,r3,r2
 8001ab4:	e0bffc15 	stw	r2,-16(fp)
	while ( *(text_ptr) )
 8001ab8:	00000c06 	br	8001aec <VGA_text+0x60>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
 8001abc:	d0e00217 	ldw	r3,-32760(gp)
 8001ac0:	e0bffc17 	ldw	r2,-16(fp)
 8001ac4:	1885883a 	add	r2,r3,r2
 8001ac8:	e0ffff17 	ldw	r3,-4(fp)
 8001acc:	18c00003 	ldbu	r3,0(r3)
 8001ad0:	10c00005 	stb	r3,0(r2)
		++text_ptr;
 8001ad4:	e0bfff17 	ldw	r2,-4(fp)
 8001ad8:	10800044 	addi	r2,r2,1
 8001adc:	e0bfff15 	stw	r2,-4(fp)
		++offset;
 8001ae0:	e0bffc17 	ldw	r2,-16(fp)
 8001ae4:	10800044 	addi	r2,r2,1
 8001ae8:	e0bffc15 	stw	r2,-16(fp)
{
	int offset;

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
	while ( *(text_ptr) )
 8001aec:	e0bfff17 	ldw	r2,-4(fp)
 8001af0:	10800003 	ldbu	r2,0(r2)
 8001af4:	10803fcc 	andi	r2,r2,255
 8001af8:	1080201c 	xori	r2,r2,128
 8001afc:	10bfe004 	addi	r2,r2,-128
 8001b00:	103fee1e 	bne	r2,zero,8001abc <VGA_text+0x30>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
		++text_ptr;
		++offset;
	}
}
 8001b04:	e037883a 	mov	sp,fp
 8001b08:	df000017 	ldw	fp,0(sp)
 8001b0c:	dec00104 	addi	sp,sp,4
 8001b10:	f800283a 	ret

08001b14 <VGA_box>:

/****************************************************************************************
 * Draw a filled rectangle on the VGA monitor
****************************************************************************************/
void VGA_box(int x1, int y1, int x2, int y2, short pixel_color)
{
 8001b14:	defff704 	addi	sp,sp,-36
 8001b18:	df000815 	stw	fp,32(sp)
 8001b1c:	df000804 	addi	fp,sp,32
 8001b20:	e13ffb15 	stw	r4,-20(fp)
 8001b24:	e17ffc15 	stw	r5,-16(fp)
 8001b28:	e1bffd15 	stw	r6,-12(fp)
 8001b2c:	e1fffe15 	stw	r7,-8(fp)
 8001b30:	e0800117 	ldw	r2,4(fp)
 8001b34:	e0bfff0d 	sth	r2,-4(fp)
	int offset, row, col;

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
 8001b38:	e0bffc17 	ldw	r2,-16(fp)
 8001b3c:	e0bff815 	stw	r2,-32(fp)
 8001b40:	00001706 	br	8001ba0 <VGA_box+0x8c>
	{
		col = x1;
 8001b44:	e0bffb17 	ldw	r2,-20(fp)
 8001b48:	e0bff915 	stw	r2,-28(fp)
		while (col <= x2)
 8001b4c:	00000e06 	br	8001b88 <VGA_box+0x74>
		{
			offset = (row << 9) + col;
 8001b50:	e0bff817 	ldw	r2,-32(fp)
 8001b54:	1006927a 	slli	r3,r2,9
 8001b58:	e0bff917 	ldw	r2,-28(fp)
 8001b5c:	1885883a 	add	r2,r3,r2
 8001b60:	e0bffa15 	stw	r2,-24(fp)
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
 8001b64:	d0e00317 	ldw	r3,-32756(gp)
 8001b68:	e0bffa17 	ldw	r2,-24(fp)
 8001b6c:	1085883a 	add	r2,r2,r2
 8001b70:	1885883a 	add	r2,r3,r2
 8001b74:	e0ffff0b 	ldhu	r3,-4(fp)
 8001b78:	10c0000d 	sth	r3,0(r2)
			++col;
 8001b7c:	e0bff917 	ldw	r2,-28(fp)
 8001b80:	10800044 	addi	r2,r2,1
 8001b84:	e0bff915 	stw	r2,-28(fp)

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
	{
		col = x1;
		while (col <= x2)
 8001b88:	e0bff917 	ldw	r2,-28(fp)
 8001b8c:	e0fffd17 	ldw	r3,-12(fp)
 8001b90:	18bfef0e 	bge	r3,r2,8001b50 <VGA_box+0x3c>
void VGA_box(int x1, int y1, int x2, int y2, short pixel_color)
{
	int offset, row, col;

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
 8001b94:	e0bff817 	ldw	r2,-32(fp)
 8001b98:	10800044 	addi	r2,r2,1
 8001b9c:	e0bff815 	stw	r2,-32(fp)
 8001ba0:	e0bff817 	ldw	r2,-32(fp)
 8001ba4:	e0fffe17 	ldw	r3,-8(fp)
 8001ba8:	18bfe60e 	bge	r3,r2,8001b44 <VGA_box+0x30>
			offset = (row << 9) + col;
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
			++col;
		}
	}
}
 8001bac:	e037883a 	mov	sp,fp
 8001bb0:	df000017 	ldw	fp,0(sp)
 8001bb4:	dec00104 	addi	sp,sp,4
 8001bb8:	f800283a 	ret

08001bbc <__mulsi3>:
 8001bbc:	0005883a 	mov	r2,zero
 8001bc0:	20000726 	beq	r4,zero,8001be0 <__mulsi3+0x24>
 8001bc4:	20c0004c 	andi	r3,r4,1
 8001bc8:	2008d07a 	srli	r4,r4,1
 8001bcc:	18000126 	beq	r3,zero,8001bd4 <__mulsi3+0x18>
 8001bd0:	1145883a 	add	r2,r2,r5
 8001bd4:	294b883a 	add	r5,r5,r5
 8001bd8:	203ffa1e 	bne	r4,zero,8001bc4 <__mulsi3+0x8>
 8001bdc:	f800283a 	ret
 8001be0:	f800283a 	ret

08001be4 <malloc>:
 8001be4:	00820074 	movhi	r2,2049
 8001be8:	10bae304 	addi	r2,r2,-5236
 8001bec:	200b883a 	mov	r5,r4
 8001bf0:	11000017 	ldw	r4,0(r2)
 8001bf4:	8001c0c1 	jmpi	8001c0c <_malloc_r>

08001bf8 <free>:
 8001bf8:	00820074 	movhi	r2,2049
 8001bfc:	10bae304 	addi	r2,r2,-5236
 8001c00:	200b883a 	mov	r5,r4
 8001c04:	11000017 	ldw	r4,0(r2)
 8001c08:	80064d81 	jmpi	80064d8 <_free_r>

08001c0c <_malloc_r>:
 8001c0c:	defff604 	addi	sp,sp,-40
 8001c10:	dc800215 	stw	r18,8(sp)
 8001c14:	dfc00915 	stw	ra,36(sp)
 8001c18:	df000815 	stw	fp,32(sp)
 8001c1c:	ddc00715 	stw	r23,28(sp)
 8001c20:	dd800615 	stw	r22,24(sp)
 8001c24:	dd400515 	stw	r21,20(sp)
 8001c28:	dd000415 	stw	r20,16(sp)
 8001c2c:	dcc00315 	stw	r19,12(sp)
 8001c30:	dc400115 	stw	r17,4(sp)
 8001c34:	dc000015 	stw	r16,0(sp)
 8001c38:	288002c4 	addi	r2,r5,11
 8001c3c:	00c00584 	movi	r3,22
 8001c40:	2025883a 	mov	r18,r4
 8001c44:	18802b2e 	bgeu	r3,r2,8001cf4 <_malloc_r+0xe8>
 8001c48:	047ffe04 	movi	r17,-8
 8001c4c:	1462703a 	and	r17,r2,r17
 8001c50:	88002a16 	blt	r17,zero,8001cfc <_malloc_r+0xf0>
 8001c54:	89402936 	bltu	r17,r5,8001cfc <_malloc_r+0xf0>
 8001c58:	9009883a 	mov	r4,r18
 8001c5c:	800b83c0 	call	800b83c <__malloc_lock>
 8001c60:	00807dc4 	movi	r2,503
 8001c64:	14402936 	bltu	r2,r17,8001d0c <_malloc_r+0x100>
 8001c68:	8808d0fa 	srli	r4,r17,3
 8001c6c:	04c20074 	movhi	r19,2049
 8001c70:	9cf83304 	addi	r19,r19,-7988
 8001c74:	2105883a 	add	r2,r4,r4
 8001c78:	1085883a 	add	r2,r2,r2
 8001c7c:	1085883a 	add	r2,r2,r2
 8001c80:	9885883a 	add	r2,r19,r2
 8001c84:	14000317 	ldw	r16,12(r2)
 8001c88:	80815526 	beq	r16,r2,80021e0 <_malloc_r+0x5d4>
 8001c8c:	81000117 	ldw	r4,4(r16)
 8001c90:	00bfff04 	movi	r2,-4
 8001c94:	80c00317 	ldw	r3,12(r16)
 8001c98:	2084703a 	and	r2,r4,r2
 8001c9c:	8085883a 	add	r2,r16,r2
 8001ca0:	11800117 	ldw	r6,4(r2)
 8001ca4:	81400217 	ldw	r5,8(r16)
 8001ca8:	9009883a 	mov	r4,r18
 8001cac:	31800054 	ori	r6,r6,1
 8001cb0:	11800115 	stw	r6,4(r2)
 8001cb4:	28c00315 	stw	r3,12(r5)
 8001cb8:	19400215 	stw	r5,8(r3)
 8001cbc:	800b85c0 	call	800b85c <__malloc_unlock>
 8001cc0:	80800204 	addi	r2,r16,8
 8001cc4:	dfc00917 	ldw	ra,36(sp)
 8001cc8:	df000817 	ldw	fp,32(sp)
 8001ccc:	ddc00717 	ldw	r23,28(sp)
 8001cd0:	dd800617 	ldw	r22,24(sp)
 8001cd4:	dd400517 	ldw	r21,20(sp)
 8001cd8:	dd000417 	ldw	r20,16(sp)
 8001cdc:	dcc00317 	ldw	r19,12(sp)
 8001ce0:	dc800217 	ldw	r18,8(sp)
 8001ce4:	dc400117 	ldw	r17,4(sp)
 8001ce8:	dc000017 	ldw	r16,0(sp)
 8001cec:	dec00a04 	addi	sp,sp,40
 8001cf0:	f800283a 	ret
 8001cf4:	04400404 	movi	r17,16
 8001cf8:	897fd72e 	bgeu	r17,r5,8001c58 <_malloc_r+0x4c>
 8001cfc:	00800304 	movi	r2,12
 8001d00:	90800015 	stw	r2,0(r18)
 8001d04:	0005883a 	mov	r2,zero
 8001d08:	003fee06 	br	8001cc4 <_malloc_r+0xb8>
 8001d0c:	8808d27a 	srli	r4,r17,9
 8001d10:	20007126 	beq	r4,zero,8001ed8 <_malloc_r+0x2cc>
 8001d14:	00800104 	movi	r2,4
 8001d18:	1100eb36 	bltu	r2,r4,80020c8 <_malloc_r+0x4bc>
 8001d1c:	8808d1ba 	srli	r4,r17,6
 8001d20:	21000e04 	addi	r4,r4,56
 8001d24:	210b883a 	add	r5,r4,r4
 8001d28:	294b883a 	add	r5,r5,r5
 8001d2c:	294b883a 	add	r5,r5,r5
 8001d30:	04c20074 	movhi	r19,2049
 8001d34:	9cf83304 	addi	r19,r19,-7988
 8001d38:	994b883a 	add	r5,r19,r5
 8001d3c:	2c000317 	ldw	r16,12(r5)
 8001d40:	2c000e26 	beq	r5,r16,8001d7c <_malloc_r+0x170>
 8001d44:	80c00117 	ldw	r3,4(r16)
 8001d48:	01ffff04 	movi	r7,-4
 8001d4c:	018003c4 	movi	r6,15
 8001d50:	19c6703a 	and	r3,r3,r7
 8001d54:	1c45c83a 	sub	r2,r3,r17
 8001d58:	30800716 	blt	r6,r2,8001d78 <_malloc_r+0x16c>
 8001d5c:	1000610e 	bge	r2,zero,8001ee4 <_malloc_r+0x2d8>
 8001d60:	84000317 	ldw	r16,12(r16)
 8001d64:	2c000526 	beq	r5,r16,8001d7c <_malloc_r+0x170>
 8001d68:	80c00117 	ldw	r3,4(r16)
 8001d6c:	19c6703a 	and	r3,r3,r7
 8001d70:	1c45c83a 	sub	r2,r3,r17
 8001d74:	30bff90e 	bge	r6,r2,8001d5c <_malloc_r+0x150>
 8001d78:	213fffc4 	addi	r4,r4,-1
 8001d7c:	21000044 	addi	r4,r4,1
 8001d80:	9c000417 	ldw	r16,16(r19)
 8001d84:	00c20074 	movhi	r3,2049
 8001d88:	18f83304 	addi	r3,r3,-7988
 8001d8c:	1a400204 	addi	r9,r3,8
 8001d90:	8240ff26 	beq	r16,r9,8002190 <_malloc_r+0x584>
 8001d94:	81400117 	ldw	r5,4(r16)
 8001d98:	00bfff04 	movi	r2,-4
 8001d9c:	018003c4 	movi	r6,15
 8001da0:	2884703a 	and	r2,r5,r2
 8001da4:	144bc83a 	sub	r5,r2,r17
 8001da8:	3140ea16 	blt	r6,r5,8002154 <_malloc_r+0x548>
 8001dac:	1a400515 	stw	r9,20(r3)
 8001db0:	1a400415 	stw	r9,16(r3)
 8001db4:	2800570e 	bge	r5,zero,8001f14 <_malloc_r+0x308>
 8001db8:	01407fc4 	movi	r5,511
 8001dbc:	2880ca36 	bltu	r5,r2,80020e8 <_malloc_r+0x4dc>
 8001dc0:	1004d0fa 	srli	r2,r2,3
 8001dc4:	02000044 	movi	r8,1
 8001dc8:	19c00117 	ldw	r7,4(r3)
 8001dcc:	108b883a 	add	r5,r2,r2
 8001dd0:	294b883a 	add	r5,r5,r5
 8001dd4:	1005d0ba 	srai	r2,r2,2
 8001dd8:	294b883a 	add	r5,r5,r5
 8001ddc:	28cb883a 	add	r5,r5,r3
 8001de0:	29800217 	ldw	r6,8(r5)
 8001de4:	4084983a 	sll	r2,r8,r2
 8001de8:	81400315 	stw	r5,12(r16)
 8001dec:	81800215 	stw	r6,8(r16)
 8001df0:	11c4b03a 	or	r2,r2,r7
 8001df4:	18800115 	stw	r2,4(r3)
 8001df8:	2c000215 	stw	r16,8(r5)
 8001dfc:	34000315 	stw	r16,12(r6)
 8001e00:	200bd0ba 	srai	r5,r4,2
 8001e04:	00c00044 	movi	r3,1
 8001e08:	194a983a 	sll	r5,r3,r5
 8001e0c:	11404936 	bltu	r2,r5,8001f34 <_malloc_r+0x328>
 8001e10:	1146703a 	and	r3,r2,r5
 8001e14:	18000a1e 	bne	r3,zero,8001e40 <_malloc_r+0x234>
 8001e18:	00ffff04 	movi	r3,-4
 8001e1c:	294b883a 	add	r5,r5,r5
 8001e20:	20c8703a 	and	r4,r4,r3
 8001e24:	1146703a 	and	r3,r2,r5
 8001e28:	21000104 	addi	r4,r4,4
 8001e2c:	1800041e 	bne	r3,zero,8001e40 <_malloc_r+0x234>
 8001e30:	294b883a 	add	r5,r5,r5
 8001e34:	1146703a 	and	r3,r2,r5
 8001e38:	21000104 	addi	r4,r4,4
 8001e3c:	183ffc26 	beq	r3,zero,8001e30 <_malloc_r+0x224>
 8001e40:	023fff04 	movi	r8,-4
 8001e44:	01c003c4 	movi	r7,15
 8001e48:	2105883a 	add	r2,r4,r4
 8001e4c:	1085883a 	add	r2,r2,r2
 8001e50:	1085883a 	add	r2,r2,r2
 8001e54:	9899883a 	add	r12,r19,r2
 8001e58:	62800304 	addi	r10,r12,12
 8001e5c:	2017883a 	mov	r11,r4
 8001e60:	54000017 	ldw	r16,0(r10)
 8001e64:	51bffd04 	addi	r6,r10,-12
 8001e68:	8180041e 	bne	r16,r6,8001e7c <_malloc_r+0x270>
 8001e6c:	0000ca06 	br	8002198 <_malloc_r+0x58c>
 8001e70:	10001c0e 	bge	r2,zero,8001ee4 <_malloc_r+0x2d8>
 8001e74:	84000317 	ldw	r16,12(r16)
 8001e78:	8180c726 	beq	r16,r6,8002198 <_malloc_r+0x58c>
 8001e7c:	80c00117 	ldw	r3,4(r16)
 8001e80:	1a06703a 	and	r3,r3,r8
 8001e84:	1c45c83a 	sub	r2,r3,r17
 8001e88:	38bff90e 	bge	r7,r2,8001e70 <_malloc_r+0x264>
 8001e8c:	81000317 	ldw	r4,12(r16)
 8001e90:	81400217 	ldw	r5,8(r16)
 8001e94:	8447883a 	add	r3,r16,r17
 8001e98:	8c400054 	ori	r17,r17,1
 8001e9c:	29000315 	stw	r4,12(r5)
 8001ea0:	21400215 	stw	r5,8(r4)
 8001ea4:	84400115 	stw	r17,4(r16)
 8001ea8:	1889883a 	add	r4,r3,r2
 8001eac:	11400054 	ori	r5,r2,1
 8001eb0:	98c00515 	stw	r3,20(r19)
 8001eb4:	98c00415 	stw	r3,16(r19)
 8001eb8:	20800015 	stw	r2,0(r4)
 8001ebc:	1a400315 	stw	r9,12(r3)
 8001ec0:	1a400215 	stw	r9,8(r3)
 8001ec4:	19400115 	stw	r5,4(r3)
 8001ec8:	9009883a 	mov	r4,r18
 8001ecc:	800b85c0 	call	800b85c <__malloc_unlock>
 8001ed0:	80800204 	addi	r2,r16,8
 8001ed4:	003f7b06 	br	8001cc4 <_malloc_r+0xb8>
 8001ed8:	8808d0fa 	srli	r4,r17,3
 8001edc:	210b883a 	add	r5,r4,r4
 8001ee0:	003f9106 	br	8001d28 <_malloc_r+0x11c>
 8001ee4:	80c7883a 	add	r3,r16,r3
 8001ee8:	19400117 	ldw	r5,4(r3)
 8001eec:	80800317 	ldw	r2,12(r16)
 8001ef0:	81000217 	ldw	r4,8(r16)
 8001ef4:	29400054 	ori	r5,r5,1
 8001ef8:	19400115 	stw	r5,4(r3)
 8001efc:	20800315 	stw	r2,12(r4)
 8001f00:	11000215 	stw	r4,8(r2)
 8001f04:	9009883a 	mov	r4,r18
 8001f08:	800b85c0 	call	800b85c <__malloc_unlock>
 8001f0c:	80800204 	addi	r2,r16,8
 8001f10:	003f6c06 	br	8001cc4 <_malloc_r+0xb8>
 8001f14:	8085883a 	add	r2,r16,r2
 8001f18:	10c00117 	ldw	r3,4(r2)
 8001f1c:	9009883a 	mov	r4,r18
 8001f20:	18c00054 	ori	r3,r3,1
 8001f24:	10c00115 	stw	r3,4(r2)
 8001f28:	800b85c0 	call	800b85c <__malloc_unlock>
 8001f2c:	80800204 	addi	r2,r16,8
 8001f30:	003f6406 	br	8001cc4 <_malloc_r+0xb8>
 8001f34:	9c000217 	ldw	r16,8(r19)
 8001f38:	00bfff04 	movi	r2,-4
 8001f3c:	85400117 	ldw	r21,4(r16)
 8001f40:	a8aa703a 	and	r21,r21,r2
 8001f44:	ac400336 	bltu	r21,r17,8001f54 <_malloc_r+0x348>
 8001f48:	ac45c83a 	sub	r2,r21,r17
 8001f4c:	00c003c4 	movi	r3,15
 8001f50:	18805316 	blt	r3,r2,80020a0 <_malloc_r+0x494>
 8001f54:	d5e31d17 	ldw	r23,-29580(gp)
 8001f58:	d0e01717 	ldw	r3,-32676(gp)
 8001f5c:	00bfffc4 	movi	r2,-1
 8001f60:	8579883a 	add	fp,r16,r21
 8001f64:	8def883a 	add	r23,r17,r23
 8001f68:	1880d226 	beq	r3,r2,80022b4 <_malloc_r+0x6a8>
 8001f6c:	bdc403c4 	addi	r23,r23,4111
 8001f70:	00bc0004 	movi	r2,-4096
 8001f74:	b8ae703a 	and	r23,r23,r2
 8001f78:	9009883a 	mov	r4,r18
 8001f7c:	b80b883a 	mov	r5,r23
 8001f80:	80024d00 	call	80024d0 <_sbrk_r>
 8001f84:	1029883a 	mov	r20,r2
 8001f88:	00bfffc4 	movi	r2,-1
 8001f8c:	a080d126 	beq	r20,r2,80022d4 <_malloc_r+0x6c8>
 8001f90:	a7009f36 	bltu	r20,fp,8002210 <_malloc_r+0x604>
 8001f94:	05820074 	movhi	r22,2049
 8001f98:	b5bdee04 	addi	r22,r22,-2120
 8001f9c:	b0800017 	ldw	r2,0(r22)
 8001fa0:	b885883a 	add	r2,r23,r2
 8001fa4:	b0800015 	stw	r2,0(r22)
 8001fa8:	e500cf26 	beq	fp,r20,80022e8 <_malloc_r+0x6dc>
 8001fac:	d1201717 	ldw	r4,-32676(gp)
 8001fb0:	00ffffc4 	movi	r3,-1
 8001fb4:	20c0e026 	beq	r4,r3,8002338 <_malloc_r+0x72c>
 8001fb8:	a739c83a 	sub	fp,r20,fp
 8001fbc:	1705883a 	add	r2,r2,fp
 8001fc0:	b0800015 	stw	r2,0(r22)
 8001fc4:	a08001cc 	andi	r2,r20,7
 8001fc8:	1000a526 	beq	r2,zero,8002260 <_malloc_r+0x654>
 8001fcc:	a0a9c83a 	sub	r20,r20,r2
 8001fd0:	00c40204 	movi	r3,4104
 8001fd4:	a5000204 	addi	r20,r20,8
 8001fd8:	1885c83a 	sub	r2,r3,r2
 8001fdc:	a5c7883a 	add	r3,r20,r23
 8001fe0:	18c3ffcc 	andi	r3,r3,4095
 8001fe4:	10efc83a 	sub	r23,r2,r3
 8001fe8:	9009883a 	mov	r4,r18
 8001fec:	b80b883a 	mov	r5,r23
 8001ff0:	80024d00 	call	80024d0 <_sbrk_r>
 8001ff4:	00ffffc4 	movi	r3,-1
 8001ff8:	10c0cc26 	beq	r2,r3,800232c <_malloc_r+0x720>
 8001ffc:	1505c83a 	sub	r2,r2,r20
 8002000:	b887883a 	add	r3,r23,r2
 8002004:	18c00054 	ori	r3,r3,1
 8002008:	b0800017 	ldw	r2,0(r22)
 800200c:	9d000215 	stw	r20,8(r19)
 8002010:	a0c00115 	stw	r3,4(r20)
 8002014:	b885883a 	add	r2,r23,r2
 8002018:	b0800015 	stw	r2,0(r22)
 800201c:	84c00e26 	beq	r16,r19,8002058 <_malloc_r+0x44c>
 8002020:	00c003c4 	movi	r3,15
 8002024:	1d40902e 	bgeu	r3,r21,8002268 <_malloc_r+0x65c>
 8002028:	ad7ffd04 	addi	r21,r21,-12
 800202c:	013ffe04 	movi	r4,-8
 8002030:	a908703a 	and	r4,r21,r4
 8002034:	810b883a 	add	r5,r16,r4
 8002038:	01800144 	movi	r6,5
 800203c:	29800115 	stw	r6,4(r5)
 8002040:	29800215 	stw	r6,8(r5)
 8002044:	81400117 	ldw	r5,4(r16)
 8002048:	2940004c 	andi	r5,r5,1
 800204c:	214ab03a 	or	r5,r4,r5
 8002050:	81400115 	stw	r5,4(r16)
 8002054:	1900ae36 	bltu	r3,r4,8002310 <_malloc_r+0x704>
 8002058:	d0e31c17 	ldw	r3,-29584(gp)
 800205c:	1880012e 	bgeu	r3,r2,8002064 <_malloc_r+0x458>
 8002060:	d0a31c15 	stw	r2,-29584(gp)
 8002064:	d0e31b17 	ldw	r3,-29588(gp)
 8002068:	9c000217 	ldw	r16,8(r19)
 800206c:	1880012e 	bgeu	r3,r2,8002074 <_malloc_r+0x468>
 8002070:	d0a31b15 	stw	r2,-29588(gp)
 8002074:	80c00117 	ldw	r3,4(r16)
 8002078:	00bfff04 	movi	r2,-4
 800207c:	1886703a 	and	r3,r3,r2
 8002080:	1c45c83a 	sub	r2,r3,r17
 8002084:	1c400236 	bltu	r3,r17,8002090 <_malloc_r+0x484>
 8002088:	00c003c4 	movi	r3,15
 800208c:	18800416 	blt	r3,r2,80020a0 <_malloc_r+0x494>
 8002090:	9009883a 	mov	r4,r18
 8002094:	800b85c0 	call	800b85c <__malloc_unlock>
 8002098:	0005883a 	mov	r2,zero
 800209c:	003f0906 	br	8001cc4 <_malloc_r+0xb8>
 80020a0:	88c00054 	ori	r3,r17,1
 80020a4:	10800054 	ori	r2,r2,1
 80020a8:	80c00115 	stw	r3,4(r16)
 80020ac:	8463883a 	add	r17,r16,r17
 80020b0:	88800115 	stw	r2,4(r17)
 80020b4:	9009883a 	mov	r4,r18
 80020b8:	9c400215 	stw	r17,8(r19)
 80020bc:	800b85c0 	call	800b85c <__malloc_unlock>
 80020c0:	80800204 	addi	r2,r16,8
 80020c4:	003eff06 	br	8001cc4 <_malloc_r+0xb8>
 80020c8:	00800504 	movi	r2,20
 80020cc:	1100492e 	bgeu	r2,r4,80021f4 <_malloc_r+0x5e8>
 80020d0:	00801504 	movi	r2,84
 80020d4:	11005c36 	bltu	r2,r4,8002248 <_malloc_r+0x63c>
 80020d8:	8808d33a 	srli	r4,r17,12
 80020dc:	21001b84 	addi	r4,r4,110
 80020e0:	210b883a 	add	r5,r4,r4
 80020e4:	003f1006 	br	8001d28 <_malloc_r+0x11c>
 80020e8:	1006d27a 	srli	r3,r2,9
 80020ec:	01400104 	movi	r5,4
 80020f0:	28c0432e 	bgeu	r5,r3,8002200 <_malloc_r+0x5f4>
 80020f4:	01400504 	movi	r5,20
 80020f8:	28c07036 	bltu	r5,r3,80022bc <_malloc_r+0x6b0>
 80020fc:	194016c4 	addi	r5,r3,91
 8002100:	294d883a 	add	r6,r5,r5
 8002104:	318d883a 	add	r6,r6,r6
 8002108:	318d883a 	add	r6,r6,r6
 800210c:	998d883a 	add	r6,r19,r6
 8002110:	30c00217 	ldw	r3,8(r6)
 8002114:	01c20074 	movhi	r7,2049
 8002118:	39f83304 	addi	r7,r7,-7988
 800211c:	19805726 	beq	r3,r6,800227c <_malloc_r+0x670>
 8002120:	01ffff04 	movi	r7,-4
 8002124:	19400117 	ldw	r5,4(r3)
 8002128:	29ca703a 	and	r5,r5,r7
 800212c:	1140022e 	bgeu	r2,r5,8002138 <_malloc_r+0x52c>
 8002130:	18c00217 	ldw	r3,8(r3)
 8002134:	30fffb1e 	bne	r6,r3,8002124 <_malloc_r+0x518>
 8002138:	19400317 	ldw	r5,12(r3)
 800213c:	98800117 	ldw	r2,4(r19)
 8002140:	81400315 	stw	r5,12(r16)
 8002144:	80c00215 	stw	r3,8(r16)
 8002148:	2c000215 	stw	r16,8(r5)
 800214c:	1c000315 	stw	r16,12(r3)
 8002150:	003f2b06 	br	8001e00 <_malloc_r+0x1f4>
 8002154:	8445883a 	add	r2,r16,r17
 8002158:	8c400054 	ori	r17,r17,1
 800215c:	18800515 	stw	r2,20(r3)
 8002160:	18800415 	stw	r2,16(r3)
 8002164:	29000054 	ori	r4,r5,1
 8002168:	1147883a 	add	r3,r2,r5
 800216c:	84400115 	stw	r17,4(r16)
 8002170:	11000115 	stw	r4,4(r2)
 8002174:	12400315 	stw	r9,12(r2)
 8002178:	12400215 	stw	r9,8(r2)
 800217c:	19400015 	stw	r5,0(r3)
 8002180:	9009883a 	mov	r4,r18
 8002184:	800b85c0 	call	800b85c <__malloc_unlock>
 8002188:	80800204 	addi	r2,r16,8
 800218c:	003ecd06 	br	8001cc4 <_malloc_r+0xb8>
 8002190:	18800117 	ldw	r2,4(r3)
 8002194:	003f1a06 	br	8001e00 <_malloc_r+0x1f4>
 8002198:	5ac00044 	addi	r11,r11,1
 800219c:	588000cc 	andi	r2,r11,3
 80021a0:	52800204 	addi	r10,r10,8
 80021a4:	103f2e1e 	bne	r2,zero,8001e60 <_malloc_r+0x254>
 80021a8:	20c000cc 	andi	r3,r4,3
 80021ac:	60bffe04 	addi	r2,r12,-8
 80021b0:	18006f26 	beq	r3,zero,8002370 <_malloc_r+0x764>
 80021b4:	63000017 	ldw	r12,0(r12)
 80021b8:	213fffc4 	addi	r4,r4,-1
 80021bc:	60bffa26 	beq	r12,r2,80021a8 <_malloc_r+0x59c>
 80021c0:	98800117 	ldw	r2,4(r19)
 80021c4:	294b883a 	add	r5,r5,r5
 80021c8:	117f5a36 	bltu	r2,r5,8001f34 <_malloc_r+0x328>
 80021cc:	283f5926 	beq	r5,zero,8001f34 <_malloc_r+0x328>
 80021d0:	1146703a 	and	r3,r2,r5
 80021d4:	18001626 	beq	r3,zero,8002230 <_malloc_r+0x624>
 80021d8:	5809883a 	mov	r4,r11
 80021dc:	003f1a06 	br	8001e48 <_malloc_r+0x23c>
 80021e0:	80800204 	addi	r2,r16,8
 80021e4:	84000517 	ldw	r16,20(r16)
 80021e8:	143ea81e 	bne	r2,r16,8001c8c <_malloc_r+0x80>
 80021ec:	21000084 	addi	r4,r4,2
 80021f0:	003ee306 	br	8001d80 <_malloc_r+0x174>
 80021f4:	210016c4 	addi	r4,r4,91
 80021f8:	210b883a 	add	r5,r4,r4
 80021fc:	003eca06 	br	8001d28 <_malloc_r+0x11c>
 8002200:	100ad1ba 	srli	r5,r2,6
 8002204:	29400e04 	addi	r5,r5,56
 8002208:	294d883a 	add	r6,r5,r5
 800220c:	003fbd06 	br	8002104 <_malloc_r+0x4f8>
 8002210:	84ff6026 	beq	r16,r19,8001f94 <_malloc_r+0x388>
 8002214:	00820074 	movhi	r2,2049
 8002218:	10b83304 	addi	r2,r2,-7988
 800221c:	14000217 	ldw	r16,8(r2)
 8002220:	00bfff04 	movi	r2,-4
 8002224:	80c00117 	ldw	r3,4(r16)
 8002228:	1886703a 	and	r3,r3,r2
 800222c:	003f9406 	br	8002080 <_malloc_r+0x474>
 8002230:	294b883a 	add	r5,r5,r5
 8002234:	1146703a 	and	r3,r2,r5
 8002238:	5ac00104 	addi	r11,r11,4
 800223c:	183ffc26 	beq	r3,zero,8002230 <_malloc_r+0x624>
 8002240:	5809883a 	mov	r4,r11
 8002244:	003f0006 	br	8001e48 <_malloc_r+0x23c>
 8002248:	00805504 	movi	r2,340
 800224c:	11001336 	bltu	r2,r4,800229c <_malloc_r+0x690>
 8002250:	8808d3fa 	srli	r4,r17,15
 8002254:	21001dc4 	addi	r4,r4,119
 8002258:	210b883a 	add	r5,r4,r4
 800225c:	003eb206 	br	8001d28 <_malloc_r+0x11c>
 8002260:	00840004 	movi	r2,4096
 8002264:	003f5d06 	br	8001fdc <_malloc_r+0x3d0>
 8002268:	00800044 	movi	r2,1
 800226c:	a0800115 	stw	r2,4(r20)
 8002270:	a021883a 	mov	r16,r20
 8002274:	0007883a 	mov	r3,zero
 8002278:	003f8106 	br	8002080 <_malloc_r+0x474>
 800227c:	280bd0ba 	srai	r5,r5,2
 8002280:	01800044 	movi	r6,1
 8002284:	38800117 	ldw	r2,4(r7)
 8002288:	314c983a 	sll	r6,r6,r5
 800228c:	180b883a 	mov	r5,r3
 8002290:	3084b03a 	or	r2,r6,r2
 8002294:	38800115 	stw	r2,4(r7)
 8002298:	003fa906 	br	8002140 <_malloc_r+0x534>
 800229c:	00815504 	movi	r2,1364
 80022a0:	11001836 	bltu	r2,r4,8002304 <_malloc_r+0x6f8>
 80022a4:	8808d4ba 	srli	r4,r17,18
 80022a8:	21001f04 	addi	r4,r4,124
 80022ac:	210b883a 	add	r5,r4,r4
 80022b0:	003e9d06 	br	8001d28 <_malloc_r+0x11c>
 80022b4:	bdc00404 	addi	r23,r23,16
 80022b8:	003f2f06 	br	8001f78 <_malloc_r+0x36c>
 80022bc:	01401504 	movi	r5,84
 80022c0:	28c01f36 	bltu	r5,r3,8002340 <_malloc_r+0x734>
 80022c4:	100ad33a 	srli	r5,r2,12
 80022c8:	29401b84 	addi	r5,r5,110
 80022cc:	294d883a 	add	r6,r5,r5
 80022d0:	003f8c06 	br	8002104 <_malloc_r+0x4f8>
 80022d4:	9c000217 	ldw	r16,8(r19)
 80022d8:	00bfff04 	movi	r2,-4
 80022dc:	80c00117 	ldw	r3,4(r16)
 80022e0:	1886703a 	and	r3,r3,r2
 80022e4:	003f6606 	br	8002080 <_malloc_r+0x474>
 80022e8:	e0c3ffcc 	andi	r3,fp,4095
 80022ec:	183f2f1e 	bne	r3,zero,8001fac <_malloc_r+0x3a0>
 80022f0:	98c00217 	ldw	r3,8(r19)
 80022f4:	bd49883a 	add	r4,r23,r21
 80022f8:	21000054 	ori	r4,r4,1
 80022fc:	19000115 	stw	r4,4(r3)
 8002300:	003f5506 	br	8002058 <_malloc_r+0x44c>
 8002304:	01403f04 	movi	r5,252
 8002308:	01001f84 	movi	r4,126
 800230c:	003e8606 	br	8001d28 <_malloc_r+0x11c>
 8002310:	9009883a 	mov	r4,r18
 8002314:	81400204 	addi	r5,r16,8
 8002318:	80064d80 	call	80064d8 <_free_r>
 800231c:	00820074 	movhi	r2,2049
 8002320:	10bdee04 	addi	r2,r2,-2120
 8002324:	10800017 	ldw	r2,0(r2)
 8002328:	003f4b06 	br	8002058 <_malloc_r+0x44c>
 800232c:	00c00044 	movi	r3,1
 8002330:	002f883a 	mov	r23,zero
 8002334:	003f3406 	br	8002008 <_malloc_r+0x3fc>
 8002338:	d5201715 	stw	r20,-32676(gp)
 800233c:	003f2106 	br	8001fc4 <_malloc_r+0x3b8>
 8002340:	01405504 	movi	r5,340
 8002344:	28c00436 	bltu	r5,r3,8002358 <_malloc_r+0x74c>
 8002348:	100ad3fa 	srli	r5,r2,15
 800234c:	29401dc4 	addi	r5,r5,119
 8002350:	294d883a 	add	r6,r5,r5
 8002354:	003f6b06 	br	8002104 <_malloc_r+0x4f8>
 8002358:	01415504 	movi	r5,1364
 800235c:	28c00936 	bltu	r5,r3,8002384 <_malloc_r+0x778>
 8002360:	100ad4ba 	srli	r5,r2,18
 8002364:	29401f04 	addi	r5,r5,124
 8002368:	294d883a 	add	r6,r5,r5
 800236c:	003f6506 	br	8002104 <_malloc_r+0x4f8>
 8002370:	98800117 	ldw	r2,4(r19)
 8002374:	0146303a 	nor	r3,zero,r5
 8002378:	1884703a 	and	r2,r3,r2
 800237c:	98800115 	stw	r2,4(r19)
 8002380:	003f9006 	br	80021c4 <_malloc_r+0x5b8>
 8002384:	01803f04 	movi	r6,252
 8002388:	01401f84 	movi	r5,126
 800238c:	003f5d06 	br	8002104 <_malloc_r+0x4f8>

08002390 <memcpy>:
 8002390:	defffb04 	addi	sp,sp,-20
 8002394:	dc000015 	stw	r16,0(sp)
 8002398:	dfc00415 	stw	ra,16(sp)
 800239c:	dcc00315 	stw	r19,12(sp)
 80023a0:	dc800215 	stw	r18,8(sp)
 80023a4:	dc400115 	stw	r17,4(sp)
 80023a8:	00c003c4 	movi	r3,15
 80023ac:	2021883a 	mov	r16,r4
 80023b0:	3005883a 	mov	r2,r6
 80023b4:	1980032e 	bgeu	r3,r6,80023c4 <memcpy+0x34>
 80023b8:	2906b03a 	or	r3,r5,r4
 80023bc:	18c000cc 	andi	r3,r3,3
 80023c0:	18001026 	beq	r3,zero,8002404 <memcpy+0x74>
 80023c4:	8007883a 	mov	r3,r16
 80023c8:	288f883a 	add	r7,r5,r2
 80023cc:	10000526 	beq	r2,zero,80023e4 <memcpy+0x54>
 80023d0:	29800003 	ldbu	r6,0(r5)
 80023d4:	18c00044 	addi	r3,r3,1
 80023d8:	29400044 	addi	r5,r5,1
 80023dc:	19bfffc5 	stb	r6,-1(r3)
 80023e0:	29fffb1e 	bne	r5,r7,80023d0 <memcpy+0x40>
 80023e4:	8005883a 	mov	r2,r16
 80023e8:	dfc00417 	ldw	ra,16(sp)
 80023ec:	dcc00317 	ldw	r19,12(sp)
 80023f0:	dc800217 	ldw	r18,8(sp)
 80023f4:	dc400117 	ldw	r17,4(sp)
 80023f8:	dc000017 	ldw	r16,0(sp)
 80023fc:	dec00504 	addi	sp,sp,20
 8002400:	f800283a 	ret
 8002404:	32bffc04 	addi	r10,r6,-16
 8002408:	5014d13a 	srli	r10,r10,4
 800240c:	20800404 	addi	r2,r4,16
 8002410:	2007883a 	mov	r3,r4
 8002414:	5008913a 	slli	r4,r10,4
 8002418:	280f883a 	mov	r7,r5
 800241c:	1105883a 	add	r2,r2,r4
 8002420:	3a000017 	ldw	r8,0(r7)
 8002424:	18c00404 	addi	r3,r3,16
 8002428:	39c00404 	addi	r7,r7,16
 800242c:	1a3ffc15 	stw	r8,-16(r3)
 8002430:	3a3ffd17 	ldw	r8,-12(r7)
 8002434:	1a3ffd15 	stw	r8,-12(r3)
 8002438:	3a3ffe17 	ldw	r8,-8(r7)
 800243c:	1a3ffe15 	stw	r8,-8(r3)
 8002440:	3a3fff17 	ldw	r8,-4(r7)
 8002444:	1a3fff15 	stw	r8,-4(r3)
 8002448:	18bff51e 	bne	r3,r2,8002420 <memcpy+0x90>
 800244c:	52800044 	addi	r10,r10,1
 8002450:	5014913a 	slli	r10,r10,4
 8002454:	308003cc 	andi	r2,r6,15
 8002458:	010000c4 	movi	r4,3
 800245c:	8287883a 	add	r3,r16,r10
 8002460:	2a95883a 	add	r10,r5,r10
 8002464:	2080182e 	bgeu	r4,r2,80024c8 <memcpy+0x138>
 8002468:	147fff04 	addi	r17,r2,-4
 800246c:	8808d0ba 	srli	r4,r17,2
 8002470:	1a400104 	addi	r9,r3,4
 8002474:	180d883a 	mov	r6,r3
 8002478:	2105883a 	add	r2,r4,r4
 800247c:	1085883a 	add	r2,r2,r2
 8002480:	4893883a 	add	r9,r9,r2
 8002484:	500f883a 	mov	r7,r10
 8002488:	3a000017 	ldw	r8,0(r7)
 800248c:	31800104 	addi	r6,r6,4
 8002490:	39c00104 	addi	r7,r7,4
 8002494:	323fff15 	stw	r8,-4(r6)
 8002498:	327ffb1e 	bne	r6,r9,8002488 <memcpy+0xf8>
 800249c:	20800044 	addi	r2,r4,1
 80024a0:	1085883a 	add	r2,r2,r2
 80024a4:	1085883a 	add	r2,r2,r2
 80024a8:	017fff04 	movi	r5,-4
 80024ac:	18a5883a 	add	r18,r3,r2
 80024b0:	50a7883a 	add	r19,r10,r2
 80024b4:	8001bbc0 	call	8001bbc <__mulsi3>
 80024b8:	1445883a 	add	r2,r2,r17
 80024bc:	980b883a 	mov	r5,r19
 80024c0:	9007883a 	mov	r3,r18
 80024c4:	003fc006 	br	80023c8 <memcpy+0x38>
 80024c8:	500b883a 	mov	r5,r10
 80024cc:	003fbe06 	br	80023c8 <memcpy+0x38>

080024d0 <_sbrk_r>:
 80024d0:	defffd04 	addi	sp,sp,-12
 80024d4:	dc400115 	stw	r17,4(sp)
 80024d8:	dc000015 	stw	r16,0(sp)
 80024dc:	2023883a 	mov	r17,r4
 80024e0:	04020074 	movhi	r16,2049
 80024e4:	843de704 	addi	r16,r16,-2148
 80024e8:	2809883a 	mov	r4,r5
 80024ec:	dfc00215 	stw	ra,8(sp)
 80024f0:	80000015 	stw	zero,0(r16)
 80024f4:	800ba400 	call	800ba40 <sbrk>
 80024f8:	00ffffc4 	movi	r3,-1
 80024fc:	10c00526 	beq	r2,r3,8002514 <_sbrk_r+0x44>
 8002500:	dfc00217 	ldw	ra,8(sp)
 8002504:	dc400117 	ldw	r17,4(sp)
 8002508:	dc000017 	ldw	r16,0(sp)
 800250c:	dec00304 	addi	sp,sp,12
 8002510:	f800283a 	ret
 8002514:	80c00017 	ldw	r3,0(r16)
 8002518:	183ff926 	beq	r3,zero,8002500 <_sbrk_r+0x30>
 800251c:	88c00015 	stw	r3,0(r17)
 8002520:	dfc00217 	ldw	ra,8(sp)
 8002524:	dc400117 	ldw	r17,4(sp)
 8002528:	dc000017 	ldw	r16,0(sp)
 800252c:	dec00304 	addi	sp,sp,12
 8002530:	f800283a 	ret

08002534 <_sprintf_r>:
 8002534:	deffe704 	addi	sp,sp,-100
 8002538:	2807883a 	mov	r3,r5
 800253c:	dfc01715 	stw	ra,92(sp)
 8002540:	d9c01815 	stw	r7,96(sp)
 8002544:	00a00034 	movhi	r2,32768
 8002548:	10bfffc4 	addi	r2,r2,-1
 800254c:	02008204 	movi	r8,520
 8002550:	d8800215 	stw	r2,8(sp)
 8002554:	d8800515 	stw	r2,20(sp)
 8002558:	d80b883a 	mov	r5,sp
 800255c:	d9c01804 	addi	r7,sp,96
 8002560:	00bfffc4 	movi	r2,-1
 8002564:	d8c00015 	stw	r3,0(sp)
 8002568:	d8c00415 	stw	r3,16(sp)
 800256c:	da00030d 	sth	r8,12(sp)
 8002570:	d880038d 	sth	r2,14(sp)
 8002574:	800262c0 	call	800262c <___vfprintf_internal_r>
 8002578:	d8c00017 	ldw	r3,0(sp)
 800257c:	18000005 	stb	zero,0(r3)
 8002580:	dfc01717 	ldw	ra,92(sp)
 8002584:	dec01904 	addi	sp,sp,100
 8002588:	f800283a 	ret

0800258c <sprintf>:
 800258c:	deffe604 	addi	sp,sp,-104
 8002590:	2007883a 	mov	r3,r4
 8002594:	dfc01715 	stw	ra,92(sp)
 8002598:	d9801815 	stw	r6,96(sp)
 800259c:	d9c01915 	stw	r7,100(sp)
 80025a0:	00820074 	movhi	r2,2049
 80025a4:	10bae304 	addi	r2,r2,-5236
 80025a8:	11000017 	ldw	r4,0(r2)
 80025ac:	00a00034 	movhi	r2,32768
 80025b0:	10bfffc4 	addi	r2,r2,-1
 80025b4:	280d883a 	mov	r6,r5
 80025b8:	02008204 	movi	r8,520
 80025bc:	d8800215 	stw	r2,8(sp)
 80025c0:	d8800515 	stw	r2,20(sp)
 80025c4:	d80b883a 	mov	r5,sp
 80025c8:	d9c01804 	addi	r7,sp,96
 80025cc:	00bfffc4 	movi	r2,-1
 80025d0:	d8c00015 	stw	r3,0(sp)
 80025d4:	d8c00415 	stw	r3,16(sp)
 80025d8:	da00030d 	sth	r8,12(sp)
 80025dc:	d880038d 	sth	r2,14(sp)
 80025e0:	800262c0 	call	800262c <___vfprintf_internal_r>
 80025e4:	d8c00017 	ldw	r3,0(sp)
 80025e8:	18000005 	stb	zero,0(r3)
 80025ec:	dfc01717 	ldw	ra,92(sp)
 80025f0:	dec01a04 	addi	sp,sp,104
 80025f4:	f800283a 	ret

080025f8 <__sprint_r>:
 80025f8:	30800217 	ldw	r2,8(r6)
 80025fc:	defffe04 	addi	sp,sp,-8
 8002600:	dc000015 	stw	r16,0(sp)
 8002604:	dfc00115 	stw	ra,4(sp)
 8002608:	3021883a 	mov	r16,r6
 800260c:	10000226 	beq	r2,zero,8002618 <__sprint_r+0x20>
 8002610:	80067a80 	call	80067a8 <__sfvwrite_r>
 8002614:	80000215 	stw	zero,8(r16)
 8002618:	80000115 	stw	zero,4(r16)
 800261c:	dfc00117 	ldw	ra,4(sp)
 8002620:	dc000017 	ldw	r16,0(sp)
 8002624:	dec00204 	addi	sp,sp,8
 8002628:	f800283a 	ret

0800262c <___vfprintf_internal_r>:
 800262c:	defeb904 	addi	sp,sp,-1308
 8002630:	dc013d15 	stw	r16,1268(sp)
 8002634:	d9013015 	stw	r4,1216(sp)
 8002638:	dfc14615 	stw	ra,1304(sp)
 800263c:	df014515 	stw	fp,1300(sp)
 8002640:	ddc14415 	stw	r23,1296(sp)
 8002644:	dd814315 	stw	r22,1292(sp)
 8002648:	dd414215 	stw	r21,1288(sp)
 800264c:	dd014115 	stw	r20,1284(sp)
 8002650:	dcc14015 	stw	r19,1280(sp)
 8002654:	dc813f15 	stw	r18,1276(sp)
 8002658:	dc413e15 	stw	r17,1272(sp)
 800265c:	d9412915 	stw	r5,1188(sp)
 8002660:	3021883a 	mov	r16,r6
 8002664:	d9c12d15 	stw	r7,1204(sp)
 8002668:	8006e940 	call	8006e94 <_localeconv_r>
 800266c:	10800017 	ldw	r2,0(r2)
 8002670:	d9013017 	ldw	r4,1216(sp)
 8002674:	d8013315 	stw	zero,1228(sp)
 8002678:	d8813715 	stw	r2,1244(sp)
 800267c:	d8013415 	stw	zero,1232(sp)
 8002680:	20000226 	beq	r4,zero,800268c <___vfprintf_internal_r+0x60>
 8002684:	20800e17 	ldw	r2,56(r4)
 8002688:	10014b26 	beq	r2,zero,8002bb8 <___vfprintf_internal_r+0x58c>
 800268c:	d8c12917 	ldw	r3,1188(sp)
 8002690:	1880030b 	ldhu	r2,12(r3)
 8002694:	10c0020c 	andi	r3,r2,8
 8002698:	18ffffcc 	andi	r3,r3,65535
 800269c:	18e0001c 	xori	r3,r3,32768
 80026a0:	18e00004 	addi	r3,r3,-32768
 80026a4:	1800ed26 	beq	r3,zero,8002a5c <___vfprintf_internal_r+0x430>
 80026a8:	d9012917 	ldw	r4,1188(sp)
 80026ac:	20c00417 	ldw	r3,16(r4)
 80026b0:	1800ea26 	beq	r3,zero,8002a5c <___vfprintf_internal_r+0x430>
 80026b4:	1100068c 	andi	r4,r2,26
 80026b8:	00c00284 	movi	r3,10
 80026bc:	20c0f026 	beq	r4,r3,8002a80 <___vfprintf_internal_r+0x454>
 80026c0:	d9010dc4 	addi	r4,sp,1079
 80026c4:	d8810e04 	addi	r2,sp,1080
 80026c8:	dc413017 	ldw	r17,1216(sp)
 80026cc:	d8c00404 	addi	r3,sp,16
 80026d0:	d9012615 	stw	r4,1176(sp)
 80026d4:	1109c83a 	sub	r4,r2,r4
 80026d8:	d8812715 	stw	r2,1180(sp)
 80026dc:	d8c11b15 	stw	r3,1132(sp)
 80026e0:	d8011d15 	stw	zero,1140(sp)
 80026e4:	d8011c15 	stw	zero,1136(sp)
 80026e8:	802b883a 	mov	r21,r16
 80026ec:	d8013215 	stw	zero,1224(sp)
 80026f0:	d8013615 	stw	zero,1240(sp)
 80026f4:	d8013515 	stw	zero,1236(sp)
 80026f8:	d8012c15 	stw	zero,1200(sp)
 80026fc:	1813883a 	mov	r9,r3
 8002700:	d9013915 	stw	r4,1252(sp)
 8002704:	a8800007 	ldb	r2,0(r21)
 8002708:	1002f326 	beq	r2,zero,80032d8 <___vfprintf_internal_r+0xcac>
 800270c:	00c00944 	movi	r3,37
 8002710:	a825883a 	mov	r18,r21
 8002714:	10c0021e 	bne	r2,r3,8002720 <___vfprintf_internal_r+0xf4>
 8002718:	00001406 	br	800276c <___vfprintf_internal_r+0x140>
 800271c:	10c00326 	beq	r2,r3,800272c <___vfprintf_internal_r+0x100>
 8002720:	94800044 	addi	r18,r18,1
 8002724:	90800007 	ldb	r2,0(r18)
 8002728:	103ffc1e 	bne	r2,zero,800271c <___vfprintf_internal_r+0xf0>
 800272c:	9561c83a 	sub	r16,r18,r21
 8002730:	80000e26 	beq	r16,zero,800276c <___vfprintf_internal_r+0x140>
 8002734:	da011d17 	ldw	r8,1140(sp)
 8002738:	d8c11c17 	ldw	r3,1136(sp)
 800273c:	4d400015 	stw	r21,0(r9)
 8002740:	4c000115 	stw	r16,4(r9)
 8002744:	4411883a 	add	r8,r8,r16
 8002748:	18c00044 	addi	r3,r3,1
 800274c:	da011d15 	stw	r8,1140(sp)
 8002750:	d8c11c15 	stw	r3,1136(sp)
 8002754:	008001c4 	movi	r2,7
 8002758:	10c11016 	blt	r2,r3,8002b9c <___vfprintf_internal_r+0x570>
 800275c:	4a400204 	addi	r9,r9,8
 8002760:	d8812c17 	ldw	r2,1200(sp)
 8002764:	1405883a 	add	r2,r2,r16
 8002768:	d8812c15 	stw	r2,1200(sp)
 800276c:	90800007 	ldb	r2,0(r18)
 8002770:	1000ee26 	beq	r2,zero,8002b2c <___vfprintf_internal_r+0x500>
 8002774:	95400044 	addi	r21,r18,1
 8002778:	94800047 	ldb	r18,1(r18)
 800277c:	073fffc4 	movi	fp,-1
 8002780:	e007883a 	mov	r3,fp
 8002784:	d8012585 	stb	zero,1174(sp)
 8002788:	d8012e15 	stw	zero,1208(sp)
 800278c:	0021883a 	mov	r16,zero
 8002790:	05001604 	movi	r20,88
 8002794:	04c00244 	movi	r19,9
 8002798:	4839883a 	mov	fp,r9
 800279c:	ad400044 	addi	r21,r21,1
 80027a0:	90bff804 	addi	r2,r18,-32
 80027a4:	a080462e 	bgeu	r20,r2,80028c0 <___vfprintf_internal_r+0x294>
 80027a8:	e013883a 	mov	r9,fp
 80027ac:	9000df26 	beq	r18,zero,8002b2c <___vfprintf_internal_r+0x500>
 80027b0:	00c00044 	movi	r3,1
 80027b4:	d8c12815 	stw	r3,1184(sp)
 80027b8:	dc810405 	stb	r18,1040(sp)
 80027bc:	d8012585 	stb	zero,1174(sp)
 80027c0:	d8c12b15 	stw	r3,1196(sp)
 80027c4:	dcc10404 	addi	r19,sp,1040
 80027c8:	d8013115 	stw	zero,1220(sp)
 80027cc:	80c0008c 	andi	r3,r16,2
 80027d0:	d8c12a15 	stw	r3,1192(sp)
 80027d4:	18000326 	beq	r3,zero,80027e4 <___vfprintf_internal_r+0x1b8>
 80027d8:	d8c12817 	ldw	r3,1184(sp)
 80027dc:	18c00084 	addi	r3,r3,2
 80027e0:	d8c12815 	stw	r3,1184(sp)
 80027e4:	80c0210c 	andi	r3,r16,132
 80027e8:	d8c12f15 	stw	r3,1212(sp)
 80027ec:	1802251e 	bne	r3,zero,8003084 <___vfprintf_internal_r+0xa58>
 80027f0:	d9012e17 	ldw	r4,1208(sp)
 80027f4:	d8c12817 	ldw	r3,1184(sp)
 80027f8:	20edc83a 	sub	r22,r4,r3
 80027fc:	0582210e 	bge	zero,r22,8003084 <___vfprintf_internal_r+0xa58>
 8002800:	02800404 	movi	r10,16
 8002804:	da011d17 	ldw	r8,1140(sp)
 8002808:	d8c11c17 	ldw	r3,1136(sp)
 800280c:	05c20074 	movhi	r23,2049
 8002810:	bdf73084 	addi	r23,r23,-9022
 8002814:	5580200e 	bge	r10,r22,8002898 <___vfprintf_internal_r+0x26c>
 8002818:	dc813815 	stw	r18,1248(sp)
 800281c:	5039883a 	mov	fp,r10
 8002820:	b825883a 	mov	r18,r23
 8002824:	050001c4 	movi	r20,7
 8002828:	b02f883a 	mov	r23,r22
 800282c:	802d883a 	mov	r22,r16
 8002830:	dc012917 	ldw	r16,1188(sp)
 8002834:	00000306 	br	8002844 <___vfprintf_internal_r+0x218>
 8002838:	bdfffc04 	addi	r23,r23,-16
 800283c:	4a400204 	addi	r9,r9,8
 8002840:	e5c0110e 	bge	fp,r23,8002888 <___vfprintf_internal_r+0x25c>
 8002844:	4c800015 	stw	r18,0(r9)
 8002848:	4f000115 	stw	fp,4(r9)
 800284c:	42000404 	addi	r8,r8,16
 8002850:	18c00044 	addi	r3,r3,1
 8002854:	da011d15 	stw	r8,1140(sp)
 8002858:	d8c11c15 	stw	r3,1136(sp)
 800285c:	a0fff60e 	bge	r20,r3,8002838 <___vfprintf_internal_r+0x20c>
 8002860:	8809883a 	mov	r4,r17
 8002864:	800b883a 	mov	r5,r16
 8002868:	d9811b04 	addi	r6,sp,1132
 800286c:	80025f80 	call	80025f8 <__sprint_r>
 8002870:	1000b41e 	bne	r2,zero,8002b44 <___vfprintf_internal_r+0x518>
 8002874:	bdfffc04 	addi	r23,r23,-16
 8002878:	da011d17 	ldw	r8,1140(sp)
 800287c:	d8c11c17 	ldw	r3,1136(sp)
 8002880:	da400404 	addi	r9,sp,16
 8002884:	e5ffef16 	blt	fp,r23,8002844 <___vfprintf_internal_r+0x218>
 8002888:	b021883a 	mov	r16,r22
 800288c:	b82d883a 	mov	r22,r23
 8002890:	902f883a 	mov	r23,r18
 8002894:	dc813817 	ldw	r18,1248(sp)
 8002898:	4dc00015 	stw	r23,0(r9)
 800289c:	4d800115 	stw	r22,4(r9)
 80028a0:	4591883a 	add	r8,r8,r22
 80028a4:	18c00044 	addi	r3,r3,1
 80028a8:	da011d15 	stw	r8,1140(sp)
 80028ac:	d8c11c15 	stw	r3,1136(sp)
 80028b0:	008001c4 	movi	r2,7
 80028b4:	10c3fe16 	blt	r2,r3,80038b0 <___vfprintf_internal_r+0x1284>
 80028b8:	4a400204 	addi	r9,r9,8
 80028bc:	0001f306 	br	800308c <___vfprintf_internal_r+0xa60>
 80028c0:	1085883a 	add	r2,r2,r2
 80028c4:	1085883a 	add	r2,r2,r2
 80028c8:	01020034 	movhi	r4,2048
 80028cc:	210a3704 	addi	r4,r4,10460
 80028d0:	1105883a 	add	r2,r2,r4
 80028d4:	10800017 	ldw	r2,0(r2)
 80028d8:	1000683a 	jmp	r2
 80028dc:	08002fb8 	rdprs	zero,at,190
 80028e0:	080027a8 	cmpgeui	zero,at,158
 80028e4:	080027a8 	cmpgeui	zero,at,158
 80028e8:	08002fd0 	cmplti	zero,at,191
 80028ec:	080027a8 	cmpgeui	zero,at,158
 80028f0:	080027a8 	cmpgeui	zero,at,158
 80028f4:	080027a8 	cmpgeui	zero,at,158
 80028f8:	080027a8 	cmpgeui	zero,at,158
 80028fc:	080027a8 	cmpgeui	zero,at,158
 8002900:	080027a8 	cmpgeui	zero,at,158
 8002904:	08002e88 	cmpgei	zero,at,186
 8002908:	0800301c 	xori	zero,at,192
 800290c:	080027a8 	cmpgeui	zero,at,158
 8002910:	08002a50 	cmplti	zero,at,169
 8002914:	08002df0 	cmpltui	zero,at,183
 8002918:	080027a8 	cmpgeui	zero,at,158
 800291c:	08002fdc 	xori	zero,at,191
 8002920:	08002fe8 	cmpgeui	zero,at,191
 8002924:	08002fe8 	cmpgeui	zero,at,191
 8002928:	08002fe8 	cmpgeui	zero,at,191
 800292c:	08002fe8 	cmpgeui	zero,at,191
 8002930:	08002fe8 	cmpgeui	zero,at,191
 8002934:	08002fe8 	cmpgeui	zero,at,191
 8002938:	08002fe8 	cmpgeui	zero,at,191
 800293c:	08002fe8 	cmpgeui	zero,at,191
 8002940:	08002fe8 	cmpgeui	zero,at,191
 8002944:	080027a8 	cmpgeui	zero,at,158
 8002948:	080027a8 	cmpgeui	zero,at,158
 800294c:	080027a8 	cmpgeui	zero,at,158
 8002950:	080027a8 	cmpgeui	zero,at,158
 8002954:	080027a8 	cmpgeui	zero,at,158
 8002958:	080027a8 	cmpgeui	zero,at,158
 800295c:	080027a8 	cmpgeui	zero,at,158
 8002960:	080027a8 	cmpgeui	zero,at,158
 8002964:	080027a8 	cmpgeui	zero,at,158
 8002968:	080027a8 	cmpgeui	zero,at,158
 800296c:	08002bc0 	call	8002bc <__alt_mem_sdram_controller_0-0x77ffd44>
 8002970:	08002c80 	call	8002c8 <__alt_mem_sdram_controller_0-0x77ffd38>
 8002974:	080027a8 	cmpgeui	zero,at,158
 8002978:	08002c80 	call	8002c8 <__alt_mem_sdram_controller_0-0x77ffd38>
 800297c:	080027a8 	cmpgeui	zero,at,158
 8002980:	080027a8 	cmpgeui	zero,at,158
 8002984:	080027a8 	cmpgeui	zero,at,158
 8002988:	080027a8 	cmpgeui	zero,at,158
 800298c:	08002d14 	ori	zero,at,180
 8002990:	080027a8 	cmpgeui	zero,at,158
 8002994:	080027a8 	cmpgeui	zero,at,158
 8002998:	08002d20 	cmpeqi	zero,at,180
 800299c:	080027a8 	cmpgeui	zero,at,158
 80029a0:	080027a8 	cmpgeui	zero,at,158
 80029a4:	080027a8 	cmpgeui	zero,at,158
 80029a8:	080027a8 	cmpgeui	zero,at,158
 80029ac:	080027a8 	cmpgeui	zero,at,158
 80029b0:	08002d58 	cmpnei	zero,at,181
 80029b4:	080027a8 	cmpgeui	zero,at,158
 80029b8:	080027a8 	cmpgeui	zero,at,158
 80029bc:	08002d94 	ori	zero,at,182
 80029c0:	080027a8 	cmpgeui	zero,at,158
 80029c4:	080027a8 	cmpgeui	zero,at,158
 80029c8:	080027a8 	cmpgeui	zero,at,158
 80029cc:	080027a8 	cmpgeui	zero,at,158
 80029d0:	080027a8 	cmpgeui	zero,at,158
 80029d4:	080027a8 	cmpgeui	zero,at,158
 80029d8:	080027a8 	cmpgeui	zero,at,158
 80029dc:	080027a8 	cmpgeui	zero,at,158
 80029e0:	080027a8 	cmpgeui	zero,at,158
 80029e4:	080027a8 	cmpgeui	zero,at,158
 80029e8:	0800302c 	andhi	zero,at,192
 80029ec:	08003060 	cmpeqi	zero,at,193
 80029f0:	08002c80 	call	8002c8 <__alt_mem_sdram_controller_0-0x77ffd38>
 80029f4:	08002c80 	call	8002c8 <__alt_mem_sdram_controller_0-0x77ffd38>
 80029f8:	08002c80 	call	8002c8 <__alt_mem_sdram_controller_0-0x77ffd38>
 80029fc:	08002fac 	andhi	zero,at,190
 8002a00:	08003060 	cmpeqi	zero,at,193
 8002a04:	080027a8 	cmpgeui	zero,at,158
 8002a08:	080027a8 	cmpgeui	zero,at,158
 8002a0c:	08002e38 	rdprs	zero,at,184
 8002a10:	080027a8 	cmpgeui	zero,at,158
 8002a14:	08002e50 	cmplti	zero,at,185
 8002a18:	0800306c 	andhi	zero,at,193
 8002a1c:	08002eb0 	cmpltui	zero,at,186
 8002a20:	08002f00 	call	8002f0 <__alt_mem_sdram_controller_0-0x77ffd10>
 8002a24:	080027a8 	cmpgeui	zero,at,158
 8002a28:	08002f0c 	andi	zero,at,188
 8002a2c:	080027a8 	cmpgeui	zero,at,158
 8002a30:	08003078 	rdprs	zero,at,193
 8002a34:	080027a8 	cmpgeui	zero,at,158
 8002a38:	080027a8 	cmpgeui	zero,at,158
 8002a3c:	08002f70 	cmpltui	zero,at,189
 8002a40:	d9012e17 	ldw	r4,1208(sp)
 8002a44:	d8812d15 	stw	r2,1204(sp)
 8002a48:	0109c83a 	sub	r4,zero,r4
 8002a4c:	d9012e15 	stw	r4,1208(sp)
 8002a50:	84000114 	ori	r16,r16,4
 8002a54:	ac800007 	ldb	r18,0(r21)
 8002a58:	003f5006 	br	800279c <___vfprintf_internal_r+0x170>
 8002a5c:	d9013017 	ldw	r4,1216(sp)
 8002a60:	d9412917 	ldw	r5,1188(sp)
 8002a64:	80044cc0 	call	80044cc <__swsetup_r>
 8002a68:	10003d1e 	bne	r2,zero,8002b60 <___vfprintf_internal_r+0x534>
 8002a6c:	d8c12917 	ldw	r3,1188(sp)
 8002a70:	1880030b 	ldhu	r2,12(r3)
 8002a74:	00c00284 	movi	r3,10
 8002a78:	1100068c 	andi	r4,r2,26
 8002a7c:	20ff101e 	bne	r4,r3,80026c0 <___vfprintf_internal_r+0x94>
 8002a80:	d9012917 	ldw	r4,1188(sp)
 8002a84:	20c0038b 	ldhu	r3,14(r4)
 8002a88:	193fffcc 	andi	r4,r3,65535
 8002a8c:	2120001c 	xori	r4,r4,32768
 8002a90:	21200004 	addi	r4,r4,-32768
 8002a94:	203f0a16 	blt	r4,zero,80026c0 <___vfprintf_internal_r+0x94>
 8002a98:	d9012917 	ldw	r4,1188(sp)
 8002a9c:	d9c12d17 	ldw	r7,1204(sp)
 8002aa0:	10bfff4c 	andi	r2,r2,65533
 8002aa4:	22800717 	ldw	r10,28(r4)
 8002aa8:	22400917 	ldw	r9,36(r4)
 8002aac:	d9013017 	ldw	r4,1216(sp)
 8002ab0:	02010004 	movi	r8,1024
 8002ab4:	d881070d 	sth	r2,1052(sp)
 8002ab8:	d9410404 	addi	r5,sp,1040
 8002abc:	d8800404 	addi	r2,sp,16
 8002ac0:	800d883a 	mov	r6,r16
 8002ac4:	d8c1078d 	sth	r3,1054(sp)
 8002ac8:	da810b15 	stw	r10,1068(sp)
 8002acc:	da410d15 	stw	r9,1076(sp)
 8002ad0:	d8810415 	stw	r2,1040(sp)
 8002ad4:	d8810815 	stw	r2,1056(sp)
 8002ad8:	da010615 	stw	r8,1048(sp)
 8002adc:	da010915 	stw	r8,1060(sp)
 8002ae0:	d8010a15 	stw	zero,1064(sp)
 8002ae4:	800262c0 	call	800262c <___vfprintf_internal_r>
 8002ae8:	d8812c15 	stw	r2,1200(sp)
 8002aec:	10000416 	blt	r2,zero,8002b00 <___vfprintf_internal_r+0x4d4>
 8002af0:	d9013017 	ldw	r4,1216(sp)
 8002af4:	d9410404 	addi	r5,sp,1040
 8002af8:	8005e980 	call	8005e98 <_fflush_r>
 8002afc:	1006501e 	bne	r2,zero,8004440 <___vfprintf_internal_r+0x1e14>
 8002b00:	d881070b 	ldhu	r2,1052(sp)
 8002b04:	1080100c 	andi	r2,r2,64
 8002b08:	10bfffcc 	andi	r2,r2,65535
 8002b0c:	10a0001c 	xori	r2,r2,32768
 8002b10:	10a00004 	addi	r2,r2,-32768
 8002b14:	10001426 	beq	r2,zero,8002b68 <___vfprintf_internal_r+0x53c>
 8002b18:	d8c12917 	ldw	r3,1188(sp)
 8002b1c:	1880030b 	ldhu	r2,12(r3)
 8002b20:	10801014 	ori	r2,r2,64
 8002b24:	1880030d 	sth	r2,12(r3)
 8002b28:	00000f06 	br	8002b68 <___vfprintf_internal_r+0x53c>
 8002b2c:	d8811d17 	ldw	r2,1140(sp)
 8002b30:	10000426 	beq	r2,zero,8002b44 <___vfprintf_internal_r+0x518>
 8002b34:	d9013017 	ldw	r4,1216(sp)
 8002b38:	d9412917 	ldw	r5,1188(sp)
 8002b3c:	d9811b04 	addi	r6,sp,1132
 8002b40:	80025f80 	call	80025f8 <__sprint_r>
 8002b44:	d8c12917 	ldw	r3,1188(sp)
 8002b48:	1880030b 	ldhu	r2,12(r3)
 8002b4c:	1080100c 	andi	r2,r2,64
 8002b50:	10bfffcc 	andi	r2,r2,65535
 8002b54:	10a0001c 	xori	r2,r2,32768
 8002b58:	10a00004 	addi	r2,r2,-32768
 8002b5c:	10000226 	beq	r2,zero,8002b68 <___vfprintf_internal_r+0x53c>
 8002b60:	00bfffc4 	movi	r2,-1
 8002b64:	d8812c15 	stw	r2,1200(sp)
 8002b68:	d8812c17 	ldw	r2,1200(sp)
 8002b6c:	dfc14617 	ldw	ra,1304(sp)
 8002b70:	df014517 	ldw	fp,1300(sp)
 8002b74:	ddc14417 	ldw	r23,1296(sp)
 8002b78:	dd814317 	ldw	r22,1292(sp)
 8002b7c:	dd414217 	ldw	r21,1288(sp)
 8002b80:	dd014117 	ldw	r20,1284(sp)
 8002b84:	dcc14017 	ldw	r19,1280(sp)
 8002b88:	dc813f17 	ldw	r18,1276(sp)
 8002b8c:	dc413e17 	ldw	r17,1272(sp)
 8002b90:	dc013d17 	ldw	r16,1268(sp)
 8002b94:	dec14704 	addi	sp,sp,1308
 8002b98:	f800283a 	ret
 8002b9c:	d9412917 	ldw	r5,1188(sp)
 8002ba0:	8809883a 	mov	r4,r17
 8002ba4:	d9811b04 	addi	r6,sp,1132
 8002ba8:	80025f80 	call	80025f8 <__sprint_r>
 8002bac:	103fe51e 	bne	r2,zero,8002b44 <___vfprintf_internal_r+0x518>
 8002bb0:	da400404 	addi	r9,sp,16
 8002bb4:	003eea06 	br	8002760 <___vfprintf_internal_r+0x134>
 8002bb8:	80061540 	call	8006154 <__sinit>
 8002bbc:	003eb306 	br	800268c <___vfprintf_internal_r+0x60>
 8002bc0:	e013883a 	mov	r9,fp
 8002bc4:	84000414 	ori	r16,r16,16
 8002bc8:	1839883a 	mov	fp,r3
 8002bcc:	8080080c 	andi	r2,r16,32
 8002bd0:	10034426 	beq	r2,zero,80038e4 <___vfprintf_internal_r+0x12b8>
 8002bd4:	d8c12d17 	ldw	r3,1204(sp)
 8002bd8:	18800117 	ldw	r2,4(r3)
 8002bdc:	1dc00017 	ldw	r23,0(r3)
 8002be0:	18c00204 	addi	r3,r3,8
 8002be4:	d8c12d15 	stw	r3,1204(sp)
 8002be8:	102d883a 	mov	r22,r2
 8002bec:	1003020e 	bge	r2,zero,80037f8 <___vfprintf_internal_r+0x11cc>
 8002bf0:	05efc83a 	sub	r23,zero,r23
 8002bf4:	b804c03a 	cmpne	r2,r23,zero
 8002bf8:	05adc83a 	sub	r22,zero,r22
 8002bfc:	b0adc83a 	sub	r22,r22,r2
 8002c00:	00800b44 	movi	r2,45
 8002c04:	d8812585 	stb	r2,1174(sp)
 8002c08:	00c00044 	movi	r3,1
 8002c0c:	bd84b03a 	or	r2,r23,r22
 8002c10:	e0000216 	blt	fp,zero,8002c1c <___vfprintf_internal_r+0x5f0>
 8002c14:	013fdfc4 	movi	r4,-129
 8002c18:	8120703a 	and	r16,r16,r4
 8002c1c:	1001cc1e 	bne	r2,zero,8003350 <___vfprintf_internal_r+0xd24>
 8002c20:	e001cb1e 	bne	fp,zero,8003350 <___vfprintf_internal_r+0xd24>
 8002c24:	18c03fcc 	andi	r3,r3,255
 8002c28:	1802ca1e 	bne	r3,zero,8003754 <___vfprintf_internal_r+0x1128>
 8002c2c:	8080004c 	andi	r2,r16,1
 8002c30:	1002c826 	beq	r2,zero,8003754 <___vfprintf_internal_r+0x1128>
 8002c34:	d8c13917 	ldw	r3,1252(sp)
 8002c38:	00800c04 	movi	r2,48
 8002c3c:	d8810dc5 	stb	r2,1079(sp)
 8002c40:	d8c12b15 	stw	r3,1196(sp)
 8002c44:	dcc10dc4 	addi	r19,sp,1079
 8002c48:	d8812b17 	ldw	r2,1196(sp)
 8002c4c:	d8812815 	stw	r2,1184(sp)
 8002c50:	1700010e 	bge	r2,fp,8002c58 <___vfprintf_internal_r+0x62c>
 8002c54:	df012815 	stw	fp,1184(sp)
 8002c58:	d8812583 	ldbu	r2,1174(sp)
 8002c5c:	df013115 	stw	fp,1220(sp)
 8002c60:	10803fcc 	andi	r2,r2,255
 8002c64:	1080201c 	xori	r2,r2,128
 8002c68:	10bfe004 	addi	r2,r2,-128
 8002c6c:	103ed726 	beq	r2,zero,80027cc <___vfprintf_internal_r+0x1a0>
 8002c70:	d8c12817 	ldw	r3,1184(sp)
 8002c74:	18c00044 	addi	r3,r3,1
 8002c78:	d8c12815 	stw	r3,1184(sp)
 8002c7c:	003ed306 	br	80027cc <___vfprintf_internal_r+0x1a0>
 8002c80:	8080020c 	andi	r2,r16,8
 8002c84:	e013883a 	mov	r9,fp
 8002c88:	1839883a 	mov	fp,r3
 8002c8c:	1003a626 	beq	r2,zero,8003b28 <___vfprintf_internal_r+0x14fc>
 8002c90:	d9012d17 	ldw	r4,1204(sp)
 8002c94:	25800017 	ldw	r22,0(r4)
 8002c98:	25000117 	ldw	r20,4(r4)
 8002c9c:	21000204 	addi	r4,r4,8
 8002ca0:	d9012d15 	stw	r4,1204(sp)
 8002ca4:	dd813315 	stw	r22,1228(sp)
 8002ca8:	dd013415 	stw	r20,1232(sp)
 8002cac:	b009883a 	mov	r4,r22
 8002cb0:	a00b883a 	mov	r5,r20
 8002cb4:	da413c15 	stw	r9,1264(sp)
 8002cb8:	8008a1c0 	call	8008a1c <__isinfd>
 8002cbc:	da413c17 	ldw	r9,1264(sp)
 8002cc0:	b009883a 	mov	r4,r22
 8002cc4:	a00b883a 	mov	r5,r20
 8002cc8:	10041d26 	beq	r2,zero,8003d40 <___vfprintf_internal_r+0x1714>
 8002ccc:	000d883a 	mov	r6,zero
 8002cd0:	000f883a 	mov	r7,zero
 8002cd4:	800a8180 	call	800a818 <__ltdf2>
 8002cd8:	da413c17 	ldw	r9,1264(sp)
 8002cdc:	1004da16 	blt	r2,zero,8004048 <___vfprintf_internal_r+0x1a1c>
 8002ce0:	d8812583 	ldbu	r2,1174(sp)
 8002ce4:	00c011c4 	movi	r3,71
 8002ce8:	1c83d116 	blt	r3,r18,8003c30 <___vfprintf_internal_r+0x1604>
 8002cec:	04c20074 	movhi	r19,2049
 8002cf0:	9cf72004 	addi	r19,r19,-9088
 8002cf4:	00c000c4 	movi	r3,3
 8002cf8:	d8c12815 	stw	r3,1184(sp)
 8002cfc:	00ffdfc4 	movi	r3,-129
 8002d00:	80e0703a 	and	r16,r16,r3
 8002d04:	d8c12817 	ldw	r3,1184(sp)
 8002d08:	d8013115 	stw	zero,1220(sp)
 8002d0c:	d8c12b15 	stw	r3,1196(sp)
 8002d10:	003fd306 	br	8002c60 <___vfprintf_internal_r+0x634>
 8002d14:	84000214 	ori	r16,r16,8
 8002d18:	ac800007 	ldb	r18,0(r21)
 8002d1c:	003e9f06 	br	800279c <___vfprintf_internal_r+0x170>
 8002d20:	e013883a 	mov	r9,fp
 8002d24:	84000414 	ori	r16,r16,16
 8002d28:	1839883a 	mov	fp,r3
 8002d2c:	8080080c 	andi	r2,r16,32
 8002d30:	10031d26 	beq	r2,zero,80039a8 <___vfprintf_internal_r+0x137c>
 8002d34:	d8812d17 	ldw	r2,1204(sp)
 8002d38:	0007883a 	mov	r3,zero
 8002d3c:	15c00017 	ldw	r23,0(r2)
 8002d40:	15800117 	ldw	r22,4(r2)
 8002d44:	10800204 	addi	r2,r2,8
 8002d48:	d8812d15 	stw	r2,1204(sp)
 8002d4c:	d8012585 	stb	zero,1174(sp)
 8002d50:	bd84b03a 	or	r2,r23,r22
 8002d54:	003fae06 	br	8002c10 <___vfprintf_internal_r+0x5e4>
 8002d58:	e013883a 	mov	r9,fp
 8002d5c:	84000414 	ori	r16,r16,16
 8002d60:	1839883a 	mov	fp,r3
 8002d64:	8080080c 	andi	r2,r16,32
 8002d68:	1002e726 	beq	r2,zero,8003908 <___vfprintf_internal_r+0x12dc>
 8002d6c:	d8c12d17 	ldw	r3,1204(sp)
 8002d70:	d9012d17 	ldw	r4,1204(sp)
 8002d74:	1dc00017 	ldw	r23,0(r3)
 8002d78:	1d800117 	ldw	r22,4(r3)
 8002d7c:	21000204 	addi	r4,r4,8
 8002d80:	00c00044 	movi	r3,1
 8002d84:	d9012d15 	stw	r4,1204(sp)
 8002d88:	bd84b03a 	or	r2,r23,r22
 8002d8c:	d8012585 	stb	zero,1174(sp)
 8002d90:	003f9f06 	br	8002c10 <___vfprintf_internal_r+0x5e4>
 8002d94:	e013883a 	mov	r9,fp
 8002d98:	1839883a 	mov	fp,r3
 8002d9c:	00c20074 	movhi	r3,2049
 8002da0:	18f72404 	addi	r3,r3,-9072
 8002da4:	d8c13615 	stw	r3,1240(sp)
 8002da8:	8080080c 	andi	r2,r16,32
 8002dac:	10007726 	beq	r2,zero,8002f8c <___vfprintf_internal_r+0x960>
 8002db0:	d9012d17 	ldw	r4,1204(sp)
 8002db4:	25c00017 	ldw	r23,0(r4)
 8002db8:	25800117 	ldw	r22,4(r4)
 8002dbc:	21000204 	addi	r4,r4,8
 8002dc0:	d9012d15 	stw	r4,1204(sp)
 8002dc4:	8080004c 	andi	r2,r16,1
 8002dc8:	1002c226 	beq	r2,zero,80038d4 <___vfprintf_internal_r+0x12a8>
 8002dcc:	bd84b03a 	or	r2,r23,r22
 8002dd0:	10035d26 	beq	r2,zero,8003b48 <___vfprintf_internal_r+0x151c>
 8002dd4:	00c00c04 	movi	r3,48
 8002dd8:	d8c12505 	stb	r3,1172(sp)
 8002ddc:	dc812545 	stb	r18,1173(sp)
 8002de0:	84000094 	ori	r16,r16,2
 8002de4:	00c00084 	movi	r3,2
 8002de8:	d8012585 	stb	zero,1174(sp)
 8002dec:	003f8806 	br	8002c10 <___vfprintf_internal_r+0x5e4>
 8002df0:	ac800007 	ldb	r18,0(r21)
 8002df4:	00c00a84 	movi	r3,42
 8002df8:	adc00044 	addi	r23,r21,1
 8002dfc:	90c57526 	beq	r18,r3,80043d4 <___vfprintf_internal_r+0x1da8>
 8002e00:	95bff404 	addi	r22,r18,-48
 8002e04:	0009883a 	mov	r4,zero
 8002e08:	9d84ff36 	bltu	r19,r22,8004208 <___vfprintf_internal_r+0x1bdc>
 8002e0c:	01400284 	movi	r5,10
 8002e10:	8001bbc0 	call	8001bbc <__mulsi3>
 8002e14:	bc800007 	ldb	r18,0(r23)
 8002e18:	b089883a 	add	r4,r22,r2
 8002e1c:	bdc00044 	addi	r23,r23,1
 8002e20:	95bff404 	addi	r22,r18,-48
 8002e24:	9dbff92e 	bgeu	r19,r22,8002e0c <___vfprintf_internal_r+0x7e0>
 8002e28:	2007883a 	mov	r3,r4
 8002e2c:	20044316 	blt	r4,zero,8003f3c <___vfprintf_internal_r+0x1910>
 8002e30:	b82b883a 	mov	r21,r23
 8002e34:	003e5a06 	br	80027a0 <___vfprintf_internal_r+0x174>
 8002e38:	ac800007 	ldb	r18,0(r21)
 8002e3c:	01001b04 	movi	r4,108
 8002e40:	a805883a 	mov	r2,r21
 8002e44:	91045526 	beq	r18,r4,8003f9c <___vfprintf_internal_r+0x1970>
 8002e48:	84000414 	ori	r16,r16,16
 8002e4c:	003e5306 	br	800279c <___vfprintf_internal_r+0x170>
 8002e50:	8080080c 	andi	r2,r16,32
 8002e54:	e013883a 	mov	r9,fp
 8002e58:	10034026 	beq	r2,zero,8003b5c <___vfprintf_internal_r+0x1530>
 8002e5c:	d9012d17 	ldw	r4,1204(sp)
 8002e60:	20800017 	ldw	r2,0(r4)
 8002e64:	d9012c17 	ldw	r4,1200(sp)
 8002e68:	2007d7fa 	srai	r3,r4,31
 8002e6c:	d9012d17 	ldw	r4,1204(sp)
 8002e70:	10c00115 	stw	r3,4(r2)
 8002e74:	21000104 	addi	r4,r4,4
 8002e78:	d9012d15 	stw	r4,1204(sp)
 8002e7c:	d9012c17 	ldw	r4,1200(sp)
 8002e80:	11000015 	stw	r4,0(r2)
 8002e84:	003e1f06 	br	8002704 <___vfprintf_internal_r+0xd8>
 8002e88:	d9012d17 	ldw	r4,1204(sp)
 8002e8c:	21000017 	ldw	r4,0(r4)
 8002e90:	d9012e15 	stw	r4,1208(sp)
 8002e94:	d9012d17 	ldw	r4,1204(sp)
 8002e98:	20800104 	addi	r2,r4,4
 8002e9c:	d9012e17 	ldw	r4,1208(sp)
 8002ea0:	203ee716 	blt	r4,zero,8002a40 <___vfprintf_internal_r+0x414>
 8002ea4:	d8812d15 	stw	r2,1204(sp)
 8002ea8:	ac800007 	ldb	r18,0(r21)
 8002eac:	003e3b06 	br	800279c <___vfprintf_internal_r+0x170>
 8002eb0:	e013883a 	mov	r9,fp
 8002eb4:	1839883a 	mov	fp,r3
 8002eb8:	d8c12d17 	ldw	r3,1204(sp)
 8002ebc:	00800c04 	movi	r2,48
 8002ec0:	01020074 	movhi	r4,2049
 8002ec4:	21372904 	addi	r4,r4,-9052
 8002ec8:	1dc00017 	ldw	r23,0(r3)
 8002ecc:	18c00104 	addi	r3,r3,4
 8002ed0:	d8812505 	stb	r2,1172(sp)
 8002ed4:	00801e04 	movi	r2,120
 8002ed8:	d8812545 	stb	r2,1173(sp)
 8002edc:	d8c12d15 	stw	r3,1204(sp)
 8002ee0:	002d883a 	mov	r22,zero
 8002ee4:	84000094 	ori	r16,r16,2
 8002ee8:	d9013615 	stw	r4,1240(sp)
 8002eec:	00c00084 	movi	r3,2
 8002ef0:	04801e04 	movi	r18,120
 8002ef4:	b805883a 	mov	r2,r23
 8002ef8:	d8012585 	stb	zero,1174(sp)
 8002efc:	003f4406 	br	8002c10 <___vfprintf_internal_r+0x5e4>
 8002f00:	84000814 	ori	r16,r16,32
 8002f04:	ac800007 	ldb	r18,0(r21)
 8002f08:	003e2406 	br	800279c <___vfprintf_internal_r+0x170>
 8002f0c:	d8812d17 	ldw	r2,1204(sp)
 8002f10:	d8012585 	stb	zero,1174(sp)
 8002f14:	e013883a 	mov	r9,fp
 8002f18:	14c00017 	ldw	r19,0(r2)
 8002f1c:	1839883a 	mov	fp,r3
 8002f20:	15c00104 	addi	r23,r2,4
 8002f24:	98045526 	beq	r19,zero,800407c <___vfprintf_internal_r+0x1a50>
 8002f28:	9809883a 	mov	r4,r19
 8002f2c:	18043116 	blt	r3,zero,8003ff4 <___vfprintf_internal_r+0x19c8>
 8002f30:	000b883a 	mov	r5,zero
 8002f34:	180d883a 	mov	r6,r3
 8002f38:	da413c15 	stw	r9,1264(sp)
 8002f3c:	80070700 	call	8007070 <memchr>
 8002f40:	da413c17 	ldw	r9,1264(sp)
 8002f44:	10047a26 	beq	r2,zero,8004130 <___vfprintf_internal_r+0x1b04>
 8002f48:	14c5c83a 	sub	r2,r2,r19
 8002f4c:	d8812b15 	stw	r2,1196(sp)
 8002f50:	e083d40e 	bge	fp,r2,8003ea4 <___vfprintf_internal_r+0x1878>
 8002f54:	df012815 	stw	fp,1184(sp)
 8002f58:	e004e416 	blt	fp,zero,80042ec <___vfprintf_internal_r+0x1cc0>
 8002f5c:	d8812583 	ldbu	r2,1174(sp)
 8002f60:	df012b15 	stw	fp,1196(sp)
 8002f64:	ddc12d15 	stw	r23,1204(sp)
 8002f68:	d8013115 	stw	zero,1220(sp)
 8002f6c:	003f3c06 	br	8002c60 <___vfprintf_internal_r+0x634>
 8002f70:	00820074 	movhi	r2,2049
 8002f74:	10b72904 	addi	r2,r2,-9052
 8002f78:	d8813615 	stw	r2,1240(sp)
 8002f7c:	8080080c 	andi	r2,r16,32
 8002f80:	e013883a 	mov	r9,fp
 8002f84:	1839883a 	mov	fp,r3
 8002f88:	103f891e 	bne	r2,zero,8002db0 <___vfprintf_internal_r+0x784>
 8002f8c:	8080040c 	andi	r2,r16,16
 8002f90:	1002c326 	beq	r2,zero,8003aa0 <___vfprintf_internal_r+0x1474>
 8002f94:	d8812d17 	ldw	r2,1204(sp)
 8002f98:	002d883a 	mov	r22,zero
 8002f9c:	15c00017 	ldw	r23,0(r2)
 8002fa0:	10800104 	addi	r2,r2,4
 8002fa4:	d8812d15 	stw	r2,1204(sp)
 8002fa8:	003f8606 	br	8002dc4 <___vfprintf_internal_r+0x798>
 8002fac:	84001014 	ori	r16,r16,64
 8002fb0:	ac800007 	ldb	r18,0(r21)
 8002fb4:	003df906 	br	800279c <___vfprintf_internal_r+0x170>
 8002fb8:	d8812587 	ldb	r2,1174(sp)
 8002fbc:	1002e51e 	bne	r2,zero,8003b54 <___vfprintf_internal_r+0x1528>
 8002fc0:	00800804 	movi	r2,32
 8002fc4:	d8812585 	stb	r2,1174(sp)
 8002fc8:	ac800007 	ldb	r18,0(r21)
 8002fcc:	003df306 	br	800279c <___vfprintf_internal_r+0x170>
 8002fd0:	84000054 	ori	r16,r16,1
 8002fd4:	ac800007 	ldb	r18,0(r21)
 8002fd8:	003df006 	br	800279c <___vfprintf_internal_r+0x170>
 8002fdc:	84002014 	ori	r16,r16,128
 8002fe0:	ac800007 	ldb	r18,0(r21)
 8002fe4:	003ded06 	br	800279c <___vfprintf_internal_r+0x170>
 8002fe8:	0009883a 	mov	r4,zero
 8002fec:	95bff404 	addi	r22,r18,-48
 8002ff0:	182f883a 	mov	r23,r3
 8002ff4:	01400284 	movi	r5,10
 8002ff8:	8001bbc0 	call	8001bbc <__mulsi3>
 8002ffc:	ac800007 	ldb	r18,0(r21)
 8003000:	1589883a 	add	r4,r2,r22
 8003004:	ad400044 	addi	r21,r21,1
 8003008:	95bff404 	addi	r22,r18,-48
 800300c:	9dbff92e 	bgeu	r19,r22,8002ff4 <___vfprintf_internal_r+0x9c8>
 8003010:	b807883a 	mov	r3,r23
 8003014:	d9012e15 	stw	r4,1208(sp)
 8003018:	003de106 	br	80027a0 <___vfprintf_internal_r+0x174>
 800301c:	00800ac4 	movi	r2,43
 8003020:	d8812585 	stb	r2,1174(sp)
 8003024:	ac800007 	ldb	r18,0(r21)
 8003028:	003ddc06 	br	800279c <___vfprintf_internal_r+0x170>
 800302c:	d8c12d17 	ldw	r3,1204(sp)
 8003030:	d9012d17 	ldw	r4,1204(sp)
 8003034:	e013883a 	mov	r9,fp
 8003038:	18800017 	ldw	r2,0(r3)
 800303c:	21000104 	addi	r4,r4,4
 8003040:	00c00044 	movi	r3,1
 8003044:	d8c12815 	stw	r3,1184(sp)
 8003048:	d8012585 	stb	zero,1174(sp)
 800304c:	d8810405 	stb	r2,1040(sp)
 8003050:	d9012d15 	stw	r4,1204(sp)
 8003054:	d8c12b15 	stw	r3,1196(sp)
 8003058:	dcc10404 	addi	r19,sp,1040
 800305c:	003dda06 	br	80027c8 <___vfprintf_internal_r+0x19c>
 8003060:	e013883a 	mov	r9,fp
 8003064:	1839883a 	mov	fp,r3
 8003068:	003ed806 	br	8002bcc <___vfprintf_internal_r+0x5a0>
 800306c:	e013883a 	mov	r9,fp
 8003070:	1839883a 	mov	fp,r3
 8003074:	003f2d06 	br	8002d2c <___vfprintf_internal_r+0x700>
 8003078:	e013883a 	mov	r9,fp
 800307c:	1839883a 	mov	fp,r3
 8003080:	003f3806 	br	8002d64 <___vfprintf_internal_r+0x738>
 8003084:	da011d17 	ldw	r8,1140(sp)
 8003088:	d8c11c17 	ldw	r3,1136(sp)
 800308c:	d8812587 	ldb	r2,1174(sp)
 8003090:	10000b26 	beq	r2,zero,80030c0 <___vfprintf_internal_r+0xa94>
 8003094:	d8812584 	addi	r2,sp,1174
 8003098:	48800015 	stw	r2,0(r9)
 800309c:	00800044 	movi	r2,1
 80030a0:	48800115 	stw	r2,4(r9)
 80030a4:	4091883a 	add	r8,r8,r2
 80030a8:	1887883a 	add	r3,r3,r2
 80030ac:	da011d15 	stw	r8,1140(sp)
 80030b0:	d8c11c15 	stw	r3,1136(sp)
 80030b4:	008001c4 	movi	r2,7
 80030b8:	10c18e16 	blt	r2,r3,80036f4 <___vfprintf_internal_r+0x10c8>
 80030bc:	4a400204 	addi	r9,r9,8
 80030c0:	d9012a17 	ldw	r4,1192(sp)
 80030c4:	20000b26 	beq	r4,zero,80030f4 <___vfprintf_internal_r+0xac8>
 80030c8:	d8812504 	addi	r2,sp,1172
 80030cc:	48800015 	stw	r2,0(r9)
 80030d0:	00800084 	movi	r2,2
 80030d4:	48800115 	stw	r2,4(r9)
 80030d8:	4091883a 	add	r8,r8,r2
 80030dc:	18c00044 	addi	r3,r3,1
 80030e0:	da011d15 	stw	r8,1140(sp)
 80030e4:	d8c11c15 	stw	r3,1136(sp)
 80030e8:	008001c4 	movi	r2,7
 80030ec:	10c17816 	blt	r2,r3,80036d0 <___vfprintf_internal_r+0x10a4>
 80030f0:	4a400204 	addi	r9,r9,8
 80030f4:	d9012f17 	ldw	r4,1212(sp)
 80030f8:	00802004 	movi	r2,128
 80030fc:	2080fc26 	beq	r4,r2,80034f0 <___vfprintf_internal_r+0xec4>
 8003100:	d8813117 	ldw	r2,1220(sp)
 8003104:	d9012b17 	ldw	r4,1196(sp)
 8003108:	112fc83a 	sub	r23,r2,r4
 800310c:	05c02a0e 	bge	zero,r23,80031b8 <___vfprintf_internal_r+0xb8c>
 8003110:	07000404 	movi	fp,16
 8003114:	05020074 	movhi	r20,2049
 8003118:	a5373484 	addi	r20,r20,-9006
 800311c:	e5c01d0e 	bge	fp,r23,8003194 <___vfprintf_internal_r+0xb68>
 8003120:	dc812a15 	stw	r18,1192(sp)
 8003124:	058001c4 	movi	r22,7
 8003128:	a025883a 	mov	r18,r20
 800312c:	8029883a 	mov	r20,r16
 8003130:	dc012917 	ldw	r16,1188(sp)
 8003134:	00000306 	br	8003144 <___vfprintf_internal_r+0xb18>
 8003138:	bdfffc04 	addi	r23,r23,-16
 800313c:	4a400204 	addi	r9,r9,8
 8003140:	e5c0110e 	bge	fp,r23,8003188 <___vfprintf_internal_r+0xb5c>
 8003144:	4c800015 	stw	r18,0(r9)
 8003148:	4f000115 	stw	fp,4(r9)
 800314c:	42000404 	addi	r8,r8,16
 8003150:	18c00044 	addi	r3,r3,1
 8003154:	da011d15 	stw	r8,1140(sp)
 8003158:	d8c11c15 	stw	r3,1136(sp)
 800315c:	b0fff60e 	bge	r22,r3,8003138 <___vfprintf_internal_r+0xb0c>
 8003160:	8809883a 	mov	r4,r17
 8003164:	800b883a 	mov	r5,r16
 8003168:	d9811b04 	addi	r6,sp,1132
 800316c:	80025f80 	call	80025f8 <__sprint_r>
 8003170:	103e741e 	bne	r2,zero,8002b44 <___vfprintf_internal_r+0x518>
 8003174:	bdfffc04 	addi	r23,r23,-16
 8003178:	da011d17 	ldw	r8,1140(sp)
 800317c:	d8c11c17 	ldw	r3,1136(sp)
 8003180:	da400404 	addi	r9,sp,16
 8003184:	e5ffef16 	blt	fp,r23,8003144 <___vfprintf_internal_r+0xb18>
 8003188:	a021883a 	mov	r16,r20
 800318c:	9029883a 	mov	r20,r18
 8003190:	dc812a17 	ldw	r18,1192(sp)
 8003194:	4d000015 	stw	r20,0(r9)
 8003198:	4dc00115 	stw	r23,4(r9)
 800319c:	45d1883a 	add	r8,r8,r23
 80031a0:	18c00044 	addi	r3,r3,1
 80031a4:	da011d15 	stw	r8,1140(sp)
 80031a8:	d8c11c15 	stw	r3,1136(sp)
 80031ac:	008001c4 	movi	r2,7
 80031b0:	10c13e16 	blt	r2,r3,80036ac <___vfprintf_internal_r+0x1080>
 80031b4:	4a400204 	addi	r9,r9,8
 80031b8:	8080400c 	andi	r2,r16,256
 80031bc:	1000831e 	bne	r2,zero,80033cc <___vfprintf_internal_r+0xda0>
 80031c0:	d8812b17 	ldw	r2,1196(sp)
 80031c4:	4cc00015 	stw	r19,0(r9)
 80031c8:	48800115 	stw	r2,4(r9)
 80031cc:	4091883a 	add	r8,r8,r2
 80031d0:	18c00044 	addi	r3,r3,1
 80031d4:	da011d15 	stw	r8,1140(sp)
 80031d8:	d8c11c15 	stw	r3,1136(sp)
 80031dc:	008001c4 	movi	r2,7
 80031e0:	10c05316 	blt	r2,r3,8003330 <___vfprintf_internal_r+0xd04>
 80031e4:	4a400204 	addi	r9,r9,8
 80031e8:	8400010c 	andi	r16,r16,4
 80031ec:	80002e26 	beq	r16,zero,80032a8 <___vfprintf_internal_r+0xc7c>
 80031f0:	d8812e17 	ldw	r2,1208(sp)
 80031f4:	d8c12817 	ldw	r3,1184(sp)
 80031f8:	10e1c83a 	sub	r16,r2,r3
 80031fc:	04002a0e 	bge	zero,r16,80032a8 <___vfprintf_internal_r+0xc7c>
 8003200:	04800404 	movi	r18,16
 8003204:	d8c11c17 	ldw	r3,1136(sp)
 8003208:	05c20074 	movhi	r23,2049
 800320c:	bdf73084 	addi	r23,r23,-9022
 8003210:	9400170e 	bge	r18,r16,8003270 <___vfprintf_internal_r+0xc44>
 8003214:	04c001c4 	movi	r19,7
 8003218:	dd012917 	ldw	r20,1188(sp)
 800321c:	00000306 	br	800322c <___vfprintf_internal_r+0xc00>
 8003220:	843ffc04 	addi	r16,r16,-16
 8003224:	4a400204 	addi	r9,r9,8
 8003228:	9400110e 	bge	r18,r16,8003270 <___vfprintf_internal_r+0xc44>
 800322c:	4dc00015 	stw	r23,0(r9)
 8003230:	4c800115 	stw	r18,4(r9)
 8003234:	42000404 	addi	r8,r8,16
 8003238:	18c00044 	addi	r3,r3,1
 800323c:	da011d15 	stw	r8,1140(sp)
 8003240:	d8c11c15 	stw	r3,1136(sp)
 8003244:	98fff60e 	bge	r19,r3,8003220 <___vfprintf_internal_r+0xbf4>
 8003248:	8809883a 	mov	r4,r17
 800324c:	a00b883a 	mov	r5,r20
 8003250:	d9811b04 	addi	r6,sp,1132
 8003254:	80025f80 	call	80025f8 <__sprint_r>
 8003258:	103e3a1e 	bne	r2,zero,8002b44 <___vfprintf_internal_r+0x518>
 800325c:	843ffc04 	addi	r16,r16,-16
 8003260:	da011d17 	ldw	r8,1140(sp)
 8003264:	d8c11c17 	ldw	r3,1136(sp)
 8003268:	da400404 	addi	r9,sp,16
 800326c:	943fef16 	blt	r18,r16,800322c <___vfprintf_internal_r+0xc00>
 8003270:	4dc00015 	stw	r23,0(r9)
 8003274:	4c000115 	stw	r16,4(r9)
 8003278:	8211883a 	add	r8,r16,r8
 800327c:	18c00044 	addi	r3,r3,1
 8003280:	da011d15 	stw	r8,1140(sp)
 8003284:	d8c11c15 	stw	r3,1136(sp)
 8003288:	008001c4 	movi	r2,7
 800328c:	10c0060e 	bge	r2,r3,80032a8 <___vfprintf_internal_r+0xc7c>
 8003290:	d9412917 	ldw	r5,1188(sp)
 8003294:	8809883a 	mov	r4,r17
 8003298:	d9811b04 	addi	r6,sp,1132
 800329c:	80025f80 	call	80025f8 <__sprint_r>
 80032a0:	103e281e 	bne	r2,zero,8002b44 <___vfprintf_internal_r+0x518>
 80032a4:	da011d17 	ldw	r8,1140(sp)
 80032a8:	dd012817 	ldw	r20,1184(sp)
 80032ac:	d9012e17 	ldw	r4,1208(sp)
 80032b0:	a100010e 	bge	r20,r4,80032b8 <___vfprintf_internal_r+0xc8c>
 80032b4:	2029883a 	mov	r20,r4
 80032b8:	d8812c17 	ldw	r2,1200(sp)
 80032bc:	1505883a 	add	r2,r2,r20
 80032c0:	d8812c15 	stw	r2,1200(sp)
 80032c4:	4000b91e 	bne	r8,zero,80035ac <___vfprintf_internal_r+0xf80>
 80032c8:	d8011c15 	stw	zero,1136(sp)
 80032cc:	a8800007 	ldb	r2,0(r21)
 80032d0:	da400404 	addi	r9,sp,16
 80032d4:	103d0d1e 	bne	r2,zero,800270c <___vfprintf_internal_r+0xe0>
 80032d8:	a825883a 	mov	r18,r21
 80032dc:	003d2306 	br	800276c <___vfprintf_internal_r+0x140>
 80032e0:	d9412917 	ldw	r5,1188(sp)
 80032e4:	8809883a 	mov	r4,r17
 80032e8:	d9811b04 	addi	r6,sp,1132
 80032ec:	80025f80 	call	80025f8 <__sprint_r>
 80032f0:	103e141e 	bne	r2,zero,8002b44 <___vfprintf_internal_r+0x518>
 80032f4:	da011d17 	ldw	r8,1140(sp)
 80032f8:	da400404 	addi	r9,sp,16
 80032fc:	8080004c 	andi	r2,r16,1
 8003300:	103fb926 	beq	r2,zero,80031e8 <___vfprintf_internal_r+0xbbc>
 8003304:	d8c11c17 	ldw	r3,1136(sp)
 8003308:	d9013717 	ldw	r4,1244(sp)
 800330c:	00800044 	movi	r2,1
 8003310:	48800115 	stw	r2,4(r9)
 8003314:	49000015 	stw	r4,0(r9)
 8003318:	4091883a 	add	r8,r8,r2
 800331c:	1887883a 	add	r3,r3,r2
 8003320:	da011d15 	stw	r8,1140(sp)
 8003324:	d8c11c15 	stw	r3,1136(sp)
 8003328:	008001c4 	movi	r2,7
 800332c:	10ffad0e 	bge	r2,r3,80031e4 <___vfprintf_internal_r+0xbb8>
 8003330:	d9412917 	ldw	r5,1188(sp)
 8003334:	8809883a 	mov	r4,r17
 8003338:	d9811b04 	addi	r6,sp,1132
 800333c:	80025f80 	call	80025f8 <__sprint_r>
 8003340:	103e001e 	bne	r2,zero,8002b44 <___vfprintf_internal_r+0x518>
 8003344:	da400404 	addi	r9,sp,16
 8003348:	da011d17 	ldw	r8,1140(sp)
 800334c:	003fa606 	br	80031e8 <___vfprintf_internal_r+0xbbc>
 8003350:	18803fcc 	andi	r2,r3,255
 8003354:	00c00044 	movi	r3,1
 8003358:	10c10126 	beq	r2,r3,8003760 <___vfprintf_internal_r+0x1134>
 800335c:	00c00084 	movi	r3,2
 8003360:	10c0ed26 	beq	r2,r3,8003718 <___vfprintf_internal_r+0x10ec>
 8003364:	d8c10dc4 	addi	r3,sp,1079
 8003368:	b808d0fa 	srli	r4,r23,3
 800336c:	b00a977a 	slli	r5,r22,29
 8003370:	b02cd0fa 	srli	r22,r22,3
 8003374:	bdc001cc 	andi	r23,r23,7
 8003378:	b8800c04 	addi	r2,r23,48
 800337c:	292eb03a 	or	r23,r5,r4
 8003380:	18800005 	stb	r2,0(r3)
 8003384:	bd88b03a 	or	r4,r23,r22
 8003388:	1827883a 	mov	r19,r3
 800338c:	18ffffc4 	addi	r3,r3,-1
 8003390:	203ff51e 	bne	r4,zero,8003368 <___vfprintf_internal_r+0xd3c>
 8003394:	8100004c 	andi	r4,r16,1
 8003398:	980b883a 	mov	r5,r19
 800339c:	20000726 	beq	r4,zero,80033bc <___vfprintf_internal_r+0xd90>
 80033a0:	10803fcc 	andi	r2,r2,255
 80033a4:	1080201c 	xori	r2,r2,128
 80033a8:	10bfe004 	addi	r2,r2,-128
 80033ac:	01000c04 	movi	r4,48
 80033b0:	11000226 	beq	r2,r4,80033bc <___vfprintf_internal_r+0xd90>
 80033b4:	1827883a 	mov	r19,r3
 80033b8:	293fffc5 	stb	r4,-1(r5)
 80033bc:	d8812717 	ldw	r2,1180(sp)
 80033c0:	14c5c83a 	sub	r2,r2,r19
 80033c4:	d8812b15 	stw	r2,1196(sp)
 80033c8:	003e1f06 	br	8002c48 <___vfprintf_internal_r+0x61c>
 80033cc:	00801944 	movi	r2,101
 80033d0:	14807c0e 	bge	r2,r18,80035c4 <___vfprintf_internal_r+0xf98>
 80033d4:	d9013317 	ldw	r4,1228(sp)
 80033d8:	d9413417 	ldw	r5,1232(sp)
 80033dc:	000d883a 	mov	r6,zero
 80033e0:	000f883a 	mov	r7,zero
 80033e4:	d8c13b15 	stw	r3,1260(sp)
 80033e8:	da013a15 	stw	r8,1256(sp)
 80033ec:	da413c15 	stw	r9,1264(sp)
 80033f0:	800a6f40 	call	800a6f4 <__nedf2>
 80033f4:	d8c13b17 	ldw	r3,1260(sp)
 80033f8:	da013a17 	ldw	r8,1256(sp)
 80033fc:	da413c17 	ldw	r9,1264(sp)
 8003400:	1001001e 	bne	r2,zero,8003804 <___vfprintf_internal_r+0x11d8>
 8003404:	00820074 	movhi	r2,2049
 8003408:	10b73004 	addi	r2,r2,-9024
 800340c:	48800015 	stw	r2,0(r9)
 8003410:	00800044 	movi	r2,1
 8003414:	48800115 	stw	r2,4(r9)
 8003418:	4091883a 	add	r8,r8,r2
 800341c:	1887883a 	add	r3,r3,r2
 8003420:	da011d15 	stw	r8,1140(sp)
 8003424:	d8c11c15 	stw	r3,1136(sp)
 8003428:	008001c4 	movi	r2,7
 800342c:	10c20316 	blt	r2,r3,8003c3c <___vfprintf_internal_r+0x1610>
 8003430:	4a400204 	addi	r9,r9,8
 8003434:	d8812417 	ldw	r2,1168(sp)
 8003438:	d8c13217 	ldw	r3,1224(sp)
 800343c:	10c00216 	blt	r2,r3,8003448 <___vfprintf_internal_r+0xe1c>
 8003440:	8080004c 	andi	r2,r16,1
 8003444:	103f6826 	beq	r2,zero,80031e8 <___vfprintf_internal_r+0xbbc>
 8003448:	d8c11c17 	ldw	r3,1136(sp)
 800344c:	d9013717 	ldw	r4,1244(sp)
 8003450:	00800044 	movi	r2,1
 8003454:	48800115 	stw	r2,4(r9)
 8003458:	49000015 	stw	r4,0(r9)
 800345c:	4091883a 	add	r8,r8,r2
 8003460:	1887883a 	add	r3,r3,r2
 8003464:	da011d15 	stw	r8,1140(sp)
 8003468:	d8c11c15 	stw	r3,1136(sp)
 800346c:	008001c4 	movi	r2,7
 8003470:	10c2ce16 	blt	r2,r3,8003fac <___vfprintf_internal_r+0x1980>
 8003474:	4a400204 	addi	r9,r9,8
 8003478:	d8813217 	ldw	r2,1224(sp)
 800347c:	14bfffc4 	addi	r18,r2,-1
 8003480:	04bf590e 	bge	zero,r18,80031e8 <___vfprintf_internal_r+0xbbc>
 8003484:	04c00404 	movi	r19,16
 8003488:	d8c11c17 	ldw	r3,1136(sp)
 800348c:	05020074 	movhi	r20,2049
 8003490:	a5373484 	addi	r20,r20,-9006
 8003494:	9c818a0e 	bge	r19,r18,8003ac0 <___vfprintf_internal_r+0x1494>
 8003498:	058001c4 	movi	r22,7
 800349c:	ddc12917 	ldw	r23,1188(sp)
 80034a0:	00000306 	br	80034b0 <___vfprintf_internal_r+0xe84>
 80034a4:	4a400204 	addi	r9,r9,8
 80034a8:	94bffc04 	addi	r18,r18,-16
 80034ac:	9c81840e 	bge	r19,r18,8003ac0 <___vfprintf_internal_r+0x1494>
 80034b0:	4d000015 	stw	r20,0(r9)
 80034b4:	4cc00115 	stw	r19,4(r9)
 80034b8:	42000404 	addi	r8,r8,16
 80034bc:	18c00044 	addi	r3,r3,1
 80034c0:	da011d15 	stw	r8,1140(sp)
 80034c4:	d8c11c15 	stw	r3,1136(sp)
 80034c8:	b0fff60e 	bge	r22,r3,80034a4 <___vfprintf_internal_r+0xe78>
 80034cc:	8809883a 	mov	r4,r17
 80034d0:	b80b883a 	mov	r5,r23
 80034d4:	d9811b04 	addi	r6,sp,1132
 80034d8:	80025f80 	call	80025f8 <__sprint_r>
 80034dc:	103d991e 	bne	r2,zero,8002b44 <___vfprintf_internal_r+0x518>
 80034e0:	da011d17 	ldw	r8,1140(sp)
 80034e4:	d8c11c17 	ldw	r3,1136(sp)
 80034e8:	da400404 	addi	r9,sp,16
 80034ec:	003fee06 	br	80034a8 <___vfprintf_internal_r+0xe7c>
 80034f0:	d8812e17 	ldw	r2,1208(sp)
 80034f4:	d9012817 	ldw	r4,1184(sp)
 80034f8:	112fc83a 	sub	r23,r2,r4
 80034fc:	05ff000e 	bge	zero,r23,8003100 <___vfprintf_internal_r+0xad4>
 8003500:	07000404 	movi	fp,16
 8003504:	05020074 	movhi	r20,2049
 8003508:	a5373484 	addi	r20,r20,-9006
 800350c:	e5c01d0e 	bge	fp,r23,8003584 <___vfprintf_internal_r+0xf58>
 8003510:	dc812a15 	stw	r18,1192(sp)
 8003514:	058001c4 	movi	r22,7
 8003518:	a025883a 	mov	r18,r20
 800351c:	8029883a 	mov	r20,r16
 8003520:	dc012917 	ldw	r16,1188(sp)
 8003524:	00000306 	br	8003534 <___vfprintf_internal_r+0xf08>
 8003528:	bdfffc04 	addi	r23,r23,-16
 800352c:	4a400204 	addi	r9,r9,8
 8003530:	e5c0110e 	bge	fp,r23,8003578 <___vfprintf_internal_r+0xf4c>
 8003534:	4c800015 	stw	r18,0(r9)
 8003538:	4f000115 	stw	fp,4(r9)
 800353c:	42000404 	addi	r8,r8,16
 8003540:	18c00044 	addi	r3,r3,1
 8003544:	da011d15 	stw	r8,1140(sp)
 8003548:	d8c11c15 	stw	r3,1136(sp)
 800354c:	b0fff60e 	bge	r22,r3,8003528 <___vfprintf_internal_r+0xefc>
 8003550:	8809883a 	mov	r4,r17
 8003554:	800b883a 	mov	r5,r16
 8003558:	d9811b04 	addi	r6,sp,1132
 800355c:	80025f80 	call	80025f8 <__sprint_r>
 8003560:	103d781e 	bne	r2,zero,8002b44 <___vfprintf_internal_r+0x518>
 8003564:	bdfffc04 	addi	r23,r23,-16
 8003568:	da011d17 	ldw	r8,1140(sp)
 800356c:	d8c11c17 	ldw	r3,1136(sp)
 8003570:	da400404 	addi	r9,sp,16
 8003574:	e5ffef16 	blt	fp,r23,8003534 <___vfprintf_internal_r+0xf08>
 8003578:	a021883a 	mov	r16,r20
 800357c:	9029883a 	mov	r20,r18
 8003580:	dc812a17 	ldw	r18,1192(sp)
 8003584:	4d000015 	stw	r20,0(r9)
 8003588:	4dc00115 	stw	r23,4(r9)
 800358c:	45d1883a 	add	r8,r8,r23
 8003590:	18c00044 	addi	r3,r3,1
 8003594:	da011d15 	stw	r8,1140(sp)
 8003598:	d8c11c15 	stw	r3,1136(sp)
 800359c:	008001c4 	movi	r2,7
 80035a0:	10c13616 	blt	r2,r3,8003a7c <___vfprintf_internal_r+0x1450>
 80035a4:	4a400204 	addi	r9,r9,8
 80035a8:	003ed506 	br	8003100 <___vfprintf_internal_r+0xad4>
 80035ac:	d9412917 	ldw	r5,1188(sp)
 80035b0:	8809883a 	mov	r4,r17
 80035b4:	d9811b04 	addi	r6,sp,1132
 80035b8:	80025f80 	call	80025f8 <__sprint_r>
 80035bc:	103f4226 	beq	r2,zero,80032c8 <___vfprintf_internal_r+0xc9c>
 80035c0:	003d6006 	br	8002b44 <___vfprintf_internal_r+0x518>
 80035c4:	d9013217 	ldw	r4,1224(sp)
 80035c8:	00800044 	movi	r2,1
 80035cc:	4cc00015 	stw	r19,0(r9)
 80035d0:	1101000e 	bge	r2,r4,80039d4 <___vfprintf_internal_r+0x13a8>
 80035d4:	00800044 	movi	r2,1
 80035d8:	48800115 	stw	r2,4(r9)
 80035dc:	4091883a 	add	r8,r8,r2
 80035e0:	1887883a 	add	r3,r3,r2
 80035e4:	da011d15 	stw	r8,1140(sp)
 80035e8:	d8c11c15 	stw	r3,1136(sp)
 80035ec:	008001c4 	movi	r2,7
 80035f0:	10c10c16 	blt	r2,r3,8003a24 <___vfprintf_internal_r+0x13f8>
 80035f4:	4a400204 	addi	r9,r9,8
 80035f8:	d8813717 	ldw	r2,1244(sp)
 80035fc:	48800015 	stw	r2,0(r9)
 8003600:	00800044 	movi	r2,1
 8003604:	48800115 	stw	r2,4(r9)
 8003608:	4091883a 	add	r8,r8,r2
 800360c:	1887883a 	add	r3,r3,r2
 8003610:	da011d15 	stw	r8,1140(sp)
 8003614:	d8c11c15 	stw	r3,1136(sp)
 8003618:	008001c4 	movi	r2,7
 800361c:	10c10a16 	blt	r2,r3,8003a48 <___vfprintf_internal_r+0x141c>
 8003620:	4c800204 	addi	r18,r9,8
 8003624:	d9013317 	ldw	r4,1228(sp)
 8003628:	d9413417 	ldw	r5,1232(sp)
 800362c:	000d883a 	mov	r6,zero
 8003630:	000f883a 	mov	r7,zero
 8003634:	d8c13b15 	stw	r3,1260(sp)
 8003638:	da013a15 	stw	r8,1256(sp)
 800363c:	800a6980 	call	800a698 <__eqdf2>
 8003640:	d8c13b17 	ldw	r3,1260(sp)
 8003644:	da013a17 	ldw	r8,1256(sp)
 8003648:	1000ba26 	beq	r2,zero,8003934 <___vfprintf_internal_r+0x1308>
 800364c:	d9013217 	ldw	r4,1224(sp)
 8003650:	9cc00044 	addi	r19,r19,1
 8003654:	94c00015 	stw	r19,0(r18)
 8003658:	20bfffc4 	addi	r2,r4,-1
 800365c:	90800115 	stw	r2,4(r18)
 8003660:	4091883a 	add	r8,r8,r2
 8003664:	18c00044 	addi	r3,r3,1
 8003668:	da011d15 	stw	r8,1140(sp)
 800366c:	d8c11c15 	stw	r3,1136(sp)
 8003670:	008001c4 	movi	r2,7
 8003674:	10c0e216 	blt	r2,r3,8003a00 <___vfprintf_internal_r+0x13d4>
 8003678:	94800204 	addi	r18,r18,8
 800367c:	d9013517 	ldw	r4,1236(sp)
 8003680:	d8811fc4 	addi	r2,sp,1151
 8003684:	90800015 	stw	r2,0(r18)
 8003688:	91000115 	stw	r4,4(r18)
 800368c:	4111883a 	add	r8,r8,r4
 8003690:	18c00044 	addi	r3,r3,1
 8003694:	da011d15 	stw	r8,1140(sp)
 8003698:	d8c11c15 	stw	r3,1136(sp)
 800369c:	008001c4 	movi	r2,7
 80036a0:	10ff2316 	blt	r2,r3,8003330 <___vfprintf_internal_r+0xd04>
 80036a4:	92400204 	addi	r9,r18,8
 80036a8:	003ecf06 	br	80031e8 <___vfprintf_internal_r+0xbbc>
 80036ac:	d9412917 	ldw	r5,1188(sp)
 80036b0:	8809883a 	mov	r4,r17
 80036b4:	d9811b04 	addi	r6,sp,1132
 80036b8:	80025f80 	call	80025f8 <__sprint_r>
 80036bc:	103d211e 	bne	r2,zero,8002b44 <___vfprintf_internal_r+0x518>
 80036c0:	da011d17 	ldw	r8,1140(sp)
 80036c4:	d8c11c17 	ldw	r3,1136(sp)
 80036c8:	da400404 	addi	r9,sp,16
 80036cc:	003eba06 	br	80031b8 <___vfprintf_internal_r+0xb8c>
 80036d0:	d9412917 	ldw	r5,1188(sp)
 80036d4:	8809883a 	mov	r4,r17
 80036d8:	d9811b04 	addi	r6,sp,1132
 80036dc:	80025f80 	call	80025f8 <__sprint_r>
 80036e0:	103d181e 	bne	r2,zero,8002b44 <___vfprintf_internal_r+0x518>
 80036e4:	da011d17 	ldw	r8,1140(sp)
 80036e8:	d8c11c17 	ldw	r3,1136(sp)
 80036ec:	da400404 	addi	r9,sp,16
 80036f0:	003e8006 	br	80030f4 <___vfprintf_internal_r+0xac8>
 80036f4:	d9412917 	ldw	r5,1188(sp)
 80036f8:	8809883a 	mov	r4,r17
 80036fc:	d9811b04 	addi	r6,sp,1132
 8003700:	80025f80 	call	80025f8 <__sprint_r>
 8003704:	103d0f1e 	bne	r2,zero,8002b44 <___vfprintf_internal_r+0x518>
 8003708:	da011d17 	ldw	r8,1140(sp)
 800370c:	d8c11c17 	ldw	r3,1136(sp)
 8003710:	da400404 	addi	r9,sp,16
 8003714:	003e6a06 	br	80030c0 <___vfprintf_internal_r+0xa94>
 8003718:	d9413617 	ldw	r5,1240(sp)
 800371c:	d8810dc4 	addi	r2,sp,1079
 8003720:	b8c003cc 	andi	r3,r23,15
 8003724:	b008973a 	slli	r4,r22,28
 8003728:	28c7883a 	add	r3,r5,r3
 800372c:	b82ed13a 	srli	r23,r23,4
 8003730:	18c00003 	ldbu	r3,0(r3)
 8003734:	b02cd13a 	srli	r22,r22,4
 8003738:	25eeb03a 	or	r23,r4,r23
 800373c:	10c00005 	stb	r3,0(r2)
 8003740:	bd86b03a 	or	r3,r23,r22
 8003744:	1027883a 	mov	r19,r2
 8003748:	10bfffc4 	addi	r2,r2,-1
 800374c:	183ff41e 	bne	r3,zero,8003720 <___vfprintf_internal_r+0x10f4>
 8003750:	003f1a06 	br	80033bc <___vfprintf_internal_r+0xd90>
 8003754:	d8012b15 	stw	zero,1196(sp)
 8003758:	dcc10e04 	addi	r19,sp,1080
 800375c:	003d3a06 	br	8002c48 <___vfprintf_internal_r+0x61c>
 8003760:	b0025426 	beq	r22,zero,80040b4 <___vfprintf_internal_r+0x1a88>
 8003764:	b807883a 	mov	r3,r23
 8003768:	d8810dc4 	addi	r2,sp,1079
 800376c:	882f883a 	mov	r23,r17
 8003770:	04c00244 	movi	r19,9
 8003774:	8023883a 	mov	r17,r16
 8003778:	da412815 	stw	r9,1184(sp)
 800377c:	1821883a 	mov	r16,r3
 8003780:	8009883a 	mov	r4,r16
 8003784:	b00b883a 	mov	r5,r22
 8003788:	01800284 	movi	r6,10
 800378c:	000f883a 	mov	r7,zero
 8003790:	1029883a 	mov	r20,r2
 8003794:	80097d00 	call	80097d0 <__umoddi3>
 8003798:	10800c04 	addi	r2,r2,48
 800379c:	8009883a 	mov	r4,r16
 80037a0:	b00b883a 	mov	r5,r22
 80037a4:	a0800005 	stb	r2,0(r20)
 80037a8:	01800284 	movi	r6,10
 80037ac:	000f883a 	mov	r7,zero
 80037b0:	80091800 	call	8009180 <__udivdi3>
 80037b4:	1021883a 	mov	r16,r2
 80037b8:	182d883a 	mov	r22,r3
 80037bc:	a0bfffc4 	addi	r2,r20,-1
 80037c0:	183fef1e 	bne	r3,zero,8003780 <___vfprintf_internal_r+0x1154>
 80037c4:	9c3fee36 	bltu	r19,r16,8003780 <___vfprintf_internal_r+0x1154>
 80037c8:	da412817 	ldw	r9,1184(sp)
 80037cc:	8005883a 	mov	r2,r16
 80037d0:	8821883a 	mov	r16,r17
 80037d4:	b823883a 	mov	r17,r23
 80037d8:	102f883a 	mov	r23,r2
 80037dc:	d8812717 	ldw	r2,1180(sp)
 80037e0:	a4ffffc4 	addi	r19,r20,-1
 80037e4:	bdc00c04 	addi	r23,r23,48
 80037e8:	14c5c83a 	sub	r2,r2,r19
 80037ec:	a5ffffc5 	stb	r23,-1(r20)
 80037f0:	d8812b15 	stw	r2,1196(sp)
 80037f4:	003d1406 	br	8002c48 <___vfprintf_internal_r+0x61c>
 80037f8:	00c00044 	movi	r3,1
 80037fc:	bd84b03a 	or	r2,r23,r22
 8003800:	003d0306 	br	8002c10 <___vfprintf_internal_r+0x5e4>
 8003804:	dc812417 	ldw	r18,1168(sp)
 8003808:	0481140e 	bge	zero,r18,8003c5c <___vfprintf_internal_r+0x1630>
 800380c:	d9013217 	ldw	r4,1224(sp)
 8003810:	4cc00015 	stw	r19,0(r9)
 8003814:	9100ec16 	blt	r18,r4,8003bc8 <___vfprintf_internal_r+0x159c>
 8003818:	49000115 	stw	r4,4(r9)
 800381c:	4111883a 	add	r8,r8,r4
 8003820:	18c00044 	addi	r3,r3,1
 8003824:	da011d15 	stw	r8,1140(sp)
 8003828:	d8c11c15 	stw	r3,1136(sp)
 800382c:	008001c4 	movi	r2,7
 8003830:	10c23616 	blt	r2,r3,800410c <___vfprintf_internal_r+0x1ae0>
 8003834:	4a400204 	addi	r9,r9,8
 8003838:	d8813217 	ldw	r2,1224(sp)
 800383c:	90a5c83a 	sub	r18,r18,r2
 8003840:	04beae0e 	bge	zero,r18,80032fc <___vfprintf_internal_r+0xcd0>
 8003844:	04c00404 	movi	r19,16
 8003848:	d8c11c17 	ldw	r3,1136(sp)
 800384c:	05020074 	movhi	r20,2049
 8003850:	a5373484 	addi	r20,r20,-9006
 8003854:	9c81dd0e 	bge	r19,r18,8003fcc <___vfprintf_internal_r+0x19a0>
 8003858:	058001c4 	movi	r22,7
 800385c:	ddc12917 	ldw	r23,1188(sp)
 8003860:	00000306 	br	8003870 <___vfprintf_internal_r+0x1244>
 8003864:	4a400204 	addi	r9,r9,8
 8003868:	94bffc04 	addi	r18,r18,-16
 800386c:	9c81d70e 	bge	r19,r18,8003fcc <___vfprintf_internal_r+0x19a0>
 8003870:	4d000015 	stw	r20,0(r9)
 8003874:	4cc00115 	stw	r19,4(r9)
 8003878:	42000404 	addi	r8,r8,16
 800387c:	18c00044 	addi	r3,r3,1
 8003880:	da011d15 	stw	r8,1140(sp)
 8003884:	d8c11c15 	stw	r3,1136(sp)
 8003888:	b0fff60e 	bge	r22,r3,8003864 <___vfprintf_internal_r+0x1238>
 800388c:	8809883a 	mov	r4,r17
 8003890:	b80b883a 	mov	r5,r23
 8003894:	d9811b04 	addi	r6,sp,1132
 8003898:	80025f80 	call	80025f8 <__sprint_r>
 800389c:	103ca91e 	bne	r2,zero,8002b44 <___vfprintf_internal_r+0x518>
 80038a0:	da011d17 	ldw	r8,1140(sp)
 80038a4:	d8c11c17 	ldw	r3,1136(sp)
 80038a8:	da400404 	addi	r9,sp,16
 80038ac:	003fee06 	br	8003868 <___vfprintf_internal_r+0x123c>
 80038b0:	d9412917 	ldw	r5,1188(sp)
 80038b4:	8809883a 	mov	r4,r17
 80038b8:	d9811b04 	addi	r6,sp,1132
 80038bc:	80025f80 	call	80025f8 <__sprint_r>
 80038c0:	103ca01e 	bne	r2,zero,8002b44 <___vfprintf_internal_r+0x518>
 80038c4:	da011d17 	ldw	r8,1140(sp)
 80038c8:	d8c11c17 	ldw	r3,1136(sp)
 80038cc:	da400404 	addi	r9,sp,16
 80038d0:	003dee06 	br	800308c <___vfprintf_internal_r+0xa60>
 80038d4:	00c00084 	movi	r3,2
 80038d8:	bd84b03a 	or	r2,r23,r22
 80038dc:	d8012585 	stb	zero,1174(sp)
 80038e0:	003ccb06 	br	8002c10 <___vfprintf_internal_r+0x5e4>
 80038e4:	8080040c 	andi	r2,r16,16
 80038e8:	1000ae26 	beq	r2,zero,8003ba4 <___vfprintf_internal_r+0x1578>
 80038ec:	d9012d17 	ldw	r4,1204(sp)
 80038f0:	25c00017 	ldw	r23,0(r4)
 80038f4:	21000104 	addi	r4,r4,4
 80038f8:	d9012d15 	stw	r4,1204(sp)
 80038fc:	b82dd7fa 	srai	r22,r23,31
 8003900:	b005883a 	mov	r2,r22
 8003904:	003cb906 	br	8002bec <___vfprintf_internal_r+0x5c0>
 8003908:	8080040c 	andi	r2,r16,16
 800390c:	10007026 	beq	r2,zero,8003ad0 <___vfprintf_internal_r+0x14a4>
 8003910:	d8812d17 	ldw	r2,1204(sp)
 8003914:	002d883a 	mov	r22,zero
 8003918:	00c00044 	movi	r3,1
 800391c:	15c00017 	ldw	r23,0(r2)
 8003920:	10800104 	addi	r2,r2,4
 8003924:	d8812d15 	stw	r2,1204(sp)
 8003928:	d8012585 	stb	zero,1174(sp)
 800392c:	b805883a 	mov	r2,r23
 8003930:	003cb706 	br	8002c10 <___vfprintf_internal_r+0x5e4>
 8003934:	d8813217 	ldw	r2,1224(sp)
 8003938:	14ffffc4 	addi	r19,r2,-1
 800393c:	04ff4f0e 	bge	zero,r19,800367c <___vfprintf_internal_r+0x1050>
 8003940:	05800404 	movi	r22,16
 8003944:	05020074 	movhi	r20,2049
 8003948:	a5373484 	addi	r20,r20,-9006
 800394c:	b4c0470e 	bge	r22,r19,8003a6c <___vfprintf_internal_r+0x1440>
 8003950:	05c001c4 	movi	r23,7
 8003954:	df012917 	ldw	fp,1188(sp)
 8003958:	00000306 	br	8003968 <___vfprintf_internal_r+0x133c>
 800395c:	94800204 	addi	r18,r18,8
 8003960:	9cfffc04 	addi	r19,r19,-16
 8003964:	b4c0410e 	bge	r22,r19,8003a6c <___vfprintf_internal_r+0x1440>
 8003968:	95000015 	stw	r20,0(r18)
 800396c:	95800115 	stw	r22,4(r18)
 8003970:	42000404 	addi	r8,r8,16
 8003974:	18c00044 	addi	r3,r3,1
 8003978:	da011d15 	stw	r8,1140(sp)
 800397c:	d8c11c15 	stw	r3,1136(sp)
 8003980:	b8fff60e 	bge	r23,r3,800395c <___vfprintf_internal_r+0x1330>
 8003984:	8809883a 	mov	r4,r17
 8003988:	e00b883a 	mov	r5,fp
 800398c:	d9811b04 	addi	r6,sp,1132
 8003990:	80025f80 	call	80025f8 <__sprint_r>
 8003994:	103c6b1e 	bne	r2,zero,8002b44 <___vfprintf_internal_r+0x518>
 8003998:	da011d17 	ldw	r8,1140(sp)
 800399c:	d8c11c17 	ldw	r3,1136(sp)
 80039a0:	dc800404 	addi	r18,sp,16
 80039a4:	003fee06 	br	8003960 <___vfprintf_internal_r+0x1334>
 80039a8:	8080040c 	andi	r2,r16,16
 80039ac:	10005326 	beq	r2,zero,8003afc <___vfprintf_internal_r+0x14d0>
 80039b0:	d8c12d17 	ldw	r3,1204(sp)
 80039b4:	002d883a 	mov	r22,zero
 80039b8:	1dc00017 	ldw	r23,0(r3)
 80039bc:	18c00104 	addi	r3,r3,4
 80039c0:	d8c12d15 	stw	r3,1204(sp)
 80039c4:	b805883a 	mov	r2,r23
 80039c8:	0007883a 	mov	r3,zero
 80039cc:	d8012585 	stb	zero,1174(sp)
 80039d0:	003c8f06 	br	8002c10 <___vfprintf_internal_r+0x5e4>
 80039d4:	8088703a 	and	r4,r16,r2
 80039d8:	203efe1e 	bne	r4,zero,80035d4 <___vfprintf_internal_r+0xfa8>
 80039dc:	48800115 	stw	r2,4(r9)
 80039e0:	42000044 	addi	r8,r8,1
 80039e4:	18c00044 	addi	r3,r3,1
 80039e8:	da011d15 	stw	r8,1140(sp)
 80039ec:	d8c11c15 	stw	r3,1136(sp)
 80039f0:	008001c4 	movi	r2,7
 80039f4:	10c00216 	blt	r2,r3,8003a00 <___vfprintf_internal_r+0x13d4>
 80039f8:	4c800204 	addi	r18,r9,8
 80039fc:	003f1f06 	br	800367c <___vfprintf_internal_r+0x1050>
 8003a00:	d9412917 	ldw	r5,1188(sp)
 8003a04:	8809883a 	mov	r4,r17
 8003a08:	d9811b04 	addi	r6,sp,1132
 8003a0c:	80025f80 	call	80025f8 <__sprint_r>
 8003a10:	103c4c1e 	bne	r2,zero,8002b44 <___vfprintf_internal_r+0x518>
 8003a14:	dc800404 	addi	r18,sp,16
 8003a18:	da011d17 	ldw	r8,1140(sp)
 8003a1c:	d8c11c17 	ldw	r3,1136(sp)
 8003a20:	003f1606 	br	800367c <___vfprintf_internal_r+0x1050>
 8003a24:	d9412917 	ldw	r5,1188(sp)
 8003a28:	8809883a 	mov	r4,r17
 8003a2c:	d9811b04 	addi	r6,sp,1132
 8003a30:	80025f80 	call	80025f8 <__sprint_r>
 8003a34:	103c431e 	bne	r2,zero,8002b44 <___vfprintf_internal_r+0x518>
 8003a38:	da011d17 	ldw	r8,1140(sp)
 8003a3c:	d8c11c17 	ldw	r3,1136(sp)
 8003a40:	da400404 	addi	r9,sp,16
 8003a44:	003eec06 	br	80035f8 <___vfprintf_internal_r+0xfcc>
 8003a48:	d9412917 	ldw	r5,1188(sp)
 8003a4c:	8809883a 	mov	r4,r17
 8003a50:	d9811b04 	addi	r6,sp,1132
 8003a54:	80025f80 	call	80025f8 <__sprint_r>
 8003a58:	103c3a1e 	bne	r2,zero,8002b44 <___vfprintf_internal_r+0x518>
 8003a5c:	da011d17 	ldw	r8,1140(sp)
 8003a60:	d8c11c17 	ldw	r3,1136(sp)
 8003a64:	dc800404 	addi	r18,sp,16
 8003a68:	003eee06 	br	8003624 <___vfprintf_internal_r+0xff8>
 8003a6c:	95000015 	stw	r20,0(r18)
 8003a70:	94c00115 	stw	r19,4(r18)
 8003a74:	44d1883a 	add	r8,r8,r19
 8003a78:	003efa06 	br	8003664 <___vfprintf_internal_r+0x1038>
 8003a7c:	d9412917 	ldw	r5,1188(sp)
 8003a80:	8809883a 	mov	r4,r17
 8003a84:	d9811b04 	addi	r6,sp,1132
 8003a88:	80025f80 	call	80025f8 <__sprint_r>
 8003a8c:	103c2d1e 	bne	r2,zero,8002b44 <___vfprintf_internal_r+0x518>
 8003a90:	da011d17 	ldw	r8,1140(sp)
 8003a94:	d8c11c17 	ldw	r3,1136(sp)
 8003a98:	da400404 	addi	r9,sp,16
 8003a9c:	003d9806 	br	8003100 <___vfprintf_internal_r+0xad4>
 8003aa0:	8080100c 	andi	r2,r16,64
 8003aa4:	10011626 	beq	r2,zero,8003f00 <___vfprintf_internal_r+0x18d4>
 8003aa8:	d8c12d17 	ldw	r3,1204(sp)
 8003aac:	002d883a 	mov	r22,zero
 8003ab0:	1dc0000b 	ldhu	r23,0(r3)
 8003ab4:	18c00104 	addi	r3,r3,4
 8003ab8:	d8c12d15 	stw	r3,1204(sp)
 8003abc:	003cc106 	br	8002dc4 <___vfprintf_internal_r+0x798>
 8003ac0:	4d000015 	stw	r20,0(r9)
 8003ac4:	4c800115 	stw	r18,4(r9)
 8003ac8:	4491883a 	add	r8,r8,r18
 8003acc:	003dc006 	br	80031d0 <___vfprintf_internal_r+0xba4>
 8003ad0:	8080100c 	andi	r2,r16,64
 8003ad4:	10010126 	beq	r2,zero,8003edc <___vfprintf_internal_r+0x18b0>
 8003ad8:	d8c12d17 	ldw	r3,1204(sp)
 8003adc:	002d883a 	mov	r22,zero
 8003ae0:	1dc0000b 	ldhu	r23,0(r3)
 8003ae4:	18c00104 	addi	r3,r3,4
 8003ae8:	d8c12d15 	stw	r3,1204(sp)
 8003aec:	b805883a 	mov	r2,r23
 8003af0:	00c00044 	movi	r3,1
 8003af4:	d8012585 	stb	zero,1174(sp)
 8003af8:	003c4506 	br	8002c10 <___vfprintf_internal_r+0x5e4>
 8003afc:	8080100c 	andi	r2,r16,64
 8003b00:	10010526 	beq	r2,zero,8003f18 <___vfprintf_internal_r+0x18ec>
 8003b04:	d9012d17 	ldw	r4,1204(sp)
 8003b08:	002d883a 	mov	r22,zero
 8003b0c:	0007883a 	mov	r3,zero
 8003b10:	25c0000b 	ldhu	r23,0(r4)
 8003b14:	21000104 	addi	r4,r4,4
 8003b18:	d9012d15 	stw	r4,1204(sp)
 8003b1c:	b805883a 	mov	r2,r23
 8003b20:	d8012585 	stb	zero,1174(sp)
 8003b24:	003c3a06 	br	8002c10 <___vfprintf_internal_r+0x5e4>
 8003b28:	d8812d17 	ldw	r2,1204(sp)
 8003b2c:	15800017 	ldw	r22,0(r2)
 8003b30:	15000117 	ldw	r20,4(r2)
 8003b34:	10800204 	addi	r2,r2,8
 8003b38:	d8812d15 	stw	r2,1204(sp)
 8003b3c:	dd813315 	stw	r22,1228(sp)
 8003b40:	dd013415 	stw	r20,1232(sp)
 8003b44:	003c5906 	br	8002cac <___vfprintf_internal_r+0x680>
 8003b48:	00c00084 	movi	r3,2
 8003b4c:	d8012585 	stb	zero,1174(sp)
 8003b50:	003c2f06 	br	8002c10 <___vfprintf_internal_r+0x5e4>
 8003b54:	ac800007 	ldb	r18,0(r21)
 8003b58:	003b1006 	br	800279c <___vfprintf_internal_r+0x170>
 8003b5c:	8080040c 	andi	r2,r16,16
 8003b60:	1000091e 	bne	r2,zero,8003b88 <___vfprintf_internal_r+0x155c>
 8003b64:	8400100c 	andi	r16,r16,64
 8003b68:	80000726 	beq	r16,zero,8003b88 <___vfprintf_internal_r+0x155c>
 8003b6c:	d8c12d17 	ldw	r3,1204(sp)
 8003b70:	d9012c17 	ldw	r4,1200(sp)
 8003b74:	18800017 	ldw	r2,0(r3)
 8003b78:	18c00104 	addi	r3,r3,4
 8003b7c:	d8c12d15 	stw	r3,1204(sp)
 8003b80:	1100000d 	sth	r4,0(r2)
 8003b84:	003adf06 	br	8002704 <___vfprintf_internal_r+0xd8>
 8003b88:	d8c12d17 	ldw	r3,1204(sp)
 8003b8c:	d9012c17 	ldw	r4,1200(sp)
 8003b90:	18800017 	ldw	r2,0(r3)
 8003b94:	18c00104 	addi	r3,r3,4
 8003b98:	d8c12d15 	stw	r3,1204(sp)
 8003b9c:	11000015 	stw	r4,0(r2)
 8003ba0:	003ad806 	br	8002704 <___vfprintf_internal_r+0xd8>
 8003ba4:	8080100c 	andi	r2,r16,64
 8003ba8:	1000c526 	beq	r2,zero,8003ec0 <___vfprintf_internal_r+0x1894>
 8003bac:	d8812d17 	ldw	r2,1204(sp)
 8003bb0:	15c0000f 	ldh	r23,0(r2)
 8003bb4:	10800104 	addi	r2,r2,4
 8003bb8:	d8812d15 	stw	r2,1204(sp)
 8003bbc:	b82dd7fa 	srai	r22,r23,31
 8003bc0:	b005883a 	mov	r2,r22
 8003bc4:	003c0906 	br	8002bec <___vfprintf_internal_r+0x5c0>
 8003bc8:	4c800115 	stw	r18,4(r9)
 8003bcc:	9211883a 	add	r8,r18,r8
 8003bd0:	18c00044 	addi	r3,r3,1
 8003bd4:	da011d15 	stw	r8,1140(sp)
 8003bd8:	d8c11c15 	stw	r3,1136(sp)
 8003bdc:	008001c4 	movi	r2,7
 8003be0:	10c14016 	blt	r2,r3,80040e4 <___vfprintf_internal_r+0x1ab8>
 8003be4:	4a400204 	addi	r9,r9,8
 8003be8:	d8813717 	ldw	r2,1244(sp)
 8003bec:	9ca7883a 	add	r19,r19,r18
 8003bf0:	48800015 	stw	r2,0(r9)
 8003bf4:	00800044 	movi	r2,1
 8003bf8:	48800115 	stw	r2,4(r9)
 8003bfc:	4091883a 	add	r8,r8,r2
 8003c00:	1887883a 	add	r3,r3,r2
 8003c04:	da011d15 	stw	r8,1140(sp)
 8003c08:	d8c11c15 	stw	r3,1136(sp)
 8003c0c:	008001c4 	movi	r2,7
 8003c10:	10c12c16 	blt	r2,r3,80040c4 <___vfprintf_internal_r+0x1a98>
 8003c14:	4a400204 	addi	r9,r9,8
 8003c18:	d9013217 	ldw	r4,1224(sp)
 8003c1c:	da011d17 	ldw	r8,1140(sp)
 8003c20:	d8c11c17 	ldw	r3,1136(sp)
 8003c24:	24a5c83a 	sub	r18,r4,r18
 8003c28:	4cc00015 	stw	r19,0(r9)
 8003c2c:	003fa506 	br	8003ac4 <___vfprintf_internal_r+0x1498>
 8003c30:	04c20074 	movhi	r19,2049
 8003c34:	9cf72104 	addi	r19,r19,-9084
 8003c38:	003c2e06 	br	8002cf4 <___vfprintf_internal_r+0x6c8>
 8003c3c:	d9412917 	ldw	r5,1188(sp)
 8003c40:	8809883a 	mov	r4,r17
 8003c44:	d9811b04 	addi	r6,sp,1132
 8003c48:	80025f80 	call	80025f8 <__sprint_r>
 8003c4c:	103bbd1e 	bne	r2,zero,8002b44 <___vfprintf_internal_r+0x518>
 8003c50:	da011d17 	ldw	r8,1140(sp)
 8003c54:	da400404 	addi	r9,sp,16
 8003c58:	003df606 	br	8003434 <___vfprintf_internal_r+0xe08>
 8003c5c:	00820074 	movhi	r2,2049
 8003c60:	10b73004 	addi	r2,r2,-9024
 8003c64:	48800015 	stw	r2,0(r9)
 8003c68:	00800044 	movi	r2,1
 8003c6c:	48800115 	stw	r2,4(r9)
 8003c70:	4091883a 	add	r8,r8,r2
 8003c74:	1887883a 	add	r3,r3,r2
 8003c78:	da011d15 	stw	r8,1140(sp)
 8003c7c:	d8c11c15 	stw	r3,1136(sp)
 8003c80:	008001c4 	movi	r2,7
 8003c84:	10c0bc16 	blt	r2,r3,8003f78 <___vfprintf_internal_r+0x194c>
 8003c88:	4a400204 	addi	r9,r9,8
 8003c8c:	9000041e 	bne	r18,zero,8003ca0 <___vfprintf_internal_r+0x1674>
 8003c90:	d8c13217 	ldw	r3,1224(sp)
 8003c94:	1800021e 	bne	r3,zero,8003ca0 <___vfprintf_internal_r+0x1674>
 8003c98:	8080004c 	andi	r2,r16,1
 8003c9c:	103d5226 	beq	r2,zero,80031e8 <___vfprintf_internal_r+0xbbc>
 8003ca0:	d8c11c17 	ldw	r3,1136(sp)
 8003ca4:	d9013717 	ldw	r4,1244(sp)
 8003ca8:	00800044 	movi	r2,1
 8003cac:	48800115 	stw	r2,4(r9)
 8003cb0:	49000015 	stw	r4,0(r9)
 8003cb4:	4091883a 	add	r8,r8,r2
 8003cb8:	1887883a 	add	r3,r3,r2
 8003cbc:	da011d15 	stw	r8,1140(sp)
 8003cc0:	d8c11c15 	stw	r3,1136(sp)
 8003cc4:	008001c4 	movi	r2,7
 8003cc8:	10c14516 	blt	r2,r3,80041e0 <___vfprintf_internal_r+0x1bb4>
 8003ccc:	4a400204 	addi	r9,r9,8
 8003cd0:	04a5c83a 	sub	r18,zero,r18
 8003cd4:	0480d70e 	bge	zero,r18,8004034 <___vfprintf_internal_r+0x1a08>
 8003cd8:	05800404 	movi	r22,16
 8003cdc:	05020074 	movhi	r20,2049
 8003ce0:	a5373484 	addi	r20,r20,-9006
 8003ce4:	b480db0e 	bge	r22,r18,8004054 <___vfprintf_internal_r+0x1a28>
 8003ce8:	05c001c4 	movi	r23,7
 8003cec:	df012917 	ldw	fp,1188(sp)
 8003cf0:	00000306 	br	8003d00 <___vfprintf_internal_r+0x16d4>
 8003cf4:	4a400204 	addi	r9,r9,8
 8003cf8:	94bffc04 	addi	r18,r18,-16
 8003cfc:	b480d50e 	bge	r22,r18,8004054 <___vfprintf_internal_r+0x1a28>
 8003d00:	4d000015 	stw	r20,0(r9)
 8003d04:	4d800115 	stw	r22,4(r9)
 8003d08:	42000404 	addi	r8,r8,16
 8003d0c:	18c00044 	addi	r3,r3,1
 8003d10:	da011d15 	stw	r8,1140(sp)
 8003d14:	d8c11c15 	stw	r3,1136(sp)
 8003d18:	b8fff60e 	bge	r23,r3,8003cf4 <___vfprintf_internal_r+0x16c8>
 8003d1c:	8809883a 	mov	r4,r17
 8003d20:	e00b883a 	mov	r5,fp
 8003d24:	d9811b04 	addi	r6,sp,1132
 8003d28:	80025f80 	call	80025f8 <__sprint_r>
 8003d2c:	103b851e 	bne	r2,zero,8002b44 <___vfprintf_internal_r+0x518>
 8003d30:	da011d17 	ldw	r8,1140(sp)
 8003d34:	d8c11c17 	ldw	r3,1136(sp)
 8003d38:	da400404 	addi	r9,sp,16
 8003d3c:	003fee06 	br	8003cf8 <___vfprintf_internal_r+0x16cc>
 8003d40:	da413c15 	stw	r9,1264(sp)
 8003d44:	8008a540 	call	8008a54 <__isnand>
 8003d48:	da413c17 	ldw	r9,1264(sp)
 8003d4c:	10007e1e 	bne	r2,zero,8003f48 <___vfprintf_internal_r+0x191c>
 8003d50:	00bfffc4 	movi	r2,-1
 8003d54:	e0816a26 	beq	fp,r2,8004300 <___vfprintf_internal_r+0x1cd4>
 8003d58:	008019c4 	movi	r2,103
 8003d5c:	90816526 	beq	r18,r2,80042f4 <___vfprintf_internal_r+0x1cc8>
 8003d60:	008011c4 	movi	r2,71
 8003d64:	90816326 	beq	r18,r2,80042f4 <___vfprintf_internal_r+0x1cc8>
 8003d68:	80c04014 	ori	r3,r16,256
 8003d6c:	d8c12a15 	stw	r3,1192(sp)
 8003d70:	a0016516 	blt	r20,zero,8004308 <___vfprintf_internal_r+0x1cdc>
 8003d74:	d8012f05 	stb	zero,1212(sp)
 8003d78:	00801984 	movi	r2,102
 8003d7c:	9080f226 	beq	r18,r2,8004148 <___vfprintf_internal_r+0x1b1c>
 8003d80:	00801184 	movi	r2,70
 8003d84:	9080f026 	beq	r18,r2,8004148 <___vfprintf_internal_r+0x1b1c>
 8003d88:	00801944 	movi	r2,101
 8003d8c:	90818d26 	beq	r18,r2,80043c4 <___vfprintf_internal_r+0x1d98>
 8003d90:	00801144 	movi	r2,69
 8003d94:	90818b26 	beq	r18,r2,80043c4 <___vfprintf_internal_r+0x1d98>
 8003d98:	e02f883a 	mov	r23,fp
 8003d9c:	d8812404 	addi	r2,sp,1168
 8003da0:	d8800115 	stw	r2,4(sp)
 8003da4:	d8812304 	addi	r2,sp,1164
 8003da8:	d8800215 	stw	r2,8(sp)
 8003dac:	d8812204 	addi	r2,sp,1160
 8003db0:	ddc00015 	stw	r23,0(sp)
 8003db4:	d8800315 	stw	r2,12(sp)
 8003db8:	8809883a 	mov	r4,r17
 8003dbc:	b00b883a 	mov	r5,r22
 8003dc0:	a00d883a 	mov	r6,r20
 8003dc4:	01c00084 	movi	r7,2
 8003dc8:	da413c15 	stw	r9,1264(sp)
 8003dcc:	800487c0 	call	800487c <_dtoa_r>
 8003dd0:	1027883a 	mov	r19,r2
 8003dd4:	008019c4 	movi	r2,103
 8003dd8:	da413c17 	ldw	r9,1264(sp)
 8003ddc:	9081951e 	bne	r18,r2,8004434 <___vfprintf_internal_r+0x1e08>
 8003de0:	8080004c 	andi	r2,r16,1
 8003de4:	10017926 	beq	r2,zero,80043cc <___vfprintf_internal_r+0x1da0>
 8003de8:	00801184 	movi	r2,70
 8003dec:	9dc7883a 	add	r3,r19,r23
 8003df0:	9080e626 	beq	r18,r2,800418c <___vfprintf_internal_r+0x1b60>
 8003df4:	b009883a 	mov	r4,r22
 8003df8:	a00b883a 	mov	r5,r20
 8003dfc:	000d883a 	mov	r6,zero
 8003e00:	000f883a 	mov	r7,zero
 8003e04:	d8c13b15 	stw	r3,1260(sp)
 8003e08:	da413c15 	stw	r9,1264(sp)
 8003e0c:	800a6980 	call	800a698 <__eqdf2>
 8003e10:	d8c13b17 	ldw	r3,1260(sp)
 8003e14:	da413c17 	ldw	r9,1264(sp)
 8003e18:	10000726 	beq	r2,zero,8003e38 <___vfprintf_internal_r+0x180c>
 8003e1c:	d8812217 	ldw	r2,1160(sp)
 8003e20:	10c18a2e 	bgeu	r2,r3,800444c <___vfprintf_internal_r+0x1e20>
 8003e24:	01000c04 	movi	r4,48
 8003e28:	11000005 	stb	r4,0(r2)
 8003e2c:	10800044 	addi	r2,r2,1
 8003e30:	d8812215 	stw	r2,1160(sp)
 8003e34:	10fffc1e 	bne	r2,r3,8003e28 <___vfprintf_internal_r+0x17fc>
 8003e38:	1cc7c83a 	sub	r3,r3,r19
 8003e3c:	d8c13215 	stw	r3,1224(sp)
 8003e40:	008019c4 	movi	r2,103
 8003e44:	9080fa26 	beq	r18,r2,8004230 <___vfprintf_internal_r+0x1c04>
 8003e48:	008011c4 	movi	r2,71
 8003e4c:	9080f826 	beq	r18,r2,8004230 <___vfprintf_internal_r+0x1c04>
 8003e50:	00801984 	movi	r2,102
 8003e54:	90818e1e 	bne	r18,r2,8004490 <___vfprintf_internal_r+0x1e64>
 8003e58:	d8812417 	ldw	r2,1168(sp)
 8003e5c:	d8812b15 	stw	r2,1196(sp)
 8003e60:	00817c0e 	bge	zero,r2,8004454 <___vfprintf_internal_r+0x1e28>
 8003e64:	e000021e 	bne	fp,zero,8003e70 <___vfprintf_internal_r+0x1844>
 8003e68:	8400004c 	andi	r16,r16,1
 8003e6c:	80000426 	beq	r16,zero,8003e80 <___vfprintf_internal_r+0x1854>
 8003e70:	d8812b17 	ldw	r2,1196(sp)
 8003e74:	e2000044 	addi	r8,fp,1
 8003e78:	1205883a 	add	r2,r2,r8
 8003e7c:	d8812b15 	stw	r2,1196(sp)
 8003e80:	d8812815 	stw	r2,1184(sp)
 8003e84:	10010b16 	blt	r2,zero,80042b4 <___vfprintf_internal_r+0x1c88>
 8003e88:	ddc12f07 	ldb	r23,1212(sp)
 8003e8c:	b800e426 	beq	r23,zero,8004220 <___vfprintf_internal_r+0x1bf4>
 8003e90:	00800b44 	movi	r2,45
 8003e94:	d8812585 	stb	r2,1174(sp)
 8003e98:	dc012a17 	ldw	r16,1192(sp)
 8003e9c:	d8013115 	stw	zero,1220(sp)
 8003ea0:	003b7306 	br	8002c70 <___vfprintf_internal_r+0x644>
 8003ea4:	d8812b17 	ldw	r2,1196(sp)
 8003ea8:	d8812815 	stw	r2,1184(sp)
 8003eac:	10005716 	blt	r2,zero,800400c <___vfprintf_internal_r+0x19e0>
 8003eb0:	d8812583 	ldbu	r2,1174(sp)
 8003eb4:	ddc12d15 	stw	r23,1204(sp)
 8003eb8:	d8013115 	stw	zero,1220(sp)
 8003ebc:	003b6806 	br	8002c60 <___vfprintf_internal_r+0x634>
 8003ec0:	d8c12d17 	ldw	r3,1204(sp)
 8003ec4:	1dc00017 	ldw	r23,0(r3)
 8003ec8:	18c00104 	addi	r3,r3,4
 8003ecc:	d8c12d15 	stw	r3,1204(sp)
 8003ed0:	b82dd7fa 	srai	r22,r23,31
 8003ed4:	b005883a 	mov	r2,r22
 8003ed8:	003b4406 	br	8002bec <___vfprintf_internal_r+0x5c0>
 8003edc:	d9012d17 	ldw	r4,1204(sp)
 8003ee0:	002d883a 	mov	r22,zero
 8003ee4:	00c00044 	movi	r3,1
 8003ee8:	25c00017 	ldw	r23,0(r4)
 8003eec:	21000104 	addi	r4,r4,4
 8003ef0:	d9012d15 	stw	r4,1204(sp)
 8003ef4:	b805883a 	mov	r2,r23
 8003ef8:	d8012585 	stb	zero,1174(sp)
 8003efc:	003b4406 	br	8002c10 <___vfprintf_internal_r+0x5e4>
 8003f00:	d9012d17 	ldw	r4,1204(sp)
 8003f04:	002d883a 	mov	r22,zero
 8003f08:	25c00017 	ldw	r23,0(r4)
 8003f0c:	21000104 	addi	r4,r4,4
 8003f10:	d9012d15 	stw	r4,1204(sp)
 8003f14:	003bab06 	br	8002dc4 <___vfprintf_internal_r+0x798>
 8003f18:	d8812d17 	ldw	r2,1204(sp)
 8003f1c:	002d883a 	mov	r22,zero
 8003f20:	0007883a 	mov	r3,zero
 8003f24:	15c00017 	ldw	r23,0(r2)
 8003f28:	10800104 	addi	r2,r2,4
 8003f2c:	d8812d15 	stw	r2,1204(sp)
 8003f30:	d8012585 	stb	zero,1174(sp)
 8003f34:	b805883a 	mov	r2,r23
 8003f38:	003b3506 	br	8002c10 <___vfprintf_internal_r+0x5e4>
 8003f3c:	00ffffc4 	movi	r3,-1
 8003f40:	b82b883a 	mov	r21,r23
 8003f44:	003a1606 	br	80027a0 <___vfprintf_internal_r+0x174>
 8003f48:	008011c4 	movi	r2,71
 8003f4c:	1480b116 	blt	r2,r18,8004214 <___vfprintf_internal_r+0x1be8>
 8003f50:	04c20074 	movhi	r19,2049
 8003f54:	9cf72204 	addi	r19,r19,-9080
 8003f58:	00c000c4 	movi	r3,3
 8003f5c:	00bfdfc4 	movi	r2,-129
 8003f60:	80a0703a 	and	r16,r16,r2
 8003f64:	d8c12815 	stw	r3,1184(sp)
 8003f68:	d8812583 	ldbu	r2,1174(sp)
 8003f6c:	d8c12b15 	stw	r3,1196(sp)
 8003f70:	d8013115 	stw	zero,1220(sp)
 8003f74:	003b3a06 	br	8002c60 <___vfprintf_internal_r+0x634>
 8003f78:	d9412917 	ldw	r5,1188(sp)
 8003f7c:	8809883a 	mov	r4,r17
 8003f80:	d9811b04 	addi	r6,sp,1132
 8003f84:	80025f80 	call	80025f8 <__sprint_r>
 8003f88:	103aee1e 	bne	r2,zero,8002b44 <___vfprintf_internal_r+0x518>
 8003f8c:	dc812417 	ldw	r18,1168(sp)
 8003f90:	da011d17 	ldw	r8,1140(sp)
 8003f94:	da400404 	addi	r9,sp,16
 8003f98:	003f3c06 	br	8003c8c <___vfprintf_internal_r+0x1660>
 8003f9c:	ad400044 	addi	r21,r21,1
 8003fa0:	84000814 	ori	r16,r16,32
 8003fa4:	14800047 	ldb	r18,1(r2)
 8003fa8:	0039fc06 	br	800279c <___vfprintf_internal_r+0x170>
 8003fac:	d9412917 	ldw	r5,1188(sp)
 8003fb0:	8809883a 	mov	r4,r17
 8003fb4:	d9811b04 	addi	r6,sp,1132
 8003fb8:	80025f80 	call	80025f8 <__sprint_r>
 8003fbc:	103ae11e 	bne	r2,zero,8002b44 <___vfprintf_internal_r+0x518>
 8003fc0:	da011d17 	ldw	r8,1140(sp)
 8003fc4:	da400404 	addi	r9,sp,16
 8003fc8:	003d2b06 	br	8003478 <___vfprintf_internal_r+0xe4c>
 8003fcc:	4d000015 	stw	r20,0(r9)
 8003fd0:	4c800115 	stw	r18,4(r9)
 8003fd4:	4491883a 	add	r8,r8,r18
 8003fd8:	18c00044 	addi	r3,r3,1
 8003fdc:	da011d15 	stw	r8,1140(sp)
 8003fe0:	d8c11c15 	stw	r3,1136(sp)
 8003fe4:	008001c4 	movi	r2,7
 8003fe8:	10fcbd16 	blt	r2,r3,80032e0 <___vfprintf_internal_r+0xcb4>
 8003fec:	4a400204 	addi	r9,r9,8
 8003ff0:	003cc206 	br	80032fc <___vfprintf_internal_r+0xcd0>
 8003ff4:	da413c15 	stw	r9,1264(sp)
 8003ff8:	8008c640 	call	8008c64 <strlen>
 8003ffc:	d8812b15 	stw	r2,1196(sp)
 8004000:	d8812815 	stw	r2,1184(sp)
 8004004:	da413c17 	ldw	r9,1264(sp)
 8004008:	103fa90e 	bge	r2,zero,8003eb0 <___vfprintf_internal_r+0x1884>
 800400c:	d8012815 	stw	zero,1184(sp)
 8004010:	003fa706 	br	8003eb0 <___vfprintf_internal_r+0x1884>
 8004014:	d9412917 	ldw	r5,1188(sp)
 8004018:	8809883a 	mov	r4,r17
 800401c:	d9811b04 	addi	r6,sp,1132
 8004020:	80025f80 	call	80025f8 <__sprint_r>
 8004024:	103ac71e 	bne	r2,zero,8002b44 <___vfprintf_internal_r+0x518>
 8004028:	da011d17 	ldw	r8,1140(sp)
 800402c:	d8c11c17 	ldw	r3,1136(sp)
 8004030:	da400404 	addi	r9,sp,16
 8004034:	d8813217 	ldw	r2,1224(sp)
 8004038:	4cc00015 	stw	r19,0(r9)
 800403c:	48800115 	stw	r2,4(r9)
 8004040:	4091883a 	add	r8,r8,r2
 8004044:	003c6206 	br	80031d0 <___vfprintf_internal_r+0xba4>
 8004048:	00800b44 	movi	r2,45
 800404c:	d8812585 	stb	r2,1174(sp)
 8004050:	003b2406 	br	8002ce4 <___vfprintf_internal_r+0x6b8>
 8004054:	4d000015 	stw	r20,0(r9)
 8004058:	4c800115 	stw	r18,4(r9)
 800405c:	4491883a 	add	r8,r8,r18
 8004060:	18c00044 	addi	r3,r3,1
 8004064:	da011d15 	stw	r8,1140(sp)
 8004068:	d8c11c15 	stw	r3,1136(sp)
 800406c:	008001c4 	movi	r2,7
 8004070:	10ffe816 	blt	r2,r3,8004014 <___vfprintf_internal_r+0x19e8>
 8004074:	4a400204 	addi	r9,r9,8
 8004078:	003fee06 	br	8004034 <___vfprintf_internal_r+0x1a08>
 800407c:	d8c12b15 	stw	r3,1196(sp)
 8004080:	00800184 	movi	r2,6
 8004084:	10c0062e 	bgeu	r2,r3,80040a0 <___vfprintf_internal_r+0x1a74>
 8004088:	d8812b15 	stw	r2,1196(sp)
 800408c:	d8812815 	stw	r2,1184(sp)
 8004090:	ddc12d15 	stw	r23,1204(sp)
 8004094:	04c20074 	movhi	r19,2049
 8004098:	9cf72e04 	addi	r19,r19,-9032
 800409c:	0039ca06 	br	80027c8 <___vfprintf_internal_r+0x19c>
 80040a0:	d8812b17 	ldw	r2,1196(sp)
 80040a4:	d8812815 	stw	r2,1184(sp)
 80040a8:	103ff90e 	bge	r2,zero,8004090 <___vfprintf_internal_r+0x1a64>
 80040ac:	d8012815 	stw	zero,1184(sp)
 80040b0:	003ff706 	br	8004090 <___vfprintf_internal_r+0x1a64>
 80040b4:	00800244 	movi	r2,9
 80040b8:	15fdaa36 	bltu	r2,r23,8003764 <___vfprintf_internal_r+0x1138>
 80040bc:	dd010e04 	addi	r20,sp,1080
 80040c0:	003dc606 	br	80037dc <___vfprintf_internal_r+0x11b0>
 80040c4:	d9412917 	ldw	r5,1188(sp)
 80040c8:	8809883a 	mov	r4,r17
 80040cc:	d9811b04 	addi	r6,sp,1132
 80040d0:	80025f80 	call	80025f8 <__sprint_r>
 80040d4:	103a9b1e 	bne	r2,zero,8002b44 <___vfprintf_internal_r+0x518>
 80040d8:	dc812417 	ldw	r18,1168(sp)
 80040dc:	da400404 	addi	r9,sp,16
 80040e0:	003ecd06 	br	8003c18 <___vfprintf_internal_r+0x15ec>
 80040e4:	d9412917 	ldw	r5,1188(sp)
 80040e8:	8809883a 	mov	r4,r17
 80040ec:	d9811b04 	addi	r6,sp,1132
 80040f0:	80025f80 	call	80025f8 <__sprint_r>
 80040f4:	103a931e 	bne	r2,zero,8002b44 <___vfprintf_internal_r+0x518>
 80040f8:	dc812417 	ldw	r18,1168(sp)
 80040fc:	da011d17 	ldw	r8,1140(sp)
 8004100:	d8c11c17 	ldw	r3,1136(sp)
 8004104:	da400404 	addi	r9,sp,16
 8004108:	003eb706 	br	8003be8 <___vfprintf_internal_r+0x15bc>
 800410c:	d9412917 	ldw	r5,1188(sp)
 8004110:	8809883a 	mov	r4,r17
 8004114:	d9811b04 	addi	r6,sp,1132
 8004118:	80025f80 	call	80025f8 <__sprint_r>
 800411c:	103a891e 	bne	r2,zero,8002b44 <___vfprintf_internal_r+0x518>
 8004120:	dc812417 	ldw	r18,1168(sp)
 8004124:	da011d17 	ldw	r8,1140(sp)
 8004128:	da400404 	addi	r9,sp,16
 800412c:	003dc206 	br	8003838 <___vfprintf_internal_r+0x120c>
 8004130:	df012815 	stw	fp,1184(sp)
 8004134:	d8812583 	ldbu	r2,1174(sp)
 8004138:	df012b15 	stw	fp,1196(sp)
 800413c:	ddc12d15 	stw	r23,1204(sp)
 8004140:	d8013115 	stw	zero,1220(sp)
 8004144:	003ac606 	br	8002c60 <___vfprintf_internal_r+0x634>
 8004148:	d8812404 	addi	r2,sp,1168
 800414c:	d8800115 	stw	r2,4(sp)
 8004150:	d8812304 	addi	r2,sp,1164
 8004154:	d8800215 	stw	r2,8(sp)
 8004158:	d8812204 	addi	r2,sp,1160
 800415c:	df000015 	stw	fp,0(sp)
 8004160:	d8800315 	stw	r2,12(sp)
 8004164:	8809883a 	mov	r4,r17
 8004168:	b00b883a 	mov	r5,r22
 800416c:	a00d883a 	mov	r6,r20
 8004170:	01c000c4 	movi	r7,3
 8004174:	da413c15 	stw	r9,1264(sp)
 8004178:	800487c0 	call	800487c <_dtoa_r>
 800417c:	da413c17 	ldw	r9,1264(sp)
 8004180:	1027883a 	mov	r19,r2
 8004184:	1707883a 	add	r3,r2,fp
 8004188:	e02f883a 	mov	r23,fp
 800418c:	99000007 	ldb	r4,0(r19)
 8004190:	00800c04 	movi	r2,48
 8004194:	20800326 	beq	r4,r2,80041a4 <___vfprintf_internal_r+0x1b78>
 8004198:	da812417 	ldw	r10,1168(sp)
 800419c:	1a87883a 	add	r3,r3,r10
 80041a0:	003f1406 	br	8003df4 <___vfprintf_internal_r+0x17c8>
 80041a4:	b009883a 	mov	r4,r22
 80041a8:	a00b883a 	mov	r5,r20
 80041ac:	000d883a 	mov	r6,zero
 80041b0:	000f883a 	mov	r7,zero
 80041b4:	d8c13b15 	stw	r3,1260(sp)
 80041b8:	da413c15 	stw	r9,1264(sp)
 80041bc:	800a6f40 	call	800a6f4 <__nedf2>
 80041c0:	d8c13b17 	ldw	r3,1260(sp)
 80041c4:	da413c17 	ldw	r9,1264(sp)
 80041c8:	103ff326 	beq	r2,zero,8004198 <___vfprintf_internal_r+0x1b6c>
 80041cc:	00800044 	movi	r2,1
 80041d0:	15d5c83a 	sub	r10,r2,r23
 80041d4:	da812415 	stw	r10,1168(sp)
 80041d8:	1a87883a 	add	r3,r3,r10
 80041dc:	003f0506 	br	8003df4 <___vfprintf_internal_r+0x17c8>
 80041e0:	d9412917 	ldw	r5,1188(sp)
 80041e4:	8809883a 	mov	r4,r17
 80041e8:	d9811b04 	addi	r6,sp,1132
 80041ec:	80025f80 	call	80025f8 <__sprint_r>
 80041f0:	103a541e 	bne	r2,zero,8002b44 <___vfprintf_internal_r+0x518>
 80041f4:	dc812417 	ldw	r18,1168(sp)
 80041f8:	da011d17 	ldw	r8,1140(sp)
 80041fc:	d8c11c17 	ldw	r3,1136(sp)
 8004200:	da400404 	addi	r9,sp,16
 8004204:	003eb206 	br	8003cd0 <___vfprintf_internal_r+0x16a4>
 8004208:	b82b883a 	mov	r21,r23
 800420c:	0007883a 	mov	r3,zero
 8004210:	00396306 	br	80027a0 <___vfprintf_internal_r+0x174>
 8004214:	04c20074 	movhi	r19,2049
 8004218:	9cf72304 	addi	r19,r19,-9076
 800421c:	003f4e06 	br	8003f58 <___vfprintf_internal_r+0x192c>
 8004220:	d8812583 	ldbu	r2,1174(sp)
 8004224:	dc012a17 	ldw	r16,1192(sp)
 8004228:	d8013115 	stw	zero,1220(sp)
 800422c:	003a8c06 	br	8002c60 <___vfprintf_internal_r+0x634>
 8004230:	d8812417 	ldw	r2,1168(sp)
 8004234:	d8812b15 	stw	r2,1196(sp)
 8004238:	1029883a 	mov	r20,r2
 800423c:	00bfff44 	movi	r2,-3
 8004240:	a0800116 	blt	r20,r2,8004248 <___vfprintf_internal_r+0x1c1c>
 8004244:	e5001d0e 	bge	fp,r20,80042bc <___vfprintf_internal_r+0x1c90>
 8004248:	94bfff84 	addi	r18,r18,-2
 800424c:	a53fffc4 	addi	r20,r20,-1
 8004250:	dd012415 	stw	r20,1168(sp)
 8004254:	dc811fc5 	stb	r18,1151(sp)
 8004258:	a0007216 	blt	r20,zero,8004424 <___vfprintf_internal_r+0x1df8>
 800425c:	00800ac4 	movi	r2,43
 8004260:	d8812005 	stb	r2,1152(sp)
 8004264:	00800244 	movi	r2,9
 8004268:	15003516 	blt	r2,r20,8004340 <___vfprintf_internal_r+0x1d14>
 800426c:	00800c04 	movi	r2,48
 8004270:	a5000c04 	addi	r20,r20,48
 8004274:	d8812045 	stb	r2,1153(sp)
 8004278:	dd012085 	stb	r20,1154(sp)
 800427c:	d8c120c4 	addi	r3,sp,1155
 8004280:	d8811fc4 	addi	r2,sp,1151
 8004284:	1885c83a 	sub	r2,r3,r2
 8004288:	d8c13217 	ldw	r3,1224(sp)
 800428c:	d8813515 	stw	r2,1236(sp)
 8004290:	1885883a 	add	r2,r3,r2
 8004294:	d8812b15 	stw	r2,1196(sp)
 8004298:	00800044 	movi	r2,1
 800429c:	10c0580e 	bge	r2,r3,8004400 <___vfprintf_internal_r+0x1dd4>
 80042a0:	d8812b17 	ldw	r2,1196(sp)
 80042a4:	10800044 	addi	r2,r2,1
 80042a8:	d8812b15 	stw	r2,1196(sp)
 80042ac:	d8812815 	stw	r2,1184(sp)
 80042b0:	103ef50e 	bge	r2,zero,8003e88 <___vfprintf_internal_r+0x185c>
 80042b4:	d8012815 	stw	zero,1184(sp)
 80042b8:	003ef306 	br	8003e88 <___vfprintf_internal_r+0x185c>
 80042bc:	d8812b17 	ldw	r2,1196(sp)
 80042c0:	d8c13217 	ldw	r3,1224(sp)
 80042c4:	10c01416 	blt	r2,r3,8004318 <___vfprintf_internal_r+0x1cec>
 80042c8:	8400004c 	andi	r16,r16,1
 80042cc:	80000326 	beq	r16,zero,80042dc <___vfprintf_internal_r+0x1cb0>
 80042d0:	d8812b17 	ldw	r2,1196(sp)
 80042d4:	10800044 	addi	r2,r2,1
 80042d8:	d8812b15 	stw	r2,1196(sp)
 80042dc:	d8812815 	stw	r2,1184(sp)
 80042e0:	10001416 	blt	r2,zero,8004334 <___vfprintf_internal_r+0x1d08>
 80042e4:	048019c4 	movi	r18,103
 80042e8:	003ee706 	br	8003e88 <___vfprintf_internal_r+0x185c>
 80042ec:	d8012815 	stw	zero,1184(sp)
 80042f0:	003b1a06 	br	8002f5c <___vfprintf_internal_r+0x930>
 80042f4:	e03e9c1e 	bne	fp,zero,8003d68 <___vfprintf_internal_r+0x173c>
 80042f8:	07000044 	movi	fp,1
 80042fc:	003e9a06 	br	8003d68 <___vfprintf_internal_r+0x173c>
 8004300:	07000184 	movi	fp,6
 8004304:	003e9806 	br	8003d68 <___vfprintf_internal_r+0x173c>
 8004308:	00c00b44 	movi	r3,45
 800430c:	a520003c 	xorhi	r20,r20,32768
 8004310:	d8c12f05 	stb	r3,1212(sp)
 8004314:	003e9806 	br	8003d78 <___vfprintf_internal_r+0x174c>
 8004318:	05003f0e 	bge	zero,r20,8004418 <___vfprintf_internal_r+0x1dec>
 800431c:	05000044 	movi	r20,1
 8004320:	d8c13217 	ldw	r3,1224(sp)
 8004324:	a0e9883a 	add	r20,r20,r3
 8004328:	dd012b15 	stw	r20,1196(sp)
 800432c:	dd012815 	stw	r20,1184(sp)
 8004330:	a03fec0e 	bge	r20,zero,80042e4 <___vfprintf_internal_r+0x1cb8>
 8004334:	d8012815 	stw	zero,1184(sp)
 8004338:	048019c4 	movi	r18,103
 800433c:	003ed206 	br	8003e88 <___vfprintf_internal_r+0x185c>
 8004340:	d8c11f84 	addi	r3,sp,1150
 8004344:	102f883a 	mov	r23,r2
 8004348:	4839883a 	mov	fp,r9
 800434c:	a009883a 	mov	r4,r20
 8004350:	01400284 	movi	r5,10
 8004354:	182d883a 	mov	r22,r3
 8004358:	800abec0 	call	800abec <__modsi3>
 800435c:	10800c04 	addi	r2,r2,48
 8004360:	a009883a 	mov	r4,r20
 8004364:	b0800005 	stb	r2,0(r22)
 8004368:	01400284 	movi	r5,10
 800436c:	800ab9c0 	call	800ab9c <__divsi3>
 8004370:	1029883a 	mov	r20,r2
 8004374:	b0ffffc4 	addi	r3,r22,-1
 8004378:	b8bff416 	blt	r23,r2,800434c <___vfprintf_internal_r+0x1d20>
 800437c:	11400c04 	addi	r5,r2,48
 8004380:	b17fffc5 	stb	r5,-1(r22)
 8004384:	d8811fc4 	addi	r2,sp,1151
 8004388:	e013883a 	mov	r9,fp
 800438c:	18803e2e 	bgeu	r3,r2,8004488 <___vfprintf_internal_r+0x1e5c>
 8004390:	b007883a 	mov	r3,r22
 8004394:	d9012044 	addi	r4,sp,1153
 8004398:	00000206 	br	80043a4 <___vfprintf_internal_r+0x1d78>
 800439c:	19400003 	ldbu	r5,0(r3)
 80043a0:	18c00044 	addi	r3,r3,1
 80043a4:	21400005 	stb	r5,0(r4)
 80043a8:	21000044 	addi	r4,r4,1
 80043ac:	10fffb1e 	bne	r2,r3,800439c <___vfprintf_internal_r+0x1d70>
 80043b0:	d8c12004 	addi	r3,sp,1152
 80043b4:	1d87c83a 	sub	r3,r3,r22
 80043b8:	d9012044 	addi	r4,sp,1153
 80043bc:	20c7883a 	add	r3,r4,r3
 80043c0:	003fb006 	br	8004284 <___vfprintf_internal_r+0x1c58>
 80043c4:	e5c00044 	addi	r23,fp,1
 80043c8:	003e7406 	br	8003d9c <___vfprintf_internal_r+0x1770>
 80043cc:	d8c12217 	ldw	r3,1160(sp)
 80043d0:	003e9906 	br	8003e38 <___vfprintf_internal_r+0x180c>
 80043d4:	d9012d17 	ldw	r4,1204(sp)
 80043d8:	ac800043 	ldbu	r18,1(r21)
 80043dc:	b82b883a 	mov	r21,r23
 80043e0:	20c00017 	ldw	r3,0(r4)
 80043e4:	20800104 	addi	r2,r4,4
 80043e8:	d8812d15 	stw	r2,1204(sp)
 80043ec:	18002116 	blt	r3,zero,8004474 <___vfprintf_internal_r+0x1e48>
 80043f0:	94803fcc 	andi	r18,r18,255
 80043f4:	9480201c 	xori	r18,r18,128
 80043f8:	94bfe004 	addi	r18,r18,-128
 80043fc:	0038e706 	br	800279c <___vfprintf_internal_r+0x170>
 8004400:	80a0703a 	and	r16,r16,r2
 8004404:	803fa61e 	bne	r16,zero,80042a0 <___vfprintf_internal_r+0x1c74>
 8004408:	d8812b17 	ldw	r2,1196(sp)
 800440c:	d8812815 	stw	r2,1184(sp)
 8004410:	103e9d0e 	bge	r2,zero,8003e88 <___vfprintf_internal_r+0x185c>
 8004414:	003fa706 	br	80042b4 <___vfprintf_internal_r+0x1c88>
 8004418:	00800084 	movi	r2,2
 800441c:	1529c83a 	sub	r20,r2,r20
 8004420:	003fbf06 	br	8004320 <___vfprintf_internal_r+0x1cf4>
 8004424:	00800b44 	movi	r2,45
 8004428:	0529c83a 	sub	r20,zero,r20
 800442c:	d8812005 	stb	r2,1152(sp)
 8004430:	003f8c06 	br	8004264 <___vfprintf_internal_r+0x1c38>
 8004434:	008011c4 	movi	r2,71
 8004438:	90be6926 	beq	r18,r2,8003de0 <___vfprintf_internal_r+0x17b4>
 800443c:	003e6a06 	br	8003de8 <___vfprintf_internal_r+0x17bc>
 8004440:	00bfffc4 	movi	r2,-1
 8004444:	d8812c15 	stw	r2,1200(sp)
 8004448:	0039ad06 	br	8002b00 <___vfprintf_internal_r+0x4d4>
 800444c:	1007883a 	mov	r3,r2
 8004450:	003e7906 	br	8003e38 <___vfprintf_internal_r+0x180c>
 8004454:	e000021e 	bne	fp,zero,8004460 <___vfprintf_internal_r+0x1e34>
 8004458:	8400004c 	andi	r16,r16,1
 800445c:	80000e26 	beq	r16,zero,8004498 <___vfprintf_internal_r+0x1e6c>
 8004460:	e7000084 	addi	fp,fp,2
 8004464:	df012b15 	stw	fp,1196(sp)
 8004468:	df012815 	stw	fp,1184(sp)
 800446c:	e03e860e 	bge	fp,zero,8003e88 <___vfprintf_internal_r+0x185c>
 8004470:	003f9006 	br	80042b4 <___vfprintf_internal_r+0x1c88>
 8004474:	94803fcc 	andi	r18,r18,255
 8004478:	9480201c 	xori	r18,r18,128
 800447c:	00ffffc4 	movi	r3,-1
 8004480:	94bfe004 	addi	r18,r18,-128
 8004484:	0038c506 	br	800279c <___vfprintf_internal_r+0x170>
 8004488:	d8c12044 	addi	r3,sp,1153
 800448c:	003f7d06 	br	8004284 <___vfprintf_internal_r+0x1c58>
 8004490:	dd012417 	ldw	r20,1168(sp)
 8004494:	003f6d06 	br	800424c <___vfprintf_internal_r+0x1c20>
 8004498:	00c00044 	movi	r3,1
 800449c:	d8c12815 	stw	r3,1184(sp)
 80044a0:	d8c12b15 	stw	r3,1196(sp)
 80044a4:	003e7806 	br	8003e88 <___vfprintf_internal_r+0x185c>

080044a8 <__vfprintf_internal>:
 80044a8:	00820074 	movhi	r2,2049
 80044ac:	10bae304 	addi	r2,r2,-5236
 80044b0:	2007883a 	mov	r3,r4
 80044b4:	11000017 	ldw	r4,0(r2)
 80044b8:	2805883a 	mov	r2,r5
 80044bc:	300f883a 	mov	r7,r6
 80044c0:	180b883a 	mov	r5,r3
 80044c4:	100d883a 	mov	r6,r2
 80044c8:	800262c1 	jmpi	800262c <___vfprintf_internal_r>

080044cc <__swsetup_r>:
 80044cc:	00820074 	movhi	r2,2049
 80044d0:	10bae304 	addi	r2,r2,-5236
 80044d4:	10800017 	ldw	r2,0(r2)
 80044d8:	defffd04 	addi	sp,sp,-12
 80044dc:	dc400115 	stw	r17,4(sp)
 80044e0:	dc000015 	stw	r16,0(sp)
 80044e4:	dfc00215 	stw	ra,8(sp)
 80044e8:	2023883a 	mov	r17,r4
 80044ec:	2821883a 	mov	r16,r5
 80044f0:	10000226 	beq	r2,zero,80044fc <__swsetup_r+0x30>
 80044f4:	10c00e17 	ldw	r3,56(r2)
 80044f8:	18003d26 	beq	r3,zero,80045f0 <__swsetup_r+0x124>
 80044fc:	8080030b 	ldhu	r2,12(r16)
 8004500:	10c0020c 	andi	r3,r2,8
 8004504:	18ffffcc 	andi	r3,r3,65535
 8004508:	18e0001c 	xori	r3,r3,32768
 800450c:	18e00004 	addi	r3,r3,-32768
 8004510:	18001226 	beq	r3,zero,800455c <__swsetup_r+0x90>
 8004514:	80c00417 	ldw	r3,16(r16)
 8004518:	18001f26 	beq	r3,zero,8004598 <__swsetup_r+0xcc>
 800451c:	1100004c 	andi	r4,r2,1
 8004520:	2000261e 	bne	r4,zero,80045bc <__swsetup_r+0xf0>
 8004524:	1080008c 	andi	r2,r2,2
 8004528:	10bfffcc 	andi	r2,r2,65535
 800452c:	10a0001c 	xori	r2,r2,32768
 8004530:	10a00004 	addi	r2,r2,-32768
 8004534:	1000311e 	bne	r2,zero,80045fc <__swsetup_r+0x130>
 8004538:	80800517 	ldw	r2,20(r16)
 800453c:	80800215 	stw	r2,8(r16)
 8004540:	18002326 	beq	r3,zero,80045d0 <__swsetup_r+0x104>
 8004544:	0005883a 	mov	r2,zero
 8004548:	dfc00217 	ldw	ra,8(sp)
 800454c:	dc400117 	ldw	r17,4(sp)
 8004550:	dc000017 	ldw	r16,0(sp)
 8004554:	dec00304 	addi	sp,sp,12
 8004558:	f800283a 	ret
 800455c:	10c0040c 	andi	r3,r2,16
 8004560:	18ffffcc 	andi	r3,r3,65535
 8004564:	18e0001c 	xori	r3,r3,32768
 8004568:	18e00004 	addi	r3,r3,-32768
 800456c:	18001e26 	beq	r3,zero,80045e8 <__swsetup_r+0x11c>
 8004570:	10c0010c 	andi	r3,r2,4
 8004574:	18ffffcc 	andi	r3,r3,65535
 8004578:	18e0001c 	xori	r3,r3,32768
 800457c:	18e00004 	addi	r3,r3,-32768
 8004580:	1800211e 	bne	r3,zero,8004608 <__swsetup_r+0x13c>
 8004584:	80c00417 	ldw	r3,16(r16)
 8004588:	11400214 	ori	r5,r2,8
 800458c:	8140030d 	sth	r5,12(r16)
 8004590:	2805883a 	mov	r2,r5
 8004594:	183fe11e 	bne	r3,zero,800451c <__swsetup_r+0x50>
 8004598:	1140a00c 	andi	r5,r2,640
 800459c:	01008004 	movi	r4,512
 80045a0:	293fde26 	beq	r5,r4,800451c <__swsetup_r+0x50>
 80045a4:	8809883a 	mov	r4,r17
 80045a8:	800b883a 	mov	r5,r16
 80045ac:	8006ec80 	call	8006ec8 <__smakebuf_r>
 80045b0:	8080030b 	ldhu	r2,12(r16)
 80045b4:	80c00417 	ldw	r3,16(r16)
 80045b8:	003fd806 	br	800451c <__swsetup_r+0x50>
 80045bc:	80800517 	ldw	r2,20(r16)
 80045c0:	80000215 	stw	zero,8(r16)
 80045c4:	0085c83a 	sub	r2,zero,r2
 80045c8:	80800615 	stw	r2,24(r16)
 80045cc:	183fdd1e 	bne	r3,zero,8004544 <__swsetup_r+0x78>
 80045d0:	8080030b 	ldhu	r2,12(r16)
 80045d4:	1080200c 	andi	r2,r2,128
 80045d8:	10bfffcc 	andi	r2,r2,65535
 80045dc:	10a0001c 	xori	r2,r2,32768
 80045e0:	10a00004 	addi	r2,r2,-32768
 80045e4:	103fd826 	beq	r2,zero,8004548 <__swsetup_r+0x7c>
 80045e8:	00bfffc4 	movi	r2,-1
 80045ec:	003fd606 	br	8004548 <__swsetup_r+0x7c>
 80045f0:	1009883a 	mov	r4,r2
 80045f4:	80061540 	call	8006154 <__sinit>
 80045f8:	003fc006 	br	80044fc <__swsetup_r+0x30>
 80045fc:	0005883a 	mov	r2,zero
 8004600:	80800215 	stw	r2,8(r16)
 8004604:	003fce06 	br	8004540 <__swsetup_r+0x74>
 8004608:	81400c17 	ldw	r5,48(r16)
 800460c:	28000626 	beq	r5,zero,8004628 <__swsetup_r+0x15c>
 8004610:	80c01004 	addi	r3,r16,64
 8004614:	28c00326 	beq	r5,r3,8004624 <__swsetup_r+0x158>
 8004618:	8809883a 	mov	r4,r17
 800461c:	80064d80 	call	80064d8 <_free_r>
 8004620:	8080030b 	ldhu	r2,12(r16)
 8004624:	80000c15 	stw	zero,48(r16)
 8004628:	80c00417 	ldw	r3,16(r16)
 800462c:	013ff6c4 	movi	r4,-37
 8004630:	2084703a 	and	r2,r4,r2
 8004634:	80000115 	stw	zero,4(r16)
 8004638:	80c00015 	stw	r3,0(r16)
 800463c:	003fd206 	br	8004588 <__swsetup_r+0xbc>

08004640 <quorem>:
 8004640:	defff204 	addi	sp,sp,-56
 8004644:	dd000815 	stw	r20,32(sp)
 8004648:	20800417 	ldw	r2,16(r4)
 800464c:	2d000417 	ldw	r20,16(r5)
 8004650:	dcc00715 	stw	r19,28(sp)
 8004654:	dfc00d15 	stw	ra,52(sp)
 8004658:	df000c15 	stw	fp,48(sp)
 800465c:	ddc00b15 	stw	r23,44(sp)
 8004660:	dd800a15 	stw	r22,40(sp)
 8004664:	dd400915 	stw	r21,36(sp)
 8004668:	dc800615 	stw	r18,24(sp)
 800466c:	dc400515 	stw	r17,20(sp)
 8004670:	dc000415 	stw	r16,16(sp)
 8004674:	d9400015 	stw	r5,0(sp)
 8004678:	2027883a 	mov	r19,r4
 800467c:	15007d16 	blt	r2,r20,8004874 <quorem+0x234>
 8004680:	a0800104 	addi	r2,r20,4
 8004684:	1085883a 	add	r2,r2,r2
 8004688:	1085883a 	add	r2,r2,r2
 800468c:	28ad883a 	add	r22,r5,r2
 8004690:	2085883a 	add	r2,r4,r2
 8004694:	10800017 	ldw	r2,0(r2)
 8004698:	b1400017 	ldw	r5,0(r22)
 800469c:	a53fffc4 	addi	r20,r20,-1
 80046a0:	1009883a 	mov	r4,r2
 80046a4:	29400044 	addi	r5,r5,1
 80046a8:	d8800115 	stw	r2,4(sp)
 80046ac:	800ac480 	call	800ac48 <__udivsi3>
 80046b0:	1025883a 	mov	r18,r2
 80046b4:	d8800017 	ldw	r2,0(sp)
 80046b8:	9f000504 	addi	fp,r19,20
 80046bc:	14000504 	addi	r16,r2,20
 80046c0:	90003626 	beq	r18,zero,800479c <quorem+0x15c>
 80046c4:	802b883a 	mov	r21,r16
 80046c8:	e023883a 	mov	r17,fp
 80046cc:	0007883a 	mov	r3,zero
 80046d0:	002f883a 	mov	r23,zero
 80046d4:	a9800017 	ldw	r6,0(r21)
 80046d8:	900b883a 	mov	r5,r18
 80046dc:	d8c00315 	stw	r3,12(sp)
 80046e0:	313fffcc 	andi	r4,r6,65535
 80046e4:	d9800215 	stw	r6,8(sp)
 80046e8:	8001bbc0 	call	8001bbc <__mulsi3>
 80046ec:	d9800217 	ldw	r6,8(sp)
 80046f0:	d8c00317 	ldw	r3,12(sp)
 80046f4:	900b883a 	mov	r5,r18
 80046f8:	3008d43a 	srli	r4,r6,16
 80046fc:	1887883a 	add	r3,r3,r2
 8004700:	d8c00315 	stw	r3,12(sp)
 8004704:	8001bbc0 	call	8001bbc <__mulsi3>
 8004708:	89400017 	ldw	r5,0(r17)
 800470c:	d8c00317 	ldw	r3,12(sp)
 8004710:	ad400104 	addi	r21,r21,4
 8004714:	293fffcc 	andi	r4,r5,65535
 8004718:	1810d43a 	srli	r8,r3,16
 800471c:	25c9883a 	add	r4,r4,r23
 8004720:	18ffffcc 	andi	r3,r3,65535
 8004724:	20c9c83a 	sub	r4,r4,r3
 8004728:	280cd43a 	srli	r6,r5,16
 800472c:	4085883a 	add	r2,r8,r2
 8004730:	2007d43a 	srai	r3,r4,16
 8004734:	117fffcc 	andi	r5,r2,65535
 8004738:	314bc83a 	sub	r5,r6,r5
 800473c:	28cb883a 	add	r5,r5,r3
 8004740:	8940008d 	sth	r5,2(r17)
 8004744:	8900000d 	sth	r4,0(r17)
 8004748:	1006d43a 	srli	r3,r2,16
 800474c:	282fd43a 	srai	r23,r5,16
 8004750:	8c400104 	addi	r17,r17,4
 8004754:	b57fdf2e 	bgeu	r22,r21,80046d4 <quorem+0x94>
 8004758:	d8c00117 	ldw	r3,4(sp)
 800475c:	18000f1e 	bne	r3,zero,800479c <quorem+0x15c>
 8004760:	a0800144 	addi	r2,r20,5
 8004764:	1085883a 	add	r2,r2,r2
 8004768:	1085883a 	add	r2,r2,r2
 800476c:	9887883a 	add	r3,r19,r2
 8004770:	18bfff04 	addi	r2,r3,-4
 8004774:	e080082e 	bgeu	fp,r2,8004798 <quorem+0x158>
 8004778:	18ffff17 	ldw	r3,-4(r3)
 800477c:	18000326 	beq	r3,zero,800478c <quorem+0x14c>
 8004780:	00000506 	br	8004798 <quorem+0x158>
 8004784:	10c00017 	ldw	r3,0(r2)
 8004788:	1800031e 	bne	r3,zero,8004798 <quorem+0x158>
 800478c:	10bfff04 	addi	r2,r2,-4
 8004790:	a53fffc4 	addi	r20,r20,-1
 8004794:	e0bffb36 	bltu	fp,r2,8004784 <quorem+0x144>
 8004798:	9d000415 	stw	r20,16(r19)
 800479c:	d9400017 	ldw	r5,0(sp)
 80047a0:	9809883a 	mov	r4,r19
 80047a4:	8007d1c0 	call	8007d1c <__mcmp>
 80047a8:	10002516 	blt	r2,zero,8004840 <quorem+0x200>
 80047ac:	94800044 	addi	r18,r18,1
 80047b0:	e007883a 	mov	r3,fp
 80047b4:	000d883a 	mov	r6,zero
 80047b8:	18800017 	ldw	r2,0(r3)
 80047bc:	82000017 	ldw	r8,0(r16)
 80047c0:	84000104 	addi	r16,r16,4
 80047c4:	11ffffcc 	andi	r7,r2,65535
 80047c8:	413fffcc 	andi	r4,r8,65535
 80047cc:	398d883a 	add	r6,r7,r6
 80047d0:	310fc83a 	sub	r7,r6,r4
 80047d4:	4010d43a 	srli	r8,r8,16
 80047d8:	100cd43a 	srli	r6,r2,16
 80047dc:	3809d43a 	srai	r4,r7,16
 80047e0:	19c0000d 	sth	r7,0(r3)
 80047e4:	320dc83a 	sub	r6,r6,r8
 80047e8:	310d883a 	add	r6,r6,r4
 80047ec:	1980008d 	sth	r6,2(r3)
 80047f0:	300dd43a 	srai	r6,r6,16
 80047f4:	18c00104 	addi	r3,r3,4
 80047f8:	b43fef2e 	bgeu	r22,r16,80047b8 <quorem+0x178>
 80047fc:	a0800144 	addi	r2,r20,5
 8004800:	1085883a 	add	r2,r2,r2
 8004804:	1085883a 	add	r2,r2,r2
 8004808:	9885883a 	add	r2,r19,r2
 800480c:	10c00017 	ldw	r3,0(r2)
 8004810:	18000b1e 	bne	r3,zero,8004840 <quorem+0x200>
 8004814:	10ffff04 	addi	r3,r2,-4
 8004818:	e0c0082e 	bgeu	fp,r3,800483c <quorem+0x1fc>
 800481c:	10bfff17 	ldw	r2,-4(r2)
 8004820:	10000326 	beq	r2,zero,8004830 <quorem+0x1f0>
 8004824:	00000506 	br	800483c <quorem+0x1fc>
 8004828:	18800017 	ldw	r2,0(r3)
 800482c:	1000031e 	bne	r2,zero,800483c <quorem+0x1fc>
 8004830:	18ffff04 	addi	r3,r3,-4
 8004834:	a53fffc4 	addi	r20,r20,-1
 8004838:	e0fffb36 	bltu	fp,r3,8004828 <quorem+0x1e8>
 800483c:	9d000415 	stw	r20,16(r19)
 8004840:	9005883a 	mov	r2,r18
 8004844:	dfc00d17 	ldw	ra,52(sp)
 8004848:	df000c17 	ldw	fp,48(sp)
 800484c:	ddc00b17 	ldw	r23,44(sp)
 8004850:	dd800a17 	ldw	r22,40(sp)
 8004854:	dd400917 	ldw	r21,36(sp)
 8004858:	dd000817 	ldw	r20,32(sp)
 800485c:	dcc00717 	ldw	r19,28(sp)
 8004860:	dc800617 	ldw	r18,24(sp)
 8004864:	dc400517 	ldw	r17,20(sp)
 8004868:	dc000417 	ldw	r16,16(sp)
 800486c:	dec00e04 	addi	sp,sp,56
 8004870:	f800283a 	ret
 8004874:	0005883a 	mov	r2,zero
 8004878:	003ff206 	br	8004844 <quorem+0x204>

0800487c <_dtoa_r>:
 800487c:	20801017 	ldw	r2,64(r4)
 8004880:	deffdf04 	addi	sp,sp,-132
 8004884:	dcc01a15 	stw	r19,104(sp)
 8004888:	dc801915 	stw	r18,100(sp)
 800488c:	dc401815 	stw	r17,96(sp)
 8004890:	dc001715 	stw	r16,92(sp)
 8004894:	dfc02015 	stw	ra,128(sp)
 8004898:	df001f15 	stw	fp,124(sp)
 800489c:	ddc01e15 	stw	r23,120(sp)
 80048a0:	dd801d15 	stw	r22,116(sp)
 80048a4:	dd401c15 	stw	r21,112(sp)
 80048a8:	dd001b15 	stw	r20,108(sp)
 80048ac:	d9400315 	stw	r5,12(sp)
 80048b0:	d9c00415 	stw	r7,16(sp)
 80048b4:	2021883a 	mov	r16,r4
 80048b8:	3025883a 	mov	r18,r6
 80048bc:	dcc02317 	ldw	r19,140(sp)
 80048c0:	3023883a 	mov	r17,r6
 80048c4:	10000826 	beq	r2,zero,80048e8 <_dtoa_r+0x6c>
 80048c8:	20c01117 	ldw	r3,68(r4)
 80048cc:	01800044 	movi	r6,1
 80048d0:	100b883a 	mov	r5,r2
 80048d4:	30cc983a 	sll	r6,r6,r3
 80048d8:	10c00115 	stw	r3,4(r2)
 80048dc:	11800215 	stw	r6,8(r2)
 80048e0:	80074780 	call	8007478 <_Bfree>
 80048e4:	80001015 	stw	zero,64(r16)
 80048e8:	90002f16 	blt	r18,zero,80049a8 <_dtoa_r+0x12c>
 80048ec:	98000015 	stw	zero,0(r19)
 80048f0:	90dffc2c 	andhi	r3,r18,32752
 80048f4:	009ffc34 	movhi	r2,32752
 80048f8:	18801c26 	beq	r3,r2,800496c <_dtoa_r+0xf0>
 80048fc:	d9000317 	ldw	r4,12(sp)
 8004900:	880b883a 	mov	r5,r17
 8004904:	000d883a 	mov	r6,zero
 8004908:	000f883a 	mov	r7,zero
 800490c:	800a6f40 	call	800a6f4 <__nedf2>
 8004910:	10002c1e 	bne	r2,zero,80049c4 <_dtoa_r+0x148>
 8004914:	d9002217 	ldw	r4,136(sp)
 8004918:	d9c02417 	ldw	r7,144(sp)
 800491c:	00800044 	movi	r2,1
 8004920:	20800015 	stw	r2,0(r4)
 8004924:	38019426 	beq	r7,zero,8004f78 <_dtoa_r+0x6fc>
 8004928:	00820074 	movhi	r2,2049
 800492c:	10b73044 	addi	r2,r2,-9023
 8004930:	38800015 	stw	r2,0(r7)
 8004934:	15ffffc4 	addi	r23,r2,-1
 8004938:	b805883a 	mov	r2,r23
 800493c:	dfc02017 	ldw	ra,128(sp)
 8004940:	df001f17 	ldw	fp,124(sp)
 8004944:	ddc01e17 	ldw	r23,120(sp)
 8004948:	dd801d17 	ldw	r22,116(sp)
 800494c:	dd401c17 	ldw	r21,112(sp)
 8004950:	dd001b17 	ldw	r20,108(sp)
 8004954:	dcc01a17 	ldw	r19,104(sp)
 8004958:	dc801917 	ldw	r18,100(sp)
 800495c:	dc401817 	ldw	r17,96(sp)
 8004960:	dc001717 	ldw	r16,92(sp)
 8004964:	dec02104 	addi	sp,sp,132
 8004968:	f800283a 	ret
 800496c:	d8c02217 	ldw	r3,136(sp)
 8004970:	d9000317 	ldw	r4,12(sp)
 8004974:	0089c3c4 	movi	r2,9999
 8004978:	18800015 	stw	r2,0(r3)
 800497c:	20016c26 	beq	r4,zero,8004f30 <_dtoa_r+0x6b4>
 8004980:	05c20074 	movhi	r23,2049
 8004984:	bdf73c04 	addi	r23,r23,-8976
 8004988:	d9c02417 	ldw	r7,144(sp)
 800498c:	383fea26 	beq	r7,zero,8004938 <_dtoa_r+0xbc>
 8004990:	b88000c7 	ldb	r2,3(r23)
 8004994:	10016d1e 	bne	r2,zero,8004f4c <_dtoa_r+0x6d0>
 8004998:	b88000c4 	addi	r2,r23,3
 800499c:	d8c02417 	ldw	r3,144(sp)
 80049a0:	18800015 	stw	r2,0(r3)
 80049a4:	003fe406 	br	8004938 <_dtoa_r+0xbc>
 80049a8:	04600034 	movhi	r17,32768
 80049ac:	8c7fffc4 	addi	r17,r17,-1
 80049b0:	9462703a 	and	r17,r18,r17
 80049b4:	00800044 	movi	r2,1
 80049b8:	98800015 	stw	r2,0(r19)
 80049bc:	8825883a 	mov	r18,r17
 80049c0:	003fcb06 	br	80048f0 <_dtoa_r+0x74>
 80049c4:	d9400317 	ldw	r5,12(sp)
 80049c8:	9028d53a 	srli	r20,r18,20
 80049cc:	d8800204 	addi	r2,sp,8
 80049d0:	d8800015 	stw	r2,0(sp)
 80049d4:	8009883a 	mov	r4,r16
 80049d8:	880d883a 	mov	r6,r17
 80049dc:	d9c00104 	addi	r7,sp,4
 80049e0:	80080c40 	call	80080c4 <__d2b>
 80049e4:	a501ffcc 	andi	r20,r20,2047
 80049e8:	1039883a 	mov	fp,r2
 80049ec:	a001591e 	bne	r20,zero,8004f54 <_dtoa_r+0x6d8>
 80049f0:	dd400217 	ldw	r21,8(sp)
 80049f4:	dd000117 	ldw	r20,4(sp)
 80049f8:	00befbc4 	movi	r2,-1041
 80049fc:	ad29883a 	add	r20,r21,r20
 8004a00:	a082d216 	blt	r20,r2,800554c <_dtoa_r+0xcd0>
 8004a04:	d8c00317 	ldw	r3,12(sp)
 8004a08:	013f0384 	movi	r4,-1010
 8004a0c:	2509c83a 	sub	r4,r4,r20
 8004a10:	a0810484 	addi	r2,r20,1042
 8004a14:	9124983a 	sll	r18,r18,r4
 8004a18:	1884d83a 	srl	r2,r3,r2
 8004a1c:	9088b03a 	or	r4,r18,r2
 8004a20:	800aa0c0 	call	800aa0c <__floatunsidf>
 8004a24:	1009883a 	mov	r4,r2
 8004a28:	017f8434 	movhi	r5,65040
 8004a2c:	00800044 	movi	r2,1
 8004a30:	194b883a 	add	r5,r3,r5
 8004a34:	a53fffc4 	addi	r20,r20,-1
 8004a38:	d8800f15 	stw	r2,60(sp)
 8004a3c:	000d883a 	mov	r6,zero
 8004a40:	01cffe34 	movhi	r7,16376
 8004a44:	800a1a00 	call	800a1a0 <__subdf3>
 8004a48:	1009883a 	mov	r4,r2
 8004a4c:	180b883a 	mov	r5,r3
 8004a50:	0198dbf4 	movhi	r6,25455
 8004a54:	3190d844 	addi	r6,r6,17249
 8004a58:	01cff4f4 	movhi	r7,16339
 8004a5c:	39e1e9c4 	addi	r7,r7,-30809
 8004a60:	800a2000 	call	800a200 <__muldf3>
 8004a64:	180b883a 	mov	r5,r3
 8004a68:	01a2d874 	movhi	r6,35681
 8004a6c:	31b22cc4 	addi	r6,r6,-14157
 8004a70:	01cff1f4 	movhi	r7,16327
 8004a74:	39e28a04 	addi	r7,r7,-30168
 8004a78:	1009883a 	mov	r4,r2
 8004a7c:	800a14c0 	call	800a14c <__adddf3>
 8004a80:	a009883a 	mov	r4,r20
 8004a84:	1027883a 	mov	r19,r2
 8004a88:	1825883a 	mov	r18,r3
 8004a8c:	800a8740 	call	800a874 <__floatsidf>
 8004a90:	1009883a 	mov	r4,r2
 8004a94:	180b883a 	mov	r5,r3
 8004a98:	019427f4 	movhi	r6,20639
 8004a9c:	319e7ec4 	addi	r6,r6,31227
 8004aa0:	01cff4f4 	movhi	r7,16339
 8004aa4:	39d104c4 	addi	r7,r7,17427
 8004aa8:	800a2000 	call	800a200 <__muldf3>
 8004aac:	9809883a 	mov	r4,r19
 8004ab0:	900b883a 	mov	r5,r18
 8004ab4:	100d883a 	mov	r6,r2
 8004ab8:	180f883a 	mov	r7,r3
 8004abc:	800a14c0 	call	800a14c <__adddf3>
 8004ac0:	1009883a 	mov	r4,r2
 8004ac4:	180b883a 	mov	r5,r3
 8004ac8:	1027883a 	mov	r19,r2
 8004acc:	1825883a 	mov	r18,r3
 8004ad0:	800a9480 	call	800a948 <__fixdfsi>
 8004ad4:	9809883a 	mov	r4,r19
 8004ad8:	900b883a 	mov	r5,r18
 8004adc:	000d883a 	mov	r6,zero
 8004ae0:	000f883a 	mov	r7,zero
 8004ae4:	d8800615 	stw	r2,24(sp)
 8004ae8:	800a8180 	call	800a818 <__ltdf2>
 8004aec:	10027e16 	blt	r2,zero,80054e8 <_dtoa_r+0xc6c>
 8004af0:	d8c00617 	ldw	r3,24(sp)
 8004af4:	00800584 	movi	r2,22
 8004af8:	10c26c36 	bltu	r2,r3,80054ac <_dtoa_r+0xc30>
 8004afc:	180490fa 	slli	r2,r3,3
 8004b00:	00c20074 	movhi	r3,2049
 8004b04:	18f76204 	addi	r3,r3,-8824
 8004b08:	d9800317 	ldw	r6,12(sp)
 8004b0c:	1885883a 	add	r2,r3,r2
 8004b10:	11000017 	ldw	r4,0(r2)
 8004b14:	11400117 	ldw	r5,4(r2)
 8004b18:	880f883a 	mov	r7,r17
 8004b1c:	800a7500 	call	800a750 <__gtdf2>
 8004b20:	00828f0e 	bge	zero,r2,8005560 <_dtoa_r+0xce4>
 8004b24:	d8800617 	ldw	r2,24(sp)
 8004b28:	d8000d15 	stw	zero,52(sp)
 8004b2c:	10bfffc4 	addi	r2,r2,-1
 8004b30:	d8800615 	stw	r2,24(sp)
 8004b34:	ad29c83a 	sub	r20,r21,r20
 8004b38:	a53fffc4 	addi	r20,r20,-1
 8004b3c:	a0026616 	blt	r20,zero,80054d8 <_dtoa_r+0xc5c>
 8004b40:	dd000715 	stw	r20,28(sp)
 8004b44:	d8000815 	stw	zero,32(sp)
 8004b48:	d8800617 	ldw	r2,24(sp)
 8004b4c:	10025a16 	blt	r2,zero,80054b8 <_dtoa_r+0xc3c>
 8004b50:	d8c00717 	ldw	r3,28(sp)
 8004b54:	d8800b15 	stw	r2,44(sp)
 8004b58:	d8000a15 	stw	zero,40(sp)
 8004b5c:	1887883a 	add	r3,r3,r2
 8004b60:	d8c00715 	stw	r3,28(sp)
 8004b64:	d9c00417 	ldw	r7,16(sp)
 8004b68:	00800244 	movi	r2,9
 8004b6c:	11c10536 	bltu	r2,r7,8004f84 <_dtoa_r+0x708>
 8004b70:	00800144 	movi	r2,5
 8004b74:	11c4c60e 	bge	r2,r7,8005e90 <_dtoa_r+0x1614>
 8004b78:	39ffff04 	addi	r7,r7,-4
 8004b7c:	d9c00415 	stw	r7,16(sp)
 8004b80:	0027883a 	mov	r19,zero
 8004b84:	d9c00417 	ldw	r7,16(sp)
 8004b88:	008000c4 	movi	r2,3
 8004b8c:	3883a226 	beq	r7,r2,8005a18 <_dtoa_r+0x119c>
 8004b90:	11c2bc16 	blt	r2,r7,8005684 <_dtoa_r+0xe08>
 8004b94:	00800084 	movi	r2,2
 8004b98:	3880fb1e 	bne	r7,r2,8004f88 <_dtoa_r+0x70c>
 8004b9c:	d8000c15 	stw	zero,48(sp)
 8004ba0:	d9002117 	ldw	r4,132(sp)
 8004ba4:	0103ae0e 	bge	zero,r4,8005a60 <_dtoa_r+0x11e4>
 8004ba8:	2025883a 	mov	r18,r4
 8004bac:	d9000e15 	stw	r4,56(sp)
 8004bb0:	d9000915 	stw	r4,36(sp)
 8004bb4:	80001115 	stw	zero,68(r16)
 8004bb8:	008005c4 	movi	r2,23
 8004bbc:	1484b22e 	bgeu	r2,r18,8005e88 <_dtoa_r+0x160c>
 8004bc0:	00c00044 	movi	r3,1
 8004bc4:	00800104 	movi	r2,4
 8004bc8:	1085883a 	add	r2,r2,r2
 8004bcc:	11000504 	addi	r4,r2,20
 8004bd0:	180b883a 	mov	r5,r3
 8004bd4:	18c00044 	addi	r3,r3,1
 8004bd8:	913ffb2e 	bgeu	r18,r4,8004bc8 <_dtoa_r+0x34c>
 8004bdc:	81401115 	stw	r5,68(r16)
 8004be0:	8009883a 	mov	r4,r16
 8004be4:	80073d00 	call	80073d0 <_Balloc>
 8004be8:	102f883a 	mov	r23,r2
 8004bec:	80801015 	stw	r2,64(r16)
 8004bf0:	00800384 	movi	r2,14
 8004bf4:	1480f036 	bltu	r2,r18,8004fb8 <_dtoa_r+0x73c>
 8004bf8:	9800ef26 	beq	r19,zero,8004fb8 <_dtoa_r+0x73c>
 8004bfc:	d8800617 	ldw	r2,24(sp)
 8004c00:	00839c0e 	bge	zero,r2,8005a74 <_dtoa_r+0x11f8>
 8004c04:	d8c00617 	ldw	r3,24(sp)
 8004c08:	108003cc 	andi	r2,r2,15
 8004c0c:	100490fa 	slli	r2,r2,3
 8004c10:	182bd13a 	srai	r21,r3,4
 8004c14:	00c20074 	movhi	r3,2049
 8004c18:	18f76204 	addi	r3,r3,-8824
 8004c1c:	1885883a 	add	r2,r3,r2
 8004c20:	a8c0040c 	andi	r3,r21,16
 8004c24:	12800017 	ldw	r10,0(r2)
 8004c28:	15800117 	ldw	r22,4(r2)
 8004c2c:	18038726 	beq	r3,zero,8005a4c <_dtoa_r+0x11d0>
 8004c30:	00820074 	movhi	r2,2049
 8004c34:	10b75804 	addi	r2,r2,-8864
 8004c38:	11800817 	ldw	r6,32(r2)
 8004c3c:	11c00917 	ldw	r7,36(r2)
 8004c40:	d9000317 	ldw	r4,12(sp)
 8004c44:	880b883a 	mov	r5,r17
 8004c48:	da801515 	stw	r10,84(sp)
 8004c4c:	800a4e40 	call	800a4e4 <__divdf3>
 8004c50:	da801517 	ldw	r10,84(sp)
 8004c54:	d8801015 	stw	r2,64(sp)
 8004c58:	1829883a 	mov	r20,r3
 8004c5c:	ad4003cc 	andi	r21,r21,15
 8004c60:	048000c4 	movi	r18,3
 8004c64:	a8001126 	beq	r21,zero,8004cac <_dtoa_r+0x430>
 8004c68:	04c20074 	movhi	r19,2049
 8004c6c:	9cf75804 	addi	r19,r19,-8864
 8004c70:	5005883a 	mov	r2,r10
 8004c74:	b007883a 	mov	r3,r22
 8004c78:	a980004c 	andi	r6,r21,1
 8004c7c:	1009883a 	mov	r4,r2
 8004c80:	a82bd07a 	srai	r21,r21,1
 8004c84:	180b883a 	mov	r5,r3
 8004c88:	30000426 	beq	r6,zero,8004c9c <_dtoa_r+0x420>
 8004c8c:	99800017 	ldw	r6,0(r19)
 8004c90:	99c00117 	ldw	r7,4(r19)
 8004c94:	94800044 	addi	r18,r18,1
 8004c98:	800a2000 	call	800a200 <__muldf3>
 8004c9c:	9cc00204 	addi	r19,r19,8
 8004ca0:	a83ff51e 	bne	r21,zero,8004c78 <_dtoa_r+0x3fc>
 8004ca4:	1015883a 	mov	r10,r2
 8004ca8:	182d883a 	mov	r22,r3
 8004cac:	d9001017 	ldw	r4,64(sp)
 8004cb0:	a00b883a 	mov	r5,r20
 8004cb4:	500d883a 	mov	r6,r10
 8004cb8:	b00f883a 	mov	r7,r22
 8004cbc:	800a4e40 	call	800a4e4 <__divdf3>
 8004cc0:	1027883a 	mov	r19,r2
 8004cc4:	1829883a 	mov	r20,r3
 8004cc8:	d8c00d17 	ldw	r3,52(sp)
 8004ccc:	18000626 	beq	r3,zero,8004ce8 <_dtoa_r+0x46c>
 8004cd0:	9809883a 	mov	r4,r19
 8004cd4:	a00b883a 	mov	r5,r20
 8004cd8:	000d883a 	mov	r6,zero
 8004cdc:	01cffc34 	movhi	r7,16368
 8004ce0:	800a8180 	call	800a818 <__ltdf2>
 8004ce4:	10040e16 	blt	r2,zero,8005d20 <_dtoa_r+0x14a4>
 8004ce8:	9009883a 	mov	r4,r18
 8004cec:	800a8740 	call	800a874 <__floatsidf>
 8004cf0:	1009883a 	mov	r4,r2
 8004cf4:	180b883a 	mov	r5,r3
 8004cf8:	980d883a 	mov	r6,r19
 8004cfc:	a00f883a 	mov	r7,r20
 8004d00:	800a2000 	call	800a200 <__muldf3>
 8004d04:	1009883a 	mov	r4,r2
 8004d08:	180b883a 	mov	r5,r3
 8004d0c:	000d883a 	mov	r6,zero
 8004d10:	01d00734 	movhi	r7,16412
 8004d14:	800a14c0 	call	800a14c <__adddf3>
 8004d18:	057f3034 	movhi	r21,64704
 8004d1c:	1d6b883a 	add	r21,r3,r21
 8004d20:	d8c00917 	ldw	r3,36(sp)
 8004d24:	1025883a 	mov	r18,r2
 8004d28:	18031f26 	beq	r3,zero,80059a8 <_dtoa_r+0x112c>
 8004d2c:	d8800617 	ldw	r2,24(sp)
 8004d30:	dac00917 	ldw	r11,36(sp)
 8004d34:	d8801315 	stw	r2,76(sp)
 8004d38:	d8c00c17 	ldw	r3,48(sp)
 8004d3c:	18039026 	beq	r3,zero,8005b80 <_dtoa_r+0x1304>
 8004d40:	58bfffc4 	addi	r2,r11,-1
 8004d44:	100490fa 	slli	r2,r2,3
 8004d48:	00c20074 	movhi	r3,2049
 8004d4c:	18f76204 	addi	r3,r3,-8824
 8004d50:	0009883a 	mov	r4,zero
 8004d54:	1885883a 	add	r2,r3,r2
 8004d58:	11800017 	ldw	r6,0(r2)
 8004d5c:	11c00117 	ldw	r7,4(r2)
 8004d60:	014ff834 	movhi	r5,16352
 8004d64:	dac01615 	stw	r11,88(sp)
 8004d68:	800a4e40 	call	800a4e4 <__divdf3>
 8004d6c:	900d883a 	mov	r6,r18
 8004d70:	a80f883a 	mov	r7,r21
 8004d74:	1009883a 	mov	r4,r2
 8004d78:	180b883a 	mov	r5,r3
 8004d7c:	800a1a00 	call	800a1a0 <__subdf3>
 8004d80:	a00b883a 	mov	r5,r20
 8004d84:	9809883a 	mov	r4,r19
 8004d88:	182b883a 	mov	r21,r3
 8004d8c:	d8801015 	stw	r2,64(sp)
 8004d90:	800a9480 	call	800a948 <__fixdfsi>
 8004d94:	1009883a 	mov	r4,r2
 8004d98:	d8801515 	stw	r2,84(sp)
 8004d9c:	800a8740 	call	800a874 <__floatsidf>
 8004da0:	9809883a 	mov	r4,r19
 8004da4:	a00b883a 	mov	r5,r20
 8004da8:	100d883a 	mov	r6,r2
 8004dac:	180f883a 	mov	r7,r3
 8004db0:	800a1a00 	call	800a1a0 <__subdf3>
 8004db4:	da401517 	ldw	r9,84(sp)
 8004db8:	d9001017 	ldw	r4,64(sp)
 8004dbc:	a80b883a 	mov	r5,r21
 8004dc0:	4d000c04 	addi	r20,r9,48
 8004dc4:	bd000005 	stb	r20,0(r23)
 8004dc8:	100d883a 	mov	r6,r2
 8004dcc:	180f883a 	mov	r7,r3
 8004dd0:	bd800044 	addi	r22,r23,1
 8004dd4:	1025883a 	mov	r18,r2
 8004dd8:	1827883a 	mov	r19,r3
 8004ddc:	800a7500 	call	800a750 <__gtdf2>
 8004de0:	00842216 	blt	zero,r2,8005e6c <_dtoa_r+0x15f0>
 8004de4:	0009883a 	mov	r4,zero
 8004de8:	014ffc34 	movhi	r5,16368
 8004dec:	900d883a 	mov	r6,r18
 8004df0:	980f883a 	mov	r7,r19
 8004df4:	800a1a00 	call	800a1a0 <__subdf3>
 8004df8:	d9001017 	ldw	r4,64(sp)
 8004dfc:	a80b883a 	mov	r5,r21
 8004e00:	100d883a 	mov	r6,r2
 8004e04:	180f883a 	mov	r7,r3
 8004e08:	800a7500 	call	800a750 <__gtdf2>
 8004e0c:	dac01617 	ldw	r11,88(sp)
 8004e10:	00841316 	blt	zero,r2,8005e60 <_dtoa_r+0x15e4>
 8004e14:	00800044 	movi	r2,1
 8004e18:	12c0670e 	bge	r2,r11,8004fb8 <_dtoa_r+0x73c>
 8004e1c:	bad7883a 	add	r11,r23,r11
 8004e20:	df001115 	stw	fp,68(sp)
 8004e24:	dc401215 	stw	r17,72(sp)
 8004e28:	5839883a 	mov	fp,r11
 8004e2c:	dc401017 	ldw	r17,64(sp)
 8004e30:	00000806 	br	8004e54 <_dtoa_r+0x5d8>
 8004e34:	800a1a00 	call	800a1a0 <__subdf3>
 8004e38:	1009883a 	mov	r4,r2
 8004e3c:	180b883a 	mov	r5,r3
 8004e40:	880d883a 	mov	r6,r17
 8004e44:	a80f883a 	mov	r7,r21
 8004e48:	800a8180 	call	800a818 <__ltdf2>
 8004e4c:	1003ee16 	blt	r2,zero,8005e08 <_dtoa_r+0x158c>
 8004e50:	b703f126 	beq	r22,fp,8005e18 <_dtoa_r+0x159c>
 8004e54:	8809883a 	mov	r4,r17
 8004e58:	a80b883a 	mov	r5,r21
 8004e5c:	000d883a 	mov	r6,zero
 8004e60:	01d00934 	movhi	r7,16420
 8004e64:	800a2000 	call	800a200 <__muldf3>
 8004e68:	000d883a 	mov	r6,zero
 8004e6c:	01d00934 	movhi	r7,16420
 8004e70:	9009883a 	mov	r4,r18
 8004e74:	980b883a 	mov	r5,r19
 8004e78:	1023883a 	mov	r17,r2
 8004e7c:	182b883a 	mov	r21,r3
 8004e80:	800a2000 	call	800a200 <__muldf3>
 8004e84:	180b883a 	mov	r5,r3
 8004e88:	1009883a 	mov	r4,r2
 8004e8c:	1825883a 	mov	r18,r3
 8004e90:	1027883a 	mov	r19,r2
 8004e94:	800a9480 	call	800a948 <__fixdfsi>
 8004e98:	1009883a 	mov	r4,r2
 8004e9c:	1029883a 	mov	r20,r2
 8004ea0:	800a8740 	call	800a874 <__floatsidf>
 8004ea4:	9809883a 	mov	r4,r19
 8004ea8:	900b883a 	mov	r5,r18
 8004eac:	100d883a 	mov	r6,r2
 8004eb0:	180f883a 	mov	r7,r3
 8004eb4:	800a1a00 	call	800a1a0 <__subdf3>
 8004eb8:	a5000c04 	addi	r20,r20,48
 8004ebc:	b5000005 	stb	r20,0(r22)
 8004ec0:	1009883a 	mov	r4,r2
 8004ec4:	180b883a 	mov	r5,r3
 8004ec8:	880d883a 	mov	r6,r17
 8004ecc:	a80f883a 	mov	r7,r21
 8004ed0:	1025883a 	mov	r18,r2
 8004ed4:	1827883a 	mov	r19,r3
 8004ed8:	800a8180 	call	800a818 <__ltdf2>
 8004edc:	b5800044 	addi	r22,r22,1
 8004ee0:	0009883a 	mov	r4,zero
 8004ee4:	014ffc34 	movhi	r5,16368
 8004ee8:	900d883a 	mov	r6,r18
 8004eec:	980f883a 	mov	r7,r19
 8004ef0:	103fd00e 	bge	r2,zero,8004e34 <_dtoa_r+0x5b8>
 8004ef4:	d9001317 	ldw	r4,76(sp)
 8004ef8:	df001117 	ldw	fp,68(sp)
 8004efc:	d9000615 	stw	r4,24(sp)
 8004f00:	8009883a 	mov	r4,r16
 8004f04:	e00b883a 	mov	r5,fp
 8004f08:	80074780 	call	8007478 <_Bfree>
 8004f0c:	d9c00617 	ldw	r7,24(sp)
 8004f10:	d8c02217 	ldw	r3,136(sp)
 8004f14:	d9002417 	ldw	r4,144(sp)
 8004f18:	b0000005 	stb	zero,0(r22)
 8004f1c:	38800044 	addi	r2,r7,1
 8004f20:	18800015 	stw	r2,0(r3)
 8004f24:	203e8426 	beq	r4,zero,8004938 <_dtoa_r+0xbc>
 8004f28:	25800015 	stw	r22,0(r4)
 8004f2c:	003e8206 	br	8004938 <_dtoa_r+0xbc>
 8004f30:	00800434 	movhi	r2,16
 8004f34:	10bfffc4 	addi	r2,r2,-1
 8004f38:	90a4703a 	and	r18,r18,r2
 8004f3c:	903e901e 	bne	r18,zero,8004980 <_dtoa_r+0x104>
 8004f40:	05c20074 	movhi	r23,2049
 8004f44:	bdf73904 	addi	r23,r23,-8988
 8004f48:	003e8f06 	br	8004988 <_dtoa_r+0x10c>
 8004f4c:	b8800204 	addi	r2,r23,8
 8004f50:	003e9206 	br	800499c <_dtoa_r+0x120>
 8004f54:	01400434 	movhi	r5,16
 8004f58:	297fffc4 	addi	r5,r5,-1
 8004f5c:	894a703a 	and	r5,r17,r5
 8004f60:	d9000317 	ldw	r4,12(sp)
 8004f64:	294ffc34 	orhi	r5,r5,16368
 8004f68:	a53f0044 	addi	r20,r20,-1023
 8004f6c:	dd400217 	ldw	r21,8(sp)
 8004f70:	d8000f15 	stw	zero,60(sp)
 8004f74:	003eb106 	br	8004a3c <_dtoa_r+0x1c0>
 8004f78:	05c20074 	movhi	r23,2049
 8004f7c:	bdf73004 	addi	r23,r23,-9024
 8004f80:	003e6d06 	br	8004938 <_dtoa_r+0xbc>
 8004f84:	d8000415 	stw	zero,16(sp)
 8004f88:	80001115 	stw	zero,68(r16)
 8004f8c:	8009883a 	mov	r4,r16
 8004f90:	000b883a 	mov	r5,zero
 8004f94:	80073d00 	call	80073d0 <_Balloc>
 8004f98:	01ffffc4 	movi	r7,-1
 8004f9c:	102f883a 	mov	r23,r2
 8004fa0:	80801015 	stw	r2,64(r16)
 8004fa4:	00800044 	movi	r2,1
 8004fa8:	d9c00915 	stw	r7,36(sp)
 8004fac:	d8002115 	stw	zero,132(sp)
 8004fb0:	d9c00e15 	stw	r7,56(sp)
 8004fb4:	d8800c15 	stw	r2,48(sp)
 8004fb8:	d8800117 	ldw	r2,4(sp)
 8004fbc:	10008b16 	blt	r2,zero,80051ec <_dtoa_r+0x970>
 8004fc0:	d9000617 	ldw	r4,24(sp)
 8004fc4:	00c00384 	movi	r3,14
 8004fc8:	19008816 	blt	r3,r4,80051ec <_dtoa_r+0x970>
 8004fcc:	200490fa 	slli	r2,r4,3
 8004fd0:	d9c02117 	ldw	r7,132(sp)
 8004fd4:	00c20074 	movhi	r3,2049
 8004fd8:	18f76204 	addi	r3,r3,-8824
 8004fdc:	1885883a 	add	r2,r3,r2
 8004fe0:	14800017 	ldw	r18,0(r2)
 8004fe4:	14c00117 	ldw	r19,4(r2)
 8004fe8:	3801c916 	blt	r7,zero,8005710 <_dtoa_r+0xe94>
 8004fec:	d9000317 	ldw	r4,12(sp)
 8004ff0:	900d883a 	mov	r6,r18
 8004ff4:	980f883a 	mov	r7,r19
 8004ff8:	880b883a 	mov	r5,r17
 8004ffc:	800a4e40 	call	800a4e4 <__divdf3>
 8005000:	180b883a 	mov	r5,r3
 8005004:	1009883a 	mov	r4,r2
 8005008:	800a9480 	call	800a948 <__fixdfsi>
 800500c:	1009883a 	mov	r4,r2
 8005010:	102b883a 	mov	r21,r2
 8005014:	800a8740 	call	800a874 <__floatsidf>
 8005018:	1009883a 	mov	r4,r2
 800501c:	180b883a 	mov	r5,r3
 8005020:	900d883a 	mov	r6,r18
 8005024:	980f883a 	mov	r7,r19
 8005028:	800a2000 	call	800a200 <__muldf3>
 800502c:	d9000317 	ldw	r4,12(sp)
 8005030:	880b883a 	mov	r5,r17
 8005034:	100d883a 	mov	r6,r2
 8005038:	180f883a 	mov	r7,r3
 800503c:	800a1a00 	call	800a1a0 <__subdf3>
 8005040:	d9c00917 	ldw	r7,36(sp)
 8005044:	1009883a 	mov	r4,r2
 8005048:	a8800c04 	addi	r2,r21,48
 800504c:	b8800005 	stb	r2,0(r23)
 8005050:	01800044 	movi	r6,1
 8005054:	180b883a 	mov	r5,r3
 8005058:	2005883a 	mov	r2,r4
 800505c:	bd800044 	addi	r22,r23,1
 8005060:	39803726 	beq	r7,r6,8005140 <_dtoa_r+0x8c4>
 8005064:	000d883a 	mov	r6,zero
 8005068:	01d00934 	movhi	r7,16420
 800506c:	800a2000 	call	800a200 <__muldf3>
 8005070:	1009883a 	mov	r4,r2
 8005074:	180b883a 	mov	r5,r3
 8005078:	000d883a 	mov	r6,zero
 800507c:	000f883a 	mov	r7,zero
 8005080:	1029883a 	mov	r20,r2
 8005084:	1823883a 	mov	r17,r3
 8005088:	800a6980 	call	800a698 <__eqdf2>
 800508c:	103f9c26 	beq	r2,zero,8004f00 <_dtoa_r+0x684>
 8005090:	dd400917 	ldw	r21,36(sp)
 8005094:	dc000415 	stw	r16,16(sp)
 8005098:	00000906 	br	80050c0 <_dtoa_r+0x844>
 800509c:	800a2000 	call	800a200 <__muldf3>
 80050a0:	1009883a 	mov	r4,r2
 80050a4:	180b883a 	mov	r5,r3
 80050a8:	000d883a 	mov	r6,zero
 80050ac:	000f883a 	mov	r7,zero
 80050b0:	1029883a 	mov	r20,r2
 80050b4:	1823883a 	mov	r17,r3
 80050b8:	800a6980 	call	800a698 <__eqdf2>
 80050bc:	10022926 	beq	r2,zero,8005964 <_dtoa_r+0x10e8>
 80050c0:	900d883a 	mov	r6,r18
 80050c4:	980f883a 	mov	r7,r19
 80050c8:	a009883a 	mov	r4,r20
 80050cc:	880b883a 	mov	r5,r17
 80050d0:	800a4e40 	call	800a4e4 <__divdf3>
 80050d4:	180b883a 	mov	r5,r3
 80050d8:	1009883a 	mov	r4,r2
 80050dc:	800a9480 	call	800a948 <__fixdfsi>
 80050e0:	1009883a 	mov	r4,r2
 80050e4:	1021883a 	mov	r16,r2
 80050e8:	800a8740 	call	800a874 <__floatsidf>
 80050ec:	1009883a 	mov	r4,r2
 80050f0:	180b883a 	mov	r5,r3
 80050f4:	900d883a 	mov	r6,r18
 80050f8:	980f883a 	mov	r7,r19
 80050fc:	800a2000 	call	800a200 <__muldf3>
 8005100:	a009883a 	mov	r4,r20
 8005104:	880b883a 	mov	r5,r17
 8005108:	100d883a 	mov	r6,r2
 800510c:	180f883a 	mov	r7,r3
 8005110:	800a1a00 	call	800a1a0 <__subdf3>
 8005114:	82400c04 	addi	r9,r16,48
 8005118:	b2400005 	stb	r9,0(r22)
 800511c:	b5800044 	addi	r22,r22,1
 8005120:	b5d3c83a 	sub	r9,r22,r23
 8005124:	000d883a 	mov	r6,zero
 8005128:	01d00934 	movhi	r7,16420
 800512c:	1009883a 	mov	r4,r2
 8005130:	180b883a 	mov	r5,r3
 8005134:	aa7fd91e 	bne	r21,r9,800509c <_dtoa_r+0x820>
 8005138:	802b883a 	mov	r21,r16
 800513c:	dc000417 	ldw	r16,16(sp)
 8005140:	1009883a 	mov	r4,r2
 8005144:	180b883a 	mov	r5,r3
 8005148:	100d883a 	mov	r6,r2
 800514c:	180f883a 	mov	r7,r3
 8005150:	800a14c0 	call	800a14c <__adddf3>
 8005154:	9009883a 	mov	r4,r18
 8005158:	980b883a 	mov	r5,r19
 800515c:	100d883a 	mov	r6,r2
 8005160:	180f883a 	mov	r7,r3
 8005164:	1023883a 	mov	r17,r2
 8005168:	1829883a 	mov	r20,r3
 800516c:	800a8180 	call	800a818 <__ltdf2>
 8005170:	10000816 	blt	r2,zero,8005194 <_dtoa_r+0x918>
 8005174:	9009883a 	mov	r4,r18
 8005178:	980b883a 	mov	r5,r19
 800517c:	880d883a 	mov	r6,r17
 8005180:	a00f883a 	mov	r7,r20
 8005184:	800a6f40 	call	800a6f4 <__nedf2>
 8005188:	103f5d1e 	bne	r2,zero,8004f00 <_dtoa_r+0x684>
 800518c:	ad40004c 	andi	r21,r21,1
 8005190:	a83f5b26 	beq	r21,zero,8004f00 <_dtoa_r+0x684>
 8005194:	b53fffc3 	ldbu	r20,-1(r22)
 8005198:	b0ffff84 	addi	r3,r22,-2
 800519c:	01400e44 	movi	r5,57
 80051a0:	00000306 	br	80051b0 <_dtoa_r+0x934>
 80051a4:	1d000003 	ldbu	r20,0(r3)
 80051a8:	102d883a 	mov	r22,r2
 80051ac:	18ffffc4 	addi	r3,r3,-1
 80051b0:	a1003fcc 	andi	r4,r20,255
 80051b4:	2100201c 	xori	r4,r4,128
 80051b8:	213fe004 	addi	r4,r4,-128
 80051bc:	b0bfffc4 	addi	r2,r22,-1
 80051c0:	2142ca1e 	bne	r4,r5,8005cec <_dtoa_r+0x1470>
 80051c4:	b8bff71e 	bne	r23,r2,80051a4 <_dtoa_r+0x928>
 80051c8:	d8800617 	ldw	r2,24(sp)
 80051cc:	05000c44 	movi	r20,49
 80051d0:	10800044 	addi	r2,r2,1
 80051d4:	d8800615 	stw	r2,24(sp)
 80051d8:	00800c04 	movi	r2,48
 80051dc:	b8800005 	stb	r2,0(r23)
 80051e0:	b805883a 	mov	r2,r23
 80051e4:	15000005 	stb	r20,0(r2)
 80051e8:	003f4506 	br	8004f00 <_dtoa_r+0x684>
 80051ec:	d9c00c17 	ldw	r7,48(sp)
 80051f0:	3800c926 	beq	r7,zero,8005518 <_dtoa_r+0xc9c>
 80051f4:	d9c00417 	ldw	r7,16(sp)
 80051f8:	00c00044 	movi	r3,1
 80051fc:	19c16c0e 	bge	r3,r7,80057b0 <_dtoa_r+0xf34>
 8005200:	d9000917 	ldw	r4,36(sp)
 8005204:	d9c00a17 	ldw	r7,40(sp)
 8005208:	24ffffc4 	addi	r19,r4,-1
 800520c:	3cc20716 	blt	r7,r19,8005a2c <_dtoa_r+0x11b0>
 8005210:	3ce7c83a 	sub	r19,r7,r19
 8005214:	d9c00917 	ldw	r7,36(sp)
 8005218:	3802ae16 	blt	r7,zero,8005cd4 <_dtoa_r+0x1458>
 800521c:	dc800817 	ldw	r18,32(sp)
 8005220:	d8800917 	ldw	r2,36(sp)
 8005224:	d8c00817 	ldw	r3,32(sp)
 8005228:	d9c00717 	ldw	r7,28(sp)
 800522c:	8009883a 	mov	r4,r16
 8005230:	1887883a 	add	r3,r3,r2
 8005234:	388f883a 	add	r7,r7,r2
 8005238:	01400044 	movi	r5,1
 800523c:	d8c00815 	stw	r3,32(sp)
 8005240:	d9c00715 	stw	r7,28(sp)
 8005244:	80078000 	call	8007800 <__i2b>
 8005248:	102b883a 	mov	r21,r2
 800524c:	90000a26 	beq	r18,zero,8005278 <_dtoa_r+0x9fc>
 8005250:	d8800717 	ldw	r2,28(sp)
 8005254:	0080080e 	bge	zero,r2,8005278 <_dtoa_r+0x9fc>
 8005258:	90812b16 	blt	r18,r2,8005708 <_dtoa_r+0xe8c>
 800525c:	d8c00817 	ldw	r3,32(sp)
 8005260:	d9000717 	ldw	r4,28(sp)
 8005264:	90a5c83a 	sub	r18,r18,r2
 8005268:	1887c83a 	sub	r3,r3,r2
 800526c:	2089c83a 	sub	r4,r4,r2
 8005270:	d8c00815 	stw	r3,32(sp)
 8005274:	d9000715 	stw	r4,28(sp)
 8005278:	d9c00a17 	ldw	r7,40(sp)
 800527c:	01c0140e 	bge	zero,r7,80052d0 <_dtoa_r+0xa54>
 8005280:	d8800c17 	ldw	r2,48(sp)
 8005284:	1001de26 	beq	r2,zero,8005a00 <_dtoa_r+0x1184>
 8005288:	04c00e0e 	bge	zero,r19,80052c4 <_dtoa_r+0xa48>
 800528c:	a80b883a 	mov	r5,r21
 8005290:	8009883a 	mov	r4,r16
 8005294:	980d883a 	mov	r6,r19
 8005298:	8007a940 	call	8007a94 <__pow5mult>
 800529c:	e00d883a 	mov	r6,fp
 80052a0:	8009883a 	mov	r4,r16
 80052a4:	100b883a 	mov	r5,r2
 80052a8:	102b883a 	mov	r21,r2
 80052ac:	800783c0 	call	800783c <__multiply>
 80052b0:	1029883a 	mov	r20,r2
 80052b4:	e00b883a 	mov	r5,fp
 80052b8:	8009883a 	mov	r4,r16
 80052bc:	80074780 	call	8007478 <_Bfree>
 80052c0:	a039883a 	mov	fp,r20
 80052c4:	d8c00a17 	ldw	r3,40(sp)
 80052c8:	1ccdc83a 	sub	r6,r3,r19
 80052cc:	3001291e 	bne	r6,zero,8005774 <_dtoa_r+0xef8>
 80052d0:	8009883a 	mov	r4,r16
 80052d4:	01400044 	movi	r5,1
 80052d8:	80078000 	call	8007800 <__i2b>
 80052dc:	d9000b17 	ldw	r4,44(sp)
 80052e0:	1029883a 	mov	r20,r2
 80052e4:	0100050e 	bge	zero,r4,80052fc <_dtoa_r+0xa80>
 80052e8:	d9800b17 	ldw	r6,44(sp)
 80052ec:	8009883a 	mov	r4,r16
 80052f0:	100b883a 	mov	r5,r2
 80052f4:	8007a940 	call	8007a94 <__pow5mult>
 80052f8:	1029883a 	mov	r20,r2
 80052fc:	d9c00417 	ldw	r7,16(sp)
 8005300:	00800044 	movi	r2,1
 8005304:	11c0f00e 	bge	r2,r7,80056c8 <_dtoa_r+0xe4c>
 8005308:	0023883a 	mov	r17,zero
 800530c:	d8800b17 	ldw	r2,44(sp)
 8005310:	1001741e 	bne	r2,zero,80058e4 <_dtoa_r+0x1068>
 8005314:	00800044 	movi	r2,1
 8005318:	d8c00717 	ldw	r3,28(sp)
 800531c:	10c5883a 	add	r2,r2,r3
 8005320:	108007cc 	andi	r2,r2,31
 8005324:	10008026 	beq	r2,zero,8005528 <_dtoa_r+0xcac>
 8005328:	01000804 	movi	r4,32
 800532c:	2089c83a 	sub	r4,r4,r2
 8005330:	00c00104 	movi	r3,4
 8005334:	1902d00e 	bge	r3,r4,8005e78 <_dtoa_r+0x15fc>
 8005338:	d9000817 	ldw	r4,32(sp)
 800533c:	d9c00717 	ldw	r7,28(sp)
 8005340:	00c00704 	movi	r3,28
 8005344:	1885c83a 	sub	r2,r3,r2
 8005348:	2089883a 	add	r4,r4,r2
 800534c:	388f883a 	add	r7,r7,r2
 8005350:	d9000815 	stw	r4,32(sp)
 8005354:	90a5883a 	add	r18,r18,r2
 8005358:	d9c00715 	stw	r7,28(sp)
 800535c:	d9c00817 	ldw	r7,32(sp)
 8005360:	01c0050e 	bge	zero,r7,8005378 <_dtoa_r+0xafc>
 8005364:	e00b883a 	mov	r5,fp
 8005368:	8009883a 	mov	r4,r16
 800536c:	380d883a 	mov	r6,r7
 8005370:	8007bc00 	call	8007bc0 <__lshift>
 8005374:	1039883a 	mov	fp,r2
 8005378:	d8800717 	ldw	r2,28(sp)
 800537c:	0080050e 	bge	zero,r2,8005394 <_dtoa_r+0xb18>
 8005380:	a00b883a 	mov	r5,r20
 8005384:	8009883a 	mov	r4,r16
 8005388:	100d883a 	mov	r6,r2
 800538c:	8007bc00 	call	8007bc0 <__lshift>
 8005390:	1029883a 	mov	r20,r2
 8005394:	d8c00d17 	ldw	r3,52(sp)
 8005398:	1801401e 	bne	r3,zero,800589c <_dtoa_r+0x1020>
 800539c:	d8800917 	ldw	r2,36(sp)
 80053a0:	00815a0e 	bge	zero,r2,800590c <_dtoa_r+0x1090>
 80053a4:	d8c00c17 	ldw	r3,48(sp)
 80053a8:	18006f1e 	bne	r3,zero,8005568 <_dtoa_r+0xcec>
 80053ac:	b823883a 	mov	r17,r23
 80053b0:	dc800917 	ldw	r18,36(sp)
 80053b4:	00000206 	br	80053c0 <_dtoa_r+0xb44>
 80053b8:	80074a00 	call	80074a0 <__multadd>
 80053bc:	1039883a 	mov	fp,r2
 80053c0:	e009883a 	mov	r4,fp
 80053c4:	a00b883a 	mov	r5,r20
 80053c8:	80046400 	call	8004640 <quorem>
 80053cc:	10800c04 	addi	r2,r2,48
 80053d0:	88800005 	stb	r2,0(r17)
 80053d4:	8c400044 	addi	r17,r17,1
 80053d8:	8dc7c83a 	sub	r3,r17,r23
 80053dc:	8009883a 	mov	r4,r16
 80053e0:	e00b883a 	mov	r5,fp
 80053e4:	01800284 	movi	r6,10
 80053e8:	000f883a 	mov	r7,zero
 80053ec:	1cbff216 	blt	r3,r18,80053b8 <_dtoa_r+0xb3c>
 80053f0:	dd800917 	ldw	r22,36(sp)
 80053f4:	1007883a 	mov	r3,r2
 80053f8:	05823a0e 	bge	zero,r22,8005ce4 <_dtoa_r+0x1468>
 80053fc:	bdad883a 	add	r22,r23,r22
 8005400:	0023883a 	mov	r17,zero
 8005404:	e00b883a 	mov	r5,fp
 8005408:	01800044 	movi	r6,1
 800540c:	8009883a 	mov	r4,r16
 8005410:	d8c01515 	stw	r3,84(sp)
 8005414:	8007bc00 	call	8007bc0 <__lshift>
 8005418:	1009883a 	mov	r4,r2
 800541c:	a00b883a 	mov	r5,r20
 8005420:	1039883a 	mov	fp,r2
 8005424:	8007d1c0 	call	8007d1c <__mcmp>
 8005428:	d8c01517 	ldw	r3,84(sp)
 800542c:	0080d60e 	bge	zero,r2,8005788 <_dtoa_r+0xf0c>
 8005430:	b13fffc3 	ldbu	r4,-1(r22)
 8005434:	b0ffff84 	addi	r3,r22,-2
 8005438:	01800e44 	movi	r6,57
 800543c:	00000306 	br	800544c <_dtoa_r+0xbd0>
 8005440:	19000003 	ldbu	r4,0(r3)
 8005444:	102d883a 	mov	r22,r2
 8005448:	18ffffc4 	addi	r3,r3,-1
 800544c:	21403fcc 	andi	r5,r4,255
 8005450:	2940201c 	xori	r5,r5,128
 8005454:	297fe004 	addi	r5,r5,-128
 8005458:	b0bfffc4 	addi	r2,r22,-1
 800545c:	2981a71e 	bne	r5,r6,8005afc <_dtoa_r+0x1280>
 8005460:	b8bff71e 	bne	r23,r2,8005440 <_dtoa_r+0xbc4>
 8005464:	d8800617 	ldw	r2,24(sp)
 8005468:	10800044 	addi	r2,r2,1
 800546c:	d8800615 	stw	r2,24(sp)
 8005470:	00800c44 	movi	r2,49
 8005474:	b8800005 	stb	r2,0(r23)
 8005478:	8009883a 	mov	r4,r16
 800547c:	a00b883a 	mov	r5,r20
 8005480:	80074780 	call	8007478 <_Bfree>
 8005484:	a83e9e26 	beq	r21,zero,8004f00 <_dtoa_r+0x684>
 8005488:	88000426 	beq	r17,zero,800549c <_dtoa_r+0xc20>
 800548c:	8d400326 	beq	r17,r21,800549c <_dtoa_r+0xc20>
 8005490:	8009883a 	mov	r4,r16
 8005494:	880b883a 	mov	r5,r17
 8005498:	80074780 	call	8007478 <_Bfree>
 800549c:	8009883a 	mov	r4,r16
 80054a0:	a80b883a 	mov	r5,r21
 80054a4:	80074780 	call	8007478 <_Bfree>
 80054a8:	003e9506 	br	8004f00 <_dtoa_r+0x684>
 80054ac:	00c00044 	movi	r3,1
 80054b0:	d8c00d15 	stw	r3,52(sp)
 80054b4:	003d9f06 	br	8004b34 <_dtoa_r+0x2b8>
 80054b8:	d9000817 	ldw	r4,32(sp)
 80054bc:	d8800617 	ldw	r2,24(sp)
 80054c0:	d8000b15 	stw	zero,44(sp)
 80054c4:	2089c83a 	sub	r4,r4,r2
 80054c8:	0087c83a 	sub	r3,zero,r2
 80054cc:	d9000815 	stw	r4,32(sp)
 80054d0:	d8c00a15 	stw	r3,40(sp)
 80054d4:	003da306 	br	8004b64 <_dtoa_r+0x2e8>
 80054d8:	0529c83a 	sub	r20,zero,r20
 80054dc:	dd000815 	stw	r20,32(sp)
 80054e0:	d8000715 	stw	zero,28(sp)
 80054e4:	003d9806 	br	8004b48 <_dtoa_r+0x2cc>
 80054e8:	d9000617 	ldw	r4,24(sp)
 80054ec:	800a8740 	call	800a874 <__floatsidf>
 80054f0:	1009883a 	mov	r4,r2
 80054f4:	180b883a 	mov	r5,r3
 80054f8:	980d883a 	mov	r6,r19
 80054fc:	900f883a 	mov	r7,r18
 8005500:	800a6980 	call	800a698 <__eqdf2>
 8005504:	103d7a26 	beq	r2,zero,8004af0 <_dtoa_r+0x274>
 8005508:	d8800617 	ldw	r2,24(sp)
 800550c:	10bfffc4 	addi	r2,r2,-1
 8005510:	d8800615 	stw	r2,24(sp)
 8005514:	003d7606 	br	8004af0 <_dtoa_r+0x274>
 8005518:	dcc00a17 	ldw	r19,40(sp)
 800551c:	dc800817 	ldw	r18,32(sp)
 8005520:	002b883a 	mov	r21,zero
 8005524:	003f4906 	br	800524c <_dtoa_r+0x9d0>
 8005528:	00800704 	movi	r2,28
 800552c:	d8c00817 	ldw	r3,32(sp)
 8005530:	d9000717 	ldw	r4,28(sp)
 8005534:	90a5883a 	add	r18,r18,r2
 8005538:	1887883a 	add	r3,r3,r2
 800553c:	2089883a 	add	r4,r4,r2
 8005540:	d8c00815 	stw	r3,32(sp)
 8005544:	d9000715 	stw	r4,28(sp)
 8005548:	003f8406 	br	800535c <_dtoa_r+0xae0>
 800554c:	d9c00317 	ldw	r7,12(sp)
 8005550:	013efb84 	movi	r4,-1042
 8005554:	2509c83a 	sub	r4,r4,r20
 8005558:	3908983a 	sll	r4,r7,r4
 800555c:	003d3006 	br	8004a20 <_dtoa_r+0x1a4>
 8005560:	d8000d15 	stw	zero,52(sp)
 8005564:	003d7306 	br	8004b34 <_dtoa_r+0x2b8>
 8005568:	0480050e 	bge	zero,r18,8005580 <_dtoa_r+0xd04>
 800556c:	a80b883a 	mov	r5,r21
 8005570:	8009883a 	mov	r4,r16
 8005574:	900d883a 	mov	r6,r18
 8005578:	8007bc00 	call	8007bc0 <__lshift>
 800557c:	102b883a 	mov	r21,r2
 8005580:	8801611e 	bne	r17,zero,8005b08 <_dtoa_r+0x128c>
 8005584:	a827883a 	mov	r19,r21
 8005588:	d8c00317 	ldw	r3,12(sp)
 800558c:	d9000917 	ldw	r4,36(sp)
 8005590:	b8bfffc4 	addi	r2,r23,-1
 8005594:	18c0004c 	andi	r3,r3,1
 8005598:	1105883a 	add	r2,r2,r4
 800559c:	b825883a 	mov	r18,r23
 80055a0:	d8800515 	stw	r2,20(sp)
 80055a4:	a823883a 	mov	r17,r21
 80055a8:	d8c00315 	stw	r3,12(sp)
 80055ac:	ddc00715 	stw	r23,28(sp)
 80055b0:	e009883a 	mov	r4,fp
 80055b4:	a00b883a 	mov	r5,r20
 80055b8:	80046400 	call	8004640 <quorem>
 80055bc:	e009883a 	mov	r4,fp
 80055c0:	880b883a 	mov	r5,r17
 80055c4:	102d883a 	mov	r22,r2
 80055c8:	8007d1c0 	call	8007d1c <__mcmp>
 80055cc:	980d883a 	mov	r6,r19
 80055d0:	8009883a 	mov	r4,r16
 80055d4:	a00b883a 	mov	r5,r20
 80055d8:	102b883a 	mov	r21,r2
 80055dc:	8007d740 	call	8007d74 <__mdiff>
 80055e0:	100d883a 	mov	r6,r2
 80055e4:	10800317 	ldw	r2,12(r2)
 80055e8:	b5c00c04 	addi	r23,r22,48
 80055ec:	10008c26 	beq	r2,zero,8005820 <_dtoa_r+0xfa4>
 80055f0:	8009883a 	mov	r4,r16
 80055f4:	300b883a 	mov	r5,r6
 80055f8:	80074780 	call	8007478 <_Bfree>
 80055fc:	00800044 	movi	r2,1
 8005600:	a8007116 	blt	r21,zero,80057c8 <_dtoa_r+0xf4c>
 8005604:	a800041e 	bne	r21,zero,8005618 <_dtoa_r+0xd9c>
 8005608:	d9c00417 	ldw	r7,16(sp)
 800560c:	3800021e 	bne	r7,zero,8005618 <_dtoa_r+0xd9c>
 8005610:	d8c00317 	ldw	r3,12(sp)
 8005614:	18006c26 	beq	r3,zero,80057c8 <_dtoa_r+0xf4c>
 8005618:	00814c16 	blt	zero,r2,8005b4c <_dtoa_r+0x12d0>
 800561c:	d8c00517 	ldw	r3,20(sp)
 8005620:	95400044 	addi	r21,r18,1
 8005624:	95c00005 	stb	r23,0(r18)
 8005628:	a82d883a 	mov	r22,r21
 800562c:	90c14d26 	beq	r18,r3,8005b64 <_dtoa_r+0x12e8>
 8005630:	e00b883a 	mov	r5,fp
 8005634:	8009883a 	mov	r4,r16
 8005638:	01800284 	movi	r6,10
 800563c:	000f883a 	mov	r7,zero
 8005640:	80074a00 	call	80074a0 <__multadd>
 8005644:	1039883a 	mov	fp,r2
 8005648:	8cc08b26 	beq	r17,r19,8005878 <_dtoa_r+0xffc>
 800564c:	880b883a 	mov	r5,r17
 8005650:	01800284 	movi	r6,10
 8005654:	000f883a 	mov	r7,zero
 8005658:	8009883a 	mov	r4,r16
 800565c:	80074a00 	call	80074a0 <__multadd>
 8005660:	980b883a 	mov	r5,r19
 8005664:	8009883a 	mov	r4,r16
 8005668:	01800284 	movi	r6,10
 800566c:	000f883a 	mov	r7,zero
 8005670:	1023883a 	mov	r17,r2
 8005674:	80074a00 	call	80074a0 <__multadd>
 8005678:	1027883a 	mov	r19,r2
 800567c:	a825883a 	mov	r18,r21
 8005680:	003fcb06 	br	80055b0 <_dtoa_r+0xd34>
 8005684:	d9c00417 	ldw	r7,16(sp)
 8005688:	00800104 	movi	r2,4
 800568c:	3880e426 	beq	r7,r2,8005a20 <_dtoa_r+0x11a4>
 8005690:	00800144 	movi	r2,5
 8005694:	38be3c1e 	bne	r7,r2,8004f88 <_dtoa_r+0x70c>
 8005698:	00c00044 	movi	r3,1
 800569c:	d8c00c15 	stw	r3,48(sp)
 80056a0:	d9c02117 	ldw	r7,132(sp)
 80056a4:	d8800617 	ldw	r2,24(sp)
 80056a8:	388f883a 	add	r7,r7,r2
 80056ac:	3c800044 	addi	r18,r7,1
 80056b0:	d9c00e15 	stw	r7,56(sp)
 80056b4:	dc800915 	stw	r18,36(sp)
 80056b8:	04bd3e16 	blt	zero,r18,8004bb4 <_dtoa_r+0x338>
 80056bc:	80001115 	stw	zero,68(r16)
 80056c0:	000b883a 	mov	r5,zero
 80056c4:	003d4606 	br	8004be0 <_dtoa_r+0x364>
 80056c8:	d8c00317 	ldw	r3,12(sp)
 80056cc:	183f0e1e 	bne	r3,zero,8005308 <_dtoa_r+0xa8c>
 80056d0:	00c00434 	movhi	r3,16
 80056d4:	18ffffc4 	addi	r3,r3,-1
 80056d8:	88c6703a 	and	r3,r17,r3
 80056dc:	183f0a1e 	bne	r3,zero,8005308 <_dtoa_r+0xa8c>
 80056e0:	8c5ffc2c 	andhi	r17,r17,32752
 80056e4:	883f0826 	beq	r17,zero,8005308 <_dtoa_r+0xa8c>
 80056e8:	d9000817 	ldw	r4,32(sp)
 80056ec:	d9c00717 	ldw	r7,28(sp)
 80056f0:	1023883a 	mov	r17,r2
 80056f4:	2089883a 	add	r4,r4,r2
 80056f8:	388f883a 	add	r7,r7,r2
 80056fc:	d9000815 	stw	r4,32(sp)
 8005700:	d9c00715 	stw	r7,28(sp)
 8005704:	003f0106 	br	800530c <_dtoa_r+0xa90>
 8005708:	9005883a 	mov	r2,r18
 800570c:	003ed306 	br	800525c <_dtoa_r+0x9e0>
 8005710:	d8800917 	ldw	r2,36(sp)
 8005714:	00be3516 	blt	zero,r2,8004fec <_dtoa_r+0x770>
 8005718:	1000b61e 	bne	r2,zero,80059f4 <_dtoa_r+0x1178>
 800571c:	9009883a 	mov	r4,r18
 8005720:	980b883a 	mov	r5,r19
 8005724:	000d883a 	mov	r6,zero
 8005728:	01d00534 	movhi	r7,16404
 800572c:	800a2000 	call	800a200 <__muldf3>
 8005730:	d9800317 	ldw	r6,12(sp)
 8005734:	1009883a 	mov	r4,r2
 8005738:	180b883a 	mov	r5,r3
 800573c:	880f883a 	mov	r7,r17
 8005740:	800a7b40 	call	800a7b4 <__gedf2>
 8005744:	0029883a 	mov	r20,zero
 8005748:	002b883a 	mov	r21,zero
 800574c:	10007e16 	blt	r2,zero,8005948 <_dtoa_r+0x10cc>
 8005750:	d8802117 	ldw	r2,132(sp)
 8005754:	b82d883a 	mov	r22,r23
 8005758:	0084303a 	nor	r2,zero,r2
 800575c:	d8800615 	stw	r2,24(sp)
 8005760:	8009883a 	mov	r4,r16
 8005764:	a00b883a 	mov	r5,r20
 8005768:	80074780 	call	8007478 <_Bfree>
 800576c:	a83f4b1e 	bne	r21,zero,800549c <_dtoa_r+0xc20>
 8005770:	003de306 	br	8004f00 <_dtoa_r+0x684>
 8005774:	e00b883a 	mov	r5,fp
 8005778:	8009883a 	mov	r4,r16
 800577c:	8007a940 	call	8007a94 <__pow5mult>
 8005780:	1039883a 	mov	fp,r2
 8005784:	003ed206 	br	80052d0 <_dtoa_r+0xa54>
 8005788:	1000021e 	bne	r2,zero,8005794 <_dtoa_r+0xf18>
 800578c:	18c0004c 	andi	r3,r3,1
 8005790:	183f271e 	bne	r3,zero,8005430 <_dtoa_r+0xbb4>
 8005794:	01000c04 	movi	r4,48
 8005798:	00000106 	br	80057a0 <_dtoa_r+0xf24>
 800579c:	102d883a 	mov	r22,r2
 80057a0:	b0bfffc4 	addi	r2,r22,-1
 80057a4:	10c00007 	ldb	r3,0(r2)
 80057a8:	193ffc26 	beq	r3,r4,800579c <_dtoa_r+0xf20>
 80057ac:	003f3206 	br	8005478 <_dtoa_r+0xbfc>
 80057b0:	d8c00f17 	ldw	r3,60(sp)
 80057b4:	18015026 	beq	r3,zero,8005cf8 <_dtoa_r+0x147c>
 80057b8:	10810cc4 	addi	r2,r2,1075
 80057bc:	dcc00a17 	ldw	r19,40(sp)
 80057c0:	dc800817 	ldw	r18,32(sp)
 80057c4:	003e9706 	br	8005224 <_dtoa_r+0x9a8>
 80057c8:	b807883a 	mov	r3,r23
 80057cc:	182b883a 	mov	r21,r3
 80057d0:	ddc00717 	ldw	r23,28(sp)
 80057d4:	00800e0e 	bge	zero,r2,8005810 <_dtoa_r+0xf94>
 80057d8:	e00b883a 	mov	r5,fp
 80057dc:	01800044 	movi	r6,1
 80057e0:	8009883a 	mov	r4,r16
 80057e4:	d8c01515 	stw	r3,84(sp)
 80057e8:	8007bc00 	call	8007bc0 <__lshift>
 80057ec:	1009883a 	mov	r4,r2
 80057f0:	a00b883a 	mov	r5,r20
 80057f4:	1039883a 	mov	fp,r2
 80057f8:	8007d1c0 	call	8007d1c <__mcmp>
 80057fc:	d8c01517 	ldw	r3,84(sp)
 8005800:	0081880e 	bge	zero,r2,8005e24 <_dtoa_r+0x15a8>
 8005804:	00800e44 	movi	r2,57
 8005808:	b0c00c44 	addi	r3,r22,49
 800580c:	a8816326 	beq	r21,r2,8005d9c <_dtoa_r+0x1520>
 8005810:	90c00005 	stb	r3,0(r18)
 8005814:	95800044 	addi	r22,r18,1
 8005818:	982b883a 	mov	r21,r19
 800581c:	003f1606 	br	8005478 <_dtoa_r+0xbfc>
 8005820:	300b883a 	mov	r5,r6
 8005824:	e009883a 	mov	r4,fp
 8005828:	d9801515 	stw	r6,84(sp)
 800582c:	8007d1c0 	call	8007d1c <__mcmp>
 8005830:	d9801517 	ldw	r6,84(sp)
 8005834:	8009883a 	mov	r4,r16
 8005838:	d8801515 	stw	r2,84(sp)
 800583c:	300b883a 	mov	r5,r6
 8005840:	80074780 	call	8007478 <_Bfree>
 8005844:	d8801517 	ldw	r2,84(sp)
 8005848:	103f6d1e 	bne	r2,zero,8005600 <_dtoa_r+0xd84>
 800584c:	d9c00417 	ldw	r7,16(sp)
 8005850:	383f6b1e 	bne	r7,zero,8005600 <_dtoa_r+0xd84>
 8005854:	d8c00317 	ldw	r3,12(sp)
 8005858:	183f691e 	bne	r3,zero,8005600 <_dtoa_r+0xd84>
 800585c:	b807883a 	mov	r3,r23
 8005860:	00800e44 	movi	r2,57
 8005864:	ddc00717 	ldw	r23,28(sp)
 8005868:	18814c26 	beq	r3,r2,8005d9c <_dtoa_r+0x1520>
 800586c:	057fe80e 	bge	zero,r21,8005810 <_dtoa_r+0xf94>
 8005870:	b0c00c44 	addi	r3,r22,49
 8005874:	003fe606 	br	8005810 <_dtoa_r+0xf94>
 8005878:	880b883a 	mov	r5,r17
 800587c:	8009883a 	mov	r4,r16
 8005880:	01800284 	movi	r6,10
 8005884:	000f883a 	mov	r7,zero
 8005888:	80074a00 	call	80074a0 <__multadd>
 800588c:	1023883a 	mov	r17,r2
 8005890:	1027883a 	mov	r19,r2
 8005894:	a825883a 	mov	r18,r21
 8005898:	003f4506 	br	80055b0 <_dtoa_r+0xd34>
 800589c:	e009883a 	mov	r4,fp
 80058a0:	a00b883a 	mov	r5,r20
 80058a4:	8007d1c0 	call	8007d1c <__mcmp>
 80058a8:	103ebc0e 	bge	r2,zero,800539c <_dtoa_r+0xb20>
 80058ac:	e00b883a 	mov	r5,fp
 80058b0:	8009883a 	mov	r4,r16
 80058b4:	01800284 	movi	r6,10
 80058b8:	000f883a 	mov	r7,zero
 80058bc:	80074a00 	call	80074a0 <__multadd>
 80058c0:	1039883a 	mov	fp,r2
 80058c4:	d8800617 	ldw	r2,24(sp)
 80058c8:	d8c00c17 	ldw	r3,48(sp)
 80058cc:	10bfffc4 	addi	r2,r2,-1
 80058d0:	d8800615 	stw	r2,24(sp)
 80058d4:	1801571e 	bne	r3,zero,8005e34 <_dtoa_r+0x15b8>
 80058d8:	d9c00e17 	ldw	r7,56(sp)
 80058dc:	d9c00915 	stw	r7,36(sp)
 80058e0:	003eae06 	br	800539c <_dtoa_r+0xb20>
 80058e4:	a0800417 	ldw	r2,16(r20)
 80058e8:	10800104 	addi	r2,r2,4
 80058ec:	1085883a 	add	r2,r2,r2
 80058f0:	1085883a 	add	r2,r2,r2
 80058f4:	a085883a 	add	r2,r20,r2
 80058f8:	11000017 	ldw	r4,0(r2)
 80058fc:	80076e80 	call	80076e8 <__hi0bits>
 8005900:	00c00804 	movi	r3,32
 8005904:	1885c83a 	sub	r2,r3,r2
 8005908:	003e8306 	br	8005318 <_dtoa_r+0xa9c>
 800590c:	d9c00417 	ldw	r7,16(sp)
 8005910:	00800084 	movi	r2,2
 8005914:	11fea30e 	bge	r2,r7,80053a4 <_dtoa_r+0xb28>
 8005918:	d8800917 	ldw	r2,36(sp)
 800591c:	103f8c1e 	bne	r2,zero,8005750 <_dtoa_r+0xed4>
 8005920:	a00b883a 	mov	r5,r20
 8005924:	8009883a 	mov	r4,r16
 8005928:	01800144 	movi	r6,5
 800592c:	000f883a 	mov	r7,zero
 8005930:	80074a00 	call	80074a0 <__multadd>
 8005934:	e009883a 	mov	r4,fp
 8005938:	100b883a 	mov	r5,r2
 800593c:	1029883a 	mov	r20,r2
 8005940:	8007d1c0 	call	8007d1c <__mcmp>
 8005944:	00bf820e 	bge	zero,r2,8005750 <_dtoa_r+0xed4>
 8005948:	00800c44 	movi	r2,49
 800594c:	b8800005 	stb	r2,0(r23)
 8005950:	d8800617 	ldw	r2,24(sp)
 8005954:	bd800044 	addi	r22,r23,1
 8005958:	10800044 	addi	r2,r2,1
 800595c:	d8800615 	stw	r2,24(sp)
 8005960:	003f7f06 	br	8005760 <_dtoa_r+0xee4>
 8005964:	dc000417 	ldw	r16,16(sp)
 8005968:	003d6506 	br	8004f00 <_dtoa_r+0x684>
 800596c:	9009883a 	mov	r4,r18
 8005970:	800a8740 	call	800a874 <__floatsidf>
 8005974:	1009883a 	mov	r4,r2
 8005978:	180b883a 	mov	r5,r3
 800597c:	980d883a 	mov	r6,r19
 8005980:	a00f883a 	mov	r7,r20
 8005984:	800a2000 	call	800a200 <__muldf3>
 8005988:	1009883a 	mov	r4,r2
 800598c:	180b883a 	mov	r5,r3
 8005990:	000d883a 	mov	r6,zero
 8005994:	01d00734 	movhi	r7,16412
 8005998:	800a14c0 	call	800a14c <__adddf3>
 800599c:	057f3034 	movhi	r21,64704
 80059a0:	1025883a 	mov	r18,r2
 80059a4:	1d6b883a 	add	r21,r3,r21
 80059a8:	9809883a 	mov	r4,r19
 80059ac:	a00b883a 	mov	r5,r20
 80059b0:	000d883a 	mov	r6,zero
 80059b4:	01d00534 	movhi	r7,16404
 80059b8:	800a1a00 	call	800a1a0 <__subdf3>
 80059bc:	1009883a 	mov	r4,r2
 80059c0:	180b883a 	mov	r5,r3
 80059c4:	900d883a 	mov	r6,r18
 80059c8:	a80f883a 	mov	r7,r21
 80059cc:	1027883a 	mov	r19,r2
 80059d0:	1829883a 	mov	r20,r3
 80059d4:	800a7500 	call	800a750 <__gtdf2>
 80059d8:	00806616 	blt	zero,r2,8005b74 <_dtoa_r+0x12f8>
 80059dc:	a9e0003c 	xorhi	r7,r21,32768
 80059e0:	9809883a 	mov	r4,r19
 80059e4:	a00b883a 	mov	r5,r20
 80059e8:	900d883a 	mov	r6,r18
 80059ec:	800a8180 	call	800a818 <__ltdf2>
 80059f0:	103d710e 	bge	r2,zero,8004fb8 <_dtoa_r+0x73c>
 80059f4:	0029883a 	mov	r20,zero
 80059f8:	002b883a 	mov	r21,zero
 80059fc:	003f5406 	br	8005750 <_dtoa_r+0xed4>
 8005a00:	d9800a17 	ldw	r6,40(sp)
 8005a04:	e00b883a 	mov	r5,fp
 8005a08:	8009883a 	mov	r4,r16
 8005a0c:	8007a940 	call	8007a94 <__pow5mult>
 8005a10:	1039883a 	mov	fp,r2
 8005a14:	003e2e06 	br	80052d0 <_dtoa_r+0xa54>
 8005a18:	d8000c15 	stw	zero,48(sp)
 8005a1c:	003f2006 	br	80056a0 <_dtoa_r+0xe24>
 8005a20:	00800044 	movi	r2,1
 8005a24:	d8800c15 	stw	r2,48(sp)
 8005a28:	003c5d06 	br	8004ba0 <_dtoa_r+0x324>
 8005a2c:	d8c00a17 	ldw	r3,40(sp)
 8005a30:	d9000b17 	ldw	r4,44(sp)
 8005a34:	dcc00a15 	stw	r19,40(sp)
 8005a38:	98c5c83a 	sub	r2,r19,r3
 8005a3c:	2089883a 	add	r4,r4,r2
 8005a40:	d9000b15 	stw	r4,44(sp)
 8005a44:	0027883a 	mov	r19,zero
 8005a48:	003df206 	br	8005214 <_dtoa_r+0x998>
 8005a4c:	d9000317 	ldw	r4,12(sp)
 8005a50:	8829883a 	mov	r20,r17
 8005a54:	04800084 	movi	r18,2
 8005a58:	d9001015 	stw	r4,64(sp)
 8005a5c:	003c8106 	br	8004c64 <_dtoa_r+0x3e8>
 8005a60:	04800044 	movi	r18,1
 8005a64:	dc800e15 	stw	r18,56(sp)
 8005a68:	dc800915 	stw	r18,36(sp)
 8005a6c:	dc802115 	stw	r18,132(sp)
 8005a70:	003f1206 	br	80056bc <_dtoa_r+0xe40>
 8005a74:	d8800617 	ldw	r2,24(sp)
 8005a78:	00abc83a 	sub	r21,zero,r2
 8005a7c:	a800a426 	beq	r21,zero,8005d10 <_dtoa_r+0x1494>
 8005a80:	a88003cc 	andi	r2,r21,15
 8005a84:	100490fa 	slli	r2,r2,3
 8005a88:	00c20074 	movhi	r3,2049
 8005a8c:	18f76204 	addi	r3,r3,-8824
 8005a90:	d9000317 	ldw	r4,12(sp)
 8005a94:	1885883a 	add	r2,r3,r2
 8005a98:	11800017 	ldw	r6,0(r2)
 8005a9c:	11c00117 	ldw	r7,4(r2)
 8005aa0:	a82bd13a 	srai	r21,r21,4
 8005aa4:	880b883a 	mov	r5,r17
 8005aa8:	800a2000 	call	800a200 <__muldf3>
 8005aac:	1027883a 	mov	r19,r2
 8005ab0:	1829883a 	mov	r20,r3
 8005ab4:	a800e826 	beq	r21,zero,8005e58 <_dtoa_r+0x15dc>
 8005ab8:	05820074 	movhi	r22,2049
 8005abc:	b5b75804 	addi	r22,r22,-8864
 8005ac0:	04800084 	movi	r18,2
 8005ac4:	a980004c 	andi	r6,r21,1
 8005ac8:	1009883a 	mov	r4,r2
 8005acc:	a82bd07a 	srai	r21,r21,1
 8005ad0:	180b883a 	mov	r5,r3
 8005ad4:	30000426 	beq	r6,zero,8005ae8 <_dtoa_r+0x126c>
 8005ad8:	b1800017 	ldw	r6,0(r22)
 8005adc:	b1c00117 	ldw	r7,4(r22)
 8005ae0:	94800044 	addi	r18,r18,1
 8005ae4:	800a2000 	call	800a200 <__muldf3>
 8005ae8:	b5800204 	addi	r22,r22,8
 8005aec:	a83ff51e 	bne	r21,zero,8005ac4 <_dtoa_r+0x1248>
 8005af0:	1027883a 	mov	r19,r2
 8005af4:	1829883a 	mov	r20,r3
 8005af8:	003c7306 	br	8004cc8 <_dtoa_r+0x44c>
 8005afc:	21000044 	addi	r4,r4,1
 8005b00:	11000005 	stb	r4,0(r2)
 8005b04:	003e5c06 	br	8005478 <_dtoa_r+0xbfc>
 8005b08:	a9400117 	ldw	r5,4(r21)
 8005b0c:	8009883a 	mov	r4,r16
 8005b10:	80073d00 	call	80073d0 <_Balloc>
 8005b14:	a9800417 	ldw	r6,16(r21)
 8005b18:	11000304 	addi	r4,r2,12
 8005b1c:	a9400304 	addi	r5,r21,12
 8005b20:	31800084 	addi	r6,r6,2
 8005b24:	318d883a 	add	r6,r6,r6
 8005b28:	318d883a 	add	r6,r6,r6
 8005b2c:	1023883a 	mov	r17,r2
 8005b30:	80023900 	call	8002390 <memcpy>
 8005b34:	8009883a 	mov	r4,r16
 8005b38:	880b883a 	mov	r5,r17
 8005b3c:	01800044 	movi	r6,1
 8005b40:	8007bc00 	call	8007bc0 <__lshift>
 8005b44:	1027883a 	mov	r19,r2
 8005b48:	003e8f06 	br	8005588 <_dtoa_r+0xd0c>
 8005b4c:	b807883a 	mov	r3,r23
 8005b50:	00800e44 	movi	r2,57
 8005b54:	ddc00717 	ldw	r23,28(sp)
 8005b58:	18809026 	beq	r3,r2,8005d9c <_dtoa_r+0x1520>
 8005b5c:	18c00044 	addi	r3,r3,1
 8005b60:	003f2b06 	br	8005810 <_dtoa_r+0xf94>
 8005b64:	b807883a 	mov	r3,r23
 8005b68:	982b883a 	mov	r21,r19
 8005b6c:	ddc00717 	ldw	r23,28(sp)
 8005b70:	003e2406 	br	8005404 <_dtoa_r+0xb88>
 8005b74:	0029883a 	mov	r20,zero
 8005b78:	002b883a 	mov	r21,zero
 8005b7c:	003f7206 	br	8005948 <_dtoa_r+0x10cc>
 8005b80:	593fffc4 	addi	r4,r11,-1
 8005b84:	200490fa 	slli	r2,r4,3
 8005b88:	00c20074 	movhi	r3,2049
 8005b8c:	18f76204 	addi	r3,r3,-8824
 8005b90:	d9001015 	stw	r4,64(sp)
 8005b94:	1885883a 	add	r2,r3,r2
 8005b98:	11000017 	ldw	r4,0(r2)
 8005b9c:	11400117 	ldw	r5,4(r2)
 8005ba0:	900d883a 	mov	r6,r18
 8005ba4:	a80f883a 	mov	r7,r21
 8005ba8:	dac01615 	stw	r11,88(sp)
 8005bac:	800a2000 	call	800a200 <__muldf3>
 8005bb0:	a00b883a 	mov	r5,r20
 8005bb4:	9809883a 	mov	r4,r19
 8005bb8:	d8c01215 	stw	r3,72(sp)
 8005bbc:	d8801115 	stw	r2,68(sp)
 8005bc0:	800a9480 	call	800a948 <__fixdfsi>
 8005bc4:	1009883a 	mov	r4,r2
 8005bc8:	1025883a 	mov	r18,r2
 8005bcc:	800a8740 	call	800a874 <__floatsidf>
 8005bd0:	9809883a 	mov	r4,r19
 8005bd4:	a00b883a 	mov	r5,r20
 8005bd8:	100d883a 	mov	r6,r2
 8005bdc:	180f883a 	mov	r7,r3
 8005be0:	94800c04 	addi	r18,r18,48
 8005be4:	800a1a00 	call	800a1a0 <__subdf3>
 8005be8:	bc800005 	stb	r18,0(r23)
 8005bec:	dac01617 	ldw	r11,88(sp)
 8005bf0:	102b883a 	mov	r21,r2
 8005bf4:	00800044 	movi	r2,1
 8005bf8:	bd800044 	addi	r22,r23,1
 8005bfc:	1815883a 	mov	r10,r3
 8005c00:	58802226 	beq	r11,r2,8005c8c <_dtoa_r+0x1410>
 8005c04:	bad7883a 	add	r11,r23,r11
 8005c08:	dc001415 	stw	r16,80(sp)
 8005c0c:	a805883a 	mov	r2,r21
 8005c10:	b027883a 	mov	r19,r22
 8005c14:	5821883a 	mov	r16,r11
 8005c18:	882b883a 	mov	r21,r17
 8005c1c:	000d883a 	mov	r6,zero
 8005c20:	01d00934 	movhi	r7,16420
 8005c24:	1009883a 	mov	r4,r2
 8005c28:	180b883a 	mov	r5,r3
 8005c2c:	800a2000 	call	800a200 <__muldf3>
 8005c30:	180b883a 	mov	r5,r3
 8005c34:	1009883a 	mov	r4,r2
 8005c38:	1829883a 	mov	r20,r3
 8005c3c:	1023883a 	mov	r17,r2
 8005c40:	800a9480 	call	800a948 <__fixdfsi>
 8005c44:	1009883a 	mov	r4,r2
 8005c48:	1025883a 	mov	r18,r2
 8005c4c:	800a8740 	call	800a874 <__floatsidf>
 8005c50:	8809883a 	mov	r4,r17
 8005c54:	a00b883a 	mov	r5,r20
 8005c58:	100d883a 	mov	r6,r2
 8005c5c:	180f883a 	mov	r7,r3
 8005c60:	94800c04 	addi	r18,r18,48
 8005c64:	800a1a00 	call	800a1a0 <__subdf3>
 8005c68:	9cc00044 	addi	r19,r19,1
 8005c6c:	9cbfffc5 	stb	r18,-1(r19)
 8005c70:	9c3fea1e 	bne	r19,r16,8005c1c <_dtoa_r+0x13a0>
 8005c74:	1815883a 	mov	r10,r3
 8005c78:	d8c01017 	ldw	r3,64(sp)
 8005c7c:	dc001417 	ldw	r16,80(sp)
 8005c80:	a823883a 	mov	r17,r21
 8005c84:	b0ed883a 	add	r22,r22,r3
 8005c88:	102b883a 	mov	r21,r2
 8005c8c:	d9001117 	ldw	r4,68(sp)
 8005c90:	d9401217 	ldw	r5,72(sp)
 8005c94:	000d883a 	mov	r6,zero
 8005c98:	01cff834 	movhi	r7,16352
 8005c9c:	da801515 	stw	r10,84(sp)
 8005ca0:	800a14c0 	call	800a14c <__adddf3>
 8005ca4:	da801517 	ldw	r10,84(sp)
 8005ca8:	1009883a 	mov	r4,r2
 8005cac:	180b883a 	mov	r5,r3
 8005cb0:	500f883a 	mov	r7,r10
 8005cb4:	a80d883a 	mov	r6,r21
 8005cb8:	800a8180 	call	800a818 <__ltdf2>
 8005cbc:	da801517 	ldw	r10,84(sp)
 8005cc0:	10003b0e 	bge	r2,zero,8005db0 <_dtoa_r+0x1534>
 8005cc4:	d9c01317 	ldw	r7,76(sp)
 8005cc8:	b53fffc3 	ldbu	r20,-1(r22)
 8005ccc:	d9c00615 	stw	r7,24(sp)
 8005cd0:	003d3106 	br	8005198 <_dtoa_r+0x91c>
 8005cd4:	d8800817 	ldw	r2,32(sp)
 8005cd8:	11e5c83a 	sub	r18,r2,r7
 8005cdc:	0005883a 	mov	r2,zero
 8005ce0:	003d5006 	br	8005224 <_dtoa_r+0x9a8>
 8005ce4:	05800044 	movi	r22,1
 8005ce8:	003dc406 	br	80053fc <_dtoa_r+0xb80>
 8005cec:	a5000044 	addi	r20,r20,1
 8005cf0:	15000005 	stb	r20,0(r2)
 8005cf4:	003c8206 	br	8004f00 <_dtoa_r+0x684>
 8005cf8:	d8800217 	ldw	r2,8(sp)
 8005cfc:	00c00d84 	movi	r3,54
 8005d00:	dcc00a17 	ldw	r19,40(sp)
 8005d04:	1885c83a 	sub	r2,r3,r2
 8005d08:	dc800817 	ldw	r18,32(sp)
 8005d0c:	003d4506 	br	8005224 <_dtoa_r+0x9a8>
 8005d10:	dcc00317 	ldw	r19,12(sp)
 8005d14:	8829883a 	mov	r20,r17
 8005d18:	04800084 	movi	r18,2
 8005d1c:	003bea06 	br	8004cc8 <_dtoa_r+0x44c>
 8005d20:	d9000917 	ldw	r4,36(sp)
 8005d24:	203f1126 	beq	r4,zero,800596c <_dtoa_r+0x10f0>
 8005d28:	d9c00e17 	ldw	r7,56(sp)
 8005d2c:	01fca20e 	bge	zero,r7,8004fb8 <_dtoa_r+0x73c>
 8005d30:	a00b883a 	mov	r5,r20
 8005d34:	9809883a 	mov	r4,r19
 8005d38:	000d883a 	mov	r6,zero
 8005d3c:	01d00934 	movhi	r7,16420
 8005d40:	800a2000 	call	800a200 <__muldf3>
 8005d44:	91000044 	addi	r4,r18,1
 8005d48:	1027883a 	mov	r19,r2
 8005d4c:	1829883a 	mov	r20,r3
 8005d50:	800a8740 	call	800a874 <__floatsidf>
 8005d54:	9809883a 	mov	r4,r19
 8005d58:	a00b883a 	mov	r5,r20
 8005d5c:	100d883a 	mov	r6,r2
 8005d60:	180f883a 	mov	r7,r3
 8005d64:	800a2000 	call	800a200 <__muldf3>
 8005d68:	1009883a 	mov	r4,r2
 8005d6c:	180b883a 	mov	r5,r3
 8005d70:	000d883a 	mov	r6,zero
 8005d74:	01d00734 	movhi	r7,16412
 8005d78:	800a14c0 	call	800a14c <__adddf3>
 8005d7c:	1025883a 	mov	r18,r2
 8005d80:	d8800617 	ldw	r2,24(sp)
 8005d84:	057f3034 	movhi	r21,64704
 8005d88:	1d6b883a 	add	r21,r3,r21
 8005d8c:	10bfffc4 	addi	r2,r2,-1
 8005d90:	d8801315 	stw	r2,76(sp)
 8005d94:	dac00e17 	ldw	r11,56(sp)
 8005d98:	003be706 	br	8004d38 <_dtoa_r+0x4bc>
 8005d9c:	01000e44 	movi	r4,57
 8005da0:	91000005 	stb	r4,0(r18)
 8005da4:	95800044 	addi	r22,r18,1
 8005da8:	982b883a 	mov	r21,r19
 8005dac:	003da106 	br	8005434 <_dtoa_r+0xbb8>
 8005db0:	d9801117 	ldw	r6,68(sp)
 8005db4:	d9c01217 	ldw	r7,72(sp)
 8005db8:	0009883a 	mov	r4,zero
 8005dbc:	014ff834 	movhi	r5,16352
 8005dc0:	da801515 	stw	r10,84(sp)
 8005dc4:	800a1a00 	call	800a1a0 <__subdf3>
 8005dc8:	da801517 	ldw	r10,84(sp)
 8005dcc:	1009883a 	mov	r4,r2
 8005dd0:	180b883a 	mov	r5,r3
 8005dd4:	a80d883a 	mov	r6,r21
 8005dd8:	500f883a 	mov	r7,r10
 8005ddc:	800a7500 	call	800a750 <__gtdf2>
 8005de0:	00bc750e 	bge	zero,r2,8004fb8 <_dtoa_r+0x73c>
 8005de4:	01000c04 	movi	r4,48
 8005de8:	00000106 	br	8005df0 <_dtoa_r+0x1574>
 8005dec:	102d883a 	mov	r22,r2
 8005df0:	b0bfffc4 	addi	r2,r22,-1
 8005df4:	10c00007 	ldb	r3,0(r2)
 8005df8:	193ffc26 	beq	r3,r4,8005dec <_dtoa_r+0x1570>
 8005dfc:	d8801317 	ldw	r2,76(sp)
 8005e00:	d8800615 	stw	r2,24(sp)
 8005e04:	003c3e06 	br	8004f00 <_dtoa_r+0x684>
 8005e08:	d9001317 	ldw	r4,76(sp)
 8005e0c:	df001117 	ldw	fp,68(sp)
 8005e10:	d9000615 	stw	r4,24(sp)
 8005e14:	003ce006 	br	8005198 <_dtoa_r+0x91c>
 8005e18:	df001117 	ldw	fp,68(sp)
 8005e1c:	dc401217 	ldw	r17,72(sp)
 8005e20:	003c6506 	br	8004fb8 <_dtoa_r+0x73c>
 8005e24:	103e7a1e 	bne	r2,zero,8005810 <_dtoa_r+0xf94>
 8005e28:	1880004c 	andi	r2,r3,1
 8005e2c:	103e7826 	beq	r2,zero,8005810 <_dtoa_r+0xf94>
 8005e30:	003e7406 	br	8005804 <_dtoa_r+0xf88>
 8005e34:	8009883a 	mov	r4,r16
 8005e38:	a80b883a 	mov	r5,r21
 8005e3c:	01800284 	movi	r6,10
 8005e40:	000f883a 	mov	r7,zero
 8005e44:	80074a00 	call	80074a0 <__multadd>
 8005e48:	d9000e17 	ldw	r4,56(sp)
 8005e4c:	102b883a 	mov	r21,r2
 8005e50:	d9000915 	stw	r4,36(sp)
 8005e54:	003d5106 	br	800539c <_dtoa_r+0xb20>
 8005e58:	04800084 	movi	r18,2
 8005e5c:	003b9a06 	br	8004cc8 <_dtoa_r+0x44c>
 8005e60:	d8c01317 	ldw	r3,76(sp)
 8005e64:	d8c00615 	stw	r3,24(sp)
 8005e68:	003ccb06 	br	8005198 <_dtoa_r+0x91c>
 8005e6c:	d8c01317 	ldw	r3,76(sp)
 8005e70:	d8c00615 	stw	r3,24(sp)
 8005e74:	003c2206 	br	8004f00 <_dtoa_r+0x684>
 8005e78:	20fd3826 	beq	r4,r3,800535c <_dtoa_r+0xae0>
 8005e7c:	00c00f04 	movi	r3,60
 8005e80:	1885c83a 	sub	r2,r3,r2
 8005e84:	003da906 	br	800552c <_dtoa_r+0xcb0>
 8005e88:	000b883a 	mov	r5,zero
 8005e8c:	003b5406 	br	8004be0 <_dtoa_r+0x364>
 8005e90:	04c00044 	movi	r19,1
 8005e94:	003b3b06 	br	8004b84 <_dtoa_r+0x308>

08005e98 <_fflush_r>:
 8005e98:	defffb04 	addi	sp,sp,-20
 8005e9c:	dcc00315 	stw	r19,12(sp)
 8005ea0:	dc400115 	stw	r17,4(sp)
 8005ea4:	dfc00415 	stw	ra,16(sp)
 8005ea8:	dc800215 	stw	r18,8(sp)
 8005eac:	dc000015 	stw	r16,0(sp)
 8005eb0:	2027883a 	mov	r19,r4
 8005eb4:	2823883a 	mov	r17,r5
 8005eb8:	20000226 	beq	r4,zero,8005ec4 <_fflush_r+0x2c>
 8005ebc:	20800e17 	ldw	r2,56(r4)
 8005ec0:	10005726 	beq	r2,zero,8006020 <_fflush_r+0x188>
 8005ec4:	8880030b 	ldhu	r2,12(r17)
 8005ec8:	10c0020c 	andi	r3,r2,8
 8005ecc:	18ffffcc 	andi	r3,r3,65535
 8005ed0:	18e0001c 	xori	r3,r3,32768
 8005ed4:	18e00004 	addi	r3,r3,-32768
 8005ed8:	1800311e 	bne	r3,zero,8005fa0 <_fflush_r+0x108>
 8005edc:	89000117 	ldw	r4,4(r17)
 8005ee0:	10c20014 	ori	r3,r2,2048
 8005ee4:	88c0030d 	sth	r3,12(r17)
 8005ee8:	180b883a 	mov	r5,r3
 8005eec:	0100520e 	bge	zero,r4,8006038 <_fflush_r+0x1a0>
 8005ef0:	88c00a17 	ldw	r3,40(r17)
 8005ef4:	18002226 	beq	r3,zero,8005f80 <_fflush_r+0xe8>
 8005ef8:	1084000c 	andi	r2,r2,4096
 8005efc:	10bfffcc 	andi	r2,r2,65535
 8005f00:	10a0001c 	xori	r2,r2,32768
 8005f04:	10a00004 	addi	r2,r2,-32768
 8005f08:	10004e26 	beq	r2,zero,8006044 <_fflush_r+0x1ac>
 8005f0c:	8c001417 	ldw	r16,80(r17)
 8005f10:	2940010c 	andi	r5,r5,4
 8005f14:	297fffcc 	andi	r5,r5,65535
 8005f18:	2960001c 	xori	r5,r5,32768
 8005f1c:	29600004 	addi	r5,r5,-32768
 8005f20:	28000626 	beq	r5,zero,8005f3c <_fflush_r+0xa4>
 8005f24:	89000117 	ldw	r4,4(r17)
 8005f28:	88800c17 	ldw	r2,48(r17)
 8005f2c:	8121c83a 	sub	r16,r16,r4
 8005f30:	10000226 	beq	r2,zero,8005f3c <_fflush_r+0xa4>
 8005f34:	88800f17 	ldw	r2,60(r17)
 8005f38:	80a1c83a 	sub	r16,r16,r2
 8005f3c:	89400717 	ldw	r5,28(r17)
 8005f40:	9809883a 	mov	r4,r19
 8005f44:	800d883a 	mov	r6,r16
 8005f48:	000f883a 	mov	r7,zero
 8005f4c:	183ee83a 	callr	r3
 8005f50:	8080281e 	bne	r16,r2,8005ff4 <_fflush_r+0x15c>
 8005f54:	8880030b 	ldhu	r2,12(r17)
 8005f58:	88c00417 	ldw	r3,16(r17)
 8005f5c:	88000115 	stw	zero,4(r17)
 8005f60:	113dffcc 	andi	r4,r2,63487
 8005f64:	1084000c 	andi	r2,r2,4096
 8005f68:	10bfffcc 	andi	r2,r2,65535
 8005f6c:	10a0001c 	xori	r2,r2,32768
 8005f70:	8900030d 	sth	r4,12(r17)
 8005f74:	88c00015 	stw	r3,0(r17)
 8005f78:	10a00004 	addi	r2,r2,-32768
 8005f7c:	10002c1e 	bne	r2,zero,8006030 <_fflush_r+0x198>
 8005f80:	0005883a 	mov	r2,zero
 8005f84:	dfc00417 	ldw	ra,16(sp)
 8005f88:	dcc00317 	ldw	r19,12(sp)
 8005f8c:	dc800217 	ldw	r18,8(sp)
 8005f90:	dc400117 	ldw	r17,4(sp)
 8005f94:	dc000017 	ldw	r16,0(sp)
 8005f98:	dec00504 	addi	sp,sp,20
 8005f9c:	f800283a 	ret
 8005fa0:	8c800417 	ldw	r18,16(r17)
 8005fa4:	903ff626 	beq	r18,zero,8005f80 <_fflush_r+0xe8>
 8005fa8:	8c000017 	ldw	r16,0(r17)
 8005fac:	108000cc 	andi	r2,r2,3
 8005fb0:	8c800015 	stw	r18,0(r17)
 8005fb4:	84a1c83a 	sub	r16,r16,r18
 8005fb8:	10001b1e 	bne	r2,zero,8006028 <_fflush_r+0x190>
 8005fbc:	88800517 	ldw	r2,20(r17)
 8005fc0:	88800215 	stw	r2,8(r17)
 8005fc4:	04000316 	blt	zero,r16,8005fd4 <_fflush_r+0x13c>
 8005fc8:	003fed06 	br	8005f80 <_fflush_r+0xe8>
 8005fcc:	90a5883a 	add	r18,r18,r2
 8005fd0:	043feb0e 	bge	zero,r16,8005f80 <_fflush_r+0xe8>
 8005fd4:	88800917 	ldw	r2,36(r17)
 8005fd8:	89400717 	ldw	r5,28(r17)
 8005fdc:	800f883a 	mov	r7,r16
 8005fe0:	900d883a 	mov	r6,r18
 8005fe4:	9809883a 	mov	r4,r19
 8005fe8:	103ee83a 	callr	r2
 8005fec:	80a1c83a 	sub	r16,r16,r2
 8005ff0:	00bff616 	blt	zero,r2,8005fcc <_fflush_r+0x134>
 8005ff4:	88c0030b 	ldhu	r3,12(r17)
 8005ff8:	00bfffc4 	movi	r2,-1
 8005ffc:	18c01014 	ori	r3,r3,64
 8006000:	88c0030d 	sth	r3,12(r17)
 8006004:	dfc00417 	ldw	ra,16(sp)
 8006008:	dcc00317 	ldw	r19,12(sp)
 800600c:	dc800217 	ldw	r18,8(sp)
 8006010:	dc400117 	ldw	r17,4(sp)
 8006014:	dc000017 	ldw	r16,0(sp)
 8006018:	dec00504 	addi	sp,sp,20
 800601c:	f800283a 	ret
 8006020:	80061540 	call	8006154 <__sinit>
 8006024:	003fa706 	br	8005ec4 <_fflush_r+0x2c>
 8006028:	0005883a 	mov	r2,zero
 800602c:	003fe406 	br	8005fc0 <_fflush_r+0x128>
 8006030:	8c001415 	stw	r16,80(r17)
 8006034:	003fd206 	br	8005f80 <_fflush_r+0xe8>
 8006038:	88c00f17 	ldw	r3,60(r17)
 800603c:	00ffac16 	blt	zero,r3,8005ef0 <_fflush_r+0x58>
 8006040:	003fcf06 	br	8005f80 <_fflush_r+0xe8>
 8006044:	89400717 	ldw	r5,28(r17)
 8006048:	9809883a 	mov	r4,r19
 800604c:	000d883a 	mov	r6,zero
 8006050:	01c00044 	movi	r7,1
 8006054:	183ee83a 	callr	r3
 8006058:	1021883a 	mov	r16,r2
 800605c:	00bfffc4 	movi	r2,-1
 8006060:	80800326 	beq	r16,r2,8006070 <_fflush_r+0x1d8>
 8006064:	8940030b 	ldhu	r5,12(r17)
 8006068:	88c00a17 	ldw	r3,40(r17)
 800606c:	003fa806 	br	8005f10 <_fflush_r+0x78>
 8006070:	98c00017 	ldw	r3,0(r19)
 8006074:	00800744 	movi	r2,29
 8006078:	18bfde1e 	bne	r3,r2,8005ff4 <_fflush_r+0x15c>
 800607c:	003fc006 	br	8005f80 <_fflush_r+0xe8>

08006080 <fflush>:
 8006080:	200b883a 	mov	r5,r4
 8006084:	20000426 	beq	r4,zero,8006098 <fflush+0x18>
 8006088:	00820074 	movhi	r2,2049
 800608c:	10bae304 	addi	r2,r2,-5236
 8006090:	11000017 	ldw	r4,0(r2)
 8006094:	8005e981 	jmpi	8005e98 <_fflush_r>
 8006098:	00820074 	movhi	r2,2049
 800609c:	10bae204 	addi	r2,r2,-5240
 80060a0:	11000017 	ldw	r4,0(r2)
 80060a4:	01420034 	movhi	r5,2048
 80060a8:	2957a604 	addi	r5,r5,24216
 80060ac:	8006d341 	jmpi	8006d34 <_fwalk_reent>

080060b0 <__fp_lock>:
 80060b0:	0005883a 	mov	r2,zero
 80060b4:	f800283a 	ret

080060b8 <__fp_unlock>:
 80060b8:	0005883a 	mov	r2,zero
 80060bc:	f800283a 	ret

080060c0 <_cleanup_r>:
 80060c0:	01420074 	movhi	r5,2049
 80060c4:	2963f204 	addi	r5,r5,-28728
 80060c8:	8006c8c1 	jmpi	8006c8c <_fwalk>

080060cc <__sfmoreglue>:
 80060cc:	defffc04 	addi	sp,sp,-16
 80060d0:	dc800215 	stw	r18,8(sp)
 80060d4:	2825883a 	mov	r18,r5
 80060d8:	dc000015 	stw	r16,0(sp)
 80060dc:	01401704 	movi	r5,92
 80060e0:	2021883a 	mov	r16,r4
 80060e4:	9009883a 	mov	r4,r18
 80060e8:	dfc00315 	stw	ra,12(sp)
 80060ec:	dc400115 	stw	r17,4(sp)
 80060f0:	8001bbc0 	call	8001bbc <__mulsi3>
 80060f4:	8009883a 	mov	r4,r16
 80060f8:	11400304 	addi	r5,r2,12
 80060fc:	1023883a 	mov	r17,r2
 8006100:	8001c0c0 	call	8001c0c <_malloc_r>
 8006104:	1021883a 	mov	r16,r2
 8006108:	10000726 	beq	r2,zero,8006128 <__sfmoreglue+0x5c>
 800610c:	11000304 	addi	r4,r2,12
 8006110:	10000015 	stw	zero,0(r2)
 8006114:	14800115 	stw	r18,4(r2)
 8006118:	11000215 	stw	r4,8(r2)
 800611c:	000b883a 	mov	r5,zero
 8006120:	880d883a 	mov	r6,r17
 8006124:	80072f40 	call	80072f4 <memset>
 8006128:	8005883a 	mov	r2,r16
 800612c:	dfc00317 	ldw	ra,12(sp)
 8006130:	dc800217 	ldw	r18,8(sp)
 8006134:	dc400117 	ldw	r17,4(sp)
 8006138:	dc000017 	ldw	r16,0(sp)
 800613c:	dec00404 	addi	sp,sp,16
 8006140:	f800283a 	ret

08006144 <_cleanup>:
 8006144:	00820074 	movhi	r2,2049
 8006148:	10bae204 	addi	r2,r2,-5240
 800614c:	11000017 	ldw	r4,0(r2)
 8006150:	80060c01 	jmpi	80060c0 <_cleanup_r>

08006154 <__sinit>:
 8006154:	20800e17 	ldw	r2,56(r4)
 8006158:	1000401e 	bne	r2,zero,800625c <__sinit+0x108>
 800615c:	21400117 	ldw	r5,4(r4)
 8006160:	01820034 	movhi	r6,2048
 8006164:	31983004 	addi	r6,r6,24768
 8006168:	20c00217 	ldw	r3,8(r4)
 800616c:	21800f15 	stw	r6,60(r4)
 8006170:	2080bb04 	addi	r2,r4,748
 8006174:	02400044 	movi	r9,1
 8006178:	018000c4 	movi	r6,3
 800617c:	2180b915 	stw	r6,740(r4)
 8006180:	2080ba15 	stw	r2,744(r4)
 8006184:	22400e15 	stw	r9,56(r4)
 8006188:	20800317 	ldw	r2,12(r4)
 800618c:	2000b815 	stw	zero,736(r4)
 8006190:	02020074 	movhi	r8,2049
 8006194:	4222a004 	addi	r8,r8,-30080
 8006198:	01c20074 	movhi	r7,2049
 800619c:	39e2b504 	addi	r7,r7,-29996
 80061a0:	01820074 	movhi	r6,2049
 80061a4:	31a2d704 	addi	r6,r6,-29860
 80061a8:	01020074 	movhi	r4,2049
 80061ac:	2122ee04 	addi	r4,r4,-29768
 80061b0:	02800104 	movi	r10,4
 80061b4:	28000015 	stw	zero,0(r5)
 80061b8:	28000115 	stw	zero,4(r5)
 80061bc:	28000215 	stw	zero,8(r5)
 80061c0:	2a80030d 	sth	r10,12(r5)
 80061c4:	2800038d 	sth	zero,14(r5)
 80061c8:	28000415 	stw	zero,16(r5)
 80061cc:	28000515 	stw	zero,20(r5)
 80061d0:	28000615 	stw	zero,24(r5)
 80061d4:	29400715 	stw	r5,28(r5)
 80061d8:	2a000815 	stw	r8,32(r5)
 80061dc:	29c00915 	stw	r7,36(r5)
 80061e0:	29800a15 	stw	r6,40(r5)
 80061e4:	29000b15 	stw	r4,44(r5)
 80061e8:	01400284 	movi	r5,10
 80061ec:	18000015 	stw	zero,0(r3)
 80061f0:	18000115 	stw	zero,4(r3)
 80061f4:	18000215 	stw	zero,8(r3)
 80061f8:	1940030d 	sth	r5,12(r3)
 80061fc:	1a40038d 	sth	r9,14(r3)
 8006200:	18000415 	stw	zero,16(r3)
 8006204:	18000515 	stw	zero,20(r3)
 8006208:	18000615 	stw	zero,24(r3)
 800620c:	18c00715 	stw	r3,28(r3)
 8006210:	1a000815 	stw	r8,32(r3)
 8006214:	19c00915 	stw	r7,36(r3)
 8006218:	19800a15 	stw	r6,40(r3)
 800621c:	19000b15 	stw	r4,44(r3)
 8006220:	00c00484 	movi	r3,18
 8006224:	10c0030d 	sth	r3,12(r2)
 8006228:	00c00084 	movi	r3,2
 800622c:	10000015 	stw	zero,0(r2)
 8006230:	10000115 	stw	zero,4(r2)
 8006234:	10000215 	stw	zero,8(r2)
 8006238:	10c0038d 	sth	r3,14(r2)
 800623c:	10000415 	stw	zero,16(r2)
 8006240:	10000515 	stw	zero,20(r2)
 8006244:	10000615 	stw	zero,24(r2)
 8006248:	10800715 	stw	r2,28(r2)
 800624c:	12000815 	stw	r8,32(r2)
 8006250:	11c00915 	stw	r7,36(r2)
 8006254:	11800a15 	stw	r6,40(r2)
 8006258:	11000b15 	stw	r4,44(r2)
 800625c:	f800283a 	ret

08006260 <__sfp>:
 8006260:	defffc04 	addi	sp,sp,-16
 8006264:	00820074 	movhi	r2,2049
 8006268:	10bae204 	addi	r2,r2,-5240
 800626c:	dc400115 	stw	r17,4(sp)
 8006270:	14400017 	ldw	r17,0(r2)
 8006274:	dc800215 	stw	r18,8(sp)
 8006278:	dfc00315 	stw	ra,12(sp)
 800627c:	88800e17 	ldw	r2,56(r17)
 8006280:	dc000015 	stw	r16,0(sp)
 8006284:	2025883a 	mov	r18,r4
 8006288:	10002826 	beq	r2,zero,800632c <__sfp+0xcc>
 800628c:	8c40b804 	addi	r17,r17,736
 8006290:	043fffc4 	movi	r16,-1
 8006294:	89400117 	ldw	r5,4(r17)
 8006298:	88800217 	ldw	r2,8(r17)
 800629c:	297fffc4 	addi	r5,r5,-1
 80062a0:	28000a16 	blt	r5,zero,80062cc <__sfp+0x6c>
 80062a4:	10c0030f 	ldh	r3,12(r2)
 80062a8:	18000c26 	beq	r3,zero,80062dc <__sfp+0x7c>
 80062ac:	10c01a04 	addi	r3,r2,104
 80062b0:	00000206 	br	80062bc <__sfp+0x5c>
 80062b4:	19bfe90f 	ldh	r6,-92(r3)
 80062b8:	30000826 	beq	r6,zero,80062dc <__sfp+0x7c>
 80062bc:	297fffc4 	addi	r5,r5,-1
 80062c0:	18bffd04 	addi	r2,r3,-12
 80062c4:	18c01704 	addi	r3,r3,92
 80062c8:	2c3ffa1e 	bne	r5,r16,80062b4 <__sfp+0x54>
 80062cc:	88800017 	ldw	r2,0(r17)
 80062d0:	10001926 	beq	r2,zero,8006338 <__sfp+0xd8>
 80062d4:	1023883a 	mov	r17,r2
 80062d8:	003fee06 	br	8006294 <__sfp+0x34>
 80062dc:	00ffffc4 	movi	r3,-1
 80062e0:	10c0038d 	sth	r3,14(r2)
 80062e4:	00c00044 	movi	r3,1
 80062e8:	10c0030d 	sth	r3,12(r2)
 80062ec:	10000015 	stw	zero,0(r2)
 80062f0:	10000215 	stw	zero,8(r2)
 80062f4:	10000115 	stw	zero,4(r2)
 80062f8:	10000415 	stw	zero,16(r2)
 80062fc:	10000515 	stw	zero,20(r2)
 8006300:	10000615 	stw	zero,24(r2)
 8006304:	10000c15 	stw	zero,48(r2)
 8006308:	10000d15 	stw	zero,52(r2)
 800630c:	10001115 	stw	zero,68(r2)
 8006310:	10001215 	stw	zero,72(r2)
 8006314:	dfc00317 	ldw	ra,12(sp)
 8006318:	dc800217 	ldw	r18,8(sp)
 800631c:	dc400117 	ldw	r17,4(sp)
 8006320:	dc000017 	ldw	r16,0(sp)
 8006324:	dec00404 	addi	sp,sp,16
 8006328:	f800283a 	ret
 800632c:	8809883a 	mov	r4,r17
 8006330:	80061540 	call	8006154 <__sinit>
 8006334:	003fd506 	br	800628c <__sfp+0x2c>
 8006338:	9009883a 	mov	r4,r18
 800633c:	01400104 	movi	r5,4
 8006340:	80060cc0 	call	80060cc <__sfmoreglue>
 8006344:	88800015 	stw	r2,0(r17)
 8006348:	103fe21e 	bne	r2,zero,80062d4 <__sfp+0x74>
 800634c:	00800304 	movi	r2,12
 8006350:	90800015 	stw	r2,0(r18)
 8006354:	0005883a 	mov	r2,zero
 8006358:	003fee06 	br	8006314 <__sfp+0xb4>

0800635c <__sfp_lock_acquire>:
 800635c:	f800283a 	ret

08006360 <__sfp_lock_release>:
 8006360:	f800283a 	ret

08006364 <__sinit_lock_acquire>:
 8006364:	f800283a 	ret

08006368 <__sinit_lock_release>:
 8006368:	f800283a 	ret

0800636c <__fp_lock_all>:
 800636c:	00820074 	movhi	r2,2049
 8006370:	10bae304 	addi	r2,r2,-5236
 8006374:	11000017 	ldw	r4,0(r2)
 8006378:	01420034 	movhi	r5,2048
 800637c:	29582c04 	addi	r5,r5,24752
 8006380:	8006c8c1 	jmpi	8006c8c <_fwalk>

08006384 <__fp_unlock_all>:
 8006384:	00820074 	movhi	r2,2049
 8006388:	10bae304 	addi	r2,r2,-5236
 800638c:	11000017 	ldw	r4,0(r2)
 8006390:	01420034 	movhi	r5,2048
 8006394:	29582e04 	addi	r5,r5,24760
 8006398:	8006c8c1 	jmpi	8006c8c <_fwalk>

0800639c <_malloc_trim_r>:
 800639c:	defffb04 	addi	sp,sp,-20
 80063a0:	dcc00315 	stw	r19,12(sp)
 80063a4:	dc800215 	stw	r18,8(sp)
 80063a8:	dc400115 	stw	r17,4(sp)
 80063ac:	dc000015 	stw	r16,0(sp)
 80063b0:	2827883a 	mov	r19,r5
 80063b4:	dfc00415 	stw	ra,16(sp)
 80063b8:	04420074 	movhi	r17,2049
 80063bc:	8c783304 	addi	r17,r17,-7988
 80063c0:	2021883a 	mov	r16,r4
 80063c4:	800b83c0 	call	800b83c <__malloc_lock>
 80063c8:	88800217 	ldw	r2,8(r17)
 80063cc:	14800117 	ldw	r18,4(r2)
 80063d0:	00bfff04 	movi	r2,-4
 80063d4:	90a4703a 	and	r18,r18,r2
 80063d8:	9083fbc4 	addi	r2,r18,4079
 80063dc:	14e7c83a 	sub	r19,r2,r19
 80063e0:	9826d33a 	srli	r19,r19,12
 80063e4:	0083ffc4 	movi	r2,4095
 80063e8:	9cffffc4 	addi	r19,r19,-1
 80063ec:	9826933a 	slli	r19,r19,12
 80063f0:	14c0060e 	bge	r2,r19,800640c <_malloc_trim_r+0x70>
 80063f4:	8009883a 	mov	r4,r16
 80063f8:	000b883a 	mov	r5,zero
 80063fc:	80024d00 	call	80024d0 <_sbrk_r>
 8006400:	88c00217 	ldw	r3,8(r17)
 8006404:	1c87883a 	add	r3,r3,r18
 8006408:	10c00a26 	beq	r2,r3,8006434 <_malloc_trim_r+0x98>
 800640c:	8009883a 	mov	r4,r16
 8006410:	800b85c0 	call	800b85c <__malloc_unlock>
 8006414:	0005883a 	mov	r2,zero
 8006418:	dfc00417 	ldw	ra,16(sp)
 800641c:	dcc00317 	ldw	r19,12(sp)
 8006420:	dc800217 	ldw	r18,8(sp)
 8006424:	dc400117 	ldw	r17,4(sp)
 8006428:	dc000017 	ldw	r16,0(sp)
 800642c:	dec00504 	addi	sp,sp,20
 8006430:	f800283a 	ret
 8006434:	8009883a 	mov	r4,r16
 8006438:	04cbc83a 	sub	r5,zero,r19
 800643c:	80024d00 	call	80024d0 <_sbrk_r>
 8006440:	00ffffc4 	movi	r3,-1
 8006444:	10c01326 	beq	r2,r3,8006494 <_malloc_trim_r+0xf8>
 8006448:	00820074 	movhi	r2,2049
 800644c:	10bdee04 	addi	r2,r2,-2120
 8006450:	11000017 	ldw	r4,0(r2)
 8006454:	88c00217 	ldw	r3,8(r17)
 8006458:	94e5c83a 	sub	r18,r18,r19
 800645c:	94800054 	ori	r18,r18,1
 8006460:	24e7c83a 	sub	r19,r4,r19
 8006464:	1c800115 	stw	r18,4(r3)
 8006468:	8009883a 	mov	r4,r16
 800646c:	14c00015 	stw	r19,0(r2)
 8006470:	800b85c0 	call	800b85c <__malloc_unlock>
 8006474:	00800044 	movi	r2,1
 8006478:	dfc00417 	ldw	ra,16(sp)
 800647c:	dcc00317 	ldw	r19,12(sp)
 8006480:	dc800217 	ldw	r18,8(sp)
 8006484:	dc400117 	ldw	r17,4(sp)
 8006488:	dc000017 	ldw	r16,0(sp)
 800648c:	dec00504 	addi	sp,sp,20
 8006490:	f800283a 	ret
 8006494:	8009883a 	mov	r4,r16
 8006498:	000b883a 	mov	r5,zero
 800649c:	80024d00 	call	80024d0 <_sbrk_r>
 80064a0:	88c00217 	ldw	r3,8(r17)
 80064a4:	014003c4 	movi	r5,15
 80064a8:	10c9c83a 	sub	r4,r2,r3
 80064ac:	293fd70e 	bge	r5,r4,800640c <_malloc_trim_r+0x70>
 80064b0:	01420074 	movhi	r5,2049
 80064b4:	297ae004 	addi	r5,r5,-5248
 80064b8:	29400017 	ldw	r5,0(r5)
 80064bc:	21000054 	ori	r4,r4,1
 80064c0:	19000115 	stw	r4,4(r3)
 80064c4:	1145c83a 	sub	r2,r2,r5
 80064c8:	01420074 	movhi	r5,2049
 80064cc:	297dee04 	addi	r5,r5,-2120
 80064d0:	28800015 	stw	r2,0(r5)
 80064d4:	003fcd06 	br	800640c <_malloc_trim_r+0x70>

080064d8 <_free_r>:
 80064d8:	defffd04 	addi	sp,sp,-12
 80064dc:	dc400115 	stw	r17,4(sp)
 80064e0:	dc000015 	stw	r16,0(sp)
 80064e4:	dfc00215 	stw	ra,8(sp)
 80064e8:	2821883a 	mov	r16,r5
 80064ec:	2023883a 	mov	r17,r4
 80064f0:	28004b26 	beq	r5,zero,8006620 <_free_r+0x148>
 80064f4:	800b83c0 	call	800b83c <__malloc_lock>
 80064f8:	823fff17 	ldw	r8,-4(r16)
 80064fc:	00bfff84 	movi	r2,-2
 8006500:	81bffe04 	addi	r6,r16,-8
 8006504:	4084703a 	and	r2,r8,r2
 8006508:	3087883a 	add	r3,r6,r2
 800650c:	01420074 	movhi	r5,2049
 8006510:	29783304 	addi	r5,r5,-7988
 8006514:	1a400117 	ldw	r9,4(r3)
 8006518:	29000217 	ldw	r4,8(r5)
 800651c:	01ffff04 	movi	r7,-4
 8006520:	49ce703a 	and	r7,r9,r7
 8006524:	20c06526 	beq	r4,r3,80066bc <_free_r+0x1e4>
 8006528:	19c00115 	stw	r7,4(r3)
 800652c:	4200004c 	andi	r8,r8,1
 8006530:	40003026 	beq	r8,zero,80065f4 <_free_r+0x11c>
 8006534:	0009883a 	mov	r4,zero
 8006538:	19d1883a 	add	r8,r3,r7
 800653c:	42000117 	ldw	r8,4(r8)
 8006540:	4200004c 	andi	r8,r8,1
 8006544:	4000061e 	bne	r8,zero,8006560 <_free_r+0x88>
 8006548:	11c5883a 	add	r2,r2,r7
 800654c:	19c00217 	ldw	r7,8(r3)
 8006550:	20004e26 	beq	r4,zero,800668c <_free_r+0x1b4>
 8006554:	18c00317 	ldw	r3,12(r3)
 8006558:	38c00315 	stw	r3,12(r7)
 800655c:	19c00215 	stw	r7,8(r3)
 8006560:	11c00054 	ori	r7,r2,1
 8006564:	3087883a 	add	r3,r6,r2
 8006568:	31c00115 	stw	r7,4(r6)
 800656c:	18800015 	stw	r2,0(r3)
 8006570:	20001a1e 	bne	r4,zero,80065dc <_free_r+0x104>
 8006574:	00c07fc4 	movi	r3,511
 8006578:	18802e2e 	bgeu	r3,r2,8006634 <_free_r+0x15c>
 800657c:	1006d27a 	srli	r3,r2,9
 8006580:	01000104 	movi	r4,4
 8006584:	20c06636 	bltu	r4,r3,8006720 <_free_r+0x248>
 8006588:	1008d1ba 	srli	r4,r2,6
 800658c:	21000e04 	addi	r4,r4,56
 8006590:	210f883a 	add	r7,r4,r4
 8006594:	39cf883a 	add	r7,r7,r7
 8006598:	39cf883a 	add	r7,r7,r7
 800659c:	29cf883a 	add	r7,r5,r7
 80065a0:	38c00217 	ldw	r3,8(r7)
 80065a4:	01420074 	movhi	r5,2049
 80065a8:	29783304 	addi	r5,r5,-7988
 80065ac:	19c06126 	beq	r3,r7,8006734 <_free_r+0x25c>
 80065b0:	013fff04 	movi	r4,-4
 80065b4:	19400117 	ldw	r5,4(r3)
 80065b8:	290a703a 	and	r5,r5,r4
 80065bc:	1140022e 	bgeu	r2,r5,80065c8 <_free_r+0xf0>
 80065c0:	18c00217 	ldw	r3,8(r3)
 80065c4:	38fffb1e 	bne	r7,r3,80065b4 <_free_r+0xdc>
 80065c8:	18800317 	ldw	r2,12(r3)
 80065cc:	30800315 	stw	r2,12(r6)
 80065d0:	30c00215 	stw	r3,8(r6)
 80065d4:	11800215 	stw	r6,8(r2)
 80065d8:	19800315 	stw	r6,12(r3)
 80065dc:	8809883a 	mov	r4,r17
 80065e0:	dfc00217 	ldw	ra,8(sp)
 80065e4:	dc400117 	ldw	r17,4(sp)
 80065e8:	dc000017 	ldw	r16,0(sp)
 80065ec:	dec00304 	addi	sp,sp,12
 80065f0:	800b85c1 	jmpi	800b85c <__malloc_unlock>
 80065f4:	813ffe17 	ldw	r4,-8(r16)
 80065f8:	2a400204 	addi	r9,r5,8
 80065fc:	310dc83a 	sub	r6,r6,r4
 8006600:	32000217 	ldw	r8,8(r6)
 8006604:	1105883a 	add	r2,r2,r4
 8006608:	42404326 	beq	r8,r9,8006718 <_free_r+0x240>
 800660c:	32400317 	ldw	r9,12(r6)
 8006610:	0009883a 	mov	r4,zero
 8006614:	42400315 	stw	r9,12(r8)
 8006618:	4a000215 	stw	r8,8(r9)
 800661c:	003fc606 	br	8006538 <_free_r+0x60>
 8006620:	dfc00217 	ldw	ra,8(sp)
 8006624:	dc400117 	ldw	r17,4(sp)
 8006628:	dc000017 	ldw	r16,0(sp)
 800662c:	dec00304 	addi	sp,sp,12
 8006630:	f800283a 	ret
 8006634:	1004d0fa 	srli	r2,r2,3
 8006638:	02000044 	movi	r8,1
 800663c:	29c00117 	ldw	r7,4(r5)
 8006640:	1087883a 	add	r3,r2,r2
 8006644:	18c7883a 	add	r3,r3,r3
 8006648:	1005d0ba 	srai	r2,r2,2
 800664c:	18c7883a 	add	r3,r3,r3
 8006650:	28c7883a 	add	r3,r5,r3
 8006654:	19000217 	ldw	r4,8(r3)
 8006658:	4084983a 	sll	r2,r8,r2
 800665c:	30c00315 	stw	r3,12(r6)
 8006660:	31000215 	stw	r4,8(r6)
 8006664:	11c4b03a 	or	r2,r2,r7
 8006668:	21800315 	stw	r6,12(r4)
 800666c:	8809883a 	mov	r4,r17
 8006670:	28800115 	stw	r2,4(r5)
 8006674:	19800215 	stw	r6,8(r3)
 8006678:	dfc00217 	ldw	ra,8(sp)
 800667c:	dc400117 	ldw	r17,4(sp)
 8006680:	dc000017 	ldw	r16,0(sp)
 8006684:	dec00304 	addi	sp,sp,12
 8006688:	800b85c1 	jmpi	800b85c <__malloc_unlock>
 800668c:	02020074 	movhi	r8,2049
 8006690:	42383504 	addi	r8,r8,-7980
 8006694:	3a3faf1e 	bne	r7,r8,8006554 <_free_r+0x7c>
 8006698:	29800515 	stw	r6,20(r5)
 800669c:	29800415 	stw	r6,16(r5)
 80066a0:	11000054 	ori	r4,r2,1
 80066a4:	3087883a 	add	r3,r6,r2
 80066a8:	31c00315 	stw	r7,12(r6)
 80066ac:	31c00215 	stw	r7,8(r6)
 80066b0:	31000115 	stw	r4,4(r6)
 80066b4:	18800015 	stw	r2,0(r3)
 80066b8:	003fc806 	br	80065dc <_free_r+0x104>
 80066bc:	4200004c 	andi	r8,r8,1
 80066c0:	3885883a 	add	r2,r7,r2
 80066c4:	4000071e 	bne	r8,zero,80066e4 <_free_r+0x20c>
 80066c8:	81fffe17 	ldw	r7,-8(r16)
 80066cc:	31cdc83a 	sub	r6,r6,r7
 80066d0:	30c00317 	ldw	r3,12(r6)
 80066d4:	31000217 	ldw	r4,8(r6)
 80066d8:	11c5883a 	add	r2,r2,r7
 80066dc:	20c00315 	stw	r3,12(r4)
 80066e0:	19000215 	stw	r4,8(r3)
 80066e4:	00c20074 	movhi	r3,2049
 80066e8:	18fae104 	addi	r3,r3,-5244
 80066ec:	18c00017 	ldw	r3,0(r3)
 80066f0:	11000054 	ori	r4,r2,1
 80066f4:	31000115 	stw	r4,4(r6)
 80066f8:	29800215 	stw	r6,8(r5)
 80066fc:	10ffb736 	bltu	r2,r3,80065dc <_free_r+0x104>
 8006700:	00820074 	movhi	r2,2049
 8006704:	10bde604 	addi	r2,r2,-2152
 8006708:	11400017 	ldw	r5,0(r2)
 800670c:	8809883a 	mov	r4,r17
 8006710:	800639c0 	call	800639c <_malloc_trim_r>
 8006714:	003fb106 	br	80065dc <_free_r+0x104>
 8006718:	01000044 	movi	r4,1
 800671c:	003f8606 	br	8006538 <_free_r+0x60>
 8006720:	01000504 	movi	r4,20
 8006724:	20c00b36 	bltu	r4,r3,8006754 <_free_r+0x27c>
 8006728:	190016c4 	addi	r4,r3,91
 800672c:	210f883a 	add	r7,r4,r4
 8006730:	003f9806 	br	8006594 <_free_r+0xbc>
 8006734:	2009d0ba 	srai	r4,r4,2
 8006738:	00800044 	movi	r2,1
 800673c:	29c00117 	ldw	r7,4(r5)
 8006740:	1108983a 	sll	r4,r2,r4
 8006744:	1805883a 	mov	r2,r3
 8006748:	21c8b03a 	or	r4,r4,r7
 800674c:	29000115 	stw	r4,4(r5)
 8006750:	003f9e06 	br	80065cc <_free_r+0xf4>
 8006754:	01001504 	movi	r4,84
 8006758:	20c00436 	bltu	r4,r3,800676c <_free_r+0x294>
 800675c:	1008d33a 	srli	r4,r2,12
 8006760:	21001b84 	addi	r4,r4,110
 8006764:	210f883a 	add	r7,r4,r4
 8006768:	003f8a06 	br	8006594 <_free_r+0xbc>
 800676c:	01005504 	movi	r4,340
 8006770:	20c00436 	bltu	r4,r3,8006784 <_free_r+0x2ac>
 8006774:	1008d3fa 	srli	r4,r2,15
 8006778:	21001dc4 	addi	r4,r4,119
 800677c:	210f883a 	add	r7,r4,r4
 8006780:	003f8406 	br	8006594 <_free_r+0xbc>
 8006784:	01015504 	movi	r4,1364
 8006788:	20c00436 	bltu	r4,r3,800679c <_free_r+0x2c4>
 800678c:	1008d4ba 	srli	r4,r2,18
 8006790:	21001f04 	addi	r4,r4,124
 8006794:	210f883a 	add	r7,r4,r4
 8006798:	003f7e06 	br	8006594 <_free_r+0xbc>
 800679c:	01c03f04 	movi	r7,252
 80067a0:	01001f84 	movi	r4,126
 80067a4:	003f7b06 	br	8006594 <_free_r+0xbc>

080067a8 <__sfvwrite_r>:
 80067a8:	30800217 	ldw	r2,8(r6)
 80067ac:	defff504 	addi	sp,sp,-44
 80067b0:	dd400615 	stw	r21,24(sp)
 80067b4:	dd000515 	stw	r20,20(sp)
 80067b8:	dc000115 	stw	r16,4(sp)
 80067bc:	dfc00a15 	stw	ra,40(sp)
 80067c0:	df000915 	stw	fp,36(sp)
 80067c4:	ddc00815 	stw	r23,32(sp)
 80067c8:	dd800715 	stw	r22,28(sp)
 80067cc:	dcc00415 	stw	r19,16(sp)
 80067d0:	dc800315 	stw	r18,12(sp)
 80067d4:	dc400215 	stw	r17,8(sp)
 80067d8:	3029883a 	mov	r20,r6
 80067dc:	202b883a 	mov	r21,r4
 80067e0:	2821883a 	mov	r16,r5
 80067e4:	10002126 	beq	r2,zero,800686c <__sfvwrite_r+0xc4>
 80067e8:	2880030b 	ldhu	r2,12(r5)
 80067ec:	10c0020c 	andi	r3,r2,8
 80067f0:	18ffffcc 	andi	r3,r3,65535
 80067f4:	18e0001c 	xori	r3,r3,32768
 80067f8:	18e00004 	addi	r3,r3,-32768
 80067fc:	18002826 	beq	r3,zero,80068a0 <__sfvwrite_r+0xf8>
 8006800:	28c00417 	ldw	r3,16(r5)
 8006804:	18002626 	beq	r3,zero,80068a0 <__sfvwrite_r+0xf8>
 8006808:	10c0008c 	andi	r3,r2,2
 800680c:	18ffffcc 	andi	r3,r3,65535
 8006810:	18e0001c 	xori	r3,r3,32768
 8006814:	18e00004 	addi	r3,r3,-32768
 8006818:	a4400017 	ldw	r17,0(r20)
 800681c:	18002b26 	beq	r3,zero,80068cc <__sfvwrite_r+0x124>
 8006820:	0027883a 	mov	r19,zero
 8006824:	0025883a 	mov	r18,zero
 8006828:	05810004 	movi	r22,1024
 800682c:	980d883a 	mov	r6,r19
 8006830:	a809883a 	mov	r4,r21
 8006834:	90004f26 	beq	r18,zero,8006974 <__sfvwrite_r+0x1cc>
 8006838:	900f883a 	mov	r7,r18
 800683c:	81400717 	ldw	r5,28(r16)
 8006840:	b480012e 	bgeu	r22,r18,8006848 <__sfvwrite_r+0xa0>
 8006844:	01c10004 	movi	r7,1024
 8006848:	80800917 	ldw	r2,36(r16)
 800684c:	103ee83a 	callr	r2
 8006850:	0080540e 	bge	zero,r2,80069a4 <__sfvwrite_r+0x1fc>
 8006854:	a0c00217 	ldw	r3,8(r20)
 8006858:	98a7883a 	add	r19,r19,r2
 800685c:	90a5c83a 	sub	r18,r18,r2
 8006860:	1885c83a 	sub	r2,r3,r2
 8006864:	a0800215 	stw	r2,8(r20)
 8006868:	103ff01e 	bne	r2,zero,800682c <__sfvwrite_r+0x84>
 800686c:	0005883a 	mov	r2,zero
 8006870:	dfc00a17 	ldw	ra,40(sp)
 8006874:	df000917 	ldw	fp,36(sp)
 8006878:	ddc00817 	ldw	r23,32(sp)
 800687c:	dd800717 	ldw	r22,28(sp)
 8006880:	dd400617 	ldw	r21,24(sp)
 8006884:	dd000517 	ldw	r20,20(sp)
 8006888:	dcc00417 	ldw	r19,16(sp)
 800688c:	dc800317 	ldw	r18,12(sp)
 8006890:	dc400217 	ldw	r17,8(sp)
 8006894:	dc000117 	ldw	r16,4(sp)
 8006898:	dec00b04 	addi	sp,sp,44
 800689c:	f800283a 	ret
 80068a0:	a809883a 	mov	r4,r21
 80068a4:	800b883a 	mov	r5,r16
 80068a8:	80044cc0 	call	80044cc <__swsetup_r>
 80068ac:	1000f01e 	bne	r2,zero,8006c70 <__sfvwrite_r+0x4c8>
 80068b0:	8080030b 	ldhu	r2,12(r16)
 80068b4:	a4400017 	ldw	r17,0(r20)
 80068b8:	10c0008c 	andi	r3,r2,2
 80068bc:	18ffffcc 	andi	r3,r3,65535
 80068c0:	18e0001c 	xori	r3,r3,32768
 80068c4:	18e00004 	addi	r3,r3,-32768
 80068c8:	183fd51e 	bne	r3,zero,8006820 <__sfvwrite_r+0x78>
 80068cc:	10c0004c 	andi	r3,r2,1
 80068d0:	002d883a 	mov	r22,zero
 80068d4:	1800381e 	bne	r3,zero,80069b8 <__sfvwrite_r+0x210>
 80068d8:	0025883a 	mov	r18,zero
 80068dc:	90002126 	beq	r18,zero,8006964 <__sfvwrite_r+0x1bc>
 80068e0:	10c0800c 	andi	r3,r2,512
 80068e4:	18ffffcc 	andi	r3,r3,65535
 80068e8:	18e0001c 	xori	r3,r3,32768
 80068ec:	18e00004 	addi	r3,r3,-32768
 80068f0:	84c00217 	ldw	r19,8(r16)
 80068f4:	18006b26 	beq	r3,zero,8006aa4 <__sfvwrite_r+0x2fc>
 80068f8:	980f883a 	mov	r7,r19
 80068fc:	94c08636 	bltu	r18,r19,8006b18 <__sfvwrite_r+0x370>
 8006900:	10c1200c 	andi	r3,r2,1152
 8006904:	18009f1e 	bne	r3,zero,8006b84 <__sfvwrite_r+0x3dc>
 8006908:	81000017 	ldw	r4,0(r16)
 800690c:	982f883a 	mov	r23,r19
 8006910:	9039883a 	mov	fp,r18
 8006914:	9027883a 	mov	r19,r18
 8006918:	380d883a 	mov	r6,r7
 800691c:	b00b883a 	mov	r5,r22
 8006920:	d9c00015 	stw	r7,0(sp)
 8006924:	80071680 	call	8007168 <memmove>
 8006928:	d9c00017 	ldw	r7,0(sp)
 800692c:	81000217 	ldw	r4,8(r16)
 8006930:	80800017 	ldw	r2,0(r16)
 8006934:	25efc83a 	sub	r23,r4,r23
 8006938:	11cf883a 	add	r7,r2,r7
 800693c:	85c00215 	stw	r23,8(r16)
 8006940:	81c00015 	stw	r7,0(r16)
 8006944:	a0800217 	ldw	r2,8(r20)
 8006948:	b72d883a 	add	r22,r22,fp
 800694c:	9725c83a 	sub	r18,r18,fp
 8006950:	14e7c83a 	sub	r19,r2,r19
 8006954:	a4c00215 	stw	r19,8(r20)
 8006958:	983fc426 	beq	r19,zero,800686c <__sfvwrite_r+0xc4>
 800695c:	8080030b 	ldhu	r2,12(r16)
 8006960:	903fdf1e 	bne	r18,zero,80068e0 <__sfvwrite_r+0x138>
 8006964:	8d800017 	ldw	r22,0(r17)
 8006968:	8c800117 	ldw	r18,4(r17)
 800696c:	8c400204 	addi	r17,r17,8
 8006970:	003fda06 	br	80068dc <__sfvwrite_r+0x134>
 8006974:	8cc00017 	ldw	r19,0(r17)
 8006978:	8c800117 	ldw	r18,4(r17)
 800697c:	8c400204 	addi	r17,r17,8
 8006980:	003faa06 	br	800682c <__sfvwrite_r+0x84>
 8006984:	80084200 	call	8008420 <_realloc_r>
 8006988:	102f883a 	mov	r23,r2
 800698c:	10009f1e 	bne	r2,zero,8006c0c <__sfvwrite_r+0x464>
 8006990:	81400417 	ldw	r5,16(r16)
 8006994:	a809883a 	mov	r4,r21
 8006998:	80064d80 	call	80064d8 <_free_r>
 800699c:	00800304 	movi	r2,12
 80069a0:	a8800015 	stw	r2,0(r21)
 80069a4:	80c0030b 	ldhu	r3,12(r16)
 80069a8:	00bfffc4 	movi	r2,-1
 80069ac:	18c01014 	ori	r3,r3,64
 80069b0:	80c0030d 	sth	r3,12(r16)
 80069b4:	003fae06 	br	8006870 <__sfvwrite_r+0xc8>
 80069b8:	0007883a 	mov	r3,zero
 80069bc:	0039883a 	mov	fp,zero
 80069c0:	0025883a 	mov	r18,zero
 80069c4:	90001e26 	beq	r18,zero,8006a40 <__sfvwrite_r+0x298>
 80069c8:	18006526 	beq	r3,zero,8006b60 <__sfvwrite_r+0x3b8>
 80069cc:	b02f883a 	mov	r23,r22
 80069d0:	9580012e 	bgeu	r18,r22,80069d8 <__sfvwrite_r+0x230>
 80069d4:	902f883a 	mov	r23,r18
 80069d8:	81000017 	ldw	r4,0(r16)
 80069dc:	80800417 	ldw	r2,16(r16)
 80069e0:	84c00217 	ldw	r19,8(r16)
 80069e4:	81c00517 	ldw	r7,20(r16)
 80069e8:	1100022e 	bgeu	r2,r4,80069f4 <__sfvwrite_r+0x24c>
 80069ec:	99e7883a 	add	r19,r19,r7
 80069f0:	9dc01816 	blt	r19,r23,8006a54 <__sfvwrite_r+0x2ac>
 80069f4:	b9c03b16 	blt	r23,r7,8006ae4 <__sfvwrite_r+0x33c>
 80069f8:	80800917 	ldw	r2,36(r16)
 80069fc:	81400717 	ldw	r5,28(r16)
 8006a00:	a809883a 	mov	r4,r21
 8006a04:	d8c00015 	stw	r3,0(sp)
 8006a08:	e00d883a 	mov	r6,fp
 8006a0c:	103ee83a 	callr	r2
 8006a10:	1027883a 	mov	r19,r2
 8006a14:	d8c00017 	ldw	r3,0(sp)
 8006a18:	00bfe20e 	bge	zero,r2,80069a4 <__sfvwrite_r+0x1fc>
 8006a1c:	b4edc83a 	sub	r22,r22,r19
 8006a20:	b0001a26 	beq	r22,zero,8006a8c <__sfvwrite_r+0x2e4>
 8006a24:	a0800217 	ldw	r2,8(r20)
 8006a28:	e4f9883a 	add	fp,fp,r19
 8006a2c:	94e5c83a 	sub	r18,r18,r19
 8006a30:	14e7c83a 	sub	r19,r2,r19
 8006a34:	a4c00215 	stw	r19,8(r20)
 8006a38:	983f8c26 	beq	r19,zero,800686c <__sfvwrite_r+0xc4>
 8006a3c:	903fe21e 	bne	r18,zero,80069c8 <__sfvwrite_r+0x220>
 8006a40:	8f000017 	ldw	fp,0(r17)
 8006a44:	8c800117 	ldw	r18,4(r17)
 8006a48:	0007883a 	mov	r3,zero
 8006a4c:	8c400204 	addi	r17,r17,8
 8006a50:	003fdc06 	br	80069c4 <__sfvwrite_r+0x21c>
 8006a54:	e00b883a 	mov	r5,fp
 8006a58:	980d883a 	mov	r6,r19
 8006a5c:	d8c00015 	stw	r3,0(sp)
 8006a60:	80071680 	call	8007168 <memmove>
 8006a64:	80800017 	ldw	r2,0(r16)
 8006a68:	a809883a 	mov	r4,r21
 8006a6c:	800b883a 	mov	r5,r16
 8006a70:	14c5883a 	add	r2,r2,r19
 8006a74:	80800015 	stw	r2,0(r16)
 8006a78:	8005e980 	call	8005e98 <_fflush_r>
 8006a7c:	d8c00017 	ldw	r3,0(sp)
 8006a80:	103fc81e 	bne	r2,zero,80069a4 <__sfvwrite_r+0x1fc>
 8006a84:	b4edc83a 	sub	r22,r22,r19
 8006a88:	b03fe61e 	bne	r22,zero,8006a24 <__sfvwrite_r+0x27c>
 8006a8c:	a809883a 	mov	r4,r21
 8006a90:	800b883a 	mov	r5,r16
 8006a94:	8005e980 	call	8005e98 <_fflush_r>
 8006a98:	103fc21e 	bne	r2,zero,80069a4 <__sfvwrite_r+0x1fc>
 8006a9c:	0007883a 	mov	r3,zero
 8006aa0:	003fe006 	br	8006a24 <__sfvwrite_r+0x27c>
 8006aa4:	81000017 	ldw	r4,0(r16)
 8006aa8:	80800417 	ldw	r2,16(r16)
 8006aac:	1100022e 	bgeu	r2,r4,8006ab8 <__sfvwrite_r+0x310>
 8006ab0:	9839883a 	mov	fp,r19
 8006ab4:	9c806036 	bltu	r19,r18,8006c38 <__sfvwrite_r+0x490>
 8006ab8:	81c00517 	ldw	r7,20(r16)
 8006abc:	91c01c36 	bltu	r18,r7,8006b30 <__sfvwrite_r+0x388>
 8006ac0:	80800917 	ldw	r2,36(r16)
 8006ac4:	81400717 	ldw	r5,28(r16)
 8006ac8:	a809883a 	mov	r4,r21
 8006acc:	b00d883a 	mov	r6,r22
 8006ad0:	103ee83a 	callr	r2
 8006ad4:	1027883a 	mov	r19,r2
 8006ad8:	00bfb20e 	bge	zero,r2,80069a4 <__sfvwrite_r+0x1fc>
 8006adc:	1039883a 	mov	fp,r2
 8006ae0:	003f9806 	br	8006944 <__sfvwrite_r+0x19c>
 8006ae4:	b80d883a 	mov	r6,r23
 8006ae8:	e00b883a 	mov	r5,fp
 8006aec:	d8c00015 	stw	r3,0(sp)
 8006af0:	80071680 	call	8007168 <memmove>
 8006af4:	80800217 	ldw	r2,8(r16)
 8006af8:	81000017 	ldw	r4,0(r16)
 8006afc:	b827883a 	mov	r19,r23
 8006b00:	15c5c83a 	sub	r2,r2,r23
 8006b04:	25ef883a 	add	r23,r4,r23
 8006b08:	80800215 	stw	r2,8(r16)
 8006b0c:	85c00015 	stw	r23,0(r16)
 8006b10:	d8c00017 	ldw	r3,0(sp)
 8006b14:	003fc106 	br	8006a1c <__sfvwrite_r+0x274>
 8006b18:	81000017 	ldw	r4,0(r16)
 8006b1c:	902f883a 	mov	r23,r18
 8006b20:	9039883a 	mov	fp,r18
 8006b24:	9027883a 	mov	r19,r18
 8006b28:	900f883a 	mov	r7,r18
 8006b2c:	003f7a06 	br	8006918 <__sfvwrite_r+0x170>
 8006b30:	b00b883a 	mov	r5,r22
 8006b34:	900d883a 	mov	r6,r18
 8006b38:	80071680 	call	8007168 <memmove>
 8006b3c:	80c00217 	ldw	r3,8(r16)
 8006b40:	80800017 	ldw	r2,0(r16)
 8006b44:	9027883a 	mov	r19,r18
 8006b48:	1c87c83a 	sub	r3,r3,r18
 8006b4c:	1485883a 	add	r2,r2,r18
 8006b50:	80c00215 	stw	r3,8(r16)
 8006b54:	80800015 	stw	r2,0(r16)
 8006b58:	9039883a 	mov	fp,r18
 8006b5c:	003f7906 	br	8006944 <__sfvwrite_r+0x19c>
 8006b60:	e009883a 	mov	r4,fp
 8006b64:	01400284 	movi	r5,10
 8006b68:	900d883a 	mov	r6,r18
 8006b6c:	80070700 	call	8007070 <memchr>
 8006b70:	10003c26 	beq	r2,zero,8006c64 <__sfvwrite_r+0x4bc>
 8006b74:	15800044 	addi	r22,r2,1
 8006b78:	b72dc83a 	sub	r22,r22,fp
 8006b7c:	00c00044 	movi	r3,1
 8006b80:	003f9206 	br	80069cc <__sfvwrite_r+0x224>
 8006b84:	81000517 	ldw	r4,20(r16)
 8006b88:	81400417 	ldw	r5,16(r16)
 8006b8c:	80c00017 	ldw	r3,0(r16)
 8006b90:	210d883a 	add	r6,r4,r4
 8006b94:	3109883a 	add	r4,r6,r4
 8006b98:	2026d7fa 	srli	r19,r4,31
 8006b9c:	1979c83a 	sub	fp,r3,r5
 8006ba0:	e1800044 	addi	r6,fp,1
 8006ba4:	9909883a 	add	r4,r19,r4
 8006ba8:	2027d07a 	srai	r19,r4,1
 8006bac:	3489883a 	add	r4,r6,r18
 8006bb0:	980d883a 	mov	r6,r19
 8006bb4:	9900022e 	bgeu	r19,r4,8006bc0 <__sfvwrite_r+0x418>
 8006bb8:	2027883a 	mov	r19,r4
 8006bbc:	200d883a 	mov	r6,r4
 8006bc0:	1081000c 	andi	r2,r2,1024
 8006bc4:	10bfffcc 	andi	r2,r2,65535
 8006bc8:	10a0001c 	xori	r2,r2,32768
 8006bcc:	10a00004 	addi	r2,r2,-32768
 8006bd0:	a809883a 	mov	r4,r21
 8006bd4:	103f6b26 	beq	r2,zero,8006984 <__sfvwrite_r+0x1dc>
 8006bd8:	300b883a 	mov	r5,r6
 8006bdc:	8001c0c0 	call	8001c0c <_malloc_r>
 8006be0:	102f883a 	mov	r23,r2
 8006be4:	103f6d26 	beq	r2,zero,800699c <__sfvwrite_r+0x1f4>
 8006be8:	81400417 	ldw	r5,16(r16)
 8006bec:	1009883a 	mov	r4,r2
 8006bf0:	e00d883a 	mov	r6,fp
 8006bf4:	80023900 	call	8002390 <memcpy>
 8006bf8:	8080030b 	ldhu	r2,12(r16)
 8006bfc:	00fedfc4 	movi	r3,-1153
 8006c00:	10c4703a 	and	r2,r2,r3
 8006c04:	10802014 	ori	r2,r2,128
 8006c08:	8080030d 	sth	r2,12(r16)
 8006c0c:	bf09883a 	add	r4,r23,fp
 8006c10:	9f07c83a 	sub	r3,r19,fp
 8006c14:	85c00415 	stw	r23,16(r16)
 8006c18:	84c00515 	stw	r19,20(r16)
 8006c1c:	81000015 	stw	r4,0(r16)
 8006c20:	902f883a 	mov	r23,r18
 8006c24:	80c00215 	stw	r3,8(r16)
 8006c28:	9039883a 	mov	fp,r18
 8006c2c:	9027883a 	mov	r19,r18
 8006c30:	900f883a 	mov	r7,r18
 8006c34:	003f3806 	br	8006918 <__sfvwrite_r+0x170>
 8006c38:	b00b883a 	mov	r5,r22
 8006c3c:	980d883a 	mov	r6,r19
 8006c40:	80071680 	call	8007168 <memmove>
 8006c44:	80800017 	ldw	r2,0(r16)
 8006c48:	a809883a 	mov	r4,r21
 8006c4c:	800b883a 	mov	r5,r16
 8006c50:	14c5883a 	add	r2,r2,r19
 8006c54:	80800015 	stw	r2,0(r16)
 8006c58:	8005e980 	call	8005e98 <_fflush_r>
 8006c5c:	103f3926 	beq	r2,zero,8006944 <__sfvwrite_r+0x19c>
 8006c60:	003f5006 	br	80069a4 <__sfvwrite_r+0x1fc>
 8006c64:	95800044 	addi	r22,r18,1
 8006c68:	00c00044 	movi	r3,1
 8006c6c:	003f5706 	br	80069cc <__sfvwrite_r+0x224>
 8006c70:	80c0030b 	ldhu	r3,12(r16)
 8006c74:	00bfffc4 	movi	r2,-1
 8006c78:	18c01014 	ori	r3,r3,64
 8006c7c:	80c0030d 	sth	r3,12(r16)
 8006c80:	00c00244 	movi	r3,9
 8006c84:	a8c00015 	stw	r3,0(r21)
 8006c88:	003ef906 	br	8006870 <__sfvwrite_r+0xc8>

08006c8c <_fwalk>:
 8006c8c:	defff904 	addi	sp,sp,-28
 8006c90:	dcc00315 	stw	r19,12(sp)
 8006c94:	24c0b804 	addi	r19,r4,736
 8006c98:	dd400515 	stw	r21,20(sp)
 8006c9c:	dd000415 	stw	r20,16(sp)
 8006ca0:	dfc00615 	stw	ra,24(sp)
 8006ca4:	dc800215 	stw	r18,8(sp)
 8006ca8:	dc400115 	stw	r17,4(sp)
 8006cac:	dc000015 	stw	r16,0(sp)
 8006cb0:	282b883a 	mov	r21,r5
 8006cb4:	0029883a 	mov	r20,zero
 8006cb8:	800635c0 	call	800635c <__sfp_lock_acquire>
 8006cbc:	98001226 	beq	r19,zero,8006d08 <_fwalk+0x7c>
 8006cc0:	04bfffc4 	movi	r18,-1
 8006cc4:	9c400117 	ldw	r17,4(r19)
 8006cc8:	9c000217 	ldw	r16,8(r19)
 8006ccc:	8c7fffc4 	addi	r17,r17,-1
 8006cd0:	88000b16 	blt	r17,zero,8006d00 <_fwalk+0x74>
 8006cd4:	84000304 	addi	r16,r16,12
 8006cd8:	80c0000f 	ldh	r3,0(r16)
 8006cdc:	8c7fffc4 	addi	r17,r17,-1
 8006ce0:	813ffd04 	addi	r4,r16,-12
 8006ce4:	18000426 	beq	r3,zero,8006cf8 <_fwalk+0x6c>
 8006ce8:	80c0008f 	ldh	r3,2(r16)
 8006cec:	1c800226 	beq	r3,r18,8006cf8 <_fwalk+0x6c>
 8006cf0:	a83ee83a 	callr	r21
 8006cf4:	a0a8b03a 	or	r20,r20,r2
 8006cf8:	84001704 	addi	r16,r16,92
 8006cfc:	8cbff61e 	bne	r17,r18,8006cd8 <_fwalk+0x4c>
 8006d00:	9cc00017 	ldw	r19,0(r19)
 8006d04:	983fef1e 	bne	r19,zero,8006cc4 <_fwalk+0x38>
 8006d08:	80063600 	call	8006360 <__sfp_lock_release>
 8006d0c:	a005883a 	mov	r2,r20
 8006d10:	dfc00617 	ldw	ra,24(sp)
 8006d14:	dd400517 	ldw	r21,20(sp)
 8006d18:	dd000417 	ldw	r20,16(sp)
 8006d1c:	dcc00317 	ldw	r19,12(sp)
 8006d20:	dc800217 	ldw	r18,8(sp)
 8006d24:	dc400117 	ldw	r17,4(sp)
 8006d28:	dc000017 	ldw	r16,0(sp)
 8006d2c:	dec00704 	addi	sp,sp,28
 8006d30:	f800283a 	ret

08006d34 <_fwalk_reent>:
 8006d34:	defff804 	addi	sp,sp,-32
 8006d38:	dcc00315 	stw	r19,12(sp)
 8006d3c:	24c0b804 	addi	r19,r4,736
 8006d40:	dd800615 	stw	r22,24(sp)
 8006d44:	dd400515 	stw	r21,20(sp)
 8006d48:	dd000415 	stw	r20,16(sp)
 8006d4c:	dfc00715 	stw	ra,28(sp)
 8006d50:	dc800215 	stw	r18,8(sp)
 8006d54:	dc400115 	stw	r17,4(sp)
 8006d58:	dc000015 	stw	r16,0(sp)
 8006d5c:	2029883a 	mov	r20,r4
 8006d60:	282b883a 	mov	r21,r5
 8006d64:	002d883a 	mov	r22,zero
 8006d68:	800635c0 	call	800635c <__sfp_lock_acquire>
 8006d6c:	98001326 	beq	r19,zero,8006dbc <_fwalk_reent+0x88>
 8006d70:	04bfffc4 	movi	r18,-1
 8006d74:	9c400117 	ldw	r17,4(r19)
 8006d78:	9c000217 	ldw	r16,8(r19)
 8006d7c:	8c7fffc4 	addi	r17,r17,-1
 8006d80:	88000c16 	blt	r17,zero,8006db4 <_fwalk_reent+0x80>
 8006d84:	84000304 	addi	r16,r16,12
 8006d88:	80c0000f 	ldh	r3,0(r16)
 8006d8c:	8c7fffc4 	addi	r17,r17,-1
 8006d90:	817ffd04 	addi	r5,r16,-12
 8006d94:	18000526 	beq	r3,zero,8006dac <_fwalk_reent+0x78>
 8006d98:	80c0008f 	ldh	r3,2(r16)
 8006d9c:	a009883a 	mov	r4,r20
 8006da0:	1c800226 	beq	r3,r18,8006dac <_fwalk_reent+0x78>
 8006da4:	a83ee83a 	callr	r21
 8006da8:	b0acb03a 	or	r22,r22,r2
 8006dac:	84001704 	addi	r16,r16,92
 8006db0:	8cbff51e 	bne	r17,r18,8006d88 <_fwalk_reent+0x54>
 8006db4:	9cc00017 	ldw	r19,0(r19)
 8006db8:	983fee1e 	bne	r19,zero,8006d74 <_fwalk_reent+0x40>
 8006dbc:	80063600 	call	8006360 <__sfp_lock_release>
 8006dc0:	b005883a 	mov	r2,r22
 8006dc4:	dfc00717 	ldw	ra,28(sp)
 8006dc8:	dd800617 	ldw	r22,24(sp)
 8006dcc:	dd400517 	ldw	r21,20(sp)
 8006dd0:	dd000417 	ldw	r20,16(sp)
 8006dd4:	dcc00317 	ldw	r19,12(sp)
 8006dd8:	dc800217 	ldw	r18,8(sp)
 8006ddc:	dc400117 	ldw	r17,4(sp)
 8006de0:	dc000017 	ldw	r16,0(sp)
 8006de4:	dec00804 	addi	sp,sp,32
 8006de8:	f800283a 	ret

08006dec <_setlocale_r>:
 8006dec:	defffc04 	addi	sp,sp,-16
 8006df0:	dc800215 	stw	r18,8(sp)
 8006df4:	dc400115 	stw	r17,4(sp)
 8006df8:	dc000015 	stw	r16,0(sp)
 8006dfc:	dfc00315 	stw	ra,12(sp)
 8006e00:	3021883a 	mov	r16,r6
 8006e04:	2023883a 	mov	r17,r4
 8006e08:	2825883a 	mov	r18,r5
 8006e0c:	30001626 	beq	r6,zero,8006e68 <_setlocale_r+0x7c>
 8006e10:	3009883a 	mov	r4,r6
 8006e14:	01420074 	movhi	r5,2049
 8006e18:	29773d04 	addi	r5,r5,-8972
 8006e1c:	8008bc00 	call	8008bc0 <strcmp>
 8006e20:	10000a1e 	bne	r2,zero,8006e4c <_setlocale_r+0x60>
 8006e24:	8c800c15 	stw	r18,48(r17)
 8006e28:	8c000d15 	stw	r16,52(r17)
 8006e2c:	00820074 	movhi	r2,2049
 8006e30:	10b73d04 	addi	r2,r2,-8972
 8006e34:	dfc00317 	ldw	ra,12(sp)
 8006e38:	dc800217 	ldw	r18,8(sp)
 8006e3c:	dc400117 	ldw	r17,4(sp)
 8006e40:	dc000017 	ldw	r16,0(sp)
 8006e44:	dec00404 	addi	sp,sp,16
 8006e48:	f800283a 	ret
 8006e4c:	8009883a 	mov	r4,r16
 8006e50:	01420074 	movhi	r5,2049
 8006e54:	29772804 	addi	r5,r5,-9056
 8006e58:	8008bc00 	call	8008bc0 <strcmp>
 8006e5c:	103ff126 	beq	r2,zero,8006e24 <_setlocale_r+0x38>
 8006e60:	0005883a 	mov	r2,zero
 8006e64:	003ff306 	br	8006e34 <_setlocale_r+0x48>
 8006e68:	00820074 	movhi	r2,2049
 8006e6c:	10b73d04 	addi	r2,r2,-8972
 8006e70:	dfc00317 	ldw	ra,12(sp)
 8006e74:	dc800217 	ldw	r18,8(sp)
 8006e78:	dc400117 	ldw	r17,4(sp)
 8006e7c:	dc000017 	ldw	r16,0(sp)
 8006e80:	dec00404 	addi	sp,sp,16
 8006e84:	f800283a 	ret

08006e88 <__locale_charset>:
 8006e88:	00820074 	movhi	r2,2049
 8006e8c:	10b73e04 	addi	r2,r2,-8968
 8006e90:	f800283a 	ret

08006e94 <_localeconv_r>:
 8006e94:	00820074 	movhi	r2,2049
 8006e98:	10b74204 	addi	r2,r2,-8952
 8006e9c:	f800283a 	ret

08006ea0 <setlocale>:
 8006ea0:	00c20074 	movhi	r3,2049
 8006ea4:	18fae304 	addi	r3,r3,-5236
 8006ea8:	2005883a 	mov	r2,r4
 8006eac:	19000017 	ldw	r4,0(r3)
 8006eb0:	280d883a 	mov	r6,r5
 8006eb4:	100b883a 	mov	r5,r2
 8006eb8:	8006dec1 	jmpi	8006dec <_setlocale_r>

08006ebc <localeconv>:
 8006ebc:	00820074 	movhi	r2,2049
 8006ec0:	10b74204 	addi	r2,r2,-8952
 8006ec4:	f800283a 	ret

08006ec8 <__smakebuf_r>:
 8006ec8:	2880030b 	ldhu	r2,12(r5)
 8006ecc:	deffed04 	addi	sp,sp,-76
 8006ed0:	dc401015 	stw	r17,64(sp)
 8006ed4:	10c0008c 	andi	r3,r2,2
 8006ed8:	18ffffcc 	andi	r3,r3,65535
 8006edc:	18e0001c 	xori	r3,r3,32768
 8006ee0:	dc000f15 	stw	r16,60(sp)
 8006ee4:	dfc01215 	stw	ra,72(sp)
 8006ee8:	dc801115 	stw	r18,68(sp)
 8006eec:	18e00004 	addi	r3,r3,-32768
 8006ef0:	2821883a 	mov	r16,r5
 8006ef4:	2023883a 	mov	r17,r4
 8006ef8:	1800381e 	bne	r3,zero,8006fdc <__smakebuf_r+0x114>
 8006efc:	2940038f 	ldh	r5,14(r5)
 8006f00:	28002d16 	blt	r5,zero,8006fb8 <__smakebuf_r+0xf0>
 8006f04:	d80d883a 	mov	r6,sp
 8006f08:	8008fdc0 	call	8008fdc <_fstat_r>
 8006f0c:	10002916 	blt	r2,zero,8006fb4 <__smakebuf_r+0xec>
 8006f10:	d8800117 	ldw	r2,4(sp)
 8006f14:	00e00014 	movui	r3,32768
 8006f18:	10bc000c 	andi	r2,r2,61440
 8006f1c:	10c03c26 	beq	r2,r3,8007010 <__smakebuf_r+0x148>
 8006f20:	80c0030b 	ldhu	r3,12(r16)
 8006f24:	18c20014 	ori	r3,r3,2048
 8006f28:	80c0030d 	sth	r3,12(r16)
 8006f2c:	00c80004 	movi	r3,8192
 8006f30:	10c00c1e 	bne	r2,r3,8006f64 <__smakebuf_r+0x9c>
 8006f34:	8140038f 	ldh	r5,14(r16)
 8006f38:	8809883a 	mov	r4,r17
 8006f3c:	80090440 	call	8009044 <_isatty_r>
 8006f40:	10000826 	beq	r2,zero,8006f64 <__smakebuf_r+0x9c>
 8006f44:	80c0030b 	ldhu	r3,12(r16)
 8006f48:	808010c4 	addi	r2,r16,67
 8006f4c:	80800015 	stw	r2,0(r16)
 8006f50:	18c00054 	ori	r3,r3,1
 8006f54:	80800415 	stw	r2,16(r16)
 8006f58:	00800044 	movi	r2,1
 8006f5c:	80c0030d 	sth	r3,12(r16)
 8006f60:	80800515 	stw	r2,20(r16)
 8006f64:	04810004 	movi	r18,1024
 8006f68:	8809883a 	mov	r4,r17
 8006f6c:	900b883a 	mov	r5,r18
 8006f70:	8001c0c0 	call	8001c0c <_malloc_r>
 8006f74:	10003026 	beq	r2,zero,8007038 <__smakebuf_r+0x170>
 8006f78:	80c0030b 	ldhu	r3,12(r16)
 8006f7c:	01020034 	movhi	r4,2048
 8006f80:	21183004 	addi	r4,r4,24768
 8006f84:	89000f15 	stw	r4,60(r17)
 8006f88:	18c02014 	ori	r3,r3,128
 8006f8c:	80c0030d 	sth	r3,12(r16)
 8006f90:	80800015 	stw	r2,0(r16)
 8006f94:	80800415 	stw	r2,16(r16)
 8006f98:	84800515 	stw	r18,20(r16)
 8006f9c:	dfc01217 	ldw	ra,72(sp)
 8006fa0:	dc801117 	ldw	r18,68(sp)
 8006fa4:	dc401017 	ldw	r17,64(sp)
 8006fa8:	dc000f17 	ldw	r16,60(sp)
 8006fac:	dec01304 	addi	sp,sp,76
 8006fb0:	f800283a 	ret
 8006fb4:	8080030b 	ldhu	r2,12(r16)
 8006fb8:	10c0200c 	andi	r3,r2,128
 8006fbc:	18ffffcc 	andi	r3,r3,65535
 8006fc0:	18e0001c 	xori	r3,r3,32768
 8006fc4:	18e00004 	addi	r3,r3,-32768
 8006fc8:	18000f1e 	bne	r3,zero,8007008 <__smakebuf_r+0x140>
 8006fcc:	04810004 	movi	r18,1024
 8006fd0:	10820014 	ori	r2,r2,2048
 8006fd4:	8080030d 	sth	r2,12(r16)
 8006fd8:	003fe306 	br	8006f68 <__smakebuf_r+0xa0>
 8006fdc:	288010c4 	addi	r2,r5,67
 8006fe0:	28800015 	stw	r2,0(r5)
 8006fe4:	28800415 	stw	r2,16(r5)
 8006fe8:	00800044 	movi	r2,1
 8006fec:	28800515 	stw	r2,20(r5)
 8006ff0:	dfc01217 	ldw	ra,72(sp)
 8006ff4:	dc801117 	ldw	r18,68(sp)
 8006ff8:	dc401017 	ldw	r17,64(sp)
 8006ffc:	dc000f17 	ldw	r16,60(sp)
 8007000:	dec01304 	addi	sp,sp,76
 8007004:	f800283a 	ret
 8007008:	04801004 	movi	r18,64
 800700c:	003ff006 	br	8006fd0 <__smakebuf_r+0x108>
 8007010:	81000a17 	ldw	r4,40(r16)
 8007014:	00c20074 	movhi	r3,2049
 8007018:	18e2d704 	addi	r3,r3,-29860
 800701c:	20ffc01e 	bne	r4,r3,8006f20 <__smakebuf_r+0x58>
 8007020:	8080030b 	ldhu	r2,12(r16)
 8007024:	00c10004 	movi	r3,1024
 8007028:	80c01315 	stw	r3,76(r16)
 800702c:	10c4b03a 	or	r2,r2,r3
 8007030:	8080030d 	sth	r2,12(r16)
 8007034:	003fcb06 	br	8006f64 <__smakebuf_r+0x9c>
 8007038:	8080030b 	ldhu	r2,12(r16)
 800703c:	10c0800c 	andi	r3,r2,512
 8007040:	18ffffcc 	andi	r3,r3,65535
 8007044:	18e0001c 	xori	r3,r3,32768
 8007048:	18e00004 	addi	r3,r3,-32768
 800704c:	183fd31e 	bne	r3,zero,8006f9c <__smakebuf_r+0xd4>
 8007050:	10800094 	ori	r2,r2,2
 8007054:	80c010c4 	addi	r3,r16,67
 8007058:	8080030d 	sth	r2,12(r16)
 800705c:	00800044 	movi	r2,1
 8007060:	80c00015 	stw	r3,0(r16)
 8007064:	80c00415 	stw	r3,16(r16)
 8007068:	80800515 	stw	r2,20(r16)
 800706c:	003fcb06 	br	8006f9c <__smakebuf_r+0xd4>

08007070 <memchr>:
 8007070:	008000c4 	movi	r2,3
 8007074:	29403fcc 	andi	r5,r5,255
 8007078:	1180282e 	bgeu	r2,r6,800711c <memchr+0xac>
 800707c:	2086703a 	and	r3,r4,r2
 8007080:	1800351e 	bne	r3,zero,8007158 <memchr+0xe8>
 8007084:	2816923a 	slli	r11,r5,8
 8007088:	2093883a 	add	r9,r4,r2
 800708c:	22000084 	addi	r8,r4,2
 8007090:	5957883a 	add	r11,r11,r5
 8007094:	5816923a 	slli	r11,r11,8
 8007098:	20c00044 	addi	r3,r4,1
 800709c:	037fbff4 	movhi	r13,65279
 80070a0:	6b7fbfc4 	addi	r13,r13,-257
 80070a4:	5957883a 	add	r11,r11,r5
 80070a8:	5816923a 	slli	r11,r11,8
 80070ac:	03202074 	movhi	r12,32897
 80070b0:	63202004 	addi	r12,r12,-32640
 80070b4:	101d883a 	mov	r14,r2
 80070b8:	5957883a 	add	r11,r11,r5
 80070bc:	21c00017 	ldw	r7,0(r4)
 80070c0:	31bfff04 	addi	r6,r6,-4
 80070c4:	1805883a 	mov	r2,r3
 80070c8:	3acef03a 	xor	r7,r7,r11
 80070cc:	3b55883a 	add	r10,r7,r13
 80070d0:	01ce303a 	nor	r7,zero,r7
 80070d4:	51ce703a 	and	r7,r10,r7
 80070d8:	3b0e703a 	and	r7,r7,r12
 80070dc:	38000a26 	beq	r7,zero,8007108 <memchr+0x98>
 80070e0:	21c00003 	ldbu	r7,0(r4)
 80070e4:	39401e26 	beq	r7,r5,8007160 <memchr+0xf0>
 80070e8:	19c00003 	ldbu	r7,0(r3)
 80070ec:	39401926 	beq	r7,r5,8007154 <memchr+0xe4>
 80070f0:	41c00003 	ldbu	r7,0(r8)
 80070f4:	4005883a 	mov	r2,r8
 80070f8:	39401626 	beq	r7,r5,8007154 <memchr+0xe4>
 80070fc:	49c00003 	ldbu	r7,0(r9)
 8007100:	4805883a 	mov	r2,r9
 8007104:	39401326 	beq	r7,r5,8007154 <memchr+0xe4>
 8007108:	21000104 	addi	r4,r4,4
 800710c:	4a400104 	addi	r9,r9,4
 8007110:	42000104 	addi	r8,r8,4
 8007114:	18c00104 	addi	r3,r3,4
 8007118:	71bfe836 	bltu	r14,r6,80070bc <memchr+0x4c>
 800711c:	2005883a 	mov	r2,r4
 8007120:	30000a26 	beq	r6,zero,800714c <memchr+0xdc>
 8007124:	10c00003 	ldbu	r3,0(r2)
 8007128:	19400a26 	beq	r3,r5,8007154 <memchr+0xe4>
 800712c:	10c00044 	addi	r3,r2,1
 8007130:	118d883a 	add	r6,r2,r6
 8007134:	00000306 	br	8007144 <memchr+0xd4>
 8007138:	11000003 	ldbu	r4,0(r2)
 800713c:	18c00044 	addi	r3,r3,1
 8007140:	21400426 	beq	r4,r5,8007154 <memchr+0xe4>
 8007144:	1805883a 	mov	r2,r3
 8007148:	19bffb1e 	bne	r3,r6,8007138 <memchr+0xc8>
 800714c:	0005883a 	mov	r2,zero
 8007150:	f800283a 	ret
 8007154:	f800283a 	ret
 8007158:	2005883a 	mov	r2,r4
 800715c:	003ff106 	br	8007124 <memchr+0xb4>
 8007160:	2005883a 	mov	r2,r4
 8007164:	f800283a 	ret

08007168 <memmove>:
 8007168:	defffb04 	addi	sp,sp,-20
 800716c:	dc000015 	stw	r16,0(sp)
 8007170:	dfc00415 	stw	ra,16(sp)
 8007174:	dcc00315 	stw	r19,12(sp)
 8007178:	dc800215 	stw	r18,8(sp)
 800717c:	dc400115 	stw	r17,4(sp)
 8007180:	2021883a 	mov	r16,r4
 8007184:	300f883a 	mov	r7,r6
 8007188:	2900122e 	bgeu	r5,r4,80071d4 <memmove+0x6c>
 800718c:	2987883a 	add	r3,r5,r6
 8007190:	20c0102e 	bgeu	r4,r3,80071d4 <memmove+0x6c>
 8007194:	218b883a 	add	r5,r4,r6
 8007198:	1989c83a 	sub	r4,r3,r6
 800719c:	30000526 	beq	r6,zero,80071b4 <memmove+0x4c>
 80071a0:	18ffffc4 	addi	r3,r3,-1
 80071a4:	18800003 	ldbu	r2,0(r3)
 80071a8:	297fffc4 	addi	r5,r5,-1
 80071ac:	28800005 	stb	r2,0(r5)
 80071b0:	193ffb1e 	bne	r3,r4,80071a0 <memmove+0x38>
 80071b4:	8005883a 	mov	r2,r16
 80071b8:	dfc00417 	ldw	ra,16(sp)
 80071bc:	dcc00317 	ldw	r19,12(sp)
 80071c0:	dc800217 	ldw	r18,8(sp)
 80071c4:	dc400117 	ldw	r17,4(sp)
 80071c8:	dc000017 	ldw	r16,0(sp)
 80071cc:	dec00504 	addi	sp,sp,20
 80071d0:	f800283a 	ret
 80071d4:	008003c4 	movi	r2,15
 80071d8:	1180422e 	bgeu	r2,r6,80072e4 <memmove+0x17c>
 80071dc:	2c04b03a 	or	r2,r5,r16
 80071e0:	108000cc 	andi	r2,r2,3
 80071e4:	10003f1e 	bne	r2,zero,80072e4 <memmove+0x17c>
 80071e8:	32bffc04 	addi	r10,r6,-16
 80071ec:	5014d13a 	srli	r10,r10,4
 80071f0:	81000404 	addi	r4,r16,16
 80071f4:	8007883a 	mov	r3,r16
 80071f8:	5004913a 	slli	r2,r10,4
 80071fc:	280f883a 	mov	r7,r5
 8007200:	2089883a 	add	r4,r4,r2
 8007204:	38800017 	ldw	r2,0(r7)
 8007208:	18c00404 	addi	r3,r3,16
 800720c:	39c00404 	addi	r7,r7,16
 8007210:	18bffc15 	stw	r2,-16(r3)
 8007214:	38bffd17 	ldw	r2,-12(r7)
 8007218:	18bffd15 	stw	r2,-12(r3)
 800721c:	38bffe17 	ldw	r2,-8(r7)
 8007220:	18bffe15 	stw	r2,-8(r3)
 8007224:	38bfff17 	ldw	r2,-4(r7)
 8007228:	18bfff15 	stw	r2,-4(r3)
 800722c:	193ff51e 	bne	r3,r4,8007204 <memmove+0x9c>
 8007230:	52800044 	addi	r10,r10,1
 8007234:	5014913a 	slli	r10,r10,4
 8007238:	31c003cc 	andi	r7,r6,15
 800723c:	008000c4 	movi	r2,3
 8007240:	8287883a 	add	r3,r16,r10
 8007244:	2a95883a 	add	r10,r5,r10
 8007248:	11c0282e 	bgeu	r2,r7,80072ec <memmove+0x184>
 800724c:	3c7fff04 	addi	r17,r7,-4
 8007250:	8808d0ba 	srli	r4,r17,2
 8007254:	1a400104 	addi	r9,r3,4
 8007258:	180d883a 	mov	r6,r3
 800725c:	2105883a 	add	r2,r4,r4
 8007260:	1085883a 	add	r2,r2,r2
 8007264:	4893883a 	add	r9,r9,r2
 8007268:	5005883a 	mov	r2,r10
 800726c:	12000017 	ldw	r8,0(r2)
 8007270:	31800104 	addi	r6,r6,4
 8007274:	10800104 	addi	r2,r2,4
 8007278:	323fff15 	stw	r8,-4(r6)
 800727c:	327ffb1e 	bne	r6,r9,800726c <memmove+0x104>
 8007280:	20800044 	addi	r2,r4,1
 8007284:	1085883a 	add	r2,r2,r2
 8007288:	1085883a 	add	r2,r2,r2
 800728c:	017fff04 	movi	r5,-4
 8007290:	18a5883a 	add	r18,r3,r2
 8007294:	50a7883a 	add	r19,r10,r2
 8007298:	8001bbc0 	call	8001bbc <__mulsi3>
 800729c:	144f883a 	add	r7,r2,r17
 80072a0:	980b883a 	mov	r5,r19
 80072a4:	9007883a 	mov	r3,r18
 80072a8:	383fc226 	beq	r7,zero,80071b4 <memmove+0x4c>
 80072ac:	19cf883a 	add	r7,r3,r7
 80072b0:	29800003 	ldbu	r6,0(r5)
 80072b4:	18c00044 	addi	r3,r3,1
 80072b8:	29400044 	addi	r5,r5,1
 80072bc:	19bfffc5 	stb	r6,-1(r3)
 80072c0:	19fffb1e 	bne	r3,r7,80072b0 <memmove+0x148>
 80072c4:	8005883a 	mov	r2,r16
 80072c8:	dfc00417 	ldw	ra,16(sp)
 80072cc:	dcc00317 	ldw	r19,12(sp)
 80072d0:	dc800217 	ldw	r18,8(sp)
 80072d4:	dc400117 	ldw	r17,4(sp)
 80072d8:	dc000017 	ldw	r16,0(sp)
 80072dc:	dec00504 	addi	sp,sp,20
 80072e0:	f800283a 	ret
 80072e4:	8007883a 	mov	r3,r16
 80072e8:	003fef06 	br	80072a8 <memmove+0x140>
 80072ec:	500b883a 	mov	r5,r10
 80072f0:	003fed06 	br	80072a8 <memmove+0x140>

080072f4 <memset>:
 80072f4:	00c000c4 	movi	r3,3
 80072f8:	2005883a 	mov	r2,r4
 80072fc:	29403fcc 	andi	r5,r5,255
 8007300:	19802d2e 	bgeu	r3,r6,80073b8 <memset+0xc4>
 8007304:	20c6703a 	and	r3,r4,r3
 8007308:	18002e1e 	bne	r3,zero,80073c4 <memset+0xd0>
 800730c:	2806923a 	slli	r3,r5,8
 8007310:	010003c4 	movi	r4,15
 8007314:	3011883a 	mov	r8,r6
 8007318:	1946b03a 	or	r3,r3,r5
 800731c:	180e943a 	slli	r7,r3,16
 8007320:	38ceb03a 	or	r7,r7,r3
 8007324:	1007883a 	mov	r3,r2
 8007328:	21800f2e 	bgeu	r4,r6,8007368 <memset+0x74>
 800732c:	19c00015 	stw	r7,0(r3)
 8007330:	19c00115 	stw	r7,4(r3)
 8007334:	19c00215 	stw	r7,8(r3)
 8007338:	19c00315 	stw	r7,12(r3)
 800733c:	423ffc04 	addi	r8,r8,-16
 8007340:	18c00404 	addi	r3,r3,16
 8007344:	223ff936 	bltu	r4,r8,800732c <memset+0x38>
 8007348:	30fffc04 	addi	r3,r6,-16
 800734c:	1806d13a 	srli	r3,r3,4
 8007350:	318003cc 	andi	r6,r6,15
 8007354:	010000c4 	movi	r4,3
 8007358:	18c00044 	addi	r3,r3,1
 800735c:	1806913a 	slli	r3,r3,4
 8007360:	10c7883a 	add	r3,r2,r3
 8007364:	21800e2e 	bgeu	r4,r6,80073a0 <memset+0xac>
 8007368:	1813883a 	mov	r9,r3
 800736c:	3011883a 	mov	r8,r6
 8007370:	010000c4 	movi	r4,3
 8007374:	49c00015 	stw	r7,0(r9)
 8007378:	423fff04 	addi	r8,r8,-4
 800737c:	4a400104 	addi	r9,r9,4
 8007380:	223ffc36 	bltu	r4,r8,8007374 <memset+0x80>
 8007384:	313fff04 	addi	r4,r6,-4
 8007388:	2008d0ba 	srli	r4,r4,2
 800738c:	318000cc 	andi	r6,r6,3
 8007390:	21000044 	addi	r4,r4,1
 8007394:	2109883a 	add	r4,r4,r4
 8007398:	2109883a 	add	r4,r4,r4
 800739c:	1907883a 	add	r3,r3,r4
 80073a0:	30000a26 	beq	r6,zero,80073cc <memset+0xd8>
 80073a4:	198d883a 	add	r6,r3,r6
 80073a8:	19400005 	stb	r5,0(r3)
 80073ac:	18c00044 	addi	r3,r3,1
 80073b0:	19bffd1e 	bne	r3,r6,80073a8 <memset+0xb4>
 80073b4:	f800283a 	ret
 80073b8:	2007883a 	mov	r3,r4
 80073bc:	303ff91e 	bne	r6,zero,80073a4 <memset+0xb0>
 80073c0:	00000206 	br	80073cc <memset+0xd8>
 80073c4:	2007883a 	mov	r3,r4
 80073c8:	003ff606 	br	80073a4 <memset+0xb0>
 80073cc:	f800283a 	ret

080073d0 <_Balloc>:
 80073d0:	20801317 	ldw	r2,76(r4)
 80073d4:	defffc04 	addi	sp,sp,-16
 80073d8:	dc400115 	stw	r17,4(sp)
 80073dc:	dc000015 	stw	r16,0(sp)
 80073e0:	dfc00315 	stw	ra,12(sp)
 80073e4:	dc800215 	stw	r18,8(sp)
 80073e8:	2023883a 	mov	r17,r4
 80073ec:	2821883a 	mov	r16,r5
 80073f0:	10000f26 	beq	r2,zero,8007430 <_Balloc+0x60>
 80073f4:	8407883a 	add	r3,r16,r16
 80073f8:	18c7883a 	add	r3,r3,r3
 80073fc:	10c7883a 	add	r3,r2,r3
 8007400:	18800017 	ldw	r2,0(r3)
 8007404:	10001126 	beq	r2,zero,800744c <_Balloc+0x7c>
 8007408:	11000017 	ldw	r4,0(r2)
 800740c:	19000015 	stw	r4,0(r3)
 8007410:	10000415 	stw	zero,16(r2)
 8007414:	10000315 	stw	zero,12(r2)
 8007418:	dfc00317 	ldw	ra,12(sp)
 800741c:	dc800217 	ldw	r18,8(sp)
 8007420:	dc400117 	ldw	r17,4(sp)
 8007424:	dc000017 	ldw	r16,0(sp)
 8007428:	dec00404 	addi	sp,sp,16
 800742c:	f800283a 	ret
 8007430:	01400104 	movi	r5,4
 8007434:	01800404 	movi	r6,16
 8007438:	8008d5c0 	call	8008d5c <_calloc_r>
 800743c:	88801315 	stw	r2,76(r17)
 8007440:	103fec1e 	bne	r2,zero,80073f4 <_Balloc+0x24>
 8007444:	0005883a 	mov	r2,zero
 8007448:	003ff306 	br	8007418 <_Balloc+0x48>
 800744c:	01400044 	movi	r5,1
 8007450:	2c24983a 	sll	r18,r5,r16
 8007454:	8809883a 	mov	r4,r17
 8007458:	91800144 	addi	r6,r18,5
 800745c:	318d883a 	add	r6,r6,r6
 8007460:	318d883a 	add	r6,r6,r6
 8007464:	8008d5c0 	call	8008d5c <_calloc_r>
 8007468:	103ff626 	beq	r2,zero,8007444 <_Balloc+0x74>
 800746c:	14000115 	stw	r16,4(r2)
 8007470:	14800215 	stw	r18,8(r2)
 8007474:	003fe606 	br	8007410 <_Balloc+0x40>

08007478 <_Bfree>:
 8007478:	28000826 	beq	r5,zero,800749c <_Bfree+0x24>
 800747c:	28c00117 	ldw	r3,4(r5)
 8007480:	20801317 	ldw	r2,76(r4)
 8007484:	18c7883a 	add	r3,r3,r3
 8007488:	18c7883a 	add	r3,r3,r3
 800748c:	10c5883a 	add	r2,r2,r3
 8007490:	10c00017 	ldw	r3,0(r2)
 8007494:	28c00015 	stw	r3,0(r5)
 8007498:	11400015 	stw	r5,0(r2)
 800749c:	f800283a 	ret

080074a0 <__multadd>:
 80074a0:	defff604 	addi	sp,sp,-40
 80074a4:	dd400515 	stw	r21,20(sp)
 80074a8:	2d400417 	ldw	r21,16(r5)
 80074ac:	df000815 	stw	fp,32(sp)
 80074b0:	ddc00715 	stw	r23,28(sp)
 80074b4:	dd800615 	stw	r22,24(sp)
 80074b8:	dd000415 	stw	r20,16(sp)
 80074bc:	dc400115 	stw	r17,4(sp)
 80074c0:	dc000015 	stw	r16,0(sp)
 80074c4:	dfc00915 	stw	ra,36(sp)
 80074c8:	dcc00315 	stw	r19,12(sp)
 80074cc:	dc800215 	stw	r18,8(sp)
 80074d0:	282d883a 	mov	r22,r5
 80074d4:	202f883a 	mov	r23,r4
 80074d8:	3029883a 	mov	r20,r6
 80074dc:	3839883a 	mov	fp,r7
 80074e0:	2c000504 	addi	r16,r5,20
 80074e4:	0023883a 	mov	r17,zero
 80074e8:	84c00017 	ldw	r19,0(r16)
 80074ec:	a00b883a 	mov	r5,r20
 80074f0:	8c400044 	addi	r17,r17,1
 80074f4:	993fffcc 	andi	r4,r19,65535
 80074f8:	8001bbc0 	call	8001bbc <__mulsi3>
 80074fc:	1725883a 	add	r18,r2,fp
 8007500:	9808d43a 	srli	r4,r19,16
 8007504:	9026d43a 	srli	r19,r18,16
 8007508:	a00b883a 	mov	r5,r20
 800750c:	8001bbc0 	call	8001bbc <__mulsi3>
 8007510:	988f883a 	add	r7,r19,r2
 8007514:	3804943a 	slli	r2,r7,16
 8007518:	94bfffcc 	andi	r18,r18,65535
 800751c:	3838d43a 	srli	fp,r7,16
 8007520:	14a5883a 	add	r18,r2,r18
 8007524:	84800015 	stw	r18,0(r16)
 8007528:	84000104 	addi	r16,r16,4
 800752c:	8d7fee16 	blt	r17,r21,80074e8 <__multadd+0x48>
 8007530:	e0000926 	beq	fp,zero,8007558 <__multadd+0xb8>
 8007534:	b0800217 	ldw	r2,8(r22)
 8007538:	a880140e 	bge	r21,r2,800758c <__multadd+0xec>
 800753c:	a8800144 	addi	r2,r21,5
 8007540:	1085883a 	add	r2,r2,r2
 8007544:	1085883a 	add	r2,r2,r2
 8007548:	b085883a 	add	r2,r22,r2
 800754c:	ad400044 	addi	r21,r21,1
 8007550:	17000015 	stw	fp,0(r2)
 8007554:	b5400415 	stw	r21,16(r22)
 8007558:	b005883a 	mov	r2,r22
 800755c:	dfc00917 	ldw	ra,36(sp)
 8007560:	df000817 	ldw	fp,32(sp)
 8007564:	ddc00717 	ldw	r23,28(sp)
 8007568:	dd800617 	ldw	r22,24(sp)
 800756c:	dd400517 	ldw	r21,20(sp)
 8007570:	dd000417 	ldw	r20,16(sp)
 8007574:	dcc00317 	ldw	r19,12(sp)
 8007578:	dc800217 	ldw	r18,8(sp)
 800757c:	dc400117 	ldw	r17,4(sp)
 8007580:	dc000017 	ldw	r16,0(sp)
 8007584:	dec00a04 	addi	sp,sp,40
 8007588:	f800283a 	ret
 800758c:	b1400117 	ldw	r5,4(r22)
 8007590:	b809883a 	mov	r4,r23
 8007594:	29400044 	addi	r5,r5,1
 8007598:	80073d00 	call	80073d0 <_Balloc>
 800759c:	b1800417 	ldw	r6,16(r22)
 80075a0:	b1400304 	addi	r5,r22,12
 80075a4:	11000304 	addi	r4,r2,12
 80075a8:	31800084 	addi	r6,r6,2
 80075ac:	318d883a 	add	r6,r6,r6
 80075b0:	318d883a 	add	r6,r6,r6
 80075b4:	1021883a 	mov	r16,r2
 80075b8:	80023900 	call	8002390 <memcpy>
 80075bc:	b0c00117 	ldw	r3,4(r22)
 80075c0:	b8801317 	ldw	r2,76(r23)
 80075c4:	18c7883a 	add	r3,r3,r3
 80075c8:	18c7883a 	add	r3,r3,r3
 80075cc:	10c5883a 	add	r2,r2,r3
 80075d0:	10c00017 	ldw	r3,0(r2)
 80075d4:	b0c00015 	stw	r3,0(r22)
 80075d8:	15800015 	stw	r22,0(r2)
 80075dc:	802d883a 	mov	r22,r16
 80075e0:	003fd606 	br	800753c <__multadd+0x9c>

080075e4 <__s2b>:
 80075e4:	defff904 	addi	sp,sp,-28
 80075e8:	dd000415 	stw	r20,16(sp)
 80075ec:	dc400115 	stw	r17,4(sp)
 80075f0:	2829883a 	mov	r20,r5
 80075f4:	2023883a 	mov	r17,r4
 80075f8:	01400244 	movi	r5,9
 80075fc:	39000204 	addi	r4,r7,8
 8007600:	dcc00315 	stw	r19,12(sp)
 8007604:	dc800215 	stw	r18,8(sp)
 8007608:	dfc00615 	stw	ra,24(sp)
 800760c:	dd400515 	stw	r21,20(sp)
 8007610:	dc000015 	stw	r16,0(sp)
 8007614:	3825883a 	mov	r18,r7
 8007618:	3027883a 	mov	r19,r6
 800761c:	800ab9c0 	call	800ab9c <__divsi3>
 8007620:	00c00044 	movi	r3,1
 8007624:	000b883a 	mov	r5,zero
 8007628:	1880030e 	bge	r3,r2,8007638 <__s2b+0x54>
 800762c:	18c7883a 	add	r3,r3,r3
 8007630:	29400044 	addi	r5,r5,1
 8007634:	18bffd16 	blt	r3,r2,800762c <__s2b+0x48>
 8007638:	8809883a 	mov	r4,r17
 800763c:	80073d00 	call	80073d0 <_Balloc>
 8007640:	d8c00717 	ldw	r3,28(sp)
 8007644:	10c00515 	stw	r3,20(r2)
 8007648:	00c00044 	movi	r3,1
 800764c:	10c00415 	stw	r3,16(r2)
 8007650:	00c00244 	movi	r3,9
 8007654:	1cc0210e 	bge	r3,r19,80076dc <__s2b+0xf8>
 8007658:	a0eb883a 	add	r21,r20,r3
 800765c:	a821883a 	mov	r16,r21
 8007660:	a4e9883a 	add	r20,r20,r19
 8007664:	81c00007 	ldb	r7,0(r16)
 8007668:	8809883a 	mov	r4,r17
 800766c:	84000044 	addi	r16,r16,1
 8007670:	100b883a 	mov	r5,r2
 8007674:	01800284 	movi	r6,10
 8007678:	39fff404 	addi	r7,r7,-48
 800767c:	80074a00 	call	80074a0 <__multadd>
 8007680:	853ff81e 	bne	r16,r20,8007664 <__s2b+0x80>
 8007684:	ace1883a 	add	r16,r21,r19
 8007688:	843ffe04 	addi	r16,r16,-8
 800768c:	9c800a0e 	bge	r19,r18,80076b8 <__s2b+0xd4>
 8007690:	94e5c83a 	sub	r18,r18,r19
 8007694:	84a5883a 	add	r18,r16,r18
 8007698:	81c00007 	ldb	r7,0(r16)
 800769c:	8809883a 	mov	r4,r17
 80076a0:	84000044 	addi	r16,r16,1
 80076a4:	100b883a 	mov	r5,r2
 80076a8:	01800284 	movi	r6,10
 80076ac:	39fff404 	addi	r7,r7,-48
 80076b0:	80074a00 	call	80074a0 <__multadd>
 80076b4:	84bff81e 	bne	r16,r18,8007698 <__s2b+0xb4>
 80076b8:	dfc00617 	ldw	ra,24(sp)
 80076bc:	dd400517 	ldw	r21,20(sp)
 80076c0:	dd000417 	ldw	r20,16(sp)
 80076c4:	dcc00317 	ldw	r19,12(sp)
 80076c8:	dc800217 	ldw	r18,8(sp)
 80076cc:	dc400117 	ldw	r17,4(sp)
 80076d0:	dc000017 	ldw	r16,0(sp)
 80076d4:	dec00704 	addi	sp,sp,28
 80076d8:	f800283a 	ret
 80076dc:	a4000284 	addi	r16,r20,10
 80076e0:	1827883a 	mov	r19,r3
 80076e4:	003fe906 	br	800768c <__s2b+0xa8>

080076e8 <__hi0bits>:
 80076e8:	20bfffec 	andhi	r2,r4,65535
 80076ec:	1000141e 	bne	r2,zero,8007740 <__hi0bits+0x58>
 80076f0:	2008943a 	slli	r4,r4,16
 80076f4:	00800404 	movi	r2,16
 80076f8:	20ffc02c 	andhi	r3,r4,65280
 80076fc:	1800021e 	bne	r3,zero,8007708 <__hi0bits+0x20>
 8007700:	2008923a 	slli	r4,r4,8
 8007704:	10800204 	addi	r2,r2,8
 8007708:	20fc002c 	andhi	r3,r4,61440
 800770c:	1800021e 	bne	r3,zero,8007718 <__hi0bits+0x30>
 8007710:	2008913a 	slli	r4,r4,4
 8007714:	10800104 	addi	r2,r2,4
 8007718:	20f0002c 	andhi	r3,r4,49152
 800771c:	1800031e 	bne	r3,zero,800772c <__hi0bits+0x44>
 8007720:	2109883a 	add	r4,r4,r4
 8007724:	10800084 	addi	r2,r2,2
 8007728:	2109883a 	add	r4,r4,r4
 800772c:	20000316 	blt	r4,zero,800773c <__hi0bits+0x54>
 8007730:	2110002c 	andhi	r4,r4,16384
 8007734:	2000041e 	bne	r4,zero,8007748 <__hi0bits+0x60>
 8007738:	00800804 	movi	r2,32
 800773c:	f800283a 	ret
 8007740:	0005883a 	mov	r2,zero
 8007744:	003fec06 	br	80076f8 <__hi0bits+0x10>
 8007748:	10800044 	addi	r2,r2,1
 800774c:	f800283a 	ret

08007750 <__lo0bits>:
 8007750:	20c00017 	ldw	r3,0(r4)
 8007754:	188001cc 	andi	r2,r3,7
 8007758:	10000826 	beq	r2,zero,800777c <__lo0bits+0x2c>
 800775c:	1880004c 	andi	r2,r3,1
 8007760:	1000211e 	bne	r2,zero,80077e8 <__lo0bits+0x98>
 8007764:	1880008c 	andi	r2,r3,2
 8007768:	1000211e 	bne	r2,zero,80077f0 <__lo0bits+0xa0>
 800776c:	1806d0ba 	srli	r3,r3,2
 8007770:	00800084 	movi	r2,2
 8007774:	20c00015 	stw	r3,0(r4)
 8007778:	f800283a 	ret
 800777c:	18bfffcc 	andi	r2,r3,65535
 8007780:	10001326 	beq	r2,zero,80077d0 <__lo0bits+0x80>
 8007784:	0005883a 	mov	r2,zero
 8007788:	19403fcc 	andi	r5,r3,255
 800778c:	2800021e 	bne	r5,zero,8007798 <__lo0bits+0x48>
 8007790:	1806d23a 	srli	r3,r3,8
 8007794:	10800204 	addi	r2,r2,8
 8007798:	194003cc 	andi	r5,r3,15
 800779c:	2800021e 	bne	r5,zero,80077a8 <__lo0bits+0x58>
 80077a0:	1806d13a 	srli	r3,r3,4
 80077a4:	10800104 	addi	r2,r2,4
 80077a8:	194000cc 	andi	r5,r3,3
 80077ac:	2800021e 	bne	r5,zero,80077b8 <__lo0bits+0x68>
 80077b0:	1806d0ba 	srli	r3,r3,2
 80077b4:	10800084 	addi	r2,r2,2
 80077b8:	1940004c 	andi	r5,r3,1
 80077bc:	2800081e 	bne	r5,zero,80077e0 <__lo0bits+0x90>
 80077c0:	1806d07a 	srli	r3,r3,1
 80077c4:	1800051e 	bne	r3,zero,80077dc <__lo0bits+0x8c>
 80077c8:	00800804 	movi	r2,32
 80077cc:	f800283a 	ret
 80077d0:	1806d43a 	srli	r3,r3,16
 80077d4:	00800404 	movi	r2,16
 80077d8:	003feb06 	br	8007788 <__lo0bits+0x38>
 80077dc:	10800044 	addi	r2,r2,1
 80077e0:	20c00015 	stw	r3,0(r4)
 80077e4:	f800283a 	ret
 80077e8:	0005883a 	mov	r2,zero
 80077ec:	f800283a 	ret
 80077f0:	1806d07a 	srli	r3,r3,1
 80077f4:	00800044 	movi	r2,1
 80077f8:	20c00015 	stw	r3,0(r4)
 80077fc:	f800283a 	ret

08007800 <__i2b>:
 8007800:	defffd04 	addi	sp,sp,-12
 8007804:	dc000015 	stw	r16,0(sp)
 8007808:	04000044 	movi	r16,1
 800780c:	dc400115 	stw	r17,4(sp)
 8007810:	2823883a 	mov	r17,r5
 8007814:	800b883a 	mov	r5,r16
 8007818:	dfc00215 	stw	ra,8(sp)
 800781c:	80073d00 	call	80073d0 <_Balloc>
 8007820:	14400515 	stw	r17,20(r2)
 8007824:	14000415 	stw	r16,16(r2)
 8007828:	dfc00217 	ldw	ra,8(sp)
 800782c:	dc400117 	ldw	r17,4(sp)
 8007830:	dc000017 	ldw	r16,0(sp)
 8007834:	dec00304 	addi	sp,sp,12
 8007838:	f800283a 	ret

0800783c <__multiply>:
 800783c:	defff004 	addi	sp,sp,-64
 8007840:	dc800815 	stw	r18,32(sp)
 8007844:	dc400715 	stw	r17,28(sp)
 8007848:	34800417 	ldw	r18,16(r6)
 800784c:	2c400417 	ldw	r17,16(r5)
 8007850:	ddc00d15 	stw	r23,52(sp)
 8007854:	dc000615 	stw	r16,24(sp)
 8007858:	dfc00f15 	stw	ra,60(sp)
 800785c:	df000e15 	stw	fp,56(sp)
 8007860:	dd800c15 	stw	r22,48(sp)
 8007864:	dd400b15 	stw	r21,44(sp)
 8007868:	dd000a15 	stw	r20,40(sp)
 800786c:	dcc00915 	stw	r19,36(sp)
 8007870:	2821883a 	mov	r16,r5
 8007874:	302f883a 	mov	r23,r6
 8007878:	8c80050e 	bge	r17,r18,8007890 <__multiply+0x54>
 800787c:	8807883a 	mov	r3,r17
 8007880:	3021883a 	mov	r16,r6
 8007884:	9023883a 	mov	r17,r18
 8007888:	282f883a 	mov	r23,r5
 800788c:	1825883a 	mov	r18,r3
 8007890:	80800217 	ldw	r2,8(r16)
 8007894:	8c87883a 	add	r3,r17,r18
 8007898:	d8c00115 	stw	r3,4(sp)
 800789c:	81400117 	ldw	r5,4(r16)
 80078a0:	10c0010e 	bge	r2,r3,80078a8 <__multiply+0x6c>
 80078a4:	29400044 	addi	r5,r5,1
 80078a8:	80073d00 	call	80073d0 <_Balloc>
 80078ac:	d8c00117 	ldw	r3,4(sp)
 80078b0:	d8800515 	stw	r2,20(sp)
 80078b4:	14c00504 	addi	r19,r2,20
 80078b8:	1d400144 	addi	r21,r3,5
 80078bc:	ad6b883a 	add	r21,r21,r21
 80078c0:	ad6b883a 	add	r21,r21,r21
 80078c4:	156b883a 	add	r21,r2,r21
 80078c8:	dd400215 	stw	r21,8(sp)
 80078cc:	9805883a 	mov	r2,r19
 80078d0:	9d40042e 	bgeu	r19,r21,80078e4 <__multiply+0xa8>
 80078d4:	d8c00217 	ldw	r3,8(sp)
 80078d8:	10000015 	stw	zero,0(r2)
 80078dc:	10800104 	addi	r2,r2,4
 80078e0:	10fffc36 	bltu	r2,r3,80078d4 <__multiply+0x98>
 80078e4:	94800144 	addi	r18,r18,5
 80078e8:	94a5883a 	add	r18,r18,r18
 80078ec:	94ad883a 	add	r22,r18,r18
 80078f0:	8c400144 	addi	r17,r17,5
 80078f4:	8c63883a 	add	r17,r17,r17
 80078f8:	bdad883a 	add	r22,r23,r22
 80078fc:	80c00504 	addi	r3,r16,20
 8007900:	8c63883a 	add	r17,r17,r17
 8007904:	bc800504 	addi	r18,r23,20
 8007908:	dd800315 	stw	r22,12(sp)
 800790c:	d8c00415 	stw	r3,16(sp)
 8007910:	dcc00015 	stw	r19,0(sp)
 8007914:	8463883a 	add	r17,r16,r17
 8007918:	9580412e 	bgeu	r18,r22,8007a20 <__multiply+0x1e4>
 800791c:	90800017 	ldw	r2,0(r18)
 8007920:	173fffcc 	andi	fp,r2,65535
 8007924:	e0001a26 	beq	fp,zero,8007990 <__multiply+0x154>
 8007928:	dd000017 	ldw	r20,0(sp)
 800792c:	dd800417 	ldw	r22,16(sp)
 8007930:	002b883a 	mov	r21,zero
 8007934:	b4c00017 	ldw	r19,0(r22)
 8007938:	a4000017 	ldw	r16,0(r20)
 800793c:	e00b883a 	mov	r5,fp
 8007940:	993fffcc 	andi	r4,r19,65535
 8007944:	8001bbc0 	call	8001bbc <__mulsi3>
 8007948:	9808d43a 	srli	r4,r19,16
 800794c:	817fffcc 	andi	r5,r16,65535
 8007950:	1145883a 	add	r2,r2,r5
 8007954:	e00b883a 	mov	r5,fp
 8007958:	1567883a 	add	r19,r2,r21
 800795c:	8020d43a 	srli	r16,r16,16
 8007960:	8001bbc0 	call	8001bbc <__mulsi3>
 8007964:	9808d43a 	srli	r4,r19,16
 8007968:	1405883a 	add	r2,r2,r16
 800796c:	a4c0000d 	sth	r19,0(r20)
 8007970:	110f883a 	add	r7,r2,r4
 8007974:	a1c0008d 	sth	r7,2(r20)
 8007978:	b5800104 	addi	r22,r22,4
 800797c:	382ad43a 	srli	r21,r7,16
 8007980:	a5000104 	addi	r20,r20,4
 8007984:	b47feb36 	bltu	r22,r17,8007934 <__multiply+0xf8>
 8007988:	a5400015 	stw	r21,0(r20)
 800798c:	90800017 	ldw	r2,0(r18)
 8007990:	1038d43a 	srli	fp,r2,16
 8007994:	e0001c26 	beq	fp,zero,8007a08 <__multiply+0x1cc>
 8007998:	d8c00017 	ldw	r3,0(sp)
 800799c:	dd000417 	ldw	r20,16(sp)
 80079a0:	002b883a 	mov	r21,zero
 80079a4:	1d800017 	ldw	r22,0(r3)
 80079a8:	182f883a 	mov	r23,r3
 80079ac:	b021883a 	mov	r16,r22
 80079b0:	a4c00017 	ldw	r19,0(r20)
 80079b4:	8020d43a 	srli	r16,r16,16
 80079b8:	e00b883a 	mov	r5,fp
 80079bc:	993fffcc 	andi	r4,r19,65535
 80079c0:	8001bbc0 	call	8001bbc <__mulsi3>
 80079c4:	1405883a 	add	r2,r2,r16
 80079c8:	9808d43a 	srli	r4,r19,16
 80079cc:	156b883a 	add	r21,r2,r21
 80079d0:	bdc00104 	addi	r23,r23,4
 80079d4:	bdbfff0d 	sth	r22,-4(r23)
 80079d8:	bd7fff8d 	sth	r21,-2(r23)
 80079dc:	bc000017 	ldw	r16,0(r23)
 80079e0:	e00b883a 	mov	r5,fp
 80079e4:	8001bbc0 	call	8001bbc <__mulsi3>
 80079e8:	a80ed43a 	srli	r7,r21,16
 80079ec:	813fffcc 	andi	r4,r16,65535
 80079f0:	2085883a 	add	r2,r4,r2
 80079f4:	11ed883a 	add	r22,r2,r7
 80079f8:	a5000104 	addi	r20,r20,4
 80079fc:	b02ad43a 	srli	r21,r22,16
 8007a00:	a47feb36 	bltu	r20,r17,80079b0 <__multiply+0x174>
 8007a04:	bd800015 	stw	r22,0(r23)
 8007a08:	d8c00017 	ldw	r3,0(sp)
 8007a0c:	94800104 	addi	r18,r18,4
 8007a10:	18c00104 	addi	r3,r3,4
 8007a14:	d8c00015 	stw	r3,0(sp)
 8007a18:	d8c00317 	ldw	r3,12(sp)
 8007a1c:	90ffbf36 	bltu	r18,r3,800791c <__multiply+0xe0>
 8007a20:	d8c00117 	ldw	r3,4(sp)
 8007a24:	00c00c0e 	bge	zero,r3,8007a58 <__multiply+0x21c>
 8007a28:	d8c00217 	ldw	r3,8(sp)
 8007a2c:	18bfff17 	ldw	r2,-4(r3)
 8007a30:	1d7fff04 	addi	r21,r3,-4
 8007a34:	10000326 	beq	r2,zero,8007a44 <__multiply+0x208>
 8007a38:	00000706 	br	8007a58 <__multiply+0x21c>
 8007a3c:	a8800017 	ldw	r2,0(r21)
 8007a40:	1000051e 	bne	r2,zero,8007a58 <__multiply+0x21c>
 8007a44:	d8c00117 	ldw	r3,4(sp)
 8007a48:	ad7fff04 	addi	r21,r21,-4
 8007a4c:	18ffffc4 	addi	r3,r3,-1
 8007a50:	d8c00115 	stw	r3,4(sp)
 8007a54:	183ff91e 	bne	r3,zero,8007a3c <__multiply+0x200>
 8007a58:	d8800517 	ldw	r2,20(sp)
 8007a5c:	d8c00117 	ldw	r3,4(sp)
 8007a60:	10c00415 	stw	r3,16(r2)
 8007a64:	dfc00f17 	ldw	ra,60(sp)
 8007a68:	df000e17 	ldw	fp,56(sp)
 8007a6c:	ddc00d17 	ldw	r23,52(sp)
 8007a70:	dd800c17 	ldw	r22,48(sp)
 8007a74:	dd400b17 	ldw	r21,44(sp)
 8007a78:	dd000a17 	ldw	r20,40(sp)
 8007a7c:	dcc00917 	ldw	r19,36(sp)
 8007a80:	dc800817 	ldw	r18,32(sp)
 8007a84:	dc400717 	ldw	r17,28(sp)
 8007a88:	dc000617 	ldw	r16,24(sp)
 8007a8c:	dec01004 	addi	sp,sp,64
 8007a90:	f800283a 	ret

08007a94 <__pow5mult>:
 8007a94:	defffb04 	addi	sp,sp,-20
 8007a98:	dcc00315 	stw	r19,12(sp)
 8007a9c:	dc800215 	stw	r18,8(sp)
 8007aa0:	dc000015 	stw	r16,0(sp)
 8007aa4:	dfc00415 	stw	ra,16(sp)
 8007aa8:	dc400115 	stw	r17,4(sp)
 8007aac:	308000cc 	andi	r2,r6,3
 8007ab0:	3021883a 	mov	r16,r6
 8007ab4:	2027883a 	mov	r19,r4
 8007ab8:	2825883a 	mov	r18,r5
 8007abc:	10002e1e 	bne	r2,zero,8007b78 <__pow5mult+0xe4>
 8007ac0:	8021d0ba 	srai	r16,r16,2
 8007ac4:	80001a26 	beq	r16,zero,8007b30 <__pow5mult+0x9c>
 8007ac8:	9c401217 	ldw	r17,72(r19)
 8007acc:	8800061e 	bne	r17,zero,8007ae8 <__pow5mult+0x54>
 8007ad0:	00003406 	br	8007ba4 <__pow5mult+0x110>
 8007ad4:	8021d07a 	srai	r16,r16,1
 8007ad8:	80001526 	beq	r16,zero,8007b30 <__pow5mult+0x9c>
 8007adc:	88c00017 	ldw	r3,0(r17)
 8007ae0:	18001b26 	beq	r3,zero,8007b50 <__pow5mult+0xbc>
 8007ae4:	1823883a 	mov	r17,r3
 8007ae8:	80c0004c 	andi	r3,r16,1
 8007aec:	183ff926 	beq	r3,zero,8007ad4 <__pow5mult+0x40>
 8007af0:	900b883a 	mov	r5,r18
 8007af4:	880d883a 	mov	r6,r17
 8007af8:	9809883a 	mov	r4,r19
 8007afc:	800783c0 	call	800783c <__multiply>
 8007b00:	90001b26 	beq	r18,zero,8007b70 <__pow5mult+0xdc>
 8007b04:	91000117 	ldw	r4,4(r18)
 8007b08:	98c01317 	ldw	r3,76(r19)
 8007b0c:	8021d07a 	srai	r16,r16,1
 8007b10:	2109883a 	add	r4,r4,r4
 8007b14:	2109883a 	add	r4,r4,r4
 8007b18:	1907883a 	add	r3,r3,r4
 8007b1c:	19000017 	ldw	r4,0(r3)
 8007b20:	91000015 	stw	r4,0(r18)
 8007b24:	1c800015 	stw	r18,0(r3)
 8007b28:	1025883a 	mov	r18,r2
 8007b2c:	803feb1e 	bne	r16,zero,8007adc <__pow5mult+0x48>
 8007b30:	9005883a 	mov	r2,r18
 8007b34:	dfc00417 	ldw	ra,16(sp)
 8007b38:	dcc00317 	ldw	r19,12(sp)
 8007b3c:	dc800217 	ldw	r18,8(sp)
 8007b40:	dc400117 	ldw	r17,4(sp)
 8007b44:	dc000017 	ldw	r16,0(sp)
 8007b48:	dec00504 	addi	sp,sp,20
 8007b4c:	f800283a 	ret
 8007b50:	880b883a 	mov	r5,r17
 8007b54:	880d883a 	mov	r6,r17
 8007b58:	9809883a 	mov	r4,r19
 8007b5c:	800783c0 	call	800783c <__multiply>
 8007b60:	88800015 	stw	r2,0(r17)
 8007b64:	10000015 	stw	zero,0(r2)
 8007b68:	1023883a 	mov	r17,r2
 8007b6c:	003fde06 	br	8007ae8 <__pow5mult+0x54>
 8007b70:	1025883a 	mov	r18,r2
 8007b74:	003fd706 	br	8007ad4 <__pow5mult+0x40>
 8007b78:	10bfffc4 	addi	r2,r2,-1
 8007b7c:	1085883a 	add	r2,r2,r2
 8007b80:	00c20074 	movhi	r3,2049
 8007b84:	18f79404 	addi	r3,r3,-8624
 8007b88:	1085883a 	add	r2,r2,r2
 8007b8c:	1885883a 	add	r2,r3,r2
 8007b90:	11800017 	ldw	r6,0(r2)
 8007b94:	000f883a 	mov	r7,zero
 8007b98:	80074a00 	call	80074a0 <__multadd>
 8007b9c:	1025883a 	mov	r18,r2
 8007ba0:	003fc706 	br	8007ac0 <__pow5mult+0x2c>
 8007ba4:	9809883a 	mov	r4,r19
 8007ba8:	01409c44 	movi	r5,625
 8007bac:	80078000 	call	8007800 <__i2b>
 8007bb0:	98801215 	stw	r2,72(r19)
 8007bb4:	1023883a 	mov	r17,r2
 8007bb8:	10000015 	stw	zero,0(r2)
 8007bbc:	003fca06 	br	8007ae8 <__pow5mult+0x54>

08007bc0 <__lshift>:
 8007bc0:	defff904 	addi	sp,sp,-28
 8007bc4:	dd400515 	stw	r21,20(sp)
 8007bc8:	dc400115 	stw	r17,4(sp)
 8007bcc:	2d400417 	ldw	r21,16(r5)
 8007bd0:	3023d17a 	srai	r17,r6,5
 8007bd4:	28800217 	ldw	r2,8(r5)
 8007bd8:	dd000415 	stw	r20,16(sp)
 8007bdc:	8d6b883a 	add	r21,r17,r21
 8007be0:	dcc00315 	stw	r19,12(sp)
 8007be4:	dc800215 	stw	r18,8(sp)
 8007be8:	dc000015 	stw	r16,0(sp)
 8007bec:	dfc00615 	stw	ra,24(sp)
 8007bf0:	ac000044 	addi	r16,r21,1
 8007bf4:	2825883a 	mov	r18,r5
 8007bf8:	3029883a 	mov	r20,r6
 8007bfc:	2027883a 	mov	r19,r4
 8007c00:	29400117 	ldw	r5,4(r5)
 8007c04:	1400030e 	bge	r2,r16,8007c14 <__lshift+0x54>
 8007c08:	1085883a 	add	r2,r2,r2
 8007c0c:	29400044 	addi	r5,r5,1
 8007c10:	143ffd16 	blt	r2,r16,8007c08 <__lshift+0x48>
 8007c14:	9809883a 	mov	r4,r19
 8007c18:	80073d00 	call	80073d0 <_Balloc>
 8007c1c:	10c00504 	addi	r3,r2,20
 8007c20:	0440090e 	bge	zero,r17,8007c48 <__lshift+0x88>
 8007c24:	000f883a 	mov	r7,zero
 8007c28:	18000015 	stw	zero,0(r3)
 8007c2c:	39c00044 	addi	r7,r7,1
 8007c30:	18c00104 	addi	r3,r3,4
 8007c34:	3c7ffc1e 	bne	r7,r17,8007c28 <__lshift+0x68>
 8007c38:	38c00144 	addi	r3,r7,5
 8007c3c:	18c7883a 	add	r3,r3,r3
 8007c40:	18c7883a 	add	r3,r3,r3
 8007c44:	10c7883a 	add	r3,r2,r3
 8007c48:	92000417 	ldw	r8,16(r18)
 8007c4c:	a18007cc 	andi	r6,r20,31
 8007c50:	91c00504 	addi	r7,r18,20
 8007c54:	42000144 	addi	r8,r8,5
 8007c58:	4211883a 	add	r8,r8,r8
 8007c5c:	4211883a 	add	r8,r8,r8
 8007c60:	9211883a 	add	r8,r18,r8
 8007c64:	30002226 	beq	r6,zero,8007cf0 <__lshift+0x130>
 8007c68:	02800804 	movi	r10,32
 8007c6c:	5195c83a 	sub	r10,r10,r6
 8007c70:	000b883a 	mov	r5,zero
 8007c74:	3a400017 	ldw	r9,0(r7)
 8007c78:	18c00104 	addi	r3,r3,4
 8007c7c:	39c00104 	addi	r7,r7,4
 8007c80:	4992983a 	sll	r9,r9,r6
 8007c84:	2a4ab03a 	or	r5,r5,r9
 8007c88:	197fff15 	stw	r5,-4(r3)
 8007c8c:	397fff17 	ldw	r5,-4(r7)
 8007c90:	2a8ad83a 	srl	r5,r5,r10
 8007c94:	3a3ff736 	bltu	r7,r8,8007c74 <__lshift+0xb4>
 8007c98:	19400015 	stw	r5,0(r3)
 8007c9c:	28000126 	beq	r5,zero,8007ca4 <__lshift+0xe4>
 8007ca0:	ac000084 	addi	r16,r21,2
 8007ca4:	91000117 	ldw	r4,4(r18)
 8007ca8:	98c01317 	ldw	r3,76(r19)
 8007cac:	843fffc4 	addi	r16,r16,-1
 8007cb0:	2109883a 	add	r4,r4,r4
 8007cb4:	2109883a 	add	r4,r4,r4
 8007cb8:	1907883a 	add	r3,r3,r4
 8007cbc:	19000017 	ldw	r4,0(r3)
 8007cc0:	14000415 	stw	r16,16(r2)
 8007cc4:	91000015 	stw	r4,0(r18)
 8007cc8:	1c800015 	stw	r18,0(r3)
 8007ccc:	dfc00617 	ldw	ra,24(sp)
 8007cd0:	dd400517 	ldw	r21,20(sp)
 8007cd4:	dd000417 	ldw	r20,16(sp)
 8007cd8:	dcc00317 	ldw	r19,12(sp)
 8007cdc:	dc800217 	ldw	r18,8(sp)
 8007ce0:	dc400117 	ldw	r17,4(sp)
 8007ce4:	dc000017 	ldw	r16,0(sp)
 8007ce8:	dec00704 	addi	sp,sp,28
 8007cec:	f800283a 	ret
 8007cf0:	39400017 	ldw	r5,0(r7)
 8007cf4:	18c00104 	addi	r3,r3,4
 8007cf8:	39c00104 	addi	r7,r7,4
 8007cfc:	197fff15 	stw	r5,-4(r3)
 8007d00:	3a3fe82e 	bgeu	r7,r8,8007ca4 <__lshift+0xe4>
 8007d04:	39400017 	ldw	r5,0(r7)
 8007d08:	18c00104 	addi	r3,r3,4
 8007d0c:	39c00104 	addi	r7,r7,4
 8007d10:	197fff15 	stw	r5,-4(r3)
 8007d14:	3a3ff636 	bltu	r7,r8,8007cf0 <__lshift+0x130>
 8007d18:	003fe206 	br	8007ca4 <__lshift+0xe4>

08007d1c <__mcmp>:
 8007d1c:	20800417 	ldw	r2,16(r4)
 8007d20:	28c00417 	ldw	r3,16(r5)
 8007d24:	10c5c83a 	sub	r2,r2,r3
 8007d28:	10000f1e 	bne	r2,zero,8007d68 <__mcmp+0x4c>
 8007d2c:	18c00144 	addi	r3,r3,5
 8007d30:	18c7883a 	add	r3,r3,r3
 8007d34:	18c7883a 	add	r3,r3,r3
 8007d38:	21c00504 	addi	r7,r4,20
 8007d3c:	28cb883a 	add	r5,r5,r3
 8007d40:	20c9883a 	add	r4,r4,r3
 8007d44:	213fff04 	addi	r4,r4,-4
 8007d48:	297fff04 	addi	r5,r5,-4
 8007d4c:	21800017 	ldw	r6,0(r4)
 8007d50:	28c00017 	ldw	r3,0(r5)
 8007d54:	30c0021e 	bne	r6,r3,8007d60 <__mcmp+0x44>
 8007d58:	393ffa36 	bltu	r7,r4,8007d44 <__mcmp+0x28>
 8007d5c:	f800283a 	ret
 8007d60:	30c00236 	bltu	r6,r3,8007d6c <__mcmp+0x50>
 8007d64:	00800044 	movi	r2,1
 8007d68:	f800283a 	ret
 8007d6c:	00bfffc4 	movi	r2,-1
 8007d70:	f800283a 	ret

08007d74 <__mdiff>:
 8007d74:	defffb04 	addi	sp,sp,-20
 8007d78:	dc000015 	stw	r16,0(sp)
 8007d7c:	2821883a 	mov	r16,r5
 8007d80:	dc800215 	stw	r18,8(sp)
 8007d84:	300b883a 	mov	r5,r6
 8007d88:	2025883a 	mov	r18,r4
 8007d8c:	8009883a 	mov	r4,r16
 8007d90:	dc400115 	stw	r17,4(sp)
 8007d94:	dfc00415 	stw	ra,16(sp)
 8007d98:	dcc00315 	stw	r19,12(sp)
 8007d9c:	3023883a 	mov	r17,r6
 8007da0:	8007d1c0 	call	8007d1c <__mcmp>
 8007da4:	10005026 	beq	r2,zero,8007ee8 <__mdiff+0x174>
 8007da8:	10004a16 	blt	r2,zero,8007ed4 <__mdiff+0x160>
 8007dac:	0027883a 	mov	r19,zero
 8007db0:	81400117 	ldw	r5,4(r16)
 8007db4:	9009883a 	mov	r4,r18
 8007db8:	80073d00 	call	80073d0 <_Balloc>
 8007dbc:	82400417 	ldw	r9,16(r16)
 8007dc0:	89800417 	ldw	r6,16(r17)
 8007dc4:	14c00315 	stw	r19,12(r2)
 8007dc8:	4b800144 	addi	r14,r9,5
 8007dcc:	31800144 	addi	r6,r6,5
 8007dd0:	739d883a 	add	r14,r14,r14
 8007dd4:	318d883a 	add	r6,r6,r6
 8007dd8:	739d883a 	add	r14,r14,r14
 8007ddc:	318d883a 	add	r6,r6,r6
 8007de0:	81c00504 	addi	r7,r16,20
 8007de4:	839d883a 	add	r14,r16,r14
 8007de8:	8a000504 	addi	r8,r17,20
 8007dec:	898d883a 	add	r6,r17,r6
 8007df0:	10c00504 	addi	r3,r2,20
 8007df4:	0009883a 	mov	r4,zero
 8007df8:	3b000017 	ldw	r12,0(r7)
 8007dfc:	42c00017 	ldw	r11,0(r8)
 8007e00:	42000104 	addi	r8,r8,4
 8007e04:	62bfffcc 	andi	r10,r12,65535
 8007e08:	5b7fffcc 	andi	r13,r11,65535
 8007e0c:	5109883a 	add	r4,r10,r4
 8007e10:	2355c83a 	sub	r10,r4,r13
 8007e14:	5816d43a 	srli	r11,r11,16
 8007e18:	6008d43a 	srli	r4,r12,16
 8007e1c:	501bd43a 	srai	r13,r10,16
 8007e20:	1a80000d 	sth	r10,0(r3)
 8007e24:	22c9c83a 	sub	r4,r4,r11
 8007e28:	2349883a 	add	r4,r4,r13
 8007e2c:	1900008d 	sth	r4,2(r3)
 8007e30:	39c00104 	addi	r7,r7,4
 8007e34:	2009d43a 	srai	r4,r4,16
 8007e38:	18c00104 	addi	r3,r3,4
 8007e3c:	41bfee36 	bltu	r8,r6,8007df8 <__mdiff+0x84>
 8007e40:	180b883a 	mov	r5,r3
 8007e44:	3815883a 	mov	r10,r7
 8007e48:	3b80132e 	bgeu	r7,r14,8007e98 <__mdiff+0x124>
 8007e4c:	3a000017 	ldw	r8,0(r7)
 8007e50:	18c00104 	addi	r3,r3,4
 8007e54:	39c00104 	addi	r7,r7,4
 8007e58:	41bfffcc 	andi	r6,r8,65535
 8007e5c:	310d883a 	add	r6,r6,r4
 8007e60:	3009d43a 	srai	r4,r6,16
 8007e64:	4010d43a 	srli	r8,r8,16
 8007e68:	19bfff0d 	sth	r6,-4(r3)
 8007e6c:	2209883a 	add	r4,r4,r8
 8007e70:	193fff8d 	sth	r4,-2(r3)
 8007e74:	2009d43a 	srai	r4,r4,16
 8007e78:	3bbff436 	bltu	r7,r14,8007e4c <__mdiff+0xd8>
 8007e7c:	0286303a 	nor	r3,zero,r10
 8007e80:	1b87883a 	add	r3,r3,r14
 8007e84:	1806d0ba 	srli	r3,r3,2
 8007e88:	18c00044 	addi	r3,r3,1
 8007e8c:	18c7883a 	add	r3,r3,r3
 8007e90:	18c7883a 	add	r3,r3,r3
 8007e94:	28c7883a 	add	r3,r5,r3
 8007e98:	193fff17 	ldw	r4,-4(r3)
 8007e9c:	18ffff04 	addi	r3,r3,-4
 8007ea0:	2000041e 	bne	r4,zero,8007eb4 <__mdiff+0x140>
 8007ea4:	18ffff04 	addi	r3,r3,-4
 8007ea8:	19000017 	ldw	r4,0(r3)
 8007eac:	4a7fffc4 	addi	r9,r9,-1
 8007eb0:	203ffc26 	beq	r4,zero,8007ea4 <__mdiff+0x130>
 8007eb4:	12400415 	stw	r9,16(r2)
 8007eb8:	dfc00417 	ldw	ra,16(sp)
 8007ebc:	dcc00317 	ldw	r19,12(sp)
 8007ec0:	dc800217 	ldw	r18,8(sp)
 8007ec4:	dc400117 	ldw	r17,4(sp)
 8007ec8:	dc000017 	ldw	r16,0(sp)
 8007ecc:	dec00504 	addi	sp,sp,20
 8007ed0:	f800283a 	ret
 8007ed4:	8005883a 	mov	r2,r16
 8007ed8:	04c00044 	movi	r19,1
 8007edc:	8821883a 	mov	r16,r17
 8007ee0:	1023883a 	mov	r17,r2
 8007ee4:	003fb206 	br	8007db0 <__mdiff+0x3c>
 8007ee8:	9009883a 	mov	r4,r18
 8007eec:	000b883a 	mov	r5,zero
 8007ef0:	80073d00 	call	80073d0 <_Balloc>
 8007ef4:	00c00044 	movi	r3,1
 8007ef8:	10c00415 	stw	r3,16(r2)
 8007efc:	10000515 	stw	zero,20(r2)
 8007f00:	dfc00417 	ldw	ra,16(sp)
 8007f04:	dcc00317 	ldw	r19,12(sp)
 8007f08:	dc800217 	ldw	r18,8(sp)
 8007f0c:	dc400117 	ldw	r17,4(sp)
 8007f10:	dc000017 	ldw	r16,0(sp)
 8007f14:	dec00504 	addi	sp,sp,20
 8007f18:	f800283a 	ret

08007f1c <__ulp>:
 8007f1c:	295ffc2c 	andhi	r5,r5,32752
 8007f20:	00bf3034 	movhi	r2,64704
 8007f24:	2887883a 	add	r3,r5,r2
 8007f28:	00c0020e 	bge	zero,r3,8007f34 <__ulp+0x18>
 8007f2c:	0005883a 	mov	r2,zero
 8007f30:	f800283a 	ret
 8007f34:	00c7c83a 	sub	r3,zero,r3
 8007f38:	1805d53a 	srai	r2,r3,20
 8007f3c:	00c004c4 	movi	r3,19
 8007f40:	18800a0e 	bge	r3,r2,8007f6c <__ulp+0x50>
 8007f44:	01000c84 	movi	r4,50
 8007f48:	0007883a 	mov	r3,zero
 8007f4c:	20800516 	blt	r4,r2,8007f64 <__ulp+0x48>
 8007f50:	01000cc4 	movi	r4,51
 8007f54:	2085c83a 	sub	r2,r4,r2
 8007f58:	01000044 	movi	r4,1
 8007f5c:	2084983a 	sll	r2,r4,r2
 8007f60:	f800283a 	ret
 8007f64:	00800044 	movi	r2,1
 8007f68:	f800283a 	ret
 8007f6c:	00c00234 	movhi	r3,8
 8007f70:	1887d83a 	sra	r3,r3,r2
 8007f74:	0005883a 	mov	r2,zero
 8007f78:	f800283a 	ret

08007f7c <__b2d>:
 8007f7c:	defffa04 	addi	sp,sp,-24
 8007f80:	dc000015 	stw	r16,0(sp)
 8007f84:	24000417 	ldw	r16,16(r4)
 8007f88:	dc400115 	stw	r17,4(sp)
 8007f8c:	dcc00315 	stw	r19,12(sp)
 8007f90:	84000144 	addi	r16,r16,5
 8007f94:	8421883a 	add	r16,r16,r16
 8007f98:	8421883a 	add	r16,r16,r16
 8007f9c:	2421883a 	add	r16,r4,r16
 8007fa0:	847fff17 	ldw	r17,-4(r16)
 8007fa4:	24c00504 	addi	r19,r4,20
 8007fa8:	dd000415 	stw	r20,16(sp)
 8007fac:	8809883a 	mov	r4,r17
 8007fb0:	dc800215 	stw	r18,8(sp)
 8007fb4:	2829883a 	mov	r20,r5
 8007fb8:	dfc00515 	stw	ra,20(sp)
 8007fbc:	80076e80 	call	80076e8 <__hi0bits>
 8007fc0:	00c00804 	movi	r3,32
 8007fc4:	1887c83a 	sub	r3,r3,r2
 8007fc8:	a0c00015 	stw	r3,0(r20)
 8007fcc:	00c00284 	movi	r3,10
 8007fd0:	84bfff04 	addi	r18,r16,-4
 8007fd4:	18801216 	blt	r3,r2,8008020 <__b2d+0xa4>
 8007fd8:	010002c4 	movi	r4,11
 8007fdc:	2089c83a 	sub	r4,r4,r2
 8007fe0:	8906d83a 	srl	r3,r17,r4
 8007fe4:	18cffc34 	orhi	r3,r3,16368
 8007fe8:	9c80322e 	bgeu	r19,r18,80080b4 <__b2d+0x138>
 8007fec:	817ffe17 	ldw	r5,-8(r16)
 8007ff0:	2908d83a 	srl	r4,r5,r4
 8007ff4:	10800544 	addi	r2,r2,21
 8007ff8:	88a2983a 	sll	r17,r17,r2
 8007ffc:	2444b03a 	or	r2,r4,r17
 8008000:	dfc00517 	ldw	ra,20(sp)
 8008004:	dd000417 	ldw	r20,16(sp)
 8008008:	dcc00317 	ldw	r19,12(sp)
 800800c:	dc800217 	ldw	r18,8(sp)
 8008010:	dc400117 	ldw	r17,4(sp)
 8008014:	dc000017 	ldw	r16,0(sp)
 8008018:	dec00604 	addi	sp,sp,24
 800801c:	f800283a 	ret
 8008020:	9c801636 	bltu	r19,r18,800807c <__b2d+0x100>
 8008024:	113ffd44 	addi	r4,r2,-11
 8008028:	000b883a 	mov	r5,zero
 800802c:	20001726 	beq	r4,zero,800808c <__b2d+0x110>
 8008030:	00c00ac4 	movi	r3,43
 8008034:	1885c83a 	sub	r2,r3,r2
 8008038:	8906983a 	sll	r3,r17,r4
 800803c:	288cd83a 	srl	r6,r5,r2
 8008040:	18cffc34 	orhi	r3,r3,16368
 8008044:	1986b03a 	or	r3,r3,r6
 8008048:	9c801c2e 	bgeu	r19,r18,80080bc <__b2d+0x140>
 800804c:	91bfff17 	ldw	r6,-4(r18)
 8008050:	3084d83a 	srl	r2,r6,r2
 8008054:	2908983a 	sll	r4,r5,r4
 8008058:	1104b03a 	or	r2,r2,r4
 800805c:	dfc00517 	ldw	ra,20(sp)
 8008060:	dd000417 	ldw	r20,16(sp)
 8008064:	dcc00317 	ldw	r19,12(sp)
 8008068:	dc800217 	ldw	r18,8(sp)
 800806c:	dc400117 	ldw	r17,4(sp)
 8008070:	dc000017 	ldw	r16,0(sp)
 8008074:	dec00604 	addi	sp,sp,24
 8008078:	f800283a 	ret
 800807c:	113ffd44 	addi	r4,r2,-11
 8008080:	84bffe04 	addi	r18,r16,-8
 8008084:	817ffe17 	ldw	r5,-8(r16)
 8008088:	203fe91e 	bne	r4,zero,8008030 <__b2d+0xb4>
 800808c:	88cffc34 	orhi	r3,r17,16368
 8008090:	2805883a 	mov	r2,r5
 8008094:	dfc00517 	ldw	ra,20(sp)
 8008098:	dd000417 	ldw	r20,16(sp)
 800809c:	dcc00317 	ldw	r19,12(sp)
 80080a0:	dc800217 	ldw	r18,8(sp)
 80080a4:	dc400117 	ldw	r17,4(sp)
 80080a8:	dc000017 	ldw	r16,0(sp)
 80080ac:	dec00604 	addi	sp,sp,24
 80080b0:	f800283a 	ret
 80080b4:	0009883a 	mov	r4,zero
 80080b8:	003fce06 	br	8007ff4 <__b2d+0x78>
 80080bc:	0005883a 	mov	r2,zero
 80080c0:	003fe406 	br	8008054 <__b2d+0xd8>

080080c4 <__d2b>:
 80080c4:	defff804 	addi	sp,sp,-32
 80080c8:	dc400315 	stw	r17,12(sp)
 80080cc:	3023883a 	mov	r17,r6
 80080d0:	dc800415 	stw	r18,16(sp)
 80080d4:	8824907a 	slli	r18,r17,1
 80080d8:	dcc00515 	stw	r19,20(sp)
 80080dc:	2827883a 	mov	r19,r5
 80080e0:	9024d57a 	srli	r18,r18,21
 80080e4:	01400044 	movi	r5,1
 80080e8:	dd000615 	stw	r20,24(sp)
 80080ec:	dc000215 	stw	r16,8(sp)
 80080f0:	dfc00715 	stw	ra,28(sp)
 80080f4:	3829883a 	mov	r20,r7
 80080f8:	80073d00 	call	80073d0 <_Balloc>
 80080fc:	1021883a 	mov	r16,r2
 8008100:	00800434 	movhi	r2,16
 8008104:	10bfffc4 	addi	r2,r2,-1
 8008108:	88a2703a 	and	r17,r17,r2
 800810c:	90000126 	beq	r18,zero,8008114 <__d2b+0x50>
 8008110:	8c400434 	orhi	r17,r17,16
 8008114:	dc400015 	stw	r17,0(sp)
 8008118:	98002226 	beq	r19,zero,80081a4 <__d2b+0xe0>
 800811c:	d9000104 	addi	r4,sp,4
 8008120:	dcc00115 	stw	r19,4(sp)
 8008124:	80077500 	call	8007750 <__lo0bits>
 8008128:	d8c00017 	ldw	r3,0(sp)
 800812c:	10002d1e 	bne	r2,zero,80081e4 <__d2b+0x120>
 8008130:	d9000117 	ldw	r4,4(sp)
 8008134:	81000515 	stw	r4,20(r16)
 8008138:	1823003a 	cmpeq	r17,r3,zero
 800813c:	01000084 	movi	r4,2
 8008140:	2463c83a 	sub	r17,r4,r17
 8008144:	80c00615 	stw	r3,24(r16)
 8008148:	84400415 	stw	r17,16(r16)
 800814c:	90001d1e 	bne	r18,zero,80081c4 <__d2b+0x100>
 8008150:	88c00104 	addi	r3,r17,4
 8008154:	18c7883a 	add	r3,r3,r3
 8008158:	18c7883a 	add	r3,r3,r3
 800815c:	80c7883a 	add	r3,r16,r3
 8008160:	19000017 	ldw	r4,0(r3)
 8008164:	10bef384 	addi	r2,r2,-1074
 8008168:	a0800015 	stw	r2,0(r20)
 800816c:	80076e80 	call	80076e8 <__hi0bits>
 8008170:	8822917a 	slli	r17,r17,5
 8008174:	d8c00817 	ldw	r3,32(sp)
 8008178:	8885c83a 	sub	r2,r17,r2
 800817c:	18800015 	stw	r2,0(r3)
 8008180:	8005883a 	mov	r2,r16
 8008184:	dfc00717 	ldw	ra,28(sp)
 8008188:	dd000617 	ldw	r20,24(sp)
 800818c:	dcc00517 	ldw	r19,20(sp)
 8008190:	dc800417 	ldw	r18,16(sp)
 8008194:	dc400317 	ldw	r17,12(sp)
 8008198:	dc000217 	ldw	r16,8(sp)
 800819c:	dec00804 	addi	sp,sp,32
 80081a0:	f800283a 	ret
 80081a4:	d809883a 	mov	r4,sp
 80081a8:	80077500 	call	8007750 <__lo0bits>
 80081ac:	d8c00017 	ldw	r3,0(sp)
 80081b0:	04400044 	movi	r17,1
 80081b4:	84400415 	stw	r17,16(r16)
 80081b8:	80c00515 	stw	r3,20(r16)
 80081bc:	10800804 	addi	r2,r2,32
 80081c0:	903fe326 	beq	r18,zero,8008150 <__d2b+0x8c>
 80081c4:	00c00d44 	movi	r3,53
 80081c8:	94bef344 	addi	r18,r18,-1075
 80081cc:	90a5883a 	add	r18,r18,r2
 80081d0:	1885c83a 	sub	r2,r3,r2
 80081d4:	d8c00817 	ldw	r3,32(sp)
 80081d8:	a4800015 	stw	r18,0(r20)
 80081dc:	18800015 	stw	r2,0(r3)
 80081e0:	003fe706 	br	8008180 <__d2b+0xbc>
 80081e4:	01000804 	movi	r4,32
 80081e8:	2089c83a 	sub	r4,r4,r2
 80081ec:	1908983a 	sll	r4,r3,r4
 80081f0:	d9400117 	ldw	r5,4(sp)
 80081f4:	1886d83a 	srl	r3,r3,r2
 80081f8:	2148b03a 	or	r4,r4,r5
 80081fc:	81000515 	stw	r4,20(r16)
 8008200:	d8c00015 	stw	r3,0(sp)
 8008204:	003fcc06 	br	8008138 <__d2b+0x74>

08008208 <__ratio>:
 8008208:	defff904 	addi	sp,sp,-28
 800820c:	dc400315 	stw	r17,12(sp)
 8008210:	2823883a 	mov	r17,r5
 8008214:	d9400104 	addi	r5,sp,4
 8008218:	dfc00615 	stw	ra,24(sp)
 800821c:	dcc00515 	stw	r19,20(sp)
 8008220:	dc800415 	stw	r18,16(sp)
 8008224:	2027883a 	mov	r19,r4
 8008228:	dc000215 	stw	r16,8(sp)
 800822c:	8007f7c0 	call	8007f7c <__b2d>
 8008230:	8809883a 	mov	r4,r17
 8008234:	d80b883a 	mov	r5,sp
 8008238:	1025883a 	mov	r18,r2
 800823c:	1821883a 	mov	r16,r3
 8008240:	8007f7c0 	call	8007f7c <__b2d>
 8008244:	99400417 	ldw	r5,16(r19)
 8008248:	89000417 	ldw	r4,16(r17)
 800824c:	d9800117 	ldw	r6,4(sp)
 8008250:	2909c83a 	sub	r4,r5,r4
 8008254:	d9400017 	ldw	r5,0(sp)
 8008258:	2008917a 	slli	r4,r4,5
 800825c:	314bc83a 	sub	r5,r6,r5
 8008260:	290b883a 	add	r5,r5,r4
 8008264:	01400e0e 	bge	zero,r5,80082a0 <__ratio+0x98>
 8008268:	280a953a 	slli	r5,r5,20
 800826c:	2c21883a 	add	r16,r5,r16
 8008270:	9009883a 	mov	r4,r18
 8008274:	800b883a 	mov	r5,r16
 8008278:	100d883a 	mov	r6,r2
 800827c:	180f883a 	mov	r7,r3
 8008280:	800a4e40 	call	800a4e4 <__divdf3>
 8008284:	dfc00617 	ldw	ra,24(sp)
 8008288:	dcc00517 	ldw	r19,20(sp)
 800828c:	dc800417 	ldw	r18,16(sp)
 8008290:	dc400317 	ldw	r17,12(sp)
 8008294:	dc000217 	ldw	r16,8(sp)
 8008298:	dec00704 	addi	sp,sp,28
 800829c:	f800283a 	ret
 80082a0:	280a953a 	slli	r5,r5,20
 80082a4:	1947c83a 	sub	r3,r3,r5
 80082a8:	003ff106 	br	8008270 <__ratio+0x68>

080082ac <_mprec_log10>:
 80082ac:	defffe04 	addi	sp,sp,-8
 80082b0:	dc000015 	stw	r16,0(sp)
 80082b4:	dfc00115 	stw	ra,4(sp)
 80082b8:	008005c4 	movi	r2,23
 80082bc:	2021883a 	mov	r16,r4
 80082c0:	11000d0e 	bge	r2,r4,80082f8 <_mprec_log10+0x4c>
 80082c4:	0005883a 	mov	r2,zero
 80082c8:	00cffc34 	movhi	r3,16368
 80082cc:	843fffc4 	addi	r16,r16,-1
 80082d0:	1009883a 	mov	r4,r2
 80082d4:	180b883a 	mov	r5,r3
 80082d8:	000d883a 	mov	r6,zero
 80082dc:	01d00934 	movhi	r7,16420
 80082e0:	800a2000 	call	800a200 <__muldf3>
 80082e4:	803ff91e 	bne	r16,zero,80082cc <_mprec_log10+0x20>
 80082e8:	dfc00117 	ldw	ra,4(sp)
 80082ec:	dc000017 	ldw	r16,0(sp)
 80082f0:	dec00204 	addi	sp,sp,8
 80082f4:	f800283a 	ret
 80082f8:	202090fa 	slli	r16,r4,3
 80082fc:	00820074 	movhi	r2,2049
 8008300:	10b76204 	addi	r2,r2,-8824
 8008304:	1421883a 	add	r16,r2,r16
 8008308:	80800017 	ldw	r2,0(r16)
 800830c:	80c00117 	ldw	r3,4(r16)
 8008310:	dfc00117 	ldw	ra,4(sp)
 8008314:	dc000017 	ldw	r16,0(sp)
 8008318:	dec00204 	addi	sp,sp,8
 800831c:	f800283a 	ret

08008320 <__copybits>:
 8008320:	297fffc4 	addi	r5,r5,-1
 8008324:	31c00417 	ldw	r7,16(r6)
 8008328:	2811d17a 	srai	r8,r5,5
 800832c:	30800504 	addi	r2,r6,20
 8008330:	39c00144 	addi	r7,r7,5
 8008334:	42000044 	addi	r8,r8,1
 8008338:	39cf883a 	add	r7,r7,r7
 800833c:	4211883a 	add	r8,r8,r8
 8008340:	39cf883a 	add	r7,r7,r7
 8008344:	4211883a 	add	r8,r8,r8
 8008348:	31cf883a 	add	r7,r6,r7
 800834c:	2211883a 	add	r8,r4,r8
 8008350:	11c00d2e 	bgeu	r2,r7,8008388 <__copybits+0x68>
 8008354:	2007883a 	mov	r3,r4
 8008358:	11400017 	ldw	r5,0(r2)
 800835c:	18c00104 	addi	r3,r3,4
 8008360:	10800104 	addi	r2,r2,4
 8008364:	197fff15 	stw	r5,-4(r3)
 8008368:	11fffb36 	bltu	r2,r7,8008358 <__copybits+0x38>
 800836c:	3985c83a 	sub	r2,r7,r6
 8008370:	10bffac4 	addi	r2,r2,-21
 8008374:	1004d0ba 	srli	r2,r2,2
 8008378:	10800044 	addi	r2,r2,1
 800837c:	1085883a 	add	r2,r2,r2
 8008380:	1085883a 	add	r2,r2,r2
 8008384:	2089883a 	add	r4,r4,r2
 8008388:	2200032e 	bgeu	r4,r8,8008398 <__copybits+0x78>
 800838c:	20000015 	stw	zero,0(r4)
 8008390:	21000104 	addi	r4,r4,4
 8008394:	223ffd36 	bltu	r4,r8,800838c <__copybits+0x6c>
 8008398:	f800283a 	ret

0800839c <__any_on>:
 800839c:	21800417 	ldw	r6,16(r4)
 80083a0:	2805d17a 	srai	r2,r5,5
 80083a4:	20c00504 	addi	r3,r4,20
 80083a8:	30800f0e 	bge	r6,r2,80083e8 <__any_on+0x4c>
 80083ac:	3005883a 	mov	r2,r6
 80083b0:	10800144 	addi	r2,r2,5
 80083b4:	1085883a 	add	r2,r2,r2
 80083b8:	1085883a 	add	r2,r2,r2
 80083bc:	2089883a 	add	r4,r4,r2
 80083c0:	1900152e 	bgeu	r3,r4,8008418 <__any_on+0x7c>
 80083c4:	20bfff17 	ldw	r2,-4(r4)
 80083c8:	213fff04 	addi	r4,r4,-4
 80083cc:	1000041e 	bne	r2,zero,80083e0 <__any_on+0x44>
 80083d0:	1900112e 	bgeu	r3,r4,8008418 <__any_on+0x7c>
 80083d4:	213fff04 	addi	r4,r4,-4
 80083d8:	20800017 	ldw	r2,0(r4)
 80083dc:	103ffc26 	beq	r2,zero,80083d0 <__any_on+0x34>
 80083e0:	00800044 	movi	r2,1
 80083e4:	f800283a 	ret
 80083e8:	11bff10e 	bge	r2,r6,80083b0 <__any_on+0x14>
 80083ec:	294007cc 	andi	r5,r5,31
 80083f0:	283fef26 	beq	r5,zero,80083b0 <__any_on+0x14>
 80083f4:	11800144 	addi	r6,r2,5
 80083f8:	318d883a 	add	r6,r6,r6
 80083fc:	318d883a 	add	r6,r6,r6
 8008400:	218d883a 	add	r6,r4,r6
 8008404:	31800017 	ldw	r6,0(r6)
 8008408:	314ed83a 	srl	r7,r6,r5
 800840c:	394a983a 	sll	r5,r7,r5
 8008410:	29bff31e 	bne	r5,r6,80083e0 <__any_on+0x44>
 8008414:	003fe606 	br	80083b0 <__any_on+0x14>
 8008418:	0005883a 	mov	r2,zero
 800841c:	f800283a 	ret

08008420 <_realloc_r>:
 8008420:	defff504 	addi	sp,sp,-44
 8008424:	dd400615 	stw	r21,24(sp)
 8008428:	dc800315 	stw	r18,12(sp)
 800842c:	dc000115 	stw	r16,4(sp)
 8008430:	dfc00a15 	stw	ra,40(sp)
 8008434:	df000915 	stw	fp,36(sp)
 8008438:	ddc00815 	stw	r23,32(sp)
 800843c:	dd800715 	stw	r22,28(sp)
 8008440:	dd000515 	stw	r20,20(sp)
 8008444:	dcc00415 	stw	r19,16(sp)
 8008448:	dc400215 	stw	r17,8(sp)
 800844c:	2821883a 	mov	r16,r5
 8008450:	202b883a 	mov	r21,r4
 8008454:	3025883a 	mov	r18,r6
 8008458:	28009626 	beq	r5,zero,80086b4 <_realloc_r+0x294>
 800845c:	800b83c0 	call	800b83c <__malloc_lock>
 8008460:	80bfff17 	ldw	r2,-4(r16)
 8008464:	04ffff04 	movi	r19,-4
 8008468:	90c002c4 	addi	r3,r18,11
 800846c:	01000584 	movi	r4,22
 8008470:	85bffe04 	addi	r22,r16,-8
 8008474:	14e6703a 	and	r19,r2,r19
 8008478:	20c0372e 	bgeu	r4,r3,8008558 <_realloc_r+0x138>
 800847c:	047ffe04 	movi	r17,-8
 8008480:	1c62703a 	and	r17,r3,r17
 8008484:	8807883a 	mov	r3,r17
 8008488:	88005a16 	blt	r17,zero,80085f4 <_realloc_r+0x1d4>
 800848c:	8c805936 	bltu	r17,r18,80085f4 <_realloc_r+0x1d4>
 8008490:	98c0340e 	bge	r19,r3,8008564 <_realloc_r+0x144>
 8008494:	07020074 	movhi	fp,2049
 8008498:	e7383304 	addi	fp,fp,-7988
 800849c:	e1400217 	ldw	r5,8(fp)
 80084a0:	b4c9883a 	add	r4,r22,r19
 80084a4:	29009026 	beq	r5,r4,80086e8 <_realloc_r+0x2c8>
 80084a8:	21800117 	ldw	r6,4(r4)
 80084ac:	01ffff84 	movi	r7,-2
 80084b0:	31ce703a 	and	r7,r6,r7
 80084b4:	21cf883a 	add	r7,r4,r7
 80084b8:	39c00117 	ldw	r7,4(r7)
 80084bc:	39c0004c 	andi	r7,r7,1
 80084c0:	38004326 	beq	r7,zero,80085d0 <_realloc_r+0x1b0>
 80084c4:	000d883a 	mov	r6,zero
 80084c8:	0009883a 	mov	r4,zero
 80084cc:	1080004c 	andi	r2,r2,1
 80084d0:	10005a1e 	bne	r2,zero,800863c <_realloc_r+0x21c>
 80084d4:	85fffe17 	ldw	r23,-8(r16)
 80084d8:	00bfff04 	movi	r2,-4
 80084dc:	b5efc83a 	sub	r23,r22,r23
 80084e0:	b9c00117 	ldw	r7,4(r23)
 80084e4:	388e703a 	and	r7,r7,r2
 80084e8:	3ccf883a 	add	r7,r7,r19
 80084ec:	20005226 	beq	r4,zero,8008638 <_realloc_r+0x218>
 80084f0:	31e9883a 	add	r20,r6,r7
 80084f4:	2140c726 	beq	r4,r5,8008814 <_realloc_r+0x3f4>
 80084f8:	a0c04f16 	blt	r20,r3,8008638 <_realloc_r+0x218>
 80084fc:	20800317 	ldw	r2,12(r4)
 8008500:	20c00217 	ldw	r3,8(r4)
 8008504:	99bfff04 	addi	r6,r19,-4
 8008508:	01000904 	movi	r4,36
 800850c:	18800315 	stw	r2,12(r3)
 8008510:	10c00215 	stw	r3,8(r2)
 8008514:	b8c00217 	ldw	r3,8(r23)
 8008518:	b8800317 	ldw	r2,12(r23)
 800851c:	bc800204 	addi	r18,r23,8
 8008520:	18800315 	stw	r2,12(r3)
 8008524:	10c00215 	stw	r3,8(r2)
 8008528:	2180ed36 	bltu	r4,r6,80088e0 <_realloc_r+0x4c0>
 800852c:	008004c4 	movi	r2,19
 8008530:	11809b2e 	bgeu	r2,r6,80087a0 <_realloc_r+0x380>
 8008534:	80800017 	ldw	r2,0(r16)
 8008538:	b8800215 	stw	r2,8(r23)
 800853c:	80800117 	ldw	r2,4(r16)
 8008540:	b8800315 	stw	r2,12(r23)
 8008544:	008006c4 	movi	r2,27
 8008548:	1180f936 	bltu	r2,r6,8008930 <_realloc_r+0x510>
 800854c:	b8800404 	addi	r2,r23,16
 8008550:	80c00204 	addi	r3,r16,8
 8008554:	00009406 	br	80087a8 <_realloc_r+0x388>
 8008558:	00c00404 	movi	r3,16
 800855c:	1823883a 	mov	r17,r3
 8008560:	003fca06 	br	800848c <_realloc_r+0x6c>
 8008564:	9829883a 	mov	r20,r19
 8008568:	a447c83a 	sub	r3,r20,r17
 800856c:	010003c4 	movi	r4,15
 8008570:	1080004c 	andi	r2,r2,1
 8008574:	20c02336 	bltu	r4,r3,8008604 <_realloc_r+0x1e4>
 8008578:	1504b03a 	or	r2,r2,r20
 800857c:	b0800115 	stw	r2,4(r22)
 8008580:	b52d883a 	add	r22,r22,r20
 8008584:	b0800117 	ldw	r2,4(r22)
 8008588:	10800054 	ori	r2,r2,1
 800858c:	b0800115 	stw	r2,4(r22)
 8008590:	a809883a 	mov	r4,r21
 8008594:	800b85c0 	call	800b85c <__malloc_unlock>
 8008598:	8025883a 	mov	r18,r16
 800859c:	9005883a 	mov	r2,r18
 80085a0:	dfc00a17 	ldw	ra,40(sp)
 80085a4:	df000917 	ldw	fp,36(sp)
 80085a8:	ddc00817 	ldw	r23,32(sp)
 80085ac:	dd800717 	ldw	r22,28(sp)
 80085b0:	dd400617 	ldw	r21,24(sp)
 80085b4:	dd000517 	ldw	r20,20(sp)
 80085b8:	dcc00417 	ldw	r19,16(sp)
 80085bc:	dc800317 	ldw	r18,12(sp)
 80085c0:	dc400217 	ldw	r17,8(sp)
 80085c4:	dc000117 	ldw	r16,4(sp)
 80085c8:	dec00b04 	addi	sp,sp,44
 80085cc:	f800283a 	ret
 80085d0:	01ffff04 	movi	r7,-4
 80085d4:	31cc703a 	and	r6,r6,r7
 80085d8:	34e9883a 	add	r20,r6,r19
 80085dc:	a0ffbb16 	blt	r20,r3,80084cc <_realloc_r+0xac>
 80085e0:	20c00317 	ldw	r3,12(r4)
 80085e4:	21000217 	ldw	r4,8(r4)
 80085e8:	20c00315 	stw	r3,12(r4)
 80085ec:	19000215 	stw	r4,8(r3)
 80085f0:	003fdd06 	br	8008568 <_realloc_r+0x148>
 80085f4:	00800304 	movi	r2,12
 80085f8:	a8800015 	stw	r2,0(r21)
 80085fc:	0025883a 	mov	r18,zero
 8008600:	003fe606 	br	800859c <_realloc_r+0x17c>
 8008604:	1444b03a 	or	r2,r2,r17
 8008608:	b0800115 	stw	r2,4(r22)
 800860c:	b44b883a 	add	r5,r22,r17
 8008610:	18800054 	ori	r2,r3,1
 8008614:	28800115 	stw	r2,4(r5)
 8008618:	28c7883a 	add	r3,r5,r3
 800861c:	18800117 	ldw	r2,4(r3)
 8008620:	a809883a 	mov	r4,r21
 8008624:	29400204 	addi	r5,r5,8
 8008628:	10800054 	ori	r2,r2,1
 800862c:	18800115 	stw	r2,4(r3)
 8008630:	80064d80 	call	80064d8 <_free_r>
 8008634:	003fd606 	br	8008590 <_realloc_r+0x170>
 8008638:	38c0330e 	bge	r7,r3,8008708 <_realloc_r+0x2e8>
 800863c:	900b883a 	mov	r5,r18
 8008640:	a809883a 	mov	r4,r21
 8008644:	8001c0c0 	call	8001c0c <_malloc_r>
 8008648:	1025883a 	mov	r18,r2
 800864c:	10001626 	beq	r2,zero,80086a8 <_realloc_r+0x288>
 8008650:	80bfff17 	ldw	r2,-4(r16)
 8008654:	00ffff84 	movi	r3,-2
 8008658:	913ffe04 	addi	r4,r18,-8
 800865c:	10c6703a 	and	r3,r2,r3
 8008660:	b0c7883a 	add	r3,r22,r3
 8008664:	20c09926 	beq	r4,r3,80088cc <_realloc_r+0x4ac>
 8008668:	99bfff04 	addi	r6,r19,-4
 800866c:	00800904 	movi	r2,36
 8008670:	11806436 	bltu	r2,r6,8008804 <_realloc_r+0x3e4>
 8008674:	00c004c4 	movi	r3,19
 8008678:	19804036 	bltu	r3,r6,800877c <_realloc_r+0x35c>
 800867c:	9005883a 	mov	r2,r18
 8008680:	8007883a 	mov	r3,r16
 8008684:	19000017 	ldw	r4,0(r3)
 8008688:	11000015 	stw	r4,0(r2)
 800868c:	19000117 	ldw	r4,4(r3)
 8008690:	11000115 	stw	r4,4(r2)
 8008694:	18c00217 	ldw	r3,8(r3)
 8008698:	10c00215 	stw	r3,8(r2)
 800869c:	a809883a 	mov	r4,r21
 80086a0:	800b883a 	mov	r5,r16
 80086a4:	80064d80 	call	80064d8 <_free_r>
 80086a8:	a809883a 	mov	r4,r21
 80086ac:	800b85c0 	call	800b85c <__malloc_unlock>
 80086b0:	003fba06 	br	800859c <_realloc_r+0x17c>
 80086b4:	300b883a 	mov	r5,r6
 80086b8:	dfc00a17 	ldw	ra,40(sp)
 80086bc:	df000917 	ldw	fp,36(sp)
 80086c0:	ddc00817 	ldw	r23,32(sp)
 80086c4:	dd800717 	ldw	r22,28(sp)
 80086c8:	dd400617 	ldw	r21,24(sp)
 80086cc:	dd000517 	ldw	r20,20(sp)
 80086d0:	dcc00417 	ldw	r19,16(sp)
 80086d4:	dc800317 	ldw	r18,12(sp)
 80086d8:	dc400217 	ldw	r17,8(sp)
 80086dc:	dc000117 	ldw	r16,4(sp)
 80086e0:	dec00b04 	addi	sp,sp,44
 80086e4:	8001c0c1 	jmpi	8001c0c <_malloc_r>
 80086e8:	29800117 	ldw	r6,4(r5)
 80086ec:	013fff04 	movi	r4,-4
 80086f0:	89c00404 	addi	r7,r17,16
 80086f4:	310c703a 	and	r6,r6,r4
 80086f8:	34c9883a 	add	r4,r6,r19
 80086fc:	21c0340e 	bge	r4,r7,80087d0 <_realloc_r+0x3b0>
 8008700:	2809883a 	mov	r4,r5
 8008704:	003f7106 	br	80084cc <_realloc_r+0xac>
 8008708:	b8800317 	ldw	r2,12(r23)
 800870c:	b8c00217 	ldw	r3,8(r23)
 8008710:	99bfff04 	addi	r6,r19,-4
 8008714:	01000904 	movi	r4,36
 8008718:	18800315 	stw	r2,12(r3)
 800871c:	10c00215 	stw	r3,8(r2)
 8008720:	bc800204 	addi	r18,r23,8
 8008724:	21807836 	bltu	r4,r6,8008908 <_realloc_r+0x4e8>
 8008728:	008004c4 	movi	r2,19
 800872c:	1180732e 	bgeu	r2,r6,80088fc <_realloc_r+0x4dc>
 8008730:	80800017 	ldw	r2,0(r16)
 8008734:	b8800215 	stw	r2,8(r23)
 8008738:	80800117 	ldw	r2,4(r16)
 800873c:	b8800315 	stw	r2,12(r23)
 8008740:	008006c4 	movi	r2,27
 8008744:	11808936 	bltu	r2,r6,800896c <_realloc_r+0x54c>
 8008748:	b8800404 	addi	r2,r23,16
 800874c:	80c00204 	addi	r3,r16,8
 8008750:	19000017 	ldw	r4,0(r3)
 8008754:	9021883a 	mov	r16,r18
 8008758:	3829883a 	mov	r20,r7
 800875c:	11000015 	stw	r4,0(r2)
 8008760:	19000117 	ldw	r4,4(r3)
 8008764:	b82d883a 	mov	r22,r23
 8008768:	11000115 	stw	r4,4(r2)
 800876c:	18c00217 	ldw	r3,8(r3)
 8008770:	10c00215 	stw	r3,8(r2)
 8008774:	b8800117 	ldw	r2,4(r23)
 8008778:	003f7b06 	br	8008568 <_realloc_r+0x148>
 800877c:	80c00017 	ldw	r3,0(r16)
 8008780:	90c00015 	stw	r3,0(r18)
 8008784:	80c00117 	ldw	r3,4(r16)
 8008788:	90c00115 	stw	r3,4(r18)
 800878c:	00c006c4 	movi	r3,27
 8008790:	19804636 	bltu	r3,r6,80088ac <_realloc_r+0x48c>
 8008794:	90800204 	addi	r2,r18,8
 8008798:	80c00204 	addi	r3,r16,8
 800879c:	003fb906 	br	8008684 <_realloc_r+0x264>
 80087a0:	9005883a 	mov	r2,r18
 80087a4:	8007883a 	mov	r3,r16
 80087a8:	19000017 	ldw	r4,0(r3)
 80087ac:	9021883a 	mov	r16,r18
 80087b0:	b82d883a 	mov	r22,r23
 80087b4:	11000015 	stw	r4,0(r2)
 80087b8:	19000117 	ldw	r4,4(r3)
 80087bc:	11000115 	stw	r4,4(r2)
 80087c0:	18c00217 	ldw	r3,8(r3)
 80087c4:	10c00215 	stw	r3,8(r2)
 80087c8:	b8800117 	ldw	r2,4(r23)
 80087cc:	003f6606 	br	8008568 <_realloc_r+0x148>
 80087d0:	2445c83a 	sub	r2,r4,r17
 80087d4:	b46d883a 	add	r22,r22,r17
 80087d8:	10800054 	ori	r2,r2,1
 80087dc:	b0800115 	stw	r2,4(r22)
 80087e0:	80bfff17 	ldw	r2,-4(r16)
 80087e4:	a809883a 	mov	r4,r21
 80087e8:	e5800215 	stw	r22,8(fp)
 80087ec:	1080004c 	andi	r2,r2,1
 80087f0:	88a2b03a 	or	r17,r17,r2
 80087f4:	847fff15 	stw	r17,-4(r16)
 80087f8:	800b85c0 	call	800b85c <__malloc_unlock>
 80087fc:	8025883a 	mov	r18,r16
 8008800:	003f6606 	br	800859c <_realloc_r+0x17c>
 8008804:	9009883a 	mov	r4,r18
 8008808:	800b883a 	mov	r5,r16
 800880c:	80071680 	call	8007168 <memmove>
 8008810:	003fa206 	br	800869c <_realloc_r+0x27c>
 8008814:	88800404 	addi	r2,r17,16
 8008818:	a0bf8716 	blt	r20,r2,8008638 <_realloc_r+0x218>
 800881c:	b8800317 	ldw	r2,12(r23)
 8008820:	b8c00217 	ldw	r3,8(r23)
 8008824:	99bfff04 	addi	r6,r19,-4
 8008828:	01000904 	movi	r4,36
 800882c:	18800315 	stw	r2,12(r3)
 8008830:	10c00215 	stw	r3,8(r2)
 8008834:	bc800204 	addi	r18,r23,8
 8008838:	21806536 	bltu	r4,r6,80089d0 <_realloc_r+0x5b0>
 800883c:	008004c4 	movi	r2,19
 8008840:	1180592e 	bgeu	r2,r6,80089a8 <_realloc_r+0x588>
 8008844:	80800017 	ldw	r2,0(r16)
 8008848:	b8800215 	stw	r2,8(r23)
 800884c:	80800117 	ldw	r2,4(r16)
 8008850:	b8800315 	stw	r2,12(r23)
 8008854:	008006c4 	movi	r2,27
 8008858:	11806136 	bltu	r2,r6,80089e0 <_realloc_r+0x5c0>
 800885c:	b8800404 	addi	r2,r23,16
 8008860:	80c00204 	addi	r3,r16,8
 8008864:	19000017 	ldw	r4,0(r3)
 8008868:	11000015 	stw	r4,0(r2)
 800886c:	19000117 	ldw	r4,4(r3)
 8008870:	11000115 	stw	r4,4(r2)
 8008874:	18c00217 	ldw	r3,8(r3)
 8008878:	10c00215 	stw	r3,8(r2)
 800887c:	a447c83a 	sub	r3,r20,r17
 8008880:	bc45883a 	add	r2,r23,r17
 8008884:	18c00054 	ori	r3,r3,1
 8008888:	10c00115 	stw	r3,4(r2)
 800888c:	b8c00117 	ldw	r3,4(r23)
 8008890:	e0800215 	stw	r2,8(fp)
 8008894:	a809883a 	mov	r4,r21
 8008898:	1880004c 	andi	r2,r3,1
 800889c:	88a2b03a 	or	r17,r17,r2
 80088a0:	bc400115 	stw	r17,4(r23)
 80088a4:	800b85c0 	call	800b85c <__malloc_unlock>
 80088a8:	003f3c06 	br	800859c <_realloc_r+0x17c>
 80088ac:	80c00217 	ldw	r3,8(r16)
 80088b0:	90c00215 	stw	r3,8(r18)
 80088b4:	80c00317 	ldw	r3,12(r16)
 80088b8:	90c00315 	stw	r3,12(r18)
 80088bc:	30802426 	beq	r6,r2,8008950 <_realloc_r+0x530>
 80088c0:	90800404 	addi	r2,r18,16
 80088c4:	80c00404 	addi	r3,r16,16
 80088c8:	003f6e06 	br	8008684 <_realloc_r+0x264>
 80088cc:	953fff17 	ldw	r20,-4(r18)
 80088d0:	00ffff04 	movi	r3,-4
 80088d4:	a0e8703a 	and	r20,r20,r3
 80088d8:	a4e9883a 	add	r20,r20,r19
 80088dc:	003f2206 	br	8008568 <_realloc_r+0x148>
 80088e0:	800b883a 	mov	r5,r16
 80088e4:	9009883a 	mov	r4,r18
 80088e8:	80071680 	call	8007168 <memmove>
 80088ec:	9021883a 	mov	r16,r18
 80088f0:	b8800117 	ldw	r2,4(r23)
 80088f4:	b82d883a 	mov	r22,r23
 80088f8:	003f1b06 	br	8008568 <_realloc_r+0x148>
 80088fc:	9005883a 	mov	r2,r18
 8008900:	8007883a 	mov	r3,r16
 8008904:	003f9206 	br	8008750 <_realloc_r+0x330>
 8008908:	800b883a 	mov	r5,r16
 800890c:	9009883a 	mov	r4,r18
 8008910:	d9c00015 	stw	r7,0(sp)
 8008914:	80071680 	call	8007168 <memmove>
 8008918:	d9c00017 	ldw	r7,0(sp)
 800891c:	9021883a 	mov	r16,r18
 8008920:	b8800117 	ldw	r2,4(r23)
 8008924:	3829883a 	mov	r20,r7
 8008928:	b82d883a 	mov	r22,r23
 800892c:	003f0e06 	br	8008568 <_realloc_r+0x148>
 8008930:	80800217 	ldw	r2,8(r16)
 8008934:	b8800415 	stw	r2,16(r23)
 8008938:	80800317 	ldw	r2,12(r16)
 800893c:	b8800515 	stw	r2,20(r23)
 8008940:	31001226 	beq	r6,r4,800898c <_realloc_r+0x56c>
 8008944:	b8800604 	addi	r2,r23,24
 8008948:	80c00404 	addi	r3,r16,16
 800894c:	003f9606 	br	80087a8 <_realloc_r+0x388>
 8008950:	81000417 	ldw	r4,16(r16)
 8008954:	90800604 	addi	r2,r18,24
 8008958:	80c00604 	addi	r3,r16,24
 800895c:	91000415 	stw	r4,16(r18)
 8008960:	81000517 	ldw	r4,20(r16)
 8008964:	91000515 	stw	r4,20(r18)
 8008968:	003f4606 	br	8008684 <_realloc_r+0x264>
 800896c:	80800217 	ldw	r2,8(r16)
 8008970:	b8800415 	stw	r2,16(r23)
 8008974:	80800317 	ldw	r2,12(r16)
 8008978:	b8800515 	stw	r2,20(r23)
 800897c:	31000d26 	beq	r6,r4,80089b4 <_realloc_r+0x594>
 8008980:	b8800604 	addi	r2,r23,24
 8008984:	80c00404 	addi	r3,r16,16
 8008988:	003f7106 	br	8008750 <_realloc_r+0x330>
 800898c:	81000417 	ldw	r4,16(r16)
 8008990:	b8800804 	addi	r2,r23,32
 8008994:	80c00604 	addi	r3,r16,24
 8008998:	b9000615 	stw	r4,24(r23)
 800899c:	81000517 	ldw	r4,20(r16)
 80089a0:	b9000715 	stw	r4,28(r23)
 80089a4:	003f8006 	br	80087a8 <_realloc_r+0x388>
 80089a8:	9005883a 	mov	r2,r18
 80089ac:	8007883a 	mov	r3,r16
 80089b0:	003fac06 	br	8008864 <_realloc_r+0x444>
 80089b4:	81000417 	ldw	r4,16(r16)
 80089b8:	b8800804 	addi	r2,r23,32
 80089bc:	80c00604 	addi	r3,r16,24
 80089c0:	b9000615 	stw	r4,24(r23)
 80089c4:	81000517 	ldw	r4,20(r16)
 80089c8:	b9000715 	stw	r4,28(r23)
 80089cc:	003f6006 	br	8008750 <_realloc_r+0x330>
 80089d0:	9009883a 	mov	r4,r18
 80089d4:	800b883a 	mov	r5,r16
 80089d8:	80071680 	call	8007168 <memmove>
 80089dc:	003fa706 	br	800887c <_realloc_r+0x45c>
 80089e0:	80800217 	ldw	r2,8(r16)
 80089e4:	b8800415 	stw	r2,16(r23)
 80089e8:	80800317 	ldw	r2,12(r16)
 80089ec:	b8800515 	stw	r2,20(r23)
 80089f0:	31000326 	beq	r6,r4,8008a00 <_realloc_r+0x5e0>
 80089f4:	b8800604 	addi	r2,r23,24
 80089f8:	80c00404 	addi	r3,r16,16
 80089fc:	003f9906 	br	8008864 <_realloc_r+0x444>
 8008a00:	81000417 	ldw	r4,16(r16)
 8008a04:	b8800804 	addi	r2,r23,32
 8008a08:	80c00604 	addi	r3,r16,24
 8008a0c:	b9000615 	stw	r4,24(r23)
 8008a10:	81000517 	ldw	r4,20(r16)
 8008a14:	b9000715 	stw	r4,28(r23)
 8008a18:	003f9206 	br	8008864 <_realloc_r+0x444>

08008a1c <__isinfd>:
 8008a1c:	0105c83a 	sub	r2,zero,r4
 8008a20:	1108b03a 	or	r4,r2,r4
 8008a24:	2004d7fa 	srli	r2,r4,31
 8008a28:	00e00034 	movhi	r3,32768
 8008a2c:	18ffffc4 	addi	r3,r3,-1
 8008a30:	28ca703a 	and	r5,r5,r3
 8008a34:	1144b03a 	or	r2,r2,r5
 8008a38:	00dffc34 	movhi	r3,32752
 8008a3c:	1885c83a 	sub	r2,r3,r2
 8008a40:	0087c83a 	sub	r3,zero,r2
 8008a44:	1884b03a 	or	r2,r3,r2
 8008a48:	1005d7fa 	srai	r2,r2,31
 8008a4c:	10800044 	addi	r2,r2,1
 8008a50:	f800283a 	ret

08008a54 <__isnand>:
 8008a54:	0105c83a 	sub	r2,zero,r4
 8008a58:	1108b03a 	or	r4,r2,r4
 8008a5c:	2004d7fa 	srli	r2,r4,31
 8008a60:	00e00034 	movhi	r3,32768
 8008a64:	18ffffc4 	addi	r3,r3,-1
 8008a68:	28ca703a 	and	r5,r5,r3
 8008a6c:	1144b03a 	or	r2,r2,r5
 8008a70:	00dffc34 	movhi	r3,32752
 8008a74:	1885c83a 	sub	r2,r3,r2
 8008a78:	1004d7fa 	srli	r2,r2,31
 8008a7c:	f800283a 	ret

08008a80 <__sread>:
 8008a80:	defffe04 	addi	sp,sp,-8
 8008a84:	dc000015 	stw	r16,0(sp)
 8008a88:	2821883a 	mov	r16,r5
 8008a8c:	2940038f 	ldh	r5,14(r5)
 8008a90:	dfc00115 	stw	ra,4(sp)
 8008a94:	80091140 	call	8009114 <_read_r>
 8008a98:	10000716 	blt	r2,zero,8008ab8 <__sread+0x38>
 8008a9c:	80c01417 	ldw	r3,80(r16)
 8008aa0:	1887883a 	add	r3,r3,r2
 8008aa4:	80c01415 	stw	r3,80(r16)
 8008aa8:	dfc00117 	ldw	ra,4(sp)
 8008aac:	dc000017 	ldw	r16,0(sp)
 8008ab0:	dec00204 	addi	sp,sp,8
 8008ab4:	f800283a 	ret
 8008ab8:	80c0030b 	ldhu	r3,12(r16)
 8008abc:	18fbffcc 	andi	r3,r3,61439
 8008ac0:	80c0030d 	sth	r3,12(r16)
 8008ac4:	dfc00117 	ldw	ra,4(sp)
 8008ac8:	dc000017 	ldw	r16,0(sp)
 8008acc:	dec00204 	addi	sp,sp,8
 8008ad0:	f800283a 	ret

08008ad4 <__swrite>:
 8008ad4:	2880030b 	ldhu	r2,12(r5)
 8008ad8:	defffb04 	addi	sp,sp,-20
 8008adc:	dcc00315 	stw	r19,12(sp)
 8008ae0:	10c0400c 	andi	r3,r2,256
 8008ae4:	18ffffcc 	andi	r3,r3,65535
 8008ae8:	18e0001c 	xori	r3,r3,32768
 8008aec:	dc800215 	stw	r18,8(sp)
 8008af0:	dc400115 	stw	r17,4(sp)
 8008af4:	dc000015 	stw	r16,0(sp)
 8008af8:	dfc00415 	stw	ra,16(sp)
 8008afc:	18e00004 	addi	r3,r3,-32768
 8008b00:	2821883a 	mov	r16,r5
 8008b04:	2027883a 	mov	r19,r4
 8008b08:	3025883a 	mov	r18,r6
 8008b0c:	3823883a 	mov	r17,r7
 8008b10:	18000526 	beq	r3,zero,8008b28 <__swrite+0x54>
 8008b14:	2940038f 	ldh	r5,14(r5)
 8008b18:	000d883a 	mov	r6,zero
 8008b1c:	01c00084 	movi	r7,2
 8008b20:	80090a80 	call	80090a8 <_lseek_r>
 8008b24:	8080030b 	ldhu	r2,12(r16)
 8008b28:	8140038f 	ldh	r5,14(r16)
 8008b2c:	10bbffcc 	andi	r2,r2,61439
 8008b30:	9809883a 	mov	r4,r19
 8008b34:	900d883a 	mov	r6,r18
 8008b38:	880f883a 	mov	r7,r17
 8008b3c:	8080030d 	sth	r2,12(r16)
 8008b40:	dfc00417 	ldw	ra,16(sp)
 8008b44:	dcc00317 	ldw	r19,12(sp)
 8008b48:	dc800217 	ldw	r18,8(sp)
 8008b4c:	dc400117 	ldw	r17,4(sp)
 8008b50:	dc000017 	ldw	r16,0(sp)
 8008b54:	dec00504 	addi	sp,sp,20
 8008b58:	8008cf01 	jmpi	8008cf0 <_write_r>

08008b5c <__sseek>:
 8008b5c:	defffe04 	addi	sp,sp,-8
 8008b60:	dc000015 	stw	r16,0(sp)
 8008b64:	2821883a 	mov	r16,r5
 8008b68:	2940038f 	ldh	r5,14(r5)
 8008b6c:	dfc00115 	stw	ra,4(sp)
 8008b70:	80090a80 	call	80090a8 <_lseek_r>
 8008b74:	00ffffc4 	movi	r3,-1
 8008b78:	10c00826 	beq	r2,r3,8008b9c <__sseek+0x40>
 8008b7c:	80c0030b 	ldhu	r3,12(r16)
 8008b80:	80801415 	stw	r2,80(r16)
 8008b84:	18c40014 	ori	r3,r3,4096
 8008b88:	80c0030d 	sth	r3,12(r16)
 8008b8c:	dfc00117 	ldw	ra,4(sp)
 8008b90:	dc000017 	ldw	r16,0(sp)
 8008b94:	dec00204 	addi	sp,sp,8
 8008b98:	f800283a 	ret
 8008b9c:	80c0030b 	ldhu	r3,12(r16)
 8008ba0:	18fbffcc 	andi	r3,r3,61439
 8008ba4:	80c0030d 	sth	r3,12(r16)
 8008ba8:	dfc00117 	ldw	ra,4(sp)
 8008bac:	dc000017 	ldw	r16,0(sp)
 8008bb0:	dec00204 	addi	sp,sp,8
 8008bb4:	f800283a 	ret

08008bb8 <__sclose>:
 8008bb8:	2940038f 	ldh	r5,14(r5)
 8008bbc:	8008e281 	jmpi	8008e28 <_close_r>

08008bc0 <strcmp>:
 8008bc0:	2904b03a 	or	r2,r5,r4
 8008bc4:	108000cc 	andi	r2,r2,3
 8008bc8:	1000171e 	bne	r2,zero,8008c28 <strcmp+0x68>
 8008bcc:	20800017 	ldw	r2,0(r4)
 8008bd0:	28c00017 	ldw	r3,0(r5)
 8008bd4:	10c0141e 	bne	r2,r3,8008c28 <strcmp+0x68>
 8008bd8:	027fbff4 	movhi	r9,65279
 8008bdc:	4a7fbfc4 	addi	r9,r9,-257
 8008be0:	1247883a 	add	r3,r2,r9
 8008be4:	0084303a 	nor	r2,zero,r2
 8008be8:	1884703a 	and	r2,r3,r2
 8008bec:	02202074 	movhi	r8,32897
 8008bf0:	42202004 	addi	r8,r8,-32640
 8008bf4:	1204703a 	and	r2,r2,r8
 8008bf8:	10000226 	beq	r2,zero,8008c04 <strcmp+0x44>
 8008bfc:	00001706 	br	8008c5c <strcmp+0x9c>
 8008c00:	3000161e 	bne	r6,zero,8008c5c <strcmp+0x9c>
 8008c04:	21000104 	addi	r4,r4,4
 8008c08:	20800017 	ldw	r2,0(r4)
 8008c0c:	29400104 	addi	r5,r5,4
 8008c10:	28c00017 	ldw	r3,0(r5)
 8008c14:	124f883a 	add	r7,r2,r9
 8008c18:	008c303a 	nor	r6,zero,r2
 8008c1c:	398c703a 	and	r6,r7,r6
 8008c20:	320c703a 	and	r6,r6,r8
 8008c24:	10fff626 	beq	r2,r3,8008c00 <strcmp+0x40>
 8008c28:	20800007 	ldb	r2,0(r4)
 8008c2c:	1000051e 	bne	r2,zero,8008c44 <strcmp+0x84>
 8008c30:	00000606 	br	8008c4c <strcmp+0x8c>
 8008c34:	21000044 	addi	r4,r4,1
 8008c38:	20800007 	ldb	r2,0(r4)
 8008c3c:	29400044 	addi	r5,r5,1
 8008c40:	10000226 	beq	r2,zero,8008c4c <strcmp+0x8c>
 8008c44:	28c00007 	ldb	r3,0(r5)
 8008c48:	10fffa26 	beq	r2,r3,8008c34 <strcmp+0x74>
 8008c4c:	20c00003 	ldbu	r3,0(r4)
 8008c50:	28800003 	ldbu	r2,0(r5)
 8008c54:	1885c83a 	sub	r2,r3,r2
 8008c58:	f800283a 	ret
 8008c5c:	0005883a 	mov	r2,zero
 8008c60:	f800283a 	ret

08008c64 <strlen>:
 8008c64:	208000cc 	andi	r2,r4,3
 8008c68:	10001f1e 	bne	r2,zero,8008ce8 <strlen+0x84>
 8008c6c:	20800017 	ldw	r2,0(r4)
 8008c70:	01ffbff4 	movhi	r7,65279
 8008c74:	39ffbfc4 	addi	r7,r7,-257
 8008c78:	01a02074 	movhi	r6,32897
 8008c7c:	31a02004 	addi	r6,r6,-32640
 8008c80:	11c7883a 	add	r3,r2,r7
 8008c84:	0084303a 	nor	r2,zero,r2
 8008c88:	1886703a 	and	r3,r3,r2
 8008c8c:	1986703a 	and	r3,r3,r6
 8008c90:	2005883a 	mov	r2,r4
 8008c94:	1800101e 	bne	r3,zero,8008cd8 <strlen+0x74>
 8008c98:	10800104 	addi	r2,r2,4
 8008c9c:	10c00017 	ldw	r3,0(r2)
 8008ca0:	19cb883a 	add	r5,r3,r7
 8008ca4:	00c6303a 	nor	r3,zero,r3
 8008ca8:	28c6703a 	and	r3,r5,r3
 8008cac:	1986703a 	and	r3,r3,r6
 8008cb0:	1800091e 	bne	r3,zero,8008cd8 <strlen+0x74>
 8008cb4:	10800104 	addi	r2,r2,4
 8008cb8:	10c00017 	ldw	r3,0(r2)
 8008cbc:	19cb883a 	add	r5,r3,r7
 8008cc0:	00c6303a 	nor	r3,zero,r3
 8008cc4:	28c6703a 	and	r3,r5,r3
 8008cc8:	1986703a 	and	r3,r3,r6
 8008ccc:	183ff226 	beq	r3,zero,8008c98 <strlen+0x34>
 8008cd0:	00000106 	br	8008cd8 <strlen+0x74>
 8008cd4:	10800044 	addi	r2,r2,1
 8008cd8:	10c00007 	ldb	r3,0(r2)
 8008cdc:	183ffd1e 	bne	r3,zero,8008cd4 <strlen+0x70>
 8008ce0:	1105c83a 	sub	r2,r2,r4
 8008ce4:	f800283a 	ret
 8008ce8:	2005883a 	mov	r2,r4
 8008cec:	003ffa06 	br	8008cd8 <strlen+0x74>

08008cf0 <_write_r>:
 8008cf0:	defffd04 	addi	sp,sp,-12
 8008cf4:	dc400115 	stw	r17,4(sp)
 8008cf8:	dc000015 	stw	r16,0(sp)
 8008cfc:	2023883a 	mov	r17,r4
 8008d00:	04020074 	movhi	r16,2049
 8008d04:	843de704 	addi	r16,r16,-2148
 8008d08:	2809883a 	mov	r4,r5
 8008d0c:	300b883a 	mov	r5,r6
 8008d10:	380d883a 	mov	r6,r7
 8008d14:	dfc00215 	stw	ra,8(sp)
 8008d18:	80000015 	stw	zero,0(r16)
 8008d1c:	800bb400 	call	800bb40 <write>
 8008d20:	00ffffc4 	movi	r3,-1
 8008d24:	10c00526 	beq	r2,r3,8008d3c <_write_r+0x4c>
 8008d28:	dfc00217 	ldw	ra,8(sp)
 8008d2c:	dc400117 	ldw	r17,4(sp)
 8008d30:	dc000017 	ldw	r16,0(sp)
 8008d34:	dec00304 	addi	sp,sp,12
 8008d38:	f800283a 	ret
 8008d3c:	80c00017 	ldw	r3,0(r16)
 8008d40:	183ff926 	beq	r3,zero,8008d28 <_write_r+0x38>
 8008d44:	88c00015 	stw	r3,0(r17)
 8008d48:	dfc00217 	ldw	ra,8(sp)
 8008d4c:	dc400117 	ldw	r17,4(sp)
 8008d50:	dc000017 	ldw	r16,0(sp)
 8008d54:	dec00304 	addi	sp,sp,12
 8008d58:	f800283a 	ret

08008d5c <_calloc_r>:
 8008d5c:	defffe04 	addi	sp,sp,-8
 8008d60:	dc000015 	stw	r16,0(sp)
 8008d64:	2021883a 	mov	r16,r4
 8008d68:	3009883a 	mov	r4,r6
 8008d6c:	dfc00115 	stw	ra,4(sp)
 8008d70:	8001bbc0 	call	8001bbc <__mulsi3>
 8008d74:	8009883a 	mov	r4,r16
 8008d78:	100b883a 	mov	r5,r2
 8008d7c:	8001c0c0 	call	8001c0c <_malloc_r>
 8008d80:	1021883a 	mov	r16,r2
 8008d84:	10000c26 	beq	r2,zero,8008db8 <_calloc_r+0x5c>
 8008d88:	11bfff17 	ldw	r6,-4(r2)
 8008d8c:	00ffff04 	movi	r3,-4
 8008d90:	00800904 	movi	r2,36
 8008d94:	30cc703a 	and	r6,r6,r3
 8008d98:	30cd883a 	add	r6,r6,r3
 8008d9c:	11801436 	bltu	r2,r6,8008df0 <_calloc_r+0x94>
 8008da0:	00c004c4 	movi	r3,19
 8008da4:	19800936 	bltu	r3,r6,8008dcc <_calloc_r+0x70>
 8008da8:	8005883a 	mov	r2,r16
 8008dac:	10000015 	stw	zero,0(r2)
 8008db0:	10000115 	stw	zero,4(r2)
 8008db4:	10000215 	stw	zero,8(r2)
 8008db8:	8005883a 	mov	r2,r16
 8008dbc:	dfc00117 	ldw	ra,4(sp)
 8008dc0:	dc000017 	ldw	r16,0(sp)
 8008dc4:	dec00204 	addi	sp,sp,8
 8008dc8:	f800283a 	ret
 8008dcc:	80000015 	stw	zero,0(r16)
 8008dd0:	80000115 	stw	zero,4(r16)
 8008dd4:	00c006c4 	movi	r3,27
 8008dd8:	19800d2e 	bgeu	r3,r6,8008e10 <_calloc_r+0xb4>
 8008ddc:	80000215 	stw	zero,8(r16)
 8008de0:	80000315 	stw	zero,12(r16)
 8008de4:	30800c26 	beq	r6,r2,8008e18 <_calloc_r+0xbc>
 8008de8:	80800404 	addi	r2,r16,16
 8008dec:	003fef06 	br	8008dac <_calloc_r+0x50>
 8008df0:	8009883a 	mov	r4,r16
 8008df4:	000b883a 	mov	r5,zero
 8008df8:	80072f40 	call	80072f4 <memset>
 8008dfc:	8005883a 	mov	r2,r16
 8008e00:	dfc00117 	ldw	ra,4(sp)
 8008e04:	dc000017 	ldw	r16,0(sp)
 8008e08:	dec00204 	addi	sp,sp,8
 8008e0c:	f800283a 	ret
 8008e10:	80800204 	addi	r2,r16,8
 8008e14:	003fe506 	br	8008dac <_calloc_r+0x50>
 8008e18:	80000415 	stw	zero,16(r16)
 8008e1c:	80000515 	stw	zero,20(r16)
 8008e20:	80800604 	addi	r2,r16,24
 8008e24:	003fe106 	br	8008dac <_calloc_r+0x50>

08008e28 <_close_r>:
 8008e28:	defffd04 	addi	sp,sp,-12
 8008e2c:	dc400115 	stw	r17,4(sp)
 8008e30:	dc000015 	stw	r16,0(sp)
 8008e34:	2023883a 	mov	r17,r4
 8008e38:	04020074 	movhi	r16,2049
 8008e3c:	843de704 	addi	r16,r16,-2148
 8008e40:	2809883a 	mov	r4,r5
 8008e44:	dfc00215 	stw	ra,8(sp)
 8008e48:	80000015 	stw	zero,0(r16)
 8008e4c:	800b2e40 	call	800b2e4 <close>
 8008e50:	00ffffc4 	movi	r3,-1
 8008e54:	10c00526 	beq	r2,r3,8008e6c <_close_r+0x44>
 8008e58:	dfc00217 	ldw	ra,8(sp)
 8008e5c:	dc400117 	ldw	r17,4(sp)
 8008e60:	dc000017 	ldw	r16,0(sp)
 8008e64:	dec00304 	addi	sp,sp,12
 8008e68:	f800283a 	ret
 8008e6c:	80c00017 	ldw	r3,0(r16)
 8008e70:	183ff926 	beq	r3,zero,8008e58 <_close_r+0x30>
 8008e74:	88c00015 	stw	r3,0(r17)
 8008e78:	dfc00217 	ldw	ra,8(sp)
 8008e7c:	dc400117 	ldw	r17,4(sp)
 8008e80:	dc000017 	ldw	r16,0(sp)
 8008e84:	dec00304 	addi	sp,sp,12
 8008e88:	f800283a 	ret

08008e8c <_fclose_r>:
 8008e8c:	defffc04 	addi	sp,sp,-16
 8008e90:	dc400115 	stw	r17,4(sp)
 8008e94:	dc000015 	stw	r16,0(sp)
 8008e98:	dfc00315 	stw	ra,12(sp)
 8008e9c:	dc800215 	stw	r18,8(sp)
 8008ea0:	2821883a 	mov	r16,r5
 8008ea4:	2023883a 	mov	r17,r4
 8008ea8:	28003426 	beq	r5,zero,8008f7c <_fclose_r+0xf0>
 8008eac:	800635c0 	call	800635c <__sfp_lock_acquire>
 8008eb0:	88000226 	beq	r17,zero,8008ebc <_fclose_r+0x30>
 8008eb4:	88800e17 	ldw	r2,56(r17)
 8008eb8:	10003826 	beq	r2,zero,8008f9c <_fclose_r+0x110>
 8008ebc:	8080030f 	ldh	r2,12(r16)
 8008ec0:	10002526 	beq	r2,zero,8008f58 <_fclose_r+0xcc>
 8008ec4:	8809883a 	mov	r4,r17
 8008ec8:	800b883a 	mov	r5,r16
 8008ecc:	8005e980 	call	8005e98 <_fflush_r>
 8008ed0:	1025883a 	mov	r18,r2
 8008ed4:	80800b17 	ldw	r2,44(r16)
 8008ed8:	10000426 	beq	r2,zero,8008eec <_fclose_r+0x60>
 8008edc:	81400717 	ldw	r5,28(r16)
 8008ee0:	8809883a 	mov	r4,r17
 8008ee4:	103ee83a 	callr	r2
 8008ee8:	10003516 	blt	r2,zero,8008fc0 <_fclose_r+0x134>
 8008eec:	8080030b 	ldhu	r2,12(r16)
 8008ef0:	1080200c 	andi	r2,r2,128
 8008ef4:	10bfffcc 	andi	r2,r2,65535
 8008ef8:	10a0001c 	xori	r2,r2,32768
 8008efc:	10a00004 	addi	r2,r2,-32768
 8008f00:	10002b1e 	bne	r2,zero,8008fb0 <_fclose_r+0x124>
 8008f04:	81400c17 	ldw	r5,48(r16)
 8008f08:	28000526 	beq	r5,zero,8008f20 <_fclose_r+0x94>
 8008f0c:	80801004 	addi	r2,r16,64
 8008f10:	28800226 	beq	r5,r2,8008f1c <_fclose_r+0x90>
 8008f14:	8809883a 	mov	r4,r17
 8008f18:	80064d80 	call	80064d8 <_free_r>
 8008f1c:	80000c15 	stw	zero,48(r16)
 8008f20:	81401117 	ldw	r5,68(r16)
 8008f24:	28000326 	beq	r5,zero,8008f34 <_fclose_r+0xa8>
 8008f28:	8809883a 	mov	r4,r17
 8008f2c:	80064d80 	call	80064d8 <_free_r>
 8008f30:	80001115 	stw	zero,68(r16)
 8008f34:	8000030d 	sth	zero,12(r16)
 8008f38:	80063600 	call	8006360 <__sfp_lock_release>
 8008f3c:	9005883a 	mov	r2,r18
 8008f40:	dfc00317 	ldw	ra,12(sp)
 8008f44:	dc800217 	ldw	r18,8(sp)
 8008f48:	dc400117 	ldw	r17,4(sp)
 8008f4c:	dc000017 	ldw	r16,0(sp)
 8008f50:	dec00404 	addi	sp,sp,16
 8008f54:	f800283a 	ret
 8008f58:	80063600 	call	8006360 <__sfp_lock_release>
 8008f5c:	0025883a 	mov	r18,zero
 8008f60:	9005883a 	mov	r2,r18
 8008f64:	dfc00317 	ldw	ra,12(sp)
 8008f68:	dc800217 	ldw	r18,8(sp)
 8008f6c:	dc400117 	ldw	r17,4(sp)
 8008f70:	dc000017 	ldw	r16,0(sp)
 8008f74:	dec00404 	addi	sp,sp,16
 8008f78:	f800283a 	ret
 8008f7c:	0025883a 	mov	r18,zero
 8008f80:	9005883a 	mov	r2,r18
 8008f84:	dfc00317 	ldw	ra,12(sp)
 8008f88:	dc800217 	ldw	r18,8(sp)
 8008f8c:	dc400117 	ldw	r17,4(sp)
 8008f90:	dc000017 	ldw	r16,0(sp)
 8008f94:	dec00404 	addi	sp,sp,16
 8008f98:	f800283a 	ret
 8008f9c:	8809883a 	mov	r4,r17
 8008fa0:	80061540 	call	8006154 <__sinit>
 8008fa4:	8080030f 	ldh	r2,12(r16)
 8008fa8:	103fc61e 	bne	r2,zero,8008ec4 <_fclose_r+0x38>
 8008fac:	003fea06 	br	8008f58 <_fclose_r+0xcc>
 8008fb0:	81400417 	ldw	r5,16(r16)
 8008fb4:	8809883a 	mov	r4,r17
 8008fb8:	80064d80 	call	80064d8 <_free_r>
 8008fbc:	003fd106 	br	8008f04 <_fclose_r+0x78>
 8008fc0:	04bfffc4 	movi	r18,-1
 8008fc4:	003fc906 	br	8008eec <_fclose_r+0x60>

08008fc8 <fclose>:
 8008fc8:	00820074 	movhi	r2,2049
 8008fcc:	10bae304 	addi	r2,r2,-5236
 8008fd0:	200b883a 	mov	r5,r4
 8008fd4:	11000017 	ldw	r4,0(r2)
 8008fd8:	8008e8c1 	jmpi	8008e8c <_fclose_r>

08008fdc <_fstat_r>:
 8008fdc:	defffd04 	addi	sp,sp,-12
 8008fe0:	dc400115 	stw	r17,4(sp)
 8008fe4:	dc000015 	stw	r16,0(sp)
 8008fe8:	2023883a 	mov	r17,r4
 8008fec:	04020074 	movhi	r16,2049
 8008ff0:	843de704 	addi	r16,r16,-2148
 8008ff4:	2809883a 	mov	r4,r5
 8008ff8:	300b883a 	mov	r5,r6
 8008ffc:	dfc00215 	stw	ra,8(sp)
 8009000:	80000015 	stw	zero,0(r16)
 8009004:	800b42c0 	call	800b42c <fstat>
 8009008:	00ffffc4 	movi	r3,-1
 800900c:	10c00526 	beq	r2,r3,8009024 <_fstat_r+0x48>
 8009010:	dfc00217 	ldw	ra,8(sp)
 8009014:	dc400117 	ldw	r17,4(sp)
 8009018:	dc000017 	ldw	r16,0(sp)
 800901c:	dec00304 	addi	sp,sp,12
 8009020:	f800283a 	ret
 8009024:	80c00017 	ldw	r3,0(r16)
 8009028:	183ff926 	beq	r3,zero,8009010 <_fstat_r+0x34>
 800902c:	88c00015 	stw	r3,0(r17)
 8009030:	dfc00217 	ldw	ra,8(sp)
 8009034:	dc400117 	ldw	r17,4(sp)
 8009038:	dc000017 	ldw	r16,0(sp)
 800903c:	dec00304 	addi	sp,sp,12
 8009040:	f800283a 	ret

08009044 <_isatty_r>:
 8009044:	defffd04 	addi	sp,sp,-12
 8009048:	dc400115 	stw	r17,4(sp)
 800904c:	dc000015 	stw	r16,0(sp)
 8009050:	2023883a 	mov	r17,r4
 8009054:	04020074 	movhi	r16,2049
 8009058:	843de704 	addi	r16,r16,-2148
 800905c:	2809883a 	mov	r4,r5
 8009060:	dfc00215 	stw	ra,8(sp)
 8009064:	80000015 	stw	zero,0(r16)
 8009068:	800b52c0 	call	800b52c <isatty>
 800906c:	00ffffc4 	movi	r3,-1
 8009070:	10c00526 	beq	r2,r3,8009088 <_isatty_r+0x44>
 8009074:	dfc00217 	ldw	ra,8(sp)
 8009078:	dc400117 	ldw	r17,4(sp)
 800907c:	dc000017 	ldw	r16,0(sp)
 8009080:	dec00304 	addi	sp,sp,12
 8009084:	f800283a 	ret
 8009088:	80c00017 	ldw	r3,0(r16)
 800908c:	183ff926 	beq	r3,zero,8009074 <_isatty_r+0x30>
 8009090:	88c00015 	stw	r3,0(r17)
 8009094:	dfc00217 	ldw	ra,8(sp)
 8009098:	dc400117 	ldw	r17,4(sp)
 800909c:	dc000017 	ldw	r16,0(sp)
 80090a0:	dec00304 	addi	sp,sp,12
 80090a4:	f800283a 	ret

080090a8 <_lseek_r>:
 80090a8:	defffd04 	addi	sp,sp,-12
 80090ac:	dc400115 	stw	r17,4(sp)
 80090b0:	dc000015 	stw	r16,0(sp)
 80090b4:	2023883a 	mov	r17,r4
 80090b8:	04020074 	movhi	r16,2049
 80090bc:	843de704 	addi	r16,r16,-2148
 80090c0:	2809883a 	mov	r4,r5
 80090c4:	300b883a 	mov	r5,r6
 80090c8:	380d883a 	mov	r6,r7
 80090cc:	dfc00215 	stw	ra,8(sp)
 80090d0:	80000015 	stw	zero,0(r16)
 80090d4:	800b70c0 	call	800b70c <lseek>
 80090d8:	00ffffc4 	movi	r3,-1
 80090dc:	10c00526 	beq	r2,r3,80090f4 <_lseek_r+0x4c>
 80090e0:	dfc00217 	ldw	ra,8(sp)
 80090e4:	dc400117 	ldw	r17,4(sp)
 80090e8:	dc000017 	ldw	r16,0(sp)
 80090ec:	dec00304 	addi	sp,sp,12
 80090f0:	f800283a 	ret
 80090f4:	80c00017 	ldw	r3,0(r16)
 80090f8:	183ff926 	beq	r3,zero,80090e0 <_lseek_r+0x38>
 80090fc:	88c00015 	stw	r3,0(r17)
 8009100:	dfc00217 	ldw	ra,8(sp)
 8009104:	dc400117 	ldw	r17,4(sp)
 8009108:	dc000017 	ldw	r16,0(sp)
 800910c:	dec00304 	addi	sp,sp,12
 8009110:	f800283a 	ret

08009114 <_read_r>:
 8009114:	defffd04 	addi	sp,sp,-12
 8009118:	dc400115 	stw	r17,4(sp)
 800911c:	dc000015 	stw	r16,0(sp)
 8009120:	2023883a 	mov	r17,r4
 8009124:	04020074 	movhi	r16,2049
 8009128:	843de704 	addi	r16,r16,-2148
 800912c:	2809883a 	mov	r4,r5
 8009130:	300b883a 	mov	r5,r6
 8009134:	380d883a 	mov	r6,r7
 8009138:	dfc00215 	stw	ra,8(sp)
 800913c:	80000015 	stw	zero,0(r16)
 8009140:	800b8cc0 	call	800b8cc <read>
 8009144:	00ffffc4 	movi	r3,-1
 8009148:	10c00526 	beq	r2,r3,8009160 <_read_r+0x4c>
 800914c:	dfc00217 	ldw	ra,8(sp)
 8009150:	dc400117 	ldw	r17,4(sp)
 8009154:	dc000017 	ldw	r16,0(sp)
 8009158:	dec00304 	addi	sp,sp,12
 800915c:	f800283a 	ret
 8009160:	80c00017 	ldw	r3,0(r16)
 8009164:	183ff926 	beq	r3,zero,800914c <_read_r+0x38>
 8009168:	88c00015 	stw	r3,0(r17)
 800916c:	dfc00217 	ldw	ra,8(sp)
 8009170:	dc400117 	ldw	r17,4(sp)
 8009174:	dc000017 	ldw	r16,0(sp)
 8009178:	dec00304 	addi	sp,sp,12
 800917c:	f800283a 	ret

08009180 <__udivdi3>:
 8009180:	defff504 	addi	sp,sp,-44
 8009184:	dd000515 	stw	r20,20(sp)
 8009188:	dcc00415 	stw	r19,16(sp)
 800918c:	dc800315 	stw	r18,12(sp)
 8009190:	dc400215 	stw	r17,8(sp)
 8009194:	dc000115 	stw	r16,4(sp)
 8009198:	dfc00a15 	stw	ra,40(sp)
 800919c:	df000915 	stw	fp,36(sp)
 80091a0:	ddc00815 	stw	r23,32(sp)
 80091a4:	dd800715 	stw	r22,28(sp)
 80091a8:	dd400615 	stw	r21,24(sp)
 80091ac:	2025883a 	mov	r18,r4
 80091b0:	2823883a 	mov	r17,r5
 80091b4:	3021883a 	mov	r16,r6
 80091b8:	2027883a 	mov	r19,r4
 80091bc:	2829883a 	mov	r20,r5
 80091c0:	3800451e 	bne	r7,zero,80092d8 <__udivdi3+0x158>
 80091c4:	2980652e 	bgeu	r5,r6,800935c <__udivdi3+0x1dc>
 80091c8:	00bfffd4 	movui	r2,65535
 80091cc:	1180b436 	bltu	r2,r6,80094a0 <__udivdi3+0x320>
 80091d0:	00803fc4 	movi	r2,255
 80091d4:	11816636 	bltu	r2,r6,8009770 <__udivdi3+0x5f0>
 80091d8:	0005883a 	mov	r2,zero
 80091dc:	0007883a 	mov	r3,zero
 80091e0:	3084d83a 	srl	r2,r6,r2
 80091e4:	01020074 	movhi	r4,2049
 80091e8:	21379c04 	addi	r4,r4,-8592
 80091ec:	2085883a 	add	r2,r4,r2
 80091f0:	10800003 	ldbu	r2,0(r2)
 80091f4:	10c7883a 	add	r3,r2,r3
 80091f8:	00800804 	movi	r2,32
 80091fc:	10c5c83a 	sub	r2,r2,r3
 8009200:	10000526 	beq	r2,zero,8009218 <__udivdi3+0x98>
 8009204:	88a2983a 	sll	r17,r17,r2
 8009208:	90c6d83a 	srl	r3,r18,r3
 800920c:	30a0983a 	sll	r16,r6,r2
 8009210:	90a6983a 	sll	r19,r18,r2
 8009214:	88e8b03a 	or	r20,r17,r3
 8009218:	8022d43a 	srli	r17,r16,16
 800921c:	a009883a 	mov	r4,r20
 8009220:	857fffcc 	andi	r21,r16,65535
 8009224:	880b883a 	mov	r5,r17
 8009228:	800ac500 	call	800ac50 <__umodsi3>
 800922c:	a009883a 	mov	r4,r20
 8009230:	880b883a 	mov	r5,r17
 8009234:	102d883a 	mov	r22,r2
 8009238:	800ac480 	call	800ac48 <__udivsi3>
 800923c:	1009883a 	mov	r4,r2
 8009240:	a80b883a 	mov	r5,r21
 8009244:	1025883a 	mov	r18,r2
 8009248:	8001bbc0 	call	8001bbc <__mulsi3>
 800924c:	1009883a 	mov	r4,r2
 8009250:	b006943a 	slli	r3,r22,16
 8009254:	9804d43a 	srli	r2,r19,16
 8009258:	1886b03a 	or	r3,r3,r2
 800925c:	1900052e 	bgeu	r3,r4,8009274 <__udivdi3+0xf4>
 8009260:	1c07883a 	add	r3,r3,r16
 8009264:	90bfffc4 	addi	r2,r18,-1
 8009268:	1c000136 	bltu	r3,r16,8009270 <__udivdi3+0xf0>
 800926c:	19015536 	bltu	r3,r4,80097c4 <__udivdi3+0x644>
 8009270:	1025883a 	mov	r18,r2
 8009274:	1929c83a 	sub	r20,r3,r4
 8009278:	880b883a 	mov	r5,r17
 800927c:	a009883a 	mov	r4,r20
 8009280:	800ac500 	call	800ac50 <__umodsi3>
 8009284:	102d883a 	mov	r22,r2
 8009288:	880b883a 	mov	r5,r17
 800928c:	a009883a 	mov	r4,r20
 8009290:	b02c943a 	slli	r22,r22,16
 8009294:	800ac480 	call	800ac48 <__udivsi3>
 8009298:	1009883a 	mov	r4,r2
 800929c:	a80b883a 	mov	r5,r21
 80092a0:	9cffffcc 	andi	r19,r19,65535
 80092a4:	1023883a 	mov	r17,r2
 80092a8:	b4e6b03a 	or	r19,r22,r19
 80092ac:	8001bbc0 	call	8001bbc <__mulsi3>
 80092b0:	9880052e 	bgeu	r19,r2,80092c8 <__udivdi3+0x148>
 80092b4:	9c27883a 	add	r19,r19,r16
 80092b8:	88ffffc4 	addi	r3,r17,-1
 80092bc:	9c011436 	bltu	r19,r16,8009710 <__udivdi3+0x590>
 80092c0:	9881132e 	bgeu	r19,r2,8009710 <__udivdi3+0x590>
 80092c4:	8c7fff84 	addi	r17,r17,-2
 80092c8:	9004943a 	slli	r2,r18,16
 80092cc:	0007883a 	mov	r3,zero
 80092d0:	8884b03a 	or	r2,r17,r2
 80092d4:	00001506 	br	800932c <__udivdi3+0x1ac>
 80092d8:	29c06a36 	bltu	r5,r7,8009484 <__udivdi3+0x304>
 80092dc:	00bfffd4 	movui	r2,65535
 80092e0:	11c06a2e 	bgeu	r2,r7,800948c <__udivdi3+0x30c>
 80092e4:	00804034 	movhi	r2,256
 80092e8:	10bfffc4 	addi	r2,r2,-1
 80092ec:	11c11436 	bltu	r2,r7,8009740 <__udivdi3+0x5c0>
 80092f0:	00c00404 	movi	r3,16
 80092f4:	180b883a 	mov	r5,r3
 80092f8:	38c6d83a 	srl	r3,r7,r3
 80092fc:	01020074 	movhi	r4,2049
 8009300:	21379c04 	addi	r4,r4,-8592
 8009304:	04000804 	movi	r16,32
 8009308:	20c7883a 	add	r3,r4,r3
 800930c:	18800003 	ldbu	r2,0(r3)
 8009310:	1145883a 	add	r2,r2,r5
 8009314:	80a1c83a 	sub	r16,r16,r2
 8009318:	80006e1e 	bne	r16,zero,80094d4 <__udivdi3+0x354>
 800931c:	0007883a 	mov	r3,zero
 8009320:	3c406a36 	bltu	r7,r17,80094cc <__udivdi3+0x34c>
 8009324:	9180692e 	bgeu	r18,r6,80094cc <__udivdi3+0x34c>
 8009328:	0005883a 	mov	r2,zero
 800932c:	dfc00a17 	ldw	ra,40(sp)
 8009330:	df000917 	ldw	fp,36(sp)
 8009334:	ddc00817 	ldw	r23,32(sp)
 8009338:	dd800717 	ldw	r22,28(sp)
 800933c:	dd400617 	ldw	r21,24(sp)
 8009340:	dd000517 	ldw	r20,20(sp)
 8009344:	dcc00417 	ldw	r19,16(sp)
 8009348:	dc800317 	ldw	r18,12(sp)
 800934c:	dc400217 	ldw	r17,8(sp)
 8009350:	dc000117 	ldw	r16,4(sp)
 8009354:	dec00b04 	addi	sp,sp,44
 8009358:	f800283a 	ret
 800935c:	3000041e 	bne	r6,zero,8009370 <__udivdi3+0x1f0>
 8009360:	01000044 	movi	r4,1
 8009364:	000b883a 	mov	r5,zero
 8009368:	800ac480 	call	800ac48 <__udivsi3>
 800936c:	1021883a 	mov	r16,r2
 8009370:	00bfffd4 	movui	r2,65535
 8009374:	1400502e 	bgeu	r2,r16,80094b8 <__udivdi3+0x338>
 8009378:	00804034 	movhi	r2,256
 800937c:	10bfffc4 	addi	r2,r2,-1
 8009380:	1400f536 	bltu	r2,r16,8009758 <__udivdi3+0x5d8>
 8009384:	00800404 	movi	r2,16
 8009388:	1007883a 	mov	r3,r2
 800938c:	8084d83a 	srl	r2,r16,r2
 8009390:	01020074 	movhi	r4,2049
 8009394:	21379c04 	addi	r4,r4,-8592
 8009398:	2085883a 	add	r2,r4,r2
 800939c:	10800003 	ldbu	r2,0(r2)
 80093a0:	10c7883a 	add	r3,r2,r3
 80093a4:	00800804 	movi	r2,32
 80093a8:	10c5c83a 	sub	r2,r2,r3
 80093ac:	1000a01e 	bne	r2,zero,8009630 <__udivdi3+0x4b0>
 80093b0:	8028d43a 	srli	r20,r16,16
 80093b4:	8c23c83a 	sub	r17,r17,r16
 80093b8:	857fffcc 	andi	r21,r16,65535
 80093bc:	00c00044 	movi	r3,1
 80093c0:	8809883a 	mov	r4,r17
 80093c4:	a00b883a 	mov	r5,r20
 80093c8:	d8c00015 	stw	r3,0(sp)
 80093cc:	800ac500 	call	800ac50 <__umodsi3>
 80093d0:	8809883a 	mov	r4,r17
 80093d4:	a00b883a 	mov	r5,r20
 80093d8:	102d883a 	mov	r22,r2
 80093dc:	800ac480 	call	800ac48 <__udivsi3>
 80093e0:	1009883a 	mov	r4,r2
 80093e4:	a80b883a 	mov	r5,r21
 80093e8:	1025883a 	mov	r18,r2
 80093ec:	8001bbc0 	call	8001bbc <__mulsi3>
 80093f0:	1009883a 	mov	r4,r2
 80093f4:	b00c943a 	slli	r6,r22,16
 80093f8:	9804d43a 	srli	r2,r19,16
 80093fc:	d8c00017 	ldw	r3,0(sp)
 8009400:	308cb03a 	or	r6,r6,r2
 8009404:	3100052e 	bgeu	r6,r4,800941c <__udivdi3+0x29c>
 8009408:	340d883a 	add	r6,r6,r16
 800940c:	90bfffc4 	addi	r2,r18,-1
 8009410:	34000136 	bltu	r6,r16,8009418 <__udivdi3+0x298>
 8009414:	3100e836 	bltu	r6,r4,80097b8 <__udivdi3+0x638>
 8009418:	1025883a 	mov	r18,r2
 800941c:	3123c83a 	sub	r17,r6,r4
 8009420:	8809883a 	mov	r4,r17
 8009424:	a00b883a 	mov	r5,r20
 8009428:	d8c00015 	stw	r3,0(sp)
 800942c:	800ac500 	call	800ac50 <__umodsi3>
 8009430:	102d883a 	mov	r22,r2
 8009434:	8809883a 	mov	r4,r17
 8009438:	a00b883a 	mov	r5,r20
 800943c:	b02c943a 	slli	r22,r22,16
 8009440:	800ac480 	call	800ac48 <__udivsi3>
 8009444:	1009883a 	mov	r4,r2
 8009448:	a80b883a 	mov	r5,r21
 800944c:	9cffffcc 	andi	r19,r19,65535
 8009450:	1023883a 	mov	r17,r2
 8009454:	b4e6b03a 	or	r19,r22,r19
 8009458:	8001bbc0 	call	8001bbc <__mulsi3>
 800945c:	d8c00017 	ldw	r3,0(sp)
 8009460:	9880052e 	bgeu	r19,r2,8009478 <__udivdi3+0x2f8>
 8009464:	9c27883a 	add	r19,r19,r16
 8009468:	893fffc4 	addi	r4,r17,-1
 800946c:	9c00aa36 	bltu	r19,r16,8009718 <__udivdi3+0x598>
 8009470:	9880a92e 	bgeu	r19,r2,8009718 <__udivdi3+0x598>
 8009474:	8c7fff84 	addi	r17,r17,-2
 8009478:	9004943a 	slli	r2,r18,16
 800947c:	8884b03a 	or	r2,r17,r2
 8009480:	003faa06 	br	800932c <__udivdi3+0x1ac>
 8009484:	0007883a 	mov	r3,zero
 8009488:	003fa706 	br	8009328 <__udivdi3+0x1a8>
 800948c:	00803fc4 	movi	r2,255
 8009490:	11c0ae36 	bltu	r2,r7,800974c <__udivdi3+0x5cc>
 8009494:	0007883a 	mov	r3,zero
 8009498:	000b883a 	mov	r5,zero
 800949c:	003f9606 	br	80092f8 <__udivdi3+0x178>
 80094a0:	00804034 	movhi	r2,256
 80094a4:	10bfffc4 	addi	r2,r2,-1
 80094a8:	1180ae36 	bltu	r2,r6,8009764 <__udivdi3+0x5e4>
 80094ac:	00800404 	movi	r2,16
 80094b0:	1007883a 	mov	r3,r2
 80094b4:	003f4a06 	br	80091e0 <__udivdi3+0x60>
 80094b8:	00803fc4 	movi	r2,255
 80094bc:	1400af36 	bltu	r2,r16,800977c <__udivdi3+0x5fc>
 80094c0:	0005883a 	mov	r2,zero
 80094c4:	0007883a 	mov	r3,zero
 80094c8:	003fb006 	br	800938c <__udivdi3+0x20c>
 80094cc:	00800044 	movi	r2,1
 80094d0:	003f9606 	br	800932c <__udivdi3+0x1ac>
 80094d4:	3c0e983a 	sll	r7,r7,r16
 80094d8:	3086d83a 	srl	r3,r6,r2
 80094dc:	88aed83a 	srl	r23,r17,r2
 80094e0:	9084d83a 	srl	r2,r18,r2
 80094e4:	38e6b03a 	or	r19,r7,r3
 80094e8:	9828d43a 	srli	r20,r19,16
 80094ec:	8c22983a 	sll	r17,r17,r16
 80094f0:	b809883a 	mov	r4,r23
 80094f4:	a00b883a 	mov	r5,r20
 80094f8:	342a983a 	sll	r21,r6,r16
 80094fc:	88a2b03a 	or	r17,r17,r2
 8009500:	800ac500 	call	800ac50 <__umodsi3>
 8009504:	b809883a 	mov	r4,r23
 8009508:	a00b883a 	mov	r5,r20
 800950c:	1039883a 	mov	fp,r2
 8009510:	9dbfffcc 	andi	r22,r19,65535
 8009514:	800ac480 	call	800ac48 <__udivsi3>
 8009518:	1009883a 	mov	r4,r2
 800951c:	b00b883a 	mov	r5,r22
 8009520:	102f883a 	mov	r23,r2
 8009524:	8001bbc0 	call	8001bbc <__mulsi3>
 8009528:	1009883a 	mov	r4,r2
 800952c:	e00e943a 	slli	r7,fp,16
 8009530:	8804d43a 	srli	r2,r17,16
 8009534:	388eb03a 	or	r7,r7,r2
 8009538:	3900042e 	bgeu	r7,r4,800954c <__udivdi3+0x3cc>
 800953c:	3ccf883a 	add	r7,r7,r19
 8009540:	b8bfffc4 	addi	r2,r23,-1
 8009544:	3cc0942e 	bgeu	r7,r19,8009798 <__udivdi3+0x618>
 8009548:	102f883a 	mov	r23,r2
 800954c:	3939c83a 	sub	fp,r7,r4
 8009550:	a00b883a 	mov	r5,r20
 8009554:	e009883a 	mov	r4,fp
 8009558:	800ac500 	call	800ac50 <__umodsi3>
 800955c:	a00b883a 	mov	r5,r20
 8009560:	e009883a 	mov	r4,fp
 8009564:	d8800015 	stw	r2,0(sp)
 8009568:	800ac480 	call	800ac48 <__udivsi3>
 800956c:	1009883a 	mov	r4,r2
 8009570:	b00b883a 	mov	r5,r22
 8009574:	1029883a 	mov	r20,r2
 8009578:	8001bbc0 	call	8001bbc <__mulsi3>
 800957c:	d8c00017 	ldw	r3,0(sp)
 8009580:	8c7fffcc 	andi	r17,r17,65535
 8009584:	1806943a 	slli	r3,r3,16
 8009588:	1c46b03a 	or	r3,r3,r17
 800958c:	1880042e 	bgeu	r3,r2,80095a0 <__udivdi3+0x420>
 8009590:	1cc7883a 	add	r3,r3,r19
 8009594:	a13fffc4 	addi	r4,r20,-1
 8009598:	1cc07b2e 	bgeu	r3,r19,8009788 <__udivdi3+0x608>
 800959c:	2029883a 	mov	r20,r4
 80095a0:	b82e943a 	slli	r23,r23,16
 80095a4:	a822d43a 	srli	r17,r21,16
 80095a8:	ad7fffcc 	andi	r21,r21,65535
 80095ac:	a5e8b03a 	or	r20,r20,r23
 80095b0:	a5bfffcc 	andi	r22,r20,65535
 80095b4:	b009883a 	mov	r4,r22
 80095b8:	a80b883a 	mov	r5,r21
 80095bc:	18afc83a 	sub	r23,r3,r2
 80095c0:	a026d43a 	srli	r19,r20,16
 80095c4:	8001bbc0 	call	8001bbc <__mulsi3>
 80095c8:	b009883a 	mov	r4,r22
 80095cc:	880b883a 	mov	r5,r17
 80095d0:	1039883a 	mov	fp,r2
 80095d4:	8001bbc0 	call	8001bbc <__mulsi3>
 80095d8:	a80b883a 	mov	r5,r21
 80095dc:	9809883a 	mov	r4,r19
 80095e0:	102d883a 	mov	r22,r2
 80095e4:	8001bbc0 	call	8001bbc <__mulsi3>
 80095e8:	9809883a 	mov	r4,r19
 80095ec:	880b883a 	mov	r5,r17
 80095f0:	102b883a 	mov	r21,r2
 80095f4:	8001bbc0 	call	8001bbc <__mulsi3>
 80095f8:	100b883a 	mov	r5,r2
 80095fc:	e004d43a 	srli	r2,fp,16
 8009600:	ad89883a 	add	r4,r21,r22
 8009604:	2089883a 	add	r4,r4,r2
 8009608:	2540022e 	bgeu	r4,r21,8009614 <__udivdi3+0x494>
 800960c:	00800074 	movhi	r2,1
 8009610:	288b883a 	add	r5,r5,r2
 8009614:	2004d43a 	srli	r2,r4,16
 8009618:	288b883a 	add	r5,r5,r2
 800961c:	b9404536 	bltu	r23,r5,8009734 <__udivdi3+0x5b4>
 8009620:	b9403f26 	beq	r23,r5,8009720 <__udivdi3+0x5a0>
 8009624:	a005883a 	mov	r2,r20
 8009628:	0007883a 	mov	r3,zero
 800962c:	003f3f06 	br	800932c <__udivdi3+0x1ac>
 8009630:	80a0983a 	sll	r16,r16,r2
 8009634:	88eed83a 	srl	r23,r17,r3
 8009638:	90c6d83a 	srl	r3,r18,r3
 800963c:	8028d43a 	srli	r20,r16,16
 8009640:	88a2983a 	sll	r17,r17,r2
 8009644:	b809883a 	mov	r4,r23
 8009648:	a00b883a 	mov	r5,r20
 800964c:	88ecb03a 	or	r22,r17,r3
 8009650:	90a6983a 	sll	r19,r18,r2
 8009654:	800ac500 	call	800ac50 <__umodsi3>
 8009658:	b809883a 	mov	r4,r23
 800965c:	a00b883a 	mov	r5,r20
 8009660:	1023883a 	mov	r17,r2
 8009664:	857fffcc 	andi	r21,r16,65535
 8009668:	800ac480 	call	800ac48 <__udivsi3>
 800966c:	1009883a 	mov	r4,r2
 8009670:	a80b883a 	mov	r5,r21
 8009674:	102f883a 	mov	r23,r2
 8009678:	8001bbc0 	call	8001bbc <__mulsi3>
 800967c:	1009883a 	mov	r4,r2
 8009680:	880a943a 	slli	r5,r17,16
 8009684:	b004d43a 	srli	r2,r22,16
 8009688:	288ab03a 	or	r5,r5,r2
 800968c:	2900062e 	bgeu	r5,r4,80096a8 <__udivdi3+0x528>
 8009690:	2c0b883a 	add	r5,r5,r16
 8009694:	b8bfffc4 	addi	r2,r23,-1
 8009698:	2c004536 	bltu	r5,r16,80097b0 <__udivdi3+0x630>
 800969c:	2900442e 	bgeu	r5,r4,80097b0 <__udivdi3+0x630>
 80096a0:	bdffff84 	addi	r23,r23,-2
 80096a4:	2c0b883a 	add	r5,r5,r16
 80096a8:	2925c83a 	sub	r18,r5,r4
 80096ac:	9009883a 	mov	r4,r18
 80096b0:	a00b883a 	mov	r5,r20
 80096b4:	800ac500 	call	800ac50 <__umodsi3>
 80096b8:	1023883a 	mov	r17,r2
 80096bc:	9009883a 	mov	r4,r18
 80096c0:	a00b883a 	mov	r5,r20
 80096c4:	8822943a 	slli	r17,r17,16
 80096c8:	800ac480 	call	800ac48 <__udivsi3>
 80096cc:	1009883a 	mov	r4,r2
 80096d0:	a80b883a 	mov	r5,r21
 80096d4:	b5bfffcc 	andi	r22,r22,65535
 80096d8:	1025883a 	mov	r18,r2
 80096dc:	8da2b03a 	or	r17,r17,r22
 80096e0:	8001bbc0 	call	8001bbc <__mulsi3>
 80096e4:	8880062e 	bgeu	r17,r2,8009700 <__udivdi3+0x580>
 80096e8:	8c23883a 	add	r17,r17,r16
 80096ec:	90ffffc4 	addi	r3,r18,-1
 80096f0:	8c002d36 	bltu	r17,r16,80097a8 <__udivdi3+0x628>
 80096f4:	88802c2e 	bgeu	r17,r2,80097a8 <__udivdi3+0x628>
 80096f8:	94bfff84 	addi	r18,r18,-2
 80096fc:	8c23883a 	add	r17,r17,r16
 8009700:	b806943a 	slli	r3,r23,16
 8009704:	88a3c83a 	sub	r17,r17,r2
 8009708:	90c6b03a 	or	r3,r18,r3
 800970c:	003f2c06 	br	80093c0 <__udivdi3+0x240>
 8009710:	1823883a 	mov	r17,r3
 8009714:	003eec06 	br	80092c8 <__udivdi3+0x148>
 8009718:	2023883a 	mov	r17,r4
 800971c:	003f5606 	br	8009478 <__udivdi3+0x2f8>
 8009720:	2008943a 	slli	r4,r4,16
 8009724:	9420983a 	sll	r16,r18,r16
 8009728:	e73fffcc 	andi	fp,fp,65535
 800972c:	2709883a 	add	r4,r4,fp
 8009730:	813fbc2e 	bgeu	r16,r4,8009624 <__udivdi3+0x4a4>
 8009734:	a0bfffc4 	addi	r2,r20,-1
 8009738:	0007883a 	mov	r3,zero
 800973c:	003efb06 	br	800932c <__udivdi3+0x1ac>
 8009740:	00c00604 	movi	r3,24
 8009744:	180b883a 	mov	r5,r3
 8009748:	003eeb06 	br	80092f8 <__udivdi3+0x178>
 800974c:	00c00204 	movi	r3,8
 8009750:	180b883a 	mov	r5,r3
 8009754:	003ee806 	br	80092f8 <__udivdi3+0x178>
 8009758:	00800604 	movi	r2,24
 800975c:	1007883a 	mov	r3,r2
 8009760:	003f0a06 	br	800938c <__udivdi3+0x20c>
 8009764:	00800604 	movi	r2,24
 8009768:	1007883a 	mov	r3,r2
 800976c:	003e9c06 	br	80091e0 <__udivdi3+0x60>
 8009770:	00800204 	movi	r2,8
 8009774:	1007883a 	mov	r3,r2
 8009778:	003e9906 	br	80091e0 <__udivdi3+0x60>
 800977c:	00800204 	movi	r2,8
 8009780:	1007883a 	mov	r3,r2
 8009784:	003f0106 	br	800938c <__udivdi3+0x20c>
 8009788:	18bf842e 	bgeu	r3,r2,800959c <__udivdi3+0x41c>
 800978c:	a53fff84 	addi	r20,r20,-2
 8009790:	1cc7883a 	add	r3,r3,r19
 8009794:	003f8206 	br	80095a0 <__udivdi3+0x420>
 8009798:	393f6b2e 	bgeu	r7,r4,8009548 <__udivdi3+0x3c8>
 800979c:	bdffff84 	addi	r23,r23,-2
 80097a0:	3ccf883a 	add	r7,r7,r19
 80097a4:	003f6906 	br	800954c <__udivdi3+0x3cc>
 80097a8:	1825883a 	mov	r18,r3
 80097ac:	003fd406 	br	8009700 <__udivdi3+0x580>
 80097b0:	102f883a 	mov	r23,r2
 80097b4:	003fbc06 	br	80096a8 <__udivdi3+0x528>
 80097b8:	94bfff84 	addi	r18,r18,-2
 80097bc:	340d883a 	add	r6,r6,r16
 80097c0:	003f1606 	br	800941c <__udivdi3+0x29c>
 80097c4:	94bfff84 	addi	r18,r18,-2
 80097c8:	1c07883a 	add	r3,r3,r16
 80097cc:	003ea906 	br	8009274 <__udivdi3+0xf4>

080097d0 <__umoddi3>:
 80097d0:	defff304 	addi	sp,sp,-52
 80097d4:	dd000715 	stw	r20,28(sp)
 80097d8:	dcc00615 	stw	r19,24(sp)
 80097dc:	dc800515 	stw	r18,20(sp)
 80097e0:	dc400415 	stw	r17,16(sp)
 80097e4:	dc000315 	stw	r16,12(sp)
 80097e8:	dfc00c15 	stw	ra,48(sp)
 80097ec:	df000b15 	stw	fp,44(sp)
 80097f0:	ddc00a15 	stw	r23,40(sp)
 80097f4:	dd800915 	stw	r22,36(sp)
 80097f8:	dd400815 	stw	r21,32(sp)
 80097fc:	2025883a 	mov	r18,r4
 8009800:	2823883a 	mov	r17,r5
 8009804:	3021883a 	mov	r16,r6
 8009808:	2027883a 	mov	r19,r4
 800980c:	2829883a 	mov	r20,r5
 8009810:	38003a1e 	bne	r7,zero,80098fc <__umoddi3+0x12c>
 8009814:	2980522e 	bgeu	r5,r6,8009960 <__umoddi3+0x190>
 8009818:	00bfffd4 	movui	r2,65535
 800981c:	1180a436 	bltu	r2,r6,8009ab0 <__umoddi3+0x2e0>
 8009820:	00803fc4 	movi	r2,255
 8009824:	11816036 	bltu	r2,r6,8009da8 <__umoddi3+0x5d8>
 8009828:	0005883a 	mov	r2,zero
 800982c:	0009883a 	mov	r4,zero
 8009830:	3084d83a 	srl	r2,r6,r2
 8009834:	00c20074 	movhi	r3,2049
 8009838:	18f79c04 	addi	r3,r3,-8592
 800983c:	05400804 	movi	r21,32
 8009840:	1885883a 	add	r2,r3,r2
 8009844:	10800003 	ldbu	r2,0(r2)
 8009848:	1109883a 	add	r4,r2,r4
 800984c:	a92bc83a 	sub	r21,r21,r4
 8009850:	a8010e26 	beq	r21,zero,8009c8c <__umoddi3+0x4bc>
 8009854:	8d62983a 	sll	r17,r17,r21
 8009858:	9108d83a 	srl	r4,r18,r4
 800985c:	3560983a 	sll	r16,r6,r21
 8009860:	9566983a 	sll	r19,r18,r21
 8009864:	8928b03a 	or	r20,r17,r4
 8009868:	8022d43a 	srli	r17,r16,16
 800986c:	a009883a 	mov	r4,r20
 8009870:	84bfffcc 	andi	r18,r16,65535
 8009874:	880b883a 	mov	r5,r17
 8009878:	800ac500 	call	800ac50 <__umodsi3>
 800987c:	a009883a 	mov	r4,r20
 8009880:	880b883a 	mov	r5,r17
 8009884:	102d883a 	mov	r22,r2
 8009888:	800ac480 	call	800ac48 <__udivsi3>
 800988c:	1009883a 	mov	r4,r2
 8009890:	900b883a 	mov	r5,r18
 8009894:	8001bbc0 	call	8001bbc <__mulsi3>
 8009898:	1009883a 	mov	r4,r2
 800989c:	b006943a 	slli	r3,r22,16
 80098a0:	9804d43a 	srli	r2,r19,16
 80098a4:	1886b03a 	or	r3,r3,r2
 80098a8:	1900042e 	bgeu	r3,r4,80098bc <__umoddi3+0xec>
 80098ac:	1c07883a 	add	r3,r3,r16
 80098b0:	1c000236 	bltu	r3,r16,80098bc <__umoddi3+0xec>
 80098b4:	1900012e 	bgeu	r3,r4,80098bc <__umoddi3+0xec>
 80098b8:	1c07883a 	add	r3,r3,r16
 80098bc:	1929c83a 	sub	r20,r3,r4
 80098c0:	a009883a 	mov	r4,r20
 80098c4:	880b883a 	mov	r5,r17
 80098c8:	800ac500 	call	800ac50 <__umodsi3>
 80098cc:	102d883a 	mov	r22,r2
 80098d0:	a009883a 	mov	r4,r20
 80098d4:	880b883a 	mov	r5,r17
 80098d8:	b02c943a 	slli	r22,r22,16
 80098dc:	800ac480 	call	800ac48 <__udivsi3>
 80098e0:	1009883a 	mov	r4,r2
 80098e4:	900b883a 	mov	r5,r18
 80098e8:	9cffffcc 	andi	r19,r19,65535
 80098ec:	8001bbc0 	call	8001bbc <__mulsi3>
 80098f0:	b4e6b03a 	or	r19,r22,r19
 80098f4:	9880572e 	bgeu	r19,r2,8009a54 <__umoddi3+0x284>
 80098f8:	00005206 	br	8009a44 <__umoddi3+0x274>
 80098fc:	29c05936 	bltu	r5,r7,8009a64 <__umoddi3+0x294>
 8009900:	00bfffd4 	movui	r2,65535
 8009904:	11c0652e 	bgeu	r2,r7,8009a9c <__umoddi3+0x2cc>
 8009908:	00804034 	movhi	r2,256
 800990c:	10bfffc4 	addi	r2,r2,-1
 8009910:	11c11936 	bltu	r2,r7,8009d78 <__umoddi3+0x5a8>
 8009914:	00c00404 	movi	r3,16
 8009918:	1827883a 	mov	r19,r3
 800991c:	38c6d83a 	srl	r3,r7,r3
 8009920:	01020074 	movhi	r4,2049
 8009924:	21379c04 	addi	r4,r4,-8592
 8009928:	04000804 	movi	r16,32
 800992c:	20c7883a 	add	r3,r4,r3
 8009930:	18800003 	ldbu	r2,0(r3)
 8009934:	14e7883a 	add	r19,r2,r19
 8009938:	84e1c83a 	sub	r16,r16,r19
 800993c:	8000671e 	bne	r16,zero,8009adc <__umoddi3+0x30c>
 8009940:	3c400136 	bltu	r7,r17,8009948 <__umoddi3+0x178>
 8009944:	91812536 	bltu	r18,r6,8009ddc <__umoddi3+0x60c>
 8009948:	9185c83a 	sub	r2,r18,r6
 800994c:	89e3c83a 	sub	r17,r17,r7
 8009950:	90a5803a 	cmpltu	r18,r18,r2
 8009954:	8ca9c83a 	sub	r20,r17,r18
 8009958:	a007883a 	mov	r3,r20
 800995c:	00004306 	br	8009a6c <__umoddi3+0x29c>
 8009960:	3000041e 	bne	r6,zero,8009974 <__umoddi3+0x1a4>
 8009964:	01000044 	movi	r4,1
 8009968:	000b883a 	mov	r5,zero
 800996c:	800ac480 	call	800ac48 <__udivsi3>
 8009970:	1021883a 	mov	r16,r2
 8009974:	00bfffd4 	movui	r2,65535
 8009978:	1400532e 	bgeu	r2,r16,8009ac8 <__umoddi3+0x2f8>
 800997c:	00804034 	movhi	r2,256
 8009980:	10bfffc4 	addi	r2,r2,-1
 8009984:	14010536 	bltu	r2,r16,8009d9c <__umoddi3+0x5cc>
 8009988:	00800404 	movi	r2,16
 800998c:	1007883a 	mov	r3,r2
 8009990:	8084d83a 	srl	r2,r16,r2
 8009994:	01020074 	movhi	r4,2049
 8009998:	21379c04 	addi	r4,r4,-8592
 800999c:	05400804 	movi	r21,32
 80099a0:	2085883a 	add	r2,r4,r2
 80099a4:	10800003 	ldbu	r2,0(r2)
 80099a8:	10c7883a 	add	r3,r2,r3
 80099ac:	a8ebc83a 	sub	r21,r21,r3
 80099b0:	a800b81e 	bne	r21,zero,8009c94 <__umoddi3+0x4c4>
 80099b4:	8028d43a 	srli	r20,r16,16
 80099b8:	8c23c83a 	sub	r17,r17,r16
 80099bc:	85bfffcc 	andi	r22,r16,65535
 80099c0:	8809883a 	mov	r4,r17
 80099c4:	a00b883a 	mov	r5,r20
 80099c8:	800ac500 	call	800ac50 <__umodsi3>
 80099cc:	8809883a 	mov	r4,r17
 80099d0:	a00b883a 	mov	r5,r20
 80099d4:	1025883a 	mov	r18,r2
 80099d8:	800ac480 	call	800ac48 <__udivsi3>
 80099dc:	1009883a 	mov	r4,r2
 80099e0:	b00b883a 	mov	r5,r22
 80099e4:	8001bbc0 	call	8001bbc <__mulsi3>
 80099e8:	1009883a 	mov	r4,r2
 80099ec:	9006943a 	slli	r3,r18,16
 80099f0:	9804d43a 	srli	r2,r19,16
 80099f4:	1886b03a 	or	r3,r3,r2
 80099f8:	1900032e 	bgeu	r3,r4,8009a08 <__umoddi3+0x238>
 80099fc:	1c07883a 	add	r3,r3,r16
 8009a00:	1c000136 	bltu	r3,r16,8009a08 <__umoddi3+0x238>
 8009a04:	1900f336 	bltu	r3,r4,8009dd4 <__umoddi3+0x604>
 8009a08:	1923c83a 	sub	r17,r3,r4
 8009a0c:	8809883a 	mov	r4,r17
 8009a10:	a00b883a 	mov	r5,r20
 8009a14:	800ac500 	call	800ac50 <__umodsi3>
 8009a18:	102f883a 	mov	r23,r2
 8009a1c:	8809883a 	mov	r4,r17
 8009a20:	a00b883a 	mov	r5,r20
 8009a24:	b82e943a 	slli	r23,r23,16
 8009a28:	800ac480 	call	800ac48 <__udivsi3>
 8009a2c:	1009883a 	mov	r4,r2
 8009a30:	b00b883a 	mov	r5,r22
 8009a34:	9cffffcc 	andi	r19,r19,65535
 8009a38:	8001bbc0 	call	8001bbc <__mulsi3>
 8009a3c:	bce6b03a 	or	r19,r23,r19
 8009a40:	9880042e 	bgeu	r19,r2,8009a54 <__umoddi3+0x284>
 8009a44:	9c27883a 	add	r19,r19,r16
 8009a48:	9c000236 	bltu	r19,r16,8009a54 <__umoddi3+0x284>
 8009a4c:	9880012e 	bgeu	r19,r2,8009a54 <__umoddi3+0x284>
 8009a50:	9c27883a 	add	r19,r19,r16
 8009a54:	9885c83a 	sub	r2,r19,r2
 8009a58:	1544d83a 	srl	r2,r2,r21
 8009a5c:	0007883a 	mov	r3,zero
 8009a60:	00000206 	br	8009a6c <__umoddi3+0x29c>
 8009a64:	2005883a 	mov	r2,r4
 8009a68:	2807883a 	mov	r3,r5
 8009a6c:	dfc00c17 	ldw	ra,48(sp)
 8009a70:	df000b17 	ldw	fp,44(sp)
 8009a74:	ddc00a17 	ldw	r23,40(sp)
 8009a78:	dd800917 	ldw	r22,36(sp)
 8009a7c:	dd400817 	ldw	r21,32(sp)
 8009a80:	dd000717 	ldw	r20,28(sp)
 8009a84:	dcc00617 	ldw	r19,24(sp)
 8009a88:	dc800517 	ldw	r18,20(sp)
 8009a8c:	dc400417 	ldw	r17,16(sp)
 8009a90:	dc000317 	ldw	r16,12(sp)
 8009a94:	dec00d04 	addi	sp,sp,52
 8009a98:	f800283a 	ret
 8009a9c:	00803fc4 	movi	r2,255
 8009aa0:	11c0b236 	bltu	r2,r7,8009d6c <__umoddi3+0x59c>
 8009aa4:	0007883a 	mov	r3,zero
 8009aa8:	0027883a 	mov	r19,zero
 8009aac:	003f9b06 	br	800991c <__umoddi3+0x14c>
 8009ab0:	00804034 	movhi	r2,256
 8009ab4:	10bfffc4 	addi	r2,r2,-1
 8009ab8:	1180b236 	bltu	r2,r6,8009d84 <__umoddi3+0x5b4>
 8009abc:	00800404 	movi	r2,16
 8009ac0:	1009883a 	mov	r4,r2
 8009ac4:	003f5a06 	br	8009830 <__umoddi3+0x60>
 8009ac8:	00803fc4 	movi	r2,255
 8009acc:	1400b036 	bltu	r2,r16,8009d90 <__umoddi3+0x5c0>
 8009ad0:	0005883a 	mov	r2,zero
 8009ad4:	0007883a 	mov	r3,zero
 8009ad8:	003fad06 	br	8009990 <__umoddi3+0x1c0>
 8009adc:	34c4d83a 	srl	r2,r6,r19
 8009ae0:	3c0e983a 	sll	r7,r7,r16
 8009ae4:	8cf8d83a 	srl	fp,r17,r19
 8009ae8:	8c22983a 	sll	r17,r17,r16
 8009aec:	38a8b03a 	or	r20,r7,r2
 8009af0:	a02ad43a 	srli	r21,r20,16
 8009af4:	94c4d83a 	srl	r2,r18,r19
 8009af8:	e009883a 	mov	r4,fp
 8009afc:	a80b883a 	mov	r5,r21
 8009b00:	342c983a 	sll	r22,r6,r16
 8009b04:	88a2b03a 	or	r17,r17,r2
 8009b08:	800ac500 	call	800ac50 <__umodsi3>
 8009b0c:	e009883a 	mov	r4,fp
 8009b10:	a80b883a 	mov	r5,r21
 8009b14:	a5ffffcc 	andi	r23,r20,65535
 8009b18:	d8800215 	stw	r2,8(sp)
 8009b1c:	800ac480 	call	800ac48 <__udivsi3>
 8009b20:	1009883a 	mov	r4,r2
 8009b24:	b80b883a 	mov	r5,r23
 8009b28:	1039883a 	mov	fp,r2
 8009b2c:	8001bbc0 	call	8001bbc <__mulsi3>
 8009b30:	d8c00217 	ldw	r3,8(sp)
 8009b34:	1009883a 	mov	r4,r2
 8009b38:	8804d43a 	srli	r2,r17,16
 8009b3c:	1806943a 	slli	r3,r3,16
 8009b40:	9424983a 	sll	r18,r18,r16
 8009b44:	1886b03a 	or	r3,r3,r2
 8009b48:	1900042e 	bgeu	r3,r4,8009b5c <__umoddi3+0x38c>
 8009b4c:	1d07883a 	add	r3,r3,r20
 8009b50:	e0bfffc4 	addi	r2,fp,-1
 8009b54:	1d009b2e 	bgeu	r3,r20,8009dc4 <__umoddi3+0x5f4>
 8009b58:	1039883a 	mov	fp,r2
 8009b5c:	1907c83a 	sub	r3,r3,r4
 8009b60:	1809883a 	mov	r4,r3
 8009b64:	a80b883a 	mov	r5,r21
 8009b68:	d8c00215 	stw	r3,8(sp)
 8009b6c:	800ac500 	call	800ac50 <__umodsi3>
 8009b70:	d8c00217 	ldw	r3,8(sp)
 8009b74:	a80b883a 	mov	r5,r21
 8009b78:	d8800015 	stw	r2,0(sp)
 8009b7c:	1809883a 	mov	r4,r3
 8009b80:	800ac480 	call	800ac48 <__udivsi3>
 8009b84:	1009883a 	mov	r4,r2
 8009b88:	b80b883a 	mov	r5,r23
 8009b8c:	102b883a 	mov	r21,r2
 8009b90:	8001bbc0 	call	8001bbc <__mulsi3>
 8009b94:	d9c00017 	ldw	r7,0(sp)
 8009b98:	8c7fffcc 	andi	r17,r17,65535
 8009b9c:	380e943a 	slli	r7,r7,16
 8009ba0:	3c4eb03a 	or	r7,r7,r17
 8009ba4:	3880042e 	bgeu	r7,r2,8009bb8 <__umoddi3+0x3e8>
 8009ba8:	3d0f883a 	add	r7,r7,r20
 8009bac:	a8ffffc4 	addi	r3,r21,-1
 8009bb0:	3d00802e 	bgeu	r7,r20,8009db4 <__umoddi3+0x5e4>
 8009bb4:	182b883a 	mov	r21,r3
 8009bb8:	e038943a 	slli	fp,fp,16
 8009bbc:	b010d43a 	srli	r8,r22,16
 8009bc0:	b1bfffcc 	andi	r6,r22,65535
 8009bc4:	af2ab03a 	or	r21,r21,fp
 8009bc8:	a82ed43a 	srli	r23,r21,16
 8009bcc:	ad7fffcc 	andi	r21,r21,65535
 8009bd0:	300b883a 	mov	r5,r6
 8009bd4:	a809883a 	mov	r4,r21
 8009bd8:	38a3c83a 	sub	r17,r7,r2
 8009bdc:	d9800115 	stw	r6,4(sp)
 8009be0:	da000015 	stw	r8,0(sp)
 8009be4:	8001bbc0 	call	8001bbc <__mulsi3>
 8009be8:	da000017 	ldw	r8,0(sp)
 8009bec:	a809883a 	mov	r4,r21
 8009bf0:	1039883a 	mov	fp,r2
 8009bf4:	400b883a 	mov	r5,r8
 8009bf8:	da000215 	stw	r8,8(sp)
 8009bfc:	8001bbc0 	call	8001bbc <__mulsi3>
 8009c00:	d9800117 	ldw	r6,4(sp)
 8009c04:	b809883a 	mov	r4,r23
 8009c08:	d8800015 	stw	r2,0(sp)
 8009c0c:	300b883a 	mov	r5,r6
 8009c10:	8001bbc0 	call	8001bbc <__mulsi3>
 8009c14:	d8c00217 	ldw	r3,8(sp)
 8009c18:	b809883a 	mov	r4,r23
 8009c1c:	102b883a 	mov	r21,r2
 8009c20:	180b883a 	mov	r5,r3
 8009c24:	8001bbc0 	call	8001bbc <__mulsi3>
 8009c28:	d9c00017 	ldw	r7,0(sp)
 8009c2c:	1007883a 	mov	r3,r2
 8009c30:	e004d43a 	srli	r2,fp,16
 8009c34:	a9c9883a 	add	r4,r21,r7
 8009c38:	2089883a 	add	r4,r4,r2
 8009c3c:	2540022e 	bgeu	r4,r21,8009c48 <__umoddi3+0x478>
 8009c40:	00800074 	movhi	r2,1
 8009c44:	1887883a 	add	r3,r3,r2
 8009c48:	2004d43a 	srli	r2,r4,16
 8009c4c:	2008943a 	slli	r4,r4,16
 8009c50:	e73fffcc 	andi	fp,fp,65535
 8009c54:	1887883a 	add	r3,r3,r2
 8009c58:	2709883a 	add	r4,r4,fp
 8009c5c:	88c03d36 	bltu	r17,r3,8009d54 <__umoddi3+0x584>
 8009c60:	88c06126 	beq	r17,r3,8009de8 <__umoddi3+0x618>
 8009c64:	88c7c83a 	sub	r3,r17,r3
 8009c68:	202d883a 	mov	r22,r4
 8009c6c:	95adc83a 	sub	r22,r18,r22
 8009c70:	95a5803a 	cmpltu	r18,r18,r22
 8009c74:	1c87c83a 	sub	r3,r3,r18
 8009c78:	1cc4983a 	sll	r2,r3,r19
 8009c7c:	b42cd83a 	srl	r22,r22,r16
 8009c80:	1c06d83a 	srl	r3,r3,r16
 8009c84:	1584b03a 	or	r2,r2,r22
 8009c88:	003f7806 	br	8009a6c <__umoddi3+0x29c>
 8009c8c:	002b883a 	mov	r21,zero
 8009c90:	003ef506 	br	8009868 <__umoddi3+0x98>
 8009c94:	8560983a 	sll	r16,r16,r21
 8009c98:	88e6d83a 	srl	r19,r17,r3
 8009c9c:	90c6d83a 	srl	r3,r18,r3
 8009ca0:	8028d43a 	srli	r20,r16,16
 8009ca4:	8d62983a 	sll	r17,r17,r21
 8009ca8:	9809883a 	mov	r4,r19
 8009cac:	a00b883a 	mov	r5,r20
 8009cb0:	88eeb03a 	or	r23,r17,r3
 8009cb4:	800ac500 	call	800ac50 <__umodsi3>
 8009cb8:	9809883a 	mov	r4,r19
 8009cbc:	a00b883a 	mov	r5,r20
 8009cc0:	1023883a 	mov	r17,r2
 8009cc4:	85bfffcc 	andi	r22,r16,65535
 8009cc8:	800ac480 	call	800ac48 <__udivsi3>
 8009ccc:	1009883a 	mov	r4,r2
 8009cd0:	b00b883a 	mov	r5,r22
 8009cd4:	8001bbc0 	call	8001bbc <__mulsi3>
 8009cd8:	1007883a 	mov	r3,r2
 8009cdc:	8808943a 	slli	r4,r17,16
 8009ce0:	b804d43a 	srli	r2,r23,16
 8009ce4:	9566983a 	sll	r19,r18,r21
 8009ce8:	2088b03a 	or	r4,r4,r2
 8009cec:	20c0042e 	bgeu	r4,r3,8009d00 <__umoddi3+0x530>
 8009cf0:	2409883a 	add	r4,r4,r16
 8009cf4:	24000236 	bltu	r4,r16,8009d00 <__umoddi3+0x530>
 8009cf8:	20c0012e 	bgeu	r4,r3,8009d00 <__umoddi3+0x530>
 8009cfc:	2409883a 	add	r4,r4,r16
 8009d00:	20e5c83a 	sub	r18,r4,r3
 8009d04:	9009883a 	mov	r4,r18
 8009d08:	a00b883a 	mov	r5,r20
 8009d0c:	800ac500 	call	800ac50 <__umodsi3>
 8009d10:	1023883a 	mov	r17,r2
 8009d14:	9009883a 	mov	r4,r18
 8009d18:	a00b883a 	mov	r5,r20
 8009d1c:	8822943a 	slli	r17,r17,16
 8009d20:	800ac480 	call	800ac48 <__udivsi3>
 8009d24:	1009883a 	mov	r4,r2
 8009d28:	b00b883a 	mov	r5,r22
 8009d2c:	bdffffcc 	andi	r23,r23,65535
 8009d30:	8001bbc0 	call	8001bbc <__mulsi3>
 8009d34:	8de2b03a 	or	r17,r17,r23
 8009d38:	8880042e 	bgeu	r17,r2,8009d4c <__umoddi3+0x57c>
 8009d3c:	8c23883a 	add	r17,r17,r16
 8009d40:	8c000236 	bltu	r17,r16,8009d4c <__umoddi3+0x57c>
 8009d44:	8880012e 	bgeu	r17,r2,8009d4c <__umoddi3+0x57c>
 8009d48:	8c23883a 	add	r17,r17,r16
 8009d4c:	88a3c83a 	sub	r17,r17,r2
 8009d50:	003f1b06 	br	80099c0 <__umoddi3+0x1f0>
 8009d54:	25adc83a 	sub	r22,r4,r22
 8009d58:	1d07c83a 	sub	r3,r3,r20
 8009d5c:	2589803a 	cmpltu	r4,r4,r22
 8009d60:	1907c83a 	sub	r3,r3,r4
 8009d64:	88c7c83a 	sub	r3,r17,r3
 8009d68:	003fc006 	br	8009c6c <__umoddi3+0x49c>
 8009d6c:	00c00204 	movi	r3,8
 8009d70:	1827883a 	mov	r19,r3
 8009d74:	003ee906 	br	800991c <__umoddi3+0x14c>
 8009d78:	00c00604 	movi	r3,24
 8009d7c:	1827883a 	mov	r19,r3
 8009d80:	003ee606 	br	800991c <__umoddi3+0x14c>
 8009d84:	00800604 	movi	r2,24
 8009d88:	1009883a 	mov	r4,r2
 8009d8c:	003ea806 	br	8009830 <__umoddi3+0x60>
 8009d90:	00800204 	movi	r2,8
 8009d94:	1007883a 	mov	r3,r2
 8009d98:	003efd06 	br	8009990 <__umoddi3+0x1c0>
 8009d9c:	00800604 	movi	r2,24
 8009da0:	1007883a 	mov	r3,r2
 8009da4:	003efa06 	br	8009990 <__umoddi3+0x1c0>
 8009da8:	00800204 	movi	r2,8
 8009dac:	1009883a 	mov	r4,r2
 8009db0:	003e9f06 	br	8009830 <__umoddi3+0x60>
 8009db4:	38bf7f2e 	bgeu	r7,r2,8009bb4 <__umoddi3+0x3e4>
 8009db8:	ad7fff84 	addi	r21,r21,-2
 8009dbc:	3d0f883a 	add	r7,r7,r20
 8009dc0:	003f7d06 	br	8009bb8 <__umoddi3+0x3e8>
 8009dc4:	193f642e 	bgeu	r3,r4,8009b58 <__umoddi3+0x388>
 8009dc8:	e73fff84 	addi	fp,fp,-2
 8009dcc:	1d07883a 	add	r3,r3,r20
 8009dd0:	003f6206 	br	8009b5c <__umoddi3+0x38c>
 8009dd4:	1c07883a 	add	r3,r3,r16
 8009dd8:	003f0b06 	br	8009a08 <__umoddi3+0x238>
 8009ddc:	9005883a 	mov	r2,r18
 8009de0:	a007883a 	mov	r3,r20
 8009de4:	003f2106 	br	8009a6c <__umoddi3+0x29c>
 8009de8:	913fda36 	bltu	r18,r4,8009d54 <__umoddi3+0x584>
 8009dec:	202d883a 	mov	r22,r4
 8009df0:	0007883a 	mov	r3,zero
 8009df4:	003f9d06 	br	8009c6c <__umoddi3+0x49c>

08009df8 <_fpadd_parts>:
 8009df8:	2005883a 	mov	r2,r4
 8009dfc:	21000017 	ldw	r4,0(r4)
 8009e00:	01c00044 	movi	r7,1
 8009e04:	3900622e 	bgeu	r7,r4,8009f90 <_fpadd_parts+0x198>
 8009e08:	28c00017 	ldw	r3,0(r5)
 8009e0c:	38c05f2e 	bgeu	r7,r3,8009f8c <_fpadd_parts+0x194>
 8009e10:	01c00104 	movi	r7,4
 8009e14:	21c0c626 	beq	r4,r7,800a130 <_fpadd_parts+0x338>
 8009e18:	19c05c26 	beq	r3,r7,8009f8c <_fpadd_parts+0x194>
 8009e1c:	01c00084 	movi	r7,2
 8009e20:	19c06b26 	beq	r3,r7,8009fd0 <_fpadd_parts+0x1d8>
 8009e24:	21c05926 	beq	r4,r7,8009f8c <_fpadd_parts+0x194>
 8009e28:	11c00217 	ldw	r7,8(r2)
 8009e2c:	2ac00217 	ldw	r11,8(r5)
 8009e30:	13000317 	ldw	r12,12(r2)
 8009e34:	13400417 	ldw	r13,16(r2)
 8009e38:	3ac9c83a 	sub	r4,r7,r11
 8009e3c:	2a000317 	ldw	r8,12(r5)
 8009e40:	2a400417 	ldw	r9,16(r5)
 8009e44:	2015883a 	mov	r10,r4
 8009e48:	20007516 	blt	r4,zero,800a020 <_fpadd_parts+0x228>
 8009e4c:	00c00fc4 	movi	r3,63
 8009e50:	1a805016 	blt	r3,r10,8009f94 <_fpadd_parts+0x19c>
 8009e54:	0100870e 	bge	zero,r4,800a074 <_fpadd_parts+0x27c>
 8009e58:	50fff804 	addi	r3,r10,-32
 8009e5c:	18009916 	blt	r3,zero,800a0c4 <_fpadd_parts+0x2cc>
 8009e60:	48d6d83a 	srl	r11,r9,r3
 8009e64:	001d883a 	mov	r14,zero
 8009e68:	18009e16 	blt	r3,zero,800a0e4 <_fpadd_parts+0x2ec>
 8009e6c:	01000044 	movi	r4,1
 8009e70:	20c6983a 	sll	r3,r4,r3
 8009e74:	0015883a 	mov	r10,zero
 8009e78:	513fffc4 	addi	r4,r10,-1
 8009e7c:	2295403a 	cmpgeu	r10,r4,r10
 8009e80:	1a87c83a 	sub	r3,r3,r10
 8009e84:	1a52703a 	and	r9,r3,r9
 8009e88:	2210703a 	and	r8,r4,r8
 8009e8c:	4250b03a 	or	r8,r8,r9
 8009e90:	4010c03a 	cmpne	r8,r8,zero
 8009e94:	42d0b03a 	or	r8,r8,r11
 8009e98:	7013883a 	mov	r9,r14
 8009e9c:	11000117 	ldw	r4,4(r2)
 8009ea0:	28800117 	ldw	r2,4(r5)
 8009ea4:	20804126 	beq	r4,r2,8009fac <_fpadd_parts+0x1b4>
 8009ea8:	20006326 	beq	r4,zero,800a038 <_fpadd_parts+0x240>
 8009eac:	4305c83a 	sub	r2,r8,r12
 8009eb0:	4091803a 	cmpltu	r8,r8,r2
 8009eb4:	4b47c83a 	sub	r3,r9,r13
 8009eb8:	1a07c83a 	sub	r3,r3,r8
 8009ebc:	18006316 	blt	r3,zero,800a04c <_fpadd_parts+0x254>
 8009ec0:	30000115 	stw	zero,4(r6)
 8009ec4:	31c00215 	stw	r7,8(r6)
 8009ec8:	30800315 	stw	r2,12(r6)
 8009ecc:	30c00415 	stw	r3,16(r6)
 8009ed0:	11ffffc4 	addi	r7,r2,-1
 8009ed4:	388b403a 	cmpgeu	r5,r7,r2
 8009ed8:	194bc83a 	sub	r5,r3,r5
 8009edc:	01040034 	movhi	r4,4096
 8009ee0:	213fffc4 	addi	r4,r4,-1
 8009ee4:	21401736 	bltu	r4,r5,8009f44 <_fpadd_parts+0x14c>
 8009ee8:	29008226 	beq	r5,r4,800a0f4 <_fpadd_parts+0x2fc>
 8009eec:	31400217 	ldw	r5,8(r6)
 8009ef0:	02840034 	movhi	r10,4096
 8009ef4:	52bfffc4 	addi	r10,r10,-1
 8009ef8:	033fff84 	movi	r12,-2
 8009efc:	297fffc4 	addi	r5,r5,-1
 8009f00:	00000106 	br	8009f08 <_fpadd_parts+0x110>
 8009f04:	3a804a26 	beq	r7,r10,800a030 <_fpadd_parts+0x238>
 8009f08:	1089883a 	add	r4,r2,r2
 8009f0c:	2091803a 	cmpltu	r8,r4,r2
 8009f10:	18c7883a 	add	r3,r3,r3
 8009f14:	227fffc4 	addi	r9,r4,-1
 8009f18:	40d1883a 	add	r8,r8,r3
 8009f1c:	490f403a 	cmpgeu	r7,r9,r4
 8009f20:	41cfc83a 	sub	r7,r8,r7
 8009f24:	2817883a 	mov	r11,r5
 8009f28:	2005883a 	mov	r2,r4
 8009f2c:	4007883a 	mov	r3,r8
 8009f30:	297fffc4 	addi	r5,r5,-1
 8009f34:	51fff32e 	bgeu	r10,r7,8009f04 <_fpadd_parts+0x10c>
 8009f38:	31000315 	stw	r4,12(r6)
 8009f3c:	32000415 	stw	r8,16(r6)
 8009f40:	32c00215 	stw	r11,8(r6)
 8009f44:	010000c4 	movi	r4,3
 8009f48:	31000015 	stw	r4,0(r6)
 8009f4c:	01080034 	movhi	r4,8192
 8009f50:	213fffc4 	addi	r4,r4,-1
 8009f54:	20c00b2e 	bgeu	r4,r3,8009f84 <_fpadd_parts+0x18c>
 8009f58:	180e97fa 	slli	r7,r3,31
 8009f5c:	1008d07a 	srli	r4,r2,1
 8009f60:	31400217 	ldw	r5,8(r6)
 8009f64:	1806d07a 	srli	r3,r3,1
 8009f68:	1080004c 	andi	r2,r2,1
 8009f6c:	3908b03a 	or	r4,r7,r4
 8009f70:	1108b03a 	or	r4,r2,r4
 8009f74:	29400044 	addi	r5,r5,1
 8009f78:	31000315 	stw	r4,12(r6)
 8009f7c:	30c00415 	stw	r3,16(r6)
 8009f80:	31400215 	stw	r5,8(r6)
 8009f84:	3005883a 	mov	r2,r6
 8009f88:	f800283a 	ret
 8009f8c:	2805883a 	mov	r2,r5
 8009f90:	f800283a 	ret
 8009f94:	59c01e0e 	bge	r11,r7,800a010 <_fpadd_parts+0x218>
 8009f98:	11000117 	ldw	r4,4(r2)
 8009f9c:	28800117 	ldw	r2,4(r5)
 8009fa0:	0011883a 	mov	r8,zero
 8009fa4:	0013883a 	mov	r9,zero
 8009fa8:	20bfbf1e 	bne	r4,r2,8009ea8 <_fpadd_parts+0xb0>
 8009fac:	4305883a 	add	r2,r8,r12
 8009fb0:	1207803a 	cmpltu	r3,r2,r8
 8009fb4:	4b53883a 	add	r9,r9,r13
 8009fb8:	1a47883a 	add	r3,r3,r9
 8009fbc:	31000115 	stw	r4,4(r6)
 8009fc0:	31c00215 	stw	r7,8(r6)
 8009fc4:	30800315 	stw	r2,12(r6)
 8009fc8:	30c00415 	stw	r3,16(r6)
 8009fcc:	003fdd06 	br	8009f44 <_fpadd_parts+0x14c>
 8009fd0:	20ffef1e 	bne	r4,r3,8009f90 <_fpadd_parts+0x198>
 8009fd4:	31000015 	stw	r4,0(r6)
 8009fd8:	10c00117 	ldw	r3,4(r2)
 8009fdc:	30c00115 	stw	r3,4(r6)
 8009fe0:	10c00217 	ldw	r3,8(r2)
 8009fe4:	11000117 	ldw	r4,4(r2)
 8009fe8:	29400117 	ldw	r5,4(r5)
 8009fec:	30c00215 	stw	r3,8(r6)
 8009ff0:	10c00317 	ldw	r3,12(r2)
 8009ff4:	2908703a 	and	r4,r5,r4
 8009ff8:	30c00315 	stw	r3,12(r6)
 8009ffc:	10c00417 	ldw	r3,16(r2)
 800a000:	31000115 	stw	r4,4(r6)
 800a004:	3005883a 	mov	r2,r6
 800a008:	30c00415 	stw	r3,16(r6)
 800a00c:	f800283a 	ret
 800a010:	580f883a 	mov	r7,r11
 800a014:	0019883a 	mov	r12,zero
 800a018:	001b883a 	mov	r13,zero
 800a01c:	003f9f06 	br	8009e9c <_fpadd_parts+0xa4>
 800a020:	0115c83a 	sub	r10,zero,r4
 800a024:	00c00fc4 	movi	r3,63
 800a028:	1abfda16 	blt	r3,r10,8009f94 <_fpadd_parts+0x19c>
 800a02c:	003f8906 	br	8009e54 <_fpadd_parts+0x5c>
 800a030:	627fb52e 	bgeu	r12,r9,8009f08 <_fpadd_parts+0x110>
 800a034:	003fc006 	br	8009f38 <_fpadd_parts+0x140>
 800a038:	6205c83a 	sub	r2,r12,r8
 800a03c:	6099803a 	cmpltu	r12,r12,r2
 800a040:	6a47c83a 	sub	r3,r13,r9
 800a044:	1b07c83a 	sub	r3,r3,r12
 800a048:	183f9d0e 	bge	r3,zero,8009ec0 <_fpadd_parts+0xc8>
 800a04c:	0085c83a 	sub	r2,zero,r2
 800a050:	1008c03a 	cmpne	r4,r2,zero
 800a054:	00c7c83a 	sub	r3,zero,r3
 800a058:	1907c83a 	sub	r3,r3,r4
 800a05c:	01000044 	movi	r4,1
 800a060:	31000115 	stw	r4,4(r6)
 800a064:	31c00215 	stw	r7,8(r6)
 800a068:	30800315 	stw	r2,12(r6)
 800a06c:	30c00415 	stw	r3,16(r6)
 800a070:	003f9706 	br	8009ed0 <_fpadd_parts+0xd8>
 800a074:	203f8926 	beq	r4,zero,8009e9c <_fpadd_parts+0xa4>
 800a078:	50fff804 	addi	r3,r10,-32
 800a07c:	3a8f883a 	add	r7,r7,r10
 800a080:	18002316 	blt	r3,zero,800a110 <_fpadd_parts+0x318>
 800a084:	68d6d83a 	srl	r11,r13,r3
 800a088:	001d883a 	mov	r14,zero
 800a08c:	18001c16 	blt	r3,zero,800a100 <_fpadd_parts+0x308>
 800a090:	01000044 	movi	r4,1
 800a094:	20c6983a 	sll	r3,r4,r3
 800a098:	0015883a 	mov	r10,zero
 800a09c:	513fffc4 	addi	r4,r10,-1
 800a0a0:	2295403a 	cmpgeu	r10,r4,r10
 800a0a4:	1a87c83a 	sub	r3,r3,r10
 800a0a8:	1b5a703a 	and	r13,r3,r13
 800a0ac:	2318703a 	and	r12,r4,r12
 800a0b0:	6358b03a 	or	r12,r12,r13
 800a0b4:	6018c03a 	cmpne	r12,r12,zero
 800a0b8:	62d8b03a 	or	r12,r12,r11
 800a0bc:	701b883a 	mov	r13,r14
 800a0c0:	003f7606 	br	8009e9c <_fpadd_parts+0xa4>
 800a0c4:	4808907a 	slli	r4,r9,1
 800a0c8:	02c007c4 	movi	r11,31
 800a0cc:	5a97c83a 	sub	r11,r11,r10
 800a0d0:	22c8983a 	sll	r4,r4,r11
 800a0d4:	4296d83a 	srl	r11,r8,r10
 800a0d8:	4a9cd83a 	srl	r14,r9,r10
 800a0dc:	22d6b03a 	or	r11,r4,r11
 800a0e0:	003f6106 	br	8009e68 <_fpadd_parts+0x70>
 800a0e4:	00c00044 	movi	r3,1
 800a0e8:	1a94983a 	sll	r10,r3,r10
 800a0ec:	0007883a 	mov	r3,zero
 800a0f0:	003f6106 	br	8009e78 <_fpadd_parts+0x80>
 800a0f4:	013fff84 	movi	r4,-2
 800a0f8:	21ff7c2e 	bgeu	r4,r7,8009eec <_fpadd_parts+0xf4>
 800a0fc:	003f9106 	br	8009f44 <_fpadd_parts+0x14c>
 800a100:	00c00044 	movi	r3,1
 800a104:	1a94983a 	sll	r10,r3,r10
 800a108:	0007883a 	mov	r3,zero
 800a10c:	003fe306 	br	800a09c <_fpadd_parts+0x2a4>
 800a110:	6816907a 	slli	r11,r13,1
 800a114:	010007c4 	movi	r4,31
 800a118:	2289c83a 	sub	r4,r4,r10
 800a11c:	5908983a 	sll	r4,r11,r4
 800a120:	6296d83a 	srl	r11,r12,r10
 800a124:	6a9cd83a 	srl	r14,r13,r10
 800a128:	22d6b03a 	or	r11,r4,r11
 800a12c:	003fd706 	br	800a08c <_fpadd_parts+0x294>
 800a130:	193f971e 	bne	r3,r4,8009f90 <_fpadd_parts+0x198>
 800a134:	11000117 	ldw	r4,4(r2)
 800a138:	28c00117 	ldw	r3,4(r5)
 800a13c:	20ff9426 	beq	r4,r3,8009f90 <_fpadd_parts+0x198>
 800a140:	00820074 	movhi	r2,2049
 800a144:	10b79704 	addi	r2,r2,-8612
 800a148:	f800283a 	ret

0800a14c <__adddf3>:
 800a14c:	deffec04 	addi	sp,sp,-80
 800a150:	d9001115 	stw	r4,68(sp)
 800a154:	d9401215 	stw	r5,72(sp)
 800a158:	d9001104 	addi	r4,sp,68
 800a15c:	d9400a04 	addi	r5,sp,40
 800a160:	dfc01315 	stw	ra,76(sp)
 800a164:	d9c01015 	stw	r7,64(sp)
 800a168:	d9800f15 	stw	r6,60(sp)
 800a16c:	800b0380 	call	800b038 <__unpack_d>
 800a170:	d9000f04 	addi	r4,sp,60
 800a174:	d9400504 	addi	r5,sp,20
 800a178:	800b0380 	call	800b038 <__unpack_d>
 800a17c:	d9000a04 	addi	r4,sp,40
 800a180:	d9400504 	addi	r5,sp,20
 800a184:	d80d883a 	mov	r6,sp
 800a188:	8009df80 	call	8009df8 <_fpadd_parts>
 800a18c:	1009883a 	mov	r4,r2
 800a190:	800ae140 	call	800ae14 <__pack_d>
 800a194:	dfc01317 	ldw	ra,76(sp)
 800a198:	dec01404 	addi	sp,sp,80
 800a19c:	f800283a 	ret

0800a1a0 <__subdf3>:
 800a1a0:	deffec04 	addi	sp,sp,-80
 800a1a4:	d9001115 	stw	r4,68(sp)
 800a1a8:	d9401215 	stw	r5,72(sp)
 800a1ac:	d9001104 	addi	r4,sp,68
 800a1b0:	d9400a04 	addi	r5,sp,40
 800a1b4:	dfc01315 	stw	ra,76(sp)
 800a1b8:	d9c01015 	stw	r7,64(sp)
 800a1bc:	d9800f15 	stw	r6,60(sp)
 800a1c0:	800b0380 	call	800b038 <__unpack_d>
 800a1c4:	d9000f04 	addi	r4,sp,60
 800a1c8:	d9400504 	addi	r5,sp,20
 800a1cc:	800b0380 	call	800b038 <__unpack_d>
 800a1d0:	d8800617 	ldw	r2,24(sp)
 800a1d4:	d9000a04 	addi	r4,sp,40
 800a1d8:	d9400504 	addi	r5,sp,20
 800a1dc:	d80d883a 	mov	r6,sp
 800a1e0:	1080005c 	xori	r2,r2,1
 800a1e4:	d8800615 	stw	r2,24(sp)
 800a1e8:	8009df80 	call	8009df8 <_fpadd_parts>
 800a1ec:	1009883a 	mov	r4,r2
 800a1f0:	800ae140 	call	800ae14 <__pack_d>
 800a1f4:	dfc01317 	ldw	ra,76(sp)
 800a1f8:	dec01404 	addi	sp,sp,80
 800a1fc:	f800283a 	ret

0800a200 <__muldf3>:
 800a200:	deffe404 	addi	sp,sp,-112
 800a204:	d9001115 	stw	r4,68(sp)
 800a208:	d9401215 	stw	r5,72(sp)
 800a20c:	d9001104 	addi	r4,sp,68
 800a210:	d9400a04 	addi	r5,sp,40
 800a214:	dfc01b15 	stw	ra,108(sp)
 800a218:	d9800f15 	stw	r6,60(sp)
 800a21c:	d9c01015 	stw	r7,64(sp)
 800a220:	ddc01a15 	stw	r23,104(sp)
 800a224:	dd801915 	stw	r22,100(sp)
 800a228:	dd401815 	stw	r21,96(sp)
 800a22c:	dd001715 	stw	r20,92(sp)
 800a230:	dcc01615 	stw	r19,88(sp)
 800a234:	dc801515 	stw	r18,84(sp)
 800a238:	dc401415 	stw	r17,80(sp)
 800a23c:	dc001315 	stw	r16,76(sp)
 800a240:	800b0380 	call	800b038 <__unpack_d>
 800a244:	d9000f04 	addi	r4,sp,60
 800a248:	d9400504 	addi	r5,sp,20
 800a24c:	800b0380 	call	800b038 <__unpack_d>
 800a250:	d8c00a17 	ldw	r3,40(sp)
 800a254:	00800044 	movi	r2,1
 800a258:	10c01136 	bltu	r2,r3,800a2a0 <__muldf3+0xa0>
 800a25c:	d8c00b17 	ldw	r3,44(sp)
 800a260:	d8800617 	ldw	r2,24(sp)
 800a264:	d9000a04 	addi	r4,sp,40
 800a268:	1884c03a 	cmpne	r2,r3,r2
 800a26c:	d8800b15 	stw	r2,44(sp)
 800a270:	800ae140 	call	800ae14 <__pack_d>
 800a274:	dfc01b17 	ldw	ra,108(sp)
 800a278:	ddc01a17 	ldw	r23,104(sp)
 800a27c:	dd801917 	ldw	r22,100(sp)
 800a280:	dd401817 	ldw	r21,96(sp)
 800a284:	dd001717 	ldw	r20,92(sp)
 800a288:	dcc01617 	ldw	r19,88(sp)
 800a28c:	dc801517 	ldw	r18,84(sp)
 800a290:	dc401417 	ldw	r17,80(sp)
 800a294:	dc001317 	ldw	r16,76(sp)
 800a298:	dec01c04 	addi	sp,sp,112
 800a29c:	f800283a 	ret
 800a2a0:	d9000517 	ldw	r4,20(sp)
 800a2a4:	11000636 	bltu	r2,r4,800a2c0 <__muldf3+0xc0>
 800a2a8:	d8800617 	ldw	r2,24(sp)
 800a2ac:	d8c00b17 	ldw	r3,44(sp)
 800a2b0:	d9000504 	addi	r4,sp,20
 800a2b4:	1884c03a 	cmpne	r2,r3,r2
 800a2b8:	d8800615 	stw	r2,24(sp)
 800a2bc:	003fec06 	br	800a270 <__muldf3+0x70>
 800a2c0:	00800104 	movi	r2,4
 800a2c4:	1880051e 	bne	r3,r2,800a2dc <__muldf3+0xdc>
 800a2c8:	00800084 	movi	r2,2
 800a2cc:	20bfe31e 	bne	r4,r2,800a25c <__muldf3+0x5c>
 800a2d0:	01020074 	movhi	r4,2049
 800a2d4:	21379704 	addi	r4,r4,-8612
 800a2d8:	003fe506 	br	800a270 <__muldf3+0x70>
 800a2dc:	2080031e 	bne	r4,r2,800a2ec <__muldf3+0xec>
 800a2e0:	00800084 	movi	r2,2
 800a2e4:	18bffa26 	beq	r3,r2,800a2d0 <__muldf3+0xd0>
 800a2e8:	003fef06 	br	800a2a8 <__muldf3+0xa8>
 800a2ec:	00800084 	movi	r2,2
 800a2f0:	18bfda26 	beq	r3,r2,800a25c <__muldf3+0x5c>
 800a2f4:	20bfec26 	beq	r4,r2,800a2a8 <__muldf3+0xa8>
 800a2f8:	dc000d17 	ldw	r16,52(sp)
 800a2fc:	dd000817 	ldw	r20,32(sp)
 800a300:	dc800917 	ldw	r18,36(sp)
 800a304:	8009883a 	mov	r4,r16
 800a308:	000b883a 	mov	r5,zero
 800a30c:	a00d883a 	mov	r6,r20
 800a310:	000f883a 	mov	r7,zero
 800a314:	800ac580 	call	800ac58 <__muldi3>
 800a318:	dc400e17 	ldw	r17,56(sp)
 800a31c:	9009883a 	mov	r4,r18
 800a320:	800d883a 	mov	r6,r16
 800a324:	000b883a 	mov	r5,zero
 800a328:	000f883a 	mov	r7,zero
 800a32c:	102f883a 	mov	r23,r2
 800a330:	1827883a 	mov	r19,r3
 800a334:	800ac580 	call	800ac58 <__muldi3>
 800a338:	900d883a 	mov	r6,r18
 800a33c:	8809883a 	mov	r4,r17
 800a340:	000b883a 	mov	r5,zero
 800a344:	000f883a 	mov	r7,zero
 800a348:	102b883a 	mov	r21,r2
 800a34c:	1821883a 	mov	r16,r3
 800a350:	800ac580 	call	800ac58 <__muldi3>
 800a354:	8809883a 	mov	r4,r17
 800a358:	000b883a 	mov	r5,zero
 800a35c:	a00d883a 	mov	r6,r20
 800a360:	000f883a 	mov	r7,zero
 800a364:	102d883a 	mov	r22,r2
 800a368:	1825883a 	mov	r18,r3
 800a36c:	800ac580 	call	800ac58 <__muldi3>
 800a370:	154b883a 	add	r5,r2,r21
 800a374:	2889803a 	cmpltu	r4,r5,r2
 800a378:	1c07883a 	add	r3,r3,r16
 800a37c:	20c9883a 	add	r4,r4,r3
 800a380:	24004b36 	bltu	r4,r16,800a4b0 <__muldf3+0x2b0>
 800a384:	8100011e 	bne	r16,r4,800a38c <__muldf3+0x18c>
 800a388:	2d404936 	bltu	r5,r21,800a4b0 <__muldf3+0x2b0>
 800a38c:	0011883a 	mov	r8,zero
 800a390:	0007883a 	mov	r3,zero
 800a394:	2ccb883a 	add	r5,r5,r19
 800a398:	b80d883a 	mov	r6,r23
 800a39c:	2cc0012e 	bgeu	r5,r19,800a3a4 <__muldf3+0x1a4>
 800a3a0:	02000044 	movi	r8,1
 800a3a4:	258f883a 	add	r7,r4,r22
 800a3a8:	3909803a 	cmpltu	r4,r7,r4
 800a3ac:	da400c17 	ldw	r9,48(sp)
 800a3b0:	2489883a 	add	r4,r4,r18
 800a3b4:	d8800717 	ldw	r2,28(sp)
 800a3b8:	20c9883a 	add	r4,r4,r3
 800a3bc:	da800b17 	ldw	r10,44(sp)
 800a3c0:	d8c00617 	ldw	r3,24(sp)
 800a3c4:	3a11883a 	add	r8,r7,r8
 800a3c8:	4885883a 	add	r2,r9,r2
 800a3cc:	50c6c03a 	cmpne	r3,r10,r3
 800a3d0:	41cf803a 	cmpltu	r7,r8,r7
 800a3d4:	12400104 	addi	r9,r2,4
 800a3d8:	d8c00115 	stw	r3,4(sp)
 800a3dc:	3909883a 	add	r4,r7,r4
 800a3e0:	da400215 	stw	r9,8(sp)
 800a3e4:	03480034 	movhi	r13,8192
 800a3e8:	6b7fffc4 	addi	r13,r13,-1
 800a3ec:	4007883a 	mov	r3,r8
 800a3f0:	6900102e 	bgeu	r13,r4,800a434 <__muldf3+0x234>
 800a3f4:	10800144 	addi	r2,r2,5
 800a3f8:	180ed07a 	srli	r7,r3,1
 800a3fc:	18c0004c 	andi	r3,r3,1
 800a400:	201097fa 	slli	r8,r4,31
 800a404:	281697fa 	slli	r11,r5,31
 800a408:	2008d07a 	srli	r4,r4,1
 800a40c:	3014d07a 	srli	r10,r6,1
 800a410:	2812d07a 	srli	r9,r5,1
 800a414:	1019883a 	mov	r12,r2
 800a418:	18000226 	beq	r3,zero,800a424 <__muldf3+0x224>
 800a41c:	5a8cb03a 	or	r6,r11,r10
 800a420:	49600034 	orhi	r5,r9,32768
 800a424:	41c6b03a 	or	r3,r8,r7
 800a428:	10800044 	addi	r2,r2,1
 800a42c:	693ff236 	bltu	r13,r4,800a3f8 <__muldf3+0x1f8>
 800a430:	db000215 	stw	r12,8(sp)
 800a434:	03440034 	movhi	r13,4096
 800a438:	6b7fffc4 	addi	r13,r13,-1
 800a43c:	69001336 	bltu	r13,r4,800a48c <__muldf3+0x28c>
 800a440:	d8800217 	ldw	r2,8(sp)
 800a444:	10bfffc4 	addi	r2,r2,-1
 800a448:	18d3883a 	add	r9,r3,r3
 800a44c:	48c7803a 	cmpltu	r3,r9,r3
 800a450:	2109883a 	add	r4,r4,r4
 800a454:	190f883a 	add	r7,r3,r4
 800a458:	3191883a 	add	r8,r6,r6
 800a45c:	4197803a 	cmpltu	r11,r8,r6
 800a460:	2955883a 	add	r10,r5,r5
 800a464:	1019883a 	mov	r12,r2
 800a468:	4807883a 	mov	r3,r9
 800a46c:	3809883a 	mov	r4,r7
 800a470:	2800010e 	bge	r5,zero,800a478 <__muldf3+0x278>
 800a474:	48c00054 	ori	r3,r9,1
 800a478:	400d883a 	mov	r6,r8
 800a47c:	5a8b883a 	add	r5,r11,r10
 800a480:	10bfffc4 	addi	r2,r2,-1
 800a484:	69fff02e 	bgeu	r13,r7,800a448 <__muldf3+0x248>
 800a488:	db000215 	stw	r12,8(sp)
 800a48c:	18803fcc 	andi	r2,r3,255
 800a490:	01c02004 	movi	r7,128
 800a494:	11c00926 	beq	r2,r7,800a4bc <__muldf3+0x2bc>
 800a498:	008000c4 	movi	r2,3
 800a49c:	d9000415 	stw	r4,16(sp)
 800a4a0:	d8c00315 	stw	r3,12(sp)
 800a4a4:	d8800015 	stw	r2,0(sp)
 800a4a8:	d809883a 	mov	r4,sp
 800a4ac:	003f7006 	br	800a270 <__muldf3+0x70>
 800a4b0:	0011883a 	mov	r8,zero
 800a4b4:	00c00044 	movi	r3,1
 800a4b8:	003fb606 	br	800a394 <__muldf3+0x194>
 800a4bc:	19c0400c 	andi	r7,r3,256
 800a4c0:	383ff51e 	bne	r7,zero,800a498 <__muldf3+0x298>
 800a4c4:	314ab03a 	or	r5,r6,r5
 800a4c8:	283ff326 	beq	r5,zero,800a498 <__muldf3+0x298>
 800a4cc:	1885883a 	add	r2,r3,r2
 800a4d0:	10cb803a 	cmpltu	r5,r2,r3
 800a4d4:	00ffc004 	movi	r3,-256
 800a4d8:	10c6703a 	and	r3,r2,r3
 800a4dc:	2909883a 	add	r4,r5,r4
 800a4e0:	003fed06 	br	800a498 <__muldf3+0x298>

0800a4e4 <__divdf3>:
 800a4e4:	defff104 	addi	sp,sp,-60
 800a4e8:	d9000c15 	stw	r4,48(sp)
 800a4ec:	d9400d15 	stw	r5,52(sp)
 800a4f0:	d9000c04 	addi	r4,sp,48
 800a4f4:	d9400504 	addi	r5,sp,20
 800a4f8:	dfc00e15 	stw	ra,56(sp)
 800a4fc:	d9800a15 	stw	r6,40(sp)
 800a500:	d9c00b15 	stw	r7,44(sp)
 800a504:	800b0380 	call	800b038 <__unpack_d>
 800a508:	d9000a04 	addi	r4,sp,40
 800a50c:	d80b883a 	mov	r5,sp
 800a510:	800b0380 	call	800b038 <__unpack_d>
 800a514:	d8c00517 	ldw	r3,20(sp)
 800a518:	00800044 	movi	r2,1
 800a51c:	10c00536 	bltu	r2,r3,800a534 <__divdf3+0x50>
 800a520:	d9000504 	addi	r4,sp,20
 800a524:	800ae140 	call	800ae14 <__pack_d>
 800a528:	dfc00e17 	ldw	ra,56(sp)
 800a52c:	dec00f04 	addi	sp,sp,60
 800a530:	f800283a 	ret
 800a534:	d9000017 	ldw	r4,0(sp)
 800a538:	11000536 	bltu	r2,r4,800a550 <__divdf3+0x6c>
 800a53c:	d809883a 	mov	r4,sp
 800a540:	800ae140 	call	800ae14 <__pack_d>
 800a544:	dfc00e17 	ldw	ra,56(sp)
 800a548:	dec00f04 	addi	sp,sp,60
 800a54c:	f800283a 	ret
 800a550:	d9800617 	ldw	r6,24(sp)
 800a554:	d9400117 	ldw	r5,4(sp)
 800a558:	00800104 	movi	r2,4
 800a55c:	314af03a 	xor	r5,r6,r5
 800a560:	d9400615 	stw	r5,24(sp)
 800a564:	18800226 	beq	r3,r2,800a570 <__divdf3+0x8c>
 800a568:	01400084 	movi	r5,2
 800a56c:	1940041e 	bne	r3,r5,800a580 <__divdf3+0x9c>
 800a570:	193feb1e 	bne	r3,r4,800a520 <__divdf3+0x3c>
 800a574:	01020074 	movhi	r4,2049
 800a578:	21379704 	addi	r4,r4,-8612
 800a57c:	003fe906 	br	800a524 <__divdf3+0x40>
 800a580:	20803326 	beq	r4,r2,800a650 <__divdf3+0x16c>
 800a584:	21403726 	beq	r4,r5,800a664 <__divdf3+0x180>
 800a588:	d8800217 	ldw	r2,8(sp)
 800a58c:	d9000717 	ldw	r4,28(sp)
 800a590:	d8c00917 	ldw	r3,36(sp)
 800a594:	da000417 	ldw	r8,16(sp)
 800a598:	2089c83a 	sub	r4,r4,r2
 800a59c:	d9000715 	stw	r4,28(sp)
 800a5a0:	d8800817 	ldw	r2,32(sp)
 800a5a4:	dbc00317 	ldw	r15,12(sp)
 800a5a8:	1a000236 	bltu	r3,r8,800a5b4 <__divdf3+0xd0>
 800a5ac:	40c0081e 	bne	r8,r3,800a5d0 <__divdf3+0xec>
 800a5b0:	13c0072e 	bgeu	r2,r15,800a5d0 <__divdf3+0xec>
 800a5b4:	108b883a 	add	r5,r2,r2
 800a5b8:	288d803a 	cmpltu	r6,r5,r2
 800a5bc:	18c7883a 	add	r3,r3,r3
 800a5c0:	213fffc4 	addi	r4,r4,-1
 800a5c4:	2805883a 	mov	r2,r5
 800a5c8:	30c7883a 	add	r3,r6,r3
 800a5cc:	d9000715 	stw	r4,28(sp)
 800a5d0:	01400f44 	movi	r5,61
 800a5d4:	000f883a 	mov	r7,zero
 800a5d8:	01040034 	movhi	r4,4096
 800a5dc:	0019883a 	mov	r12,zero
 800a5e0:	001b883a 	mov	r13,zero
 800a5e4:	201697fa 	slli	r11,r4,31
 800a5e8:	3814d07a 	srli	r10,r7,1
 800a5ec:	297fffc4 	addi	r5,r5,-1
 800a5f0:	1a000936 	bltu	r3,r8,800a618 <__divdf3+0x134>
 800a5f4:	13cdc83a 	sub	r6,r2,r15
 800a5f8:	1193803a 	cmpltu	r9,r2,r6
 800a5fc:	1a1dc83a 	sub	r14,r3,r8
 800a600:	40c0011e 	bne	r8,r3,800a608 <__divdf3+0x124>
 800a604:	13c00436 	bltu	r2,r15,800a618 <__divdf3+0x134>
 800a608:	3005883a 	mov	r2,r6
 800a60c:	7247c83a 	sub	r3,r14,r9
 800a610:	61d8b03a 	or	r12,r12,r7
 800a614:	691ab03a 	or	r13,r13,r4
 800a618:	108d883a 	add	r6,r2,r2
 800a61c:	3093803a 	cmpltu	r9,r6,r2
 800a620:	18c7883a 	add	r3,r3,r3
 800a624:	5a8eb03a 	or	r7,r11,r10
 800a628:	2008d07a 	srli	r4,r4,1
 800a62c:	3005883a 	mov	r2,r6
 800a630:	48c7883a 	add	r3,r9,r3
 800a634:	283feb1e 	bne	r5,zero,800a5e4 <__divdf3+0x100>
 800a638:	61003fcc 	andi	r4,r12,255
 800a63c:	01402004 	movi	r5,128
 800a640:	21400b26 	beq	r4,r5,800a670 <__divdf3+0x18c>
 800a644:	db000815 	stw	r12,32(sp)
 800a648:	db400915 	stw	r13,36(sp)
 800a64c:	003fb406 	br	800a520 <__divdf3+0x3c>
 800a650:	d8000815 	stw	zero,32(sp)
 800a654:	d8000915 	stw	zero,36(sp)
 800a658:	d8000715 	stw	zero,28(sp)
 800a65c:	d9000504 	addi	r4,sp,20
 800a660:	003fb006 	br	800a524 <__divdf3+0x40>
 800a664:	d8800515 	stw	r2,20(sp)
 800a668:	d9000504 	addi	r4,sp,20
 800a66c:	003fad06 	br	800a524 <__divdf3+0x40>
 800a670:	6140400c 	andi	r5,r12,256
 800a674:	283ff31e 	bne	r5,zero,800a644 <__divdf3+0x160>
 800a678:	30c4b03a 	or	r2,r6,r3
 800a67c:	103ff126 	beq	r2,zero,800a644 <__divdf3+0x160>
 800a680:	6109883a 	add	r4,r12,r4
 800a684:	2305803a 	cmpltu	r2,r4,r12
 800a688:	033fc004 	movi	r12,-256
 800a68c:	2318703a 	and	r12,r4,r12
 800a690:	135b883a 	add	r13,r2,r13
 800a694:	003feb06 	br	800a644 <__divdf3+0x160>

0800a698 <__eqdf2>:
 800a698:	defff104 	addi	sp,sp,-60
 800a69c:	d9000c15 	stw	r4,48(sp)
 800a6a0:	d9400d15 	stw	r5,52(sp)
 800a6a4:	d9000c04 	addi	r4,sp,48
 800a6a8:	d9400504 	addi	r5,sp,20
 800a6ac:	dfc00e15 	stw	ra,56(sp)
 800a6b0:	d9800a15 	stw	r6,40(sp)
 800a6b4:	d9c00b15 	stw	r7,44(sp)
 800a6b8:	800b0380 	call	800b038 <__unpack_d>
 800a6bc:	d9000a04 	addi	r4,sp,40
 800a6c0:	d80b883a 	mov	r5,sp
 800a6c4:	800b0380 	call	800b038 <__unpack_d>
 800a6c8:	d8c00517 	ldw	r3,20(sp)
 800a6cc:	00800044 	movi	r2,1
 800a6d0:	10c0052e 	bgeu	r2,r3,800a6e8 <__eqdf2+0x50>
 800a6d4:	d8c00017 	ldw	r3,0(sp)
 800a6d8:	10c0032e 	bgeu	r2,r3,800a6e8 <__eqdf2+0x50>
 800a6dc:	d9000504 	addi	r4,sp,20
 800a6e0:	d80b883a 	mov	r5,sp
 800a6e4:	800b13c0 	call	800b13c <__fpcmp_parts_d>
 800a6e8:	dfc00e17 	ldw	ra,56(sp)
 800a6ec:	dec00f04 	addi	sp,sp,60
 800a6f0:	f800283a 	ret

0800a6f4 <__nedf2>:
 800a6f4:	defff104 	addi	sp,sp,-60
 800a6f8:	d9000c15 	stw	r4,48(sp)
 800a6fc:	d9400d15 	stw	r5,52(sp)
 800a700:	d9000c04 	addi	r4,sp,48
 800a704:	d9400504 	addi	r5,sp,20
 800a708:	dfc00e15 	stw	ra,56(sp)
 800a70c:	d9800a15 	stw	r6,40(sp)
 800a710:	d9c00b15 	stw	r7,44(sp)
 800a714:	800b0380 	call	800b038 <__unpack_d>
 800a718:	d9000a04 	addi	r4,sp,40
 800a71c:	d80b883a 	mov	r5,sp
 800a720:	800b0380 	call	800b038 <__unpack_d>
 800a724:	d8c00517 	ldw	r3,20(sp)
 800a728:	00800044 	movi	r2,1
 800a72c:	10c0052e 	bgeu	r2,r3,800a744 <__nedf2+0x50>
 800a730:	d8c00017 	ldw	r3,0(sp)
 800a734:	10c0032e 	bgeu	r2,r3,800a744 <__nedf2+0x50>
 800a738:	d9000504 	addi	r4,sp,20
 800a73c:	d80b883a 	mov	r5,sp
 800a740:	800b13c0 	call	800b13c <__fpcmp_parts_d>
 800a744:	dfc00e17 	ldw	ra,56(sp)
 800a748:	dec00f04 	addi	sp,sp,60
 800a74c:	f800283a 	ret

0800a750 <__gtdf2>:
 800a750:	defff104 	addi	sp,sp,-60
 800a754:	d9000c15 	stw	r4,48(sp)
 800a758:	d9400d15 	stw	r5,52(sp)
 800a75c:	d9000c04 	addi	r4,sp,48
 800a760:	d9400504 	addi	r5,sp,20
 800a764:	dfc00e15 	stw	ra,56(sp)
 800a768:	d9800a15 	stw	r6,40(sp)
 800a76c:	d9c00b15 	stw	r7,44(sp)
 800a770:	800b0380 	call	800b038 <__unpack_d>
 800a774:	d9000a04 	addi	r4,sp,40
 800a778:	d80b883a 	mov	r5,sp
 800a77c:	800b0380 	call	800b038 <__unpack_d>
 800a780:	d8c00517 	ldw	r3,20(sp)
 800a784:	00800044 	movi	r2,1
 800a788:	10c0082e 	bgeu	r2,r3,800a7ac <__gtdf2+0x5c>
 800a78c:	d8c00017 	ldw	r3,0(sp)
 800a790:	10c0062e 	bgeu	r2,r3,800a7ac <__gtdf2+0x5c>
 800a794:	d9000504 	addi	r4,sp,20
 800a798:	d80b883a 	mov	r5,sp
 800a79c:	800b13c0 	call	800b13c <__fpcmp_parts_d>
 800a7a0:	dfc00e17 	ldw	ra,56(sp)
 800a7a4:	dec00f04 	addi	sp,sp,60
 800a7a8:	f800283a 	ret
 800a7ac:	00bfffc4 	movi	r2,-1
 800a7b0:	003ffb06 	br	800a7a0 <__gtdf2+0x50>

0800a7b4 <__gedf2>:
 800a7b4:	defff104 	addi	sp,sp,-60
 800a7b8:	d9000c15 	stw	r4,48(sp)
 800a7bc:	d9400d15 	stw	r5,52(sp)
 800a7c0:	d9000c04 	addi	r4,sp,48
 800a7c4:	d9400504 	addi	r5,sp,20
 800a7c8:	dfc00e15 	stw	ra,56(sp)
 800a7cc:	d9800a15 	stw	r6,40(sp)
 800a7d0:	d9c00b15 	stw	r7,44(sp)
 800a7d4:	800b0380 	call	800b038 <__unpack_d>
 800a7d8:	d9000a04 	addi	r4,sp,40
 800a7dc:	d80b883a 	mov	r5,sp
 800a7e0:	800b0380 	call	800b038 <__unpack_d>
 800a7e4:	d8c00517 	ldw	r3,20(sp)
 800a7e8:	00800044 	movi	r2,1
 800a7ec:	10c0082e 	bgeu	r2,r3,800a810 <__gedf2+0x5c>
 800a7f0:	d8c00017 	ldw	r3,0(sp)
 800a7f4:	10c0062e 	bgeu	r2,r3,800a810 <__gedf2+0x5c>
 800a7f8:	d9000504 	addi	r4,sp,20
 800a7fc:	d80b883a 	mov	r5,sp
 800a800:	800b13c0 	call	800b13c <__fpcmp_parts_d>
 800a804:	dfc00e17 	ldw	ra,56(sp)
 800a808:	dec00f04 	addi	sp,sp,60
 800a80c:	f800283a 	ret
 800a810:	00bfffc4 	movi	r2,-1
 800a814:	003ffb06 	br	800a804 <__gedf2+0x50>

0800a818 <__ltdf2>:
 800a818:	defff104 	addi	sp,sp,-60
 800a81c:	d9000c15 	stw	r4,48(sp)
 800a820:	d9400d15 	stw	r5,52(sp)
 800a824:	d9000c04 	addi	r4,sp,48
 800a828:	d9400504 	addi	r5,sp,20
 800a82c:	dfc00e15 	stw	ra,56(sp)
 800a830:	d9800a15 	stw	r6,40(sp)
 800a834:	d9c00b15 	stw	r7,44(sp)
 800a838:	800b0380 	call	800b038 <__unpack_d>
 800a83c:	d9000a04 	addi	r4,sp,40
 800a840:	d80b883a 	mov	r5,sp
 800a844:	800b0380 	call	800b038 <__unpack_d>
 800a848:	d8c00517 	ldw	r3,20(sp)
 800a84c:	00800044 	movi	r2,1
 800a850:	10c0052e 	bgeu	r2,r3,800a868 <__ltdf2+0x50>
 800a854:	d8c00017 	ldw	r3,0(sp)
 800a858:	10c0032e 	bgeu	r2,r3,800a868 <__ltdf2+0x50>
 800a85c:	d9000504 	addi	r4,sp,20
 800a860:	d80b883a 	mov	r5,sp
 800a864:	800b13c0 	call	800b13c <__fpcmp_parts_d>
 800a868:	dfc00e17 	ldw	ra,56(sp)
 800a86c:	dec00f04 	addi	sp,sp,60
 800a870:	f800283a 	ret

0800a874 <__floatsidf>:
 800a874:	2004d7fa 	srli	r2,r4,31
 800a878:	defff904 	addi	sp,sp,-28
 800a87c:	00c000c4 	movi	r3,3
 800a880:	dfc00615 	stw	ra,24(sp)
 800a884:	dc000515 	stw	r16,20(sp)
 800a888:	d8c00015 	stw	r3,0(sp)
 800a88c:	d8800115 	stw	r2,4(sp)
 800a890:	2000081e 	bne	r4,zero,800a8b4 <__floatsidf+0x40>
 800a894:	00800084 	movi	r2,2
 800a898:	d8800015 	stw	r2,0(sp)
 800a89c:	d809883a 	mov	r4,sp
 800a8a0:	800ae140 	call	800ae14 <__pack_d>
 800a8a4:	dfc00617 	ldw	ra,24(sp)
 800a8a8:	dc000517 	ldw	r16,20(sp)
 800a8ac:	dec00704 	addi	sp,sp,28
 800a8b0:	f800283a 	ret
 800a8b4:	00c00f04 	movi	r3,60
 800a8b8:	d8c00215 	stw	r3,8(sp)
 800a8bc:	10000f1e 	bne	r2,zero,800a8fc <__floatsidf+0x88>
 800a8c0:	2021883a 	mov	r16,r4
 800a8c4:	8009883a 	mov	r4,r16
 800a8c8:	800ad680 	call	800ad68 <__clzsi2>
 800a8cc:	11000744 	addi	r4,r2,29
 800a8d0:	0100110e 	bge	zero,r4,800a918 <__floatsidf+0xa4>
 800a8d4:	10ffff44 	addi	r3,r2,-3
 800a8d8:	18001216 	blt	r3,zero,800a924 <__floatsidf+0xb0>
 800a8dc:	80c6983a 	sll	r3,r16,r3
 800a8e0:	0009883a 	mov	r4,zero
 800a8e4:	014007c4 	movi	r5,31
 800a8e8:	2885c83a 	sub	r2,r5,r2
 800a8ec:	d9000315 	stw	r4,12(sp)
 800a8f0:	d8c00415 	stw	r3,16(sp)
 800a8f4:	d8800215 	stw	r2,8(sp)
 800a8f8:	003fe806 	br	800a89c <__floatsidf+0x28>
 800a8fc:	00a00034 	movhi	r2,32768
 800a900:	20800e26 	beq	r4,r2,800a93c <__floatsidf+0xc8>
 800a904:	0121c83a 	sub	r16,zero,r4
 800a908:	8009883a 	mov	r4,r16
 800a90c:	800ad680 	call	800ad68 <__clzsi2>
 800a910:	11000744 	addi	r4,r2,29
 800a914:	013fef16 	blt	zero,r4,800a8d4 <__floatsidf+0x60>
 800a918:	dc000315 	stw	r16,12(sp)
 800a91c:	d8000415 	stw	zero,16(sp)
 800a920:	003fde06 	br	800a89c <__floatsidf+0x28>
 800a924:	800ad07a 	srli	r5,r16,1
 800a928:	00c007c4 	movi	r3,31
 800a92c:	1907c83a 	sub	r3,r3,r4
 800a930:	28c6d83a 	srl	r3,r5,r3
 800a934:	8108983a 	sll	r4,r16,r4
 800a938:	003fea06 	br	800a8e4 <__floatsidf+0x70>
 800a93c:	0005883a 	mov	r2,zero
 800a940:	00f07834 	movhi	r3,49632
 800a944:	003fd706 	br	800a8a4 <__floatsidf+0x30>

0800a948 <__fixdfsi>:
 800a948:	defff804 	addi	sp,sp,-32
 800a94c:	d9000515 	stw	r4,20(sp)
 800a950:	d9400615 	stw	r5,24(sp)
 800a954:	d9000504 	addi	r4,sp,20
 800a958:	d80b883a 	mov	r5,sp
 800a95c:	dfc00715 	stw	ra,28(sp)
 800a960:	800b0380 	call	800b038 <__unpack_d>
 800a964:	d8800017 	ldw	r2,0(sp)
 800a968:	00c00084 	movi	r3,2
 800a96c:	10c01c26 	beq	r2,r3,800a9e0 <__fixdfsi+0x98>
 800a970:	00c00044 	movi	r3,1
 800a974:	18801a2e 	bgeu	r3,r2,800a9e0 <__fixdfsi+0x98>
 800a978:	00c00104 	movi	r3,4
 800a97c:	10c01126 	beq	r2,r3,800a9c4 <__fixdfsi+0x7c>
 800a980:	d8800217 	ldw	r2,8(sp)
 800a984:	10001616 	blt	r2,zero,800a9e0 <__fixdfsi+0x98>
 800a988:	00c00784 	movi	r3,30
 800a98c:	18800d16 	blt	r3,r2,800a9c4 <__fixdfsi+0x7c>
 800a990:	00c00f04 	movi	r3,60
 800a994:	1885c83a 	sub	r2,r3,r2
 800a998:	10fff804 	addi	r3,r2,-32
 800a99c:	d9400317 	ldw	r5,12(sp)
 800a9a0:	d9000417 	ldw	r4,16(sp)
 800a9a4:	18001216 	blt	r3,zero,800a9f0 <__fixdfsi+0xa8>
 800a9a8:	20c4d83a 	srl	r2,r4,r3
 800a9ac:	d8c00117 	ldw	r3,4(sp)
 800a9b0:	18000826 	beq	r3,zero,800a9d4 <__fixdfsi+0x8c>
 800a9b4:	0085c83a 	sub	r2,zero,r2
 800a9b8:	dfc00717 	ldw	ra,28(sp)
 800a9bc:	dec00804 	addi	sp,sp,32
 800a9c0:	f800283a 	ret
 800a9c4:	d8800117 	ldw	r2,4(sp)
 800a9c8:	00e00034 	movhi	r3,32768
 800a9cc:	1005003a 	cmpeq	r2,r2,zero
 800a9d0:	1885c83a 	sub	r2,r3,r2
 800a9d4:	dfc00717 	ldw	ra,28(sp)
 800a9d8:	dec00804 	addi	sp,sp,32
 800a9dc:	f800283a 	ret
 800a9e0:	0005883a 	mov	r2,zero
 800a9e4:	dfc00717 	ldw	ra,28(sp)
 800a9e8:	dec00804 	addi	sp,sp,32
 800a9ec:	f800283a 	ret
 800a9f0:	2008907a 	slli	r4,r4,1
 800a9f4:	018007c4 	movi	r6,31
 800a9f8:	308dc83a 	sub	r6,r6,r2
 800a9fc:	2188983a 	sll	r4,r4,r6
 800aa00:	2884d83a 	srl	r2,r5,r2
 800aa04:	2084b03a 	or	r2,r4,r2
 800aa08:	003fe806 	br	800a9ac <__fixdfsi+0x64>

0800aa0c <__floatunsidf>:
 800aa0c:	defff904 	addi	sp,sp,-28
 800aa10:	dc000515 	stw	r16,20(sp)
 800aa14:	dfc00615 	stw	ra,24(sp)
 800aa18:	d8000115 	stw	zero,4(sp)
 800aa1c:	2021883a 	mov	r16,r4
 800aa20:	20001726 	beq	r4,zero,800aa80 <__floatunsidf+0x74>
 800aa24:	008000c4 	movi	r2,3
 800aa28:	d8800015 	stw	r2,0(sp)
 800aa2c:	00800f04 	movi	r2,60
 800aa30:	d8800215 	stw	r2,8(sp)
 800aa34:	800ad680 	call	800ad68 <__clzsi2>
 800aa38:	10c00744 	addi	r3,r2,29
 800aa3c:	18001816 	blt	r3,zero,800aaa0 <__floatunsidf+0x94>
 800aa40:	18002d26 	beq	r3,zero,800aaf8 <__floatunsidf+0xec>
 800aa44:	113fff44 	addi	r4,r2,-3
 800aa48:	20002e16 	blt	r4,zero,800ab04 <__floatunsidf+0xf8>
 800aa4c:	8108983a 	sll	r4,r16,r4
 800aa50:	0021883a 	mov	r16,zero
 800aa54:	014007c4 	movi	r5,31
 800aa58:	2885c83a 	sub	r2,r5,r2
 800aa5c:	dc000315 	stw	r16,12(sp)
 800aa60:	d9000415 	stw	r4,16(sp)
 800aa64:	d8800215 	stw	r2,8(sp)
 800aa68:	d809883a 	mov	r4,sp
 800aa6c:	800ae140 	call	800ae14 <__pack_d>
 800aa70:	dfc00617 	ldw	ra,24(sp)
 800aa74:	dc000517 	ldw	r16,20(sp)
 800aa78:	dec00704 	addi	sp,sp,28
 800aa7c:	f800283a 	ret
 800aa80:	00800084 	movi	r2,2
 800aa84:	d809883a 	mov	r4,sp
 800aa88:	d8800015 	stw	r2,0(sp)
 800aa8c:	800ae140 	call	800ae14 <__pack_d>
 800aa90:	dfc00617 	ldw	ra,24(sp)
 800aa94:	dc000517 	ldw	r16,20(sp)
 800aa98:	dec00704 	addi	sp,sp,28
 800aa9c:	f800283a 	ret
 800aaa0:	00c7c83a 	sub	r3,zero,r3
 800aaa4:	193ff804 	addi	r4,r3,-32
 800aaa8:	20001c16 	blt	r4,zero,800ab1c <__floatunsidf+0x110>
 800aaac:	000b883a 	mov	r5,zero
 800aab0:	2009d7fa 	srai	r4,r4,31
 800aab4:	80c6d83a 	srl	r3,r16,r3
 800aab8:	297fffc4 	addi	r5,r5,-1
 800aabc:	2c20703a 	and	r16,r5,r16
 800aac0:	8020c03a 	cmpne	r16,r16,zero
 800aac4:	1906703a 	and	r3,r3,r4
 800aac8:	010007c4 	movi	r4,31
 800aacc:	80c6b03a 	or	r3,r16,r3
 800aad0:	2085c83a 	sub	r2,r4,r2
 800aad4:	d809883a 	mov	r4,sp
 800aad8:	d8c00315 	stw	r3,12(sp)
 800aadc:	d8000415 	stw	zero,16(sp)
 800aae0:	d8800215 	stw	r2,8(sp)
 800aae4:	800ae140 	call	800ae14 <__pack_d>
 800aae8:	dfc00617 	ldw	ra,24(sp)
 800aaec:	dc000517 	ldw	r16,20(sp)
 800aaf0:	dec00704 	addi	sp,sp,28
 800aaf4:	f800283a 	ret
 800aaf8:	dc000315 	stw	r16,12(sp)
 800aafc:	d8000415 	stw	zero,16(sp)
 800ab00:	003fd906 	br	800aa68 <__floatunsidf+0x5c>
 800ab04:	800ad07a 	srli	r5,r16,1
 800ab08:	010007c4 	movi	r4,31
 800ab0c:	20c9c83a 	sub	r4,r4,r3
 800ab10:	2908d83a 	srl	r4,r5,r4
 800ab14:	80e0983a 	sll	r16,r16,r3
 800ab18:	003fce06 	br	800aa54 <__floatunsidf+0x48>
 800ab1c:	01400044 	movi	r5,1
 800ab20:	28ca983a 	sll	r5,r5,r3
 800ab24:	003fe206 	br	800aab0 <__floatunsidf+0xa4>

0800ab28 <udivmodsi4>:
 800ab28:	2005883a 	mov	r2,r4
 800ab2c:	2900182e 	bgeu	r5,r4,800ab90 <udivmodsi4+0x68>
 800ab30:	28001716 	blt	r5,zero,800ab90 <udivmodsi4+0x68>
 800ab34:	01000804 	movi	r4,32
 800ab38:	00c00044 	movi	r3,1
 800ab3c:	00000206 	br	800ab48 <udivmodsi4+0x20>
 800ab40:	20001126 	beq	r4,zero,800ab88 <udivmodsi4+0x60>
 800ab44:	28000516 	blt	r5,zero,800ab5c <udivmodsi4+0x34>
 800ab48:	294b883a 	add	r5,r5,r5
 800ab4c:	213fffc4 	addi	r4,r4,-1
 800ab50:	18c7883a 	add	r3,r3,r3
 800ab54:	28bffa36 	bltu	r5,r2,800ab40 <udivmodsi4+0x18>
 800ab58:	18000b26 	beq	r3,zero,800ab88 <udivmodsi4+0x60>
 800ab5c:	0009883a 	mov	r4,zero
 800ab60:	11400236 	bltu	r2,r5,800ab6c <udivmodsi4+0x44>
 800ab64:	1145c83a 	sub	r2,r2,r5
 800ab68:	20c8b03a 	or	r4,r4,r3
 800ab6c:	1806d07a 	srli	r3,r3,1
 800ab70:	280ad07a 	srli	r5,r5,1
 800ab74:	183ffa1e 	bne	r3,zero,800ab60 <udivmodsi4+0x38>
 800ab78:	3000021e 	bne	r6,zero,800ab84 <udivmodsi4+0x5c>
 800ab7c:	2005883a 	mov	r2,r4
 800ab80:	f800283a 	ret
 800ab84:	f800283a 	ret
 800ab88:	0009883a 	mov	r4,zero
 800ab8c:	003ffa06 	br	800ab78 <udivmodsi4+0x50>
 800ab90:	00c00044 	movi	r3,1
 800ab94:	0009883a 	mov	r4,zero
 800ab98:	003ff106 	br	800ab60 <udivmodsi4+0x38>

0800ab9c <__divsi3>:
 800ab9c:	defffe04 	addi	sp,sp,-8
 800aba0:	dfc00115 	stw	ra,4(sp)
 800aba4:	dc000015 	stw	r16,0(sp)
 800aba8:	20000a16 	blt	r4,zero,800abd4 <__divsi3+0x38>
 800abac:	0021883a 	mov	r16,zero
 800abb0:	28000b16 	blt	r5,zero,800abe0 <__divsi3+0x44>
 800abb4:	000d883a 	mov	r6,zero
 800abb8:	800ab280 	call	800ab28 <udivmodsi4>
 800abbc:	80000126 	beq	r16,zero,800abc4 <__divsi3+0x28>
 800abc0:	0085c83a 	sub	r2,zero,r2
 800abc4:	dfc00117 	ldw	ra,4(sp)
 800abc8:	dc000017 	ldw	r16,0(sp)
 800abcc:	dec00204 	addi	sp,sp,8
 800abd0:	f800283a 	ret
 800abd4:	0109c83a 	sub	r4,zero,r4
 800abd8:	04000044 	movi	r16,1
 800abdc:	283ff50e 	bge	r5,zero,800abb4 <__divsi3+0x18>
 800abe0:	014bc83a 	sub	r5,zero,r5
 800abe4:	8400005c 	xori	r16,r16,1
 800abe8:	003ff206 	br	800abb4 <__divsi3+0x18>

0800abec <__modsi3>:
 800abec:	deffff04 	addi	sp,sp,-4
 800abf0:	dfc00015 	stw	ra,0(sp)
 800abf4:	20000516 	blt	r4,zero,800ac0c <__modsi3+0x20>
 800abf8:	28000c16 	blt	r5,zero,800ac2c <__modsi3+0x40>
 800abfc:	01800044 	movi	r6,1
 800ac00:	dfc00017 	ldw	ra,0(sp)
 800ac04:	dec00104 	addi	sp,sp,4
 800ac08:	800ab281 	jmpi	800ab28 <udivmodsi4>
 800ac0c:	0109c83a 	sub	r4,zero,r4
 800ac10:	28000b16 	blt	r5,zero,800ac40 <__modsi3+0x54>
 800ac14:	01800044 	movi	r6,1
 800ac18:	800ab280 	call	800ab28 <udivmodsi4>
 800ac1c:	0085c83a 	sub	r2,zero,r2
 800ac20:	dfc00017 	ldw	ra,0(sp)
 800ac24:	dec00104 	addi	sp,sp,4
 800ac28:	f800283a 	ret
 800ac2c:	014bc83a 	sub	r5,zero,r5
 800ac30:	01800044 	movi	r6,1
 800ac34:	dfc00017 	ldw	ra,0(sp)
 800ac38:	dec00104 	addi	sp,sp,4
 800ac3c:	800ab281 	jmpi	800ab28 <udivmodsi4>
 800ac40:	014bc83a 	sub	r5,zero,r5
 800ac44:	003ff306 	br	800ac14 <__modsi3+0x28>

0800ac48 <__udivsi3>:
 800ac48:	000d883a 	mov	r6,zero
 800ac4c:	800ab281 	jmpi	800ab28 <udivmodsi4>

0800ac50 <__umodsi3>:
 800ac50:	01800044 	movi	r6,1
 800ac54:	800ab281 	jmpi	800ab28 <udivmodsi4>

0800ac58 <__muldi3>:
 800ac58:	defff604 	addi	sp,sp,-40
 800ac5c:	dd400515 	stw	r21,20(sp)
 800ac60:	dd000415 	stw	r20,16(sp)
 800ac64:	257fffcc 	andi	r21,r4,65535
 800ac68:	353fffcc 	andi	r20,r6,65535
 800ac6c:	dcc00315 	stw	r19,12(sp)
 800ac70:	3026d43a 	srli	r19,r6,16
 800ac74:	dd800615 	stw	r22,24(sp)
 800ac78:	dc800215 	stw	r18,8(sp)
 800ac7c:	dc400115 	stw	r17,4(sp)
 800ac80:	2024d43a 	srli	r18,r4,16
 800ac84:	2023883a 	mov	r17,r4
 800ac88:	282d883a 	mov	r22,r5
 800ac8c:	a009883a 	mov	r4,r20
 800ac90:	a80b883a 	mov	r5,r21
 800ac94:	dfc00915 	stw	ra,36(sp)
 800ac98:	df000815 	stw	fp,32(sp)
 800ac9c:	ddc00715 	stw	r23,28(sp)
 800aca0:	3839883a 	mov	fp,r7
 800aca4:	dc000015 	stw	r16,0(sp)
 800aca8:	3021883a 	mov	r16,r6
 800acac:	8001bbc0 	call	8001bbc <__mulsi3>
 800acb0:	a80b883a 	mov	r5,r21
 800acb4:	9809883a 	mov	r4,r19
 800acb8:	102f883a 	mov	r23,r2
 800acbc:	8001bbc0 	call	8001bbc <__mulsi3>
 800acc0:	a009883a 	mov	r4,r20
 800acc4:	900b883a 	mov	r5,r18
 800acc8:	102b883a 	mov	r21,r2
 800accc:	8001bbc0 	call	8001bbc <__mulsi3>
 800acd0:	9809883a 	mov	r4,r19
 800acd4:	900b883a 	mov	r5,r18
 800acd8:	1029883a 	mov	r20,r2
 800acdc:	8001bbc0 	call	8001bbc <__mulsi3>
 800ace0:	1007883a 	mov	r3,r2
 800ace4:	b804d43a 	srli	r2,r23,16
 800ace8:	a549883a 	add	r4,r20,r21
 800acec:	2089883a 	add	r4,r4,r2
 800acf0:	2500022e 	bgeu	r4,r20,800acfc <__muldi3+0xa4>
 800acf4:	00800074 	movhi	r2,1
 800acf8:	1887883a 	add	r3,r3,r2
 800acfc:	200cd43a 	srli	r6,r4,16
 800ad00:	2004943a 	slli	r2,r4,16
 800ad04:	e00b883a 	mov	r5,fp
 800ad08:	8809883a 	mov	r4,r17
 800ad0c:	bdffffcc 	andi	r23,r23,65535
 800ad10:	19a3883a 	add	r17,r3,r6
 800ad14:	15ef883a 	add	r23,r2,r23
 800ad18:	8001bbc0 	call	8001bbc <__mulsi3>
 800ad1c:	8009883a 	mov	r4,r16
 800ad20:	b00b883a 	mov	r5,r22
 800ad24:	1025883a 	mov	r18,r2
 800ad28:	8001bbc0 	call	8001bbc <__mulsi3>
 800ad2c:	9085883a 	add	r2,r18,r2
 800ad30:	1447883a 	add	r3,r2,r17
 800ad34:	b805883a 	mov	r2,r23
 800ad38:	dfc00917 	ldw	ra,36(sp)
 800ad3c:	df000817 	ldw	fp,32(sp)
 800ad40:	ddc00717 	ldw	r23,28(sp)
 800ad44:	dd800617 	ldw	r22,24(sp)
 800ad48:	dd400517 	ldw	r21,20(sp)
 800ad4c:	dd000417 	ldw	r20,16(sp)
 800ad50:	dcc00317 	ldw	r19,12(sp)
 800ad54:	dc800217 	ldw	r18,8(sp)
 800ad58:	dc400117 	ldw	r17,4(sp)
 800ad5c:	dc000017 	ldw	r16,0(sp)
 800ad60:	dec00a04 	addi	sp,sp,40
 800ad64:	f800283a 	ret

0800ad68 <__clzsi2>:
 800ad68:	00bfffd4 	movui	r2,65535
 800ad6c:	11000b36 	bltu	r2,r4,800ad9c <__clzsi2+0x34>
 800ad70:	00803fc4 	movi	r2,255
 800ad74:	11001e2e 	bgeu	r2,r4,800adf0 <__clzsi2+0x88>
 800ad78:	00c00204 	movi	r3,8
 800ad7c:	20c8d83a 	srl	r4,r4,r3
 800ad80:	00c20074 	movhi	r3,2049
 800ad84:	18f79c04 	addi	r3,r3,-8592
 800ad88:	00800604 	movi	r2,24
 800ad8c:	1909883a 	add	r4,r3,r4
 800ad90:	20c00003 	ldbu	r3,0(r4)
 800ad94:	10c5c83a 	sub	r2,r2,r3
 800ad98:	f800283a 	ret
 800ad9c:	00804034 	movhi	r2,256
 800ada0:	10bfffc4 	addi	r2,r2,-1
 800ada4:	11000936 	bltu	r2,r4,800adcc <__clzsi2+0x64>
 800ada8:	00800404 	movi	r2,16
 800adac:	1007883a 	mov	r3,r2
 800adb0:	20c8d83a 	srl	r4,r4,r3
 800adb4:	00c20074 	movhi	r3,2049
 800adb8:	18f79c04 	addi	r3,r3,-8592
 800adbc:	1909883a 	add	r4,r3,r4
 800adc0:	20c00003 	ldbu	r3,0(r4)
 800adc4:	10c5c83a 	sub	r2,r2,r3
 800adc8:	f800283a 	ret
 800adcc:	00c00604 	movi	r3,24
 800add0:	20c8d83a 	srl	r4,r4,r3
 800add4:	00c20074 	movhi	r3,2049
 800add8:	18f79c04 	addi	r3,r3,-8592
 800addc:	00800204 	movi	r2,8
 800ade0:	1909883a 	add	r4,r3,r4
 800ade4:	20c00003 	ldbu	r3,0(r4)
 800ade8:	10c5c83a 	sub	r2,r2,r3
 800adec:	f800283a 	ret
 800adf0:	0007883a 	mov	r3,zero
 800adf4:	20c8d83a 	srl	r4,r4,r3
 800adf8:	00c20074 	movhi	r3,2049
 800adfc:	18f79c04 	addi	r3,r3,-8592
 800ae00:	00800804 	movi	r2,32
 800ae04:	1909883a 	add	r4,r3,r4
 800ae08:	20c00003 	ldbu	r3,0(r4)
 800ae0c:	10c5c83a 	sub	r2,r2,r3
 800ae10:	f800283a 	ret

0800ae14 <__pack_d>:
 800ae14:	20800017 	ldw	r2,0(r4)
 800ae18:	defff804 	addi	sp,sp,-32
 800ae1c:	dcc00315 	stw	r19,12(sp)
 800ae20:	dc800215 	stw	r18,8(sp)
 800ae24:	dfc00715 	stw	ra,28(sp)
 800ae28:	dd800615 	stw	r22,24(sp)
 800ae2c:	dd400515 	stw	r21,20(sp)
 800ae30:	dd000415 	stw	r20,16(sp)
 800ae34:	dc400115 	stw	r17,4(sp)
 800ae38:	dc000015 	stw	r16,0(sp)
 800ae3c:	04800044 	movi	r18,1
 800ae40:	24400317 	ldw	r17,12(r4)
 800ae44:	24000417 	ldw	r16,16(r4)
 800ae48:	24c00117 	ldw	r19,4(r4)
 800ae4c:	9080422e 	bgeu	r18,r2,800af58 <__pack_d+0x144>
 800ae50:	00c00104 	movi	r3,4
 800ae54:	10c03c26 	beq	r2,r3,800af48 <__pack_d+0x134>
 800ae58:	00c00084 	movi	r3,2
 800ae5c:	10c01926 	beq	r2,r3,800aec4 <__pack_d+0xb0>
 800ae60:	8c04b03a 	or	r2,r17,r16
 800ae64:	10001726 	beq	r2,zero,800aec4 <__pack_d+0xb0>
 800ae68:	21000217 	ldw	r4,8(r4)
 800ae6c:	00bf0084 	movi	r2,-1022
 800ae70:	20804016 	blt	r4,r2,800af74 <__pack_d+0x160>
 800ae74:	0080ffc4 	movi	r2,1023
 800ae78:	11003316 	blt	r2,r4,800af48 <__pack_d+0x134>
 800ae7c:	88803fcc 	andi	r2,r17,255
 800ae80:	00c02004 	movi	r3,128
 800ae84:	10c02926 	beq	r2,r3,800af2c <__pack_d+0x118>
 800ae88:	88801fc4 	addi	r2,r17,127
 800ae8c:	1463803a 	cmpltu	r17,r2,r17
 800ae90:	8c21883a 	add	r16,r17,r16
 800ae94:	1023883a 	mov	r17,r2
 800ae98:	00880034 	movhi	r2,8192
 800ae9c:	10bfffc4 	addi	r2,r2,-1
 800aea0:	14001c36 	bltu	r2,r16,800af14 <__pack_d+0x100>
 800aea4:	2100ffc4 	addi	r4,r4,1023
 800aea8:	8006963a 	slli	r3,r16,24
 800aeac:	8804d23a 	srli	r2,r17,8
 800aeb0:	8020913a 	slli	r16,r16,4
 800aeb4:	2101ffcc 	andi	r4,r4,2047
 800aeb8:	1884b03a 	or	r2,r3,r2
 800aebc:	8020d33a 	srli	r16,r16,12
 800aec0:	00000306 	br	800aed0 <__pack_d+0xbc>
 800aec4:	0009883a 	mov	r4,zero
 800aec8:	0005883a 	mov	r2,zero
 800aecc:	0021883a 	mov	r16,zero
 800aed0:	2008953a 	slli	r4,r4,20
 800aed4:	982697fa 	slli	r19,r19,31
 800aed8:	00c00434 	movhi	r3,16
 800aedc:	18ffffc4 	addi	r3,r3,-1
 800aee0:	80e0703a 	and	r16,r16,r3
 800aee4:	8106b03a 	or	r3,r16,r4
 800aee8:	1cc6b03a 	or	r3,r3,r19
 800aeec:	dfc00717 	ldw	ra,28(sp)
 800aef0:	dd800617 	ldw	r22,24(sp)
 800aef4:	dd400517 	ldw	r21,20(sp)
 800aef8:	dd000417 	ldw	r20,16(sp)
 800aefc:	dcc00317 	ldw	r19,12(sp)
 800af00:	dc800217 	ldw	r18,8(sp)
 800af04:	dc400117 	ldw	r17,4(sp)
 800af08:	dc000017 	ldw	r16,0(sp)
 800af0c:	dec00804 	addi	sp,sp,32
 800af10:	f800283a 	ret
 800af14:	800697fa 	slli	r3,r16,31
 800af18:	8804d07a 	srli	r2,r17,1
 800af1c:	21010004 	addi	r4,r4,1024
 800af20:	8020d07a 	srli	r16,r16,1
 800af24:	18a2b03a 	or	r17,r3,r2
 800af28:	003fdf06 	br	800aea8 <__pack_d+0x94>
 800af2c:	88c0400c 	andi	r3,r17,256
 800af30:	183fd926 	beq	r3,zero,800ae98 <__pack_d+0x84>
 800af34:	8885883a 	add	r2,r17,r2
 800af38:	1463803a 	cmpltu	r17,r2,r17
 800af3c:	8c21883a 	add	r16,r17,r16
 800af40:	1023883a 	mov	r17,r2
 800af44:	003fd406 	br	800ae98 <__pack_d+0x84>
 800af48:	0101ffc4 	movi	r4,2047
 800af4c:	0005883a 	mov	r2,zero
 800af50:	0021883a 	mov	r16,zero
 800af54:	003fde06 	br	800aed0 <__pack_d+0xbc>
 800af58:	84000234 	orhi	r16,r16,8
 800af5c:	00c00434 	movhi	r3,16
 800af60:	18ffffc4 	addi	r3,r3,-1
 800af64:	8805883a 	mov	r2,r17
 800af68:	80e0703a 	and	r16,r16,r3
 800af6c:	0101ffc4 	movi	r4,2047
 800af70:	003fd706 	br	800aed0 <__pack_d+0xbc>
 800af74:	1129c83a 	sub	r20,r2,r4
 800af78:	00800e04 	movi	r2,56
 800af7c:	15002716 	blt	r2,r20,800b01c <__pack_d+0x208>
 800af80:	800b883a 	mov	r5,r16
 800af84:	a00d883a 	mov	r6,r20
 800af88:	8809883a 	mov	r4,r17
 800af8c:	800b20c0 	call	800b20c <__lshrdi3>
 800af90:	9009883a 	mov	r4,r18
 800af94:	000b883a 	mov	r5,zero
 800af98:	a00d883a 	mov	r6,r20
 800af9c:	102d883a 	mov	r22,r2
 800afa0:	182b883a 	mov	r21,r3
 800afa4:	800b2500 	call	800b250 <__ashldi3>
 800afa8:	1009003a 	cmpeq	r4,r2,zero
 800afac:	1907c83a 	sub	r3,r3,r4
 800afb0:	10bfffc4 	addi	r2,r2,-1
 800afb4:	1c20703a 	and	r16,r3,r16
 800afb8:	1444703a 	and	r2,r2,r17
 800afbc:	1404b03a 	or	r2,r2,r16
 800afc0:	1004c03a 	cmpne	r2,r2,zero
 800afc4:	1584b03a 	or	r2,r2,r22
 800afc8:	11003fcc 	andi	r4,r2,255
 800afcc:	01402004 	movi	r5,128
 800afd0:	a807883a 	mov	r3,r21
 800afd4:	2140131e 	bne	r4,r5,800b024 <__pack_d+0x210>
 800afd8:	1140400c 	andi	r5,r2,256
 800afdc:	28000426 	beq	r5,zero,800aff0 <__pack_d+0x1dc>
 800afe0:	1109883a 	add	r4,r2,r4
 800afe4:	2085803a 	cmpltu	r2,r4,r2
 800afe8:	1547883a 	add	r3,r2,r21
 800afec:	2005883a 	mov	r2,r4
 800aff0:	1808963a 	slli	r4,r3,24
 800aff4:	1004d23a 	srli	r2,r2,8
 800aff8:	1820913a 	slli	r16,r3,4
 800affc:	01440034 	movhi	r5,4096
 800b000:	297fffc4 	addi	r5,r5,-1
 800b004:	2084b03a 	or	r2,r4,r2
 800b008:	8020d33a 	srli	r16,r16,12
 800b00c:	01000044 	movi	r4,1
 800b010:	28ffaf36 	bltu	r5,r3,800aed0 <__pack_d+0xbc>
 800b014:	0009883a 	mov	r4,zero
 800b018:	003fad06 	br	800aed0 <__pack_d+0xbc>
 800b01c:	0005883a 	mov	r2,zero
 800b020:	0007883a 	mov	r3,zero
 800b024:	11001fc4 	addi	r4,r2,127
 800b028:	2085803a 	cmpltu	r2,r4,r2
 800b02c:	10c7883a 	add	r3,r2,r3
 800b030:	2005883a 	mov	r2,r4
 800b034:	003fee06 	br	800aff0 <__pack_d+0x1dc>

0800b038 <__unpack_d>:
 800b038:	21800117 	ldw	r6,4(r4)
 800b03c:	20c00017 	ldw	r3,0(r4)
 800b040:	3004d7fa 	srli	r2,r6,31
 800b044:	3008d53a 	srli	r4,r6,20
 800b048:	28800115 	stw	r2,4(r5)
 800b04c:	2101ffcc 	andi	r4,r4,2047
 800b050:	00800434 	movhi	r2,16
 800b054:	10bfffc4 	addi	r2,r2,-1
 800b058:	3084703a 	and	r2,r6,r2
 800b05c:	20001a1e 	bne	r4,zero,800b0c8 <__unpack_d+0x90>
 800b060:	1888b03a 	or	r4,r3,r2
 800b064:	20002626 	beq	r4,zero,800b100 <__unpack_d+0xc8>
 800b068:	1808d63a 	srli	r4,r3,24
 800b06c:	1004923a 	slli	r2,r2,8
 800b070:	01bf0084 	movi	r6,-1022
 800b074:	29800215 	stw	r6,8(r5)
 800b078:	2084b03a 	or	r2,r4,r2
 800b07c:	010000c4 	movi	r4,3
 800b080:	29000015 	stw	r4,0(r5)
 800b084:	02040034 	movhi	r8,4096
 800b088:	423fffc4 	addi	r8,r8,-1
 800b08c:	1806923a 	slli	r3,r3,8
 800b090:	40801836 	bltu	r8,r2,800b0f4 <__unpack_d+0xbc>
 800b094:	013f0044 	movi	r4,-1023
 800b098:	18cd883a 	add	r6,r3,r3
 800b09c:	30c7803a 	cmpltu	r3,r6,r3
 800b0a0:	1085883a 	add	r2,r2,r2
 800b0a4:	1885883a 	add	r2,r3,r2
 800b0a8:	200f883a 	mov	r7,r4
 800b0ac:	3007883a 	mov	r3,r6
 800b0b0:	213fffc4 	addi	r4,r4,-1
 800b0b4:	40bff82e 	bgeu	r8,r2,800b098 <__unpack_d+0x60>
 800b0b8:	29c00215 	stw	r7,8(r5)
 800b0bc:	28c00315 	stw	r3,12(r5)
 800b0c0:	28800415 	stw	r2,16(r5)
 800b0c4:	f800283a 	ret
 800b0c8:	01c1ffc4 	movi	r7,2047
 800b0cc:	21c00f26 	beq	r4,r7,800b10c <__unpack_d+0xd4>
 800b0d0:	180cd63a 	srli	r6,r3,24
 800b0d4:	1004923a 	slli	r2,r2,8
 800b0d8:	213f0044 	addi	r4,r4,-1023
 800b0dc:	1806923a 	slli	r3,r3,8
 800b0e0:	3084b03a 	or	r2,r6,r2
 800b0e4:	29000215 	stw	r4,8(r5)
 800b0e8:	010000c4 	movi	r4,3
 800b0ec:	10840034 	orhi	r2,r2,4096
 800b0f0:	29000015 	stw	r4,0(r5)
 800b0f4:	28c00315 	stw	r3,12(r5)
 800b0f8:	28800415 	stw	r2,16(r5)
 800b0fc:	f800283a 	ret
 800b100:	00800084 	movi	r2,2
 800b104:	28800015 	stw	r2,0(r5)
 800b108:	f800283a 	ret
 800b10c:	1888b03a 	or	r4,r3,r2
 800b110:	20000526 	beq	r4,zero,800b128 <__unpack_d+0xf0>
 800b114:	3180022c 	andhi	r6,r6,8
 800b118:	30000626 	beq	r6,zero,800b134 <__unpack_d+0xfc>
 800b11c:	01000044 	movi	r4,1
 800b120:	29000015 	stw	r4,0(r5)
 800b124:	003ff306 	br	800b0f4 <__unpack_d+0xbc>
 800b128:	00800104 	movi	r2,4
 800b12c:	28800015 	stw	r2,0(r5)
 800b130:	f800283a 	ret
 800b134:	28000015 	stw	zero,0(r5)
 800b138:	003fee06 	br	800b0f4 <__unpack_d+0xbc>

0800b13c <__fpcmp_parts_d>:
 800b13c:	20c00017 	ldw	r3,0(r4)
 800b140:	00800044 	movi	r2,1
 800b144:	10c0142e 	bgeu	r2,r3,800b198 <__fpcmp_parts_d+0x5c>
 800b148:	29800017 	ldw	r6,0(r5)
 800b14c:	1180122e 	bgeu	r2,r6,800b198 <__fpcmp_parts_d+0x5c>
 800b150:	01c00104 	movi	r7,4
 800b154:	19c02826 	beq	r3,r7,800b1f8 <__fpcmp_parts_d+0xbc>
 800b158:	31c00926 	beq	r6,r7,800b180 <__fpcmp_parts_d+0x44>
 800b15c:	01c00084 	movi	r7,2
 800b160:	19c00626 	beq	r3,r7,800b17c <__fpcmp_parts_d+0x40>
 800b164:	31c00a26 	beq	r6,r7,800b190 <__fpcmp_parts_d+0x54>
 800b168:	20c00117 	ldw	r3,4(r4)
 800b16c:	29800117 	ldw	r6,4(r5)
 800b170:	19800b26 	beq	r3,r6,800b1a0 <__fpcmp_parts_d+0x64>
 800b174:	1800041e 	bne	r3,zero,800b188 <__fpcmp_parts_d+0x4c>
 800b178:	f800283a 	ret
 800b17c:	30c01a26 	beq	r6,r3,800b1e8 <__fpcmp_parts_d+0xac>
 800b180:	28800117 	ldw	r2,4(r5)
 800b184:	1000041e 	bne	r2,zero,800b198 <__fpcmp_parts_d+0x5c>
 800b188:	00bfffc4 	movi	r2,-1
 800b18c:	f800283a 	ret
 800b190:	20800117 	ldw	r2,4(r4)
 800b194:	103ffc1e 	bne	r2,zero,800b188 <__fpcmp_parts_d+0x4c>
 800b198:	00800044 	movi	r2,1
 800b19c:	f800283a 	ret
 800b1a0:	21c00217 	ldw	r7,8(r4)
 800b1a4:	29800217 	ldw	r6,8(r5)
 800b1a8:	31c0020e 	bge	r6,r7,800b1b4 <__fpcmp_parts_d+0x78>
 800b1ac:	183ff61e 	bne	r3,zero,800b188 <__fpcmp_parts_d+0x4c>
 800b1b0:	f800283a 	ret
 800b1b4:	39800a16 	blt	r7,r6,800b1e0 <__fpcmp_parts_d+0xa4>
 800b1b8:	20800417 	ldw	r2,16(r4)
 800b1bc:	29800417 	ldw	r6,16(r5)
 800b1c0:	21c00317 	ldw	r7,12(r4)
 800b1c4:	29000317 	ldw	r4,12(r5)
 800b1c8:	30800936 	bltu	r6,r2,800b1f0 <__fpcmp_parts_d+0xb4>
 800b1cc:	1180011e 	bne	r2,r6,800b1d4 <__fpcmp_parts_d+0x98>
 800b1d0:	21c00736 	bltu	r4,r7,800b1f0 <__fpcmp_parts_d+0xb4>
 800b1d4:	11800236 	bltu	r2,r6,800b1e0 <__fpcmp_parts_d+0xa4>
 800b1d8:	3080031e 	bne	r6,r2,800b1e8 <__fpcmp_parts_d+0xac>
 800b1dc:	3900022e 	bgeu	r7,r4,800b1e8 <__fpcmp_parts_d+0xac>
 800b1e0:	183fe926 	beq	r3,zero,800b188 <__fpcmp_parts_d+0x4c>
 800b1e4:	003fec06 	br	800b198 <__fpcmp_parts_d+0x5c>
 800b1e8:	0005883a 	mov	r2,zero
 800b1ec:	f800283a 	ret
 800b1f0:	183fe926 	beq	r3,zero,800b198 <__fpcmp_parts_d+0x5c>
 800b1f4:	003fe406 	br	800b188 <__fpcmp_parts_d+0x4c>
 800b1f8:	30ffe51e 	bne	r6,r3,800b190 <__fpcmp_parts_d+0x54>
 800b1fc:	28c00117 	ldw	r3,4(r5)
 800b200:	20800117 	ldw	r2,4(r4)
 800b204:	1885c83a 	sub	r2,r3,r2
 800b208:	f800283a 	ret

0800b20c <__lshrdi3>:
 800b20c:	2005883a 	mov	r2,r4
 800b210:	2807883a 	mov	r3,r5
 800b214:	30000826 	beq	r6,zero,800b238 <__lshrdi3+0x2c>
 800b218:	01000804 	movi	r4,32
 800b21c:	2189c83a 	sub	r4,r4,r6
 800b220:	0100060e 	bge	zero,r4,800b23c <__lshrdi3+0x30>
 800b224:	1184d83a 	srl	r2,r2,r6
 800b228:	2908983a 	sll	r4,r5,r4
 800b22c:	298cd83a 	srl	r6,r5,r6
 800b230:	2084b03a 	or	r2,r4,r2
 800b234:	3007883a 	mov	r3,r6
 800b238:	f800283a 	ret
 800b23c:	0105c83a 	sub	r2,zero,r4
 800b240:	000d883a 	mov	r6,zero
 800b244:	2884d83a 	srl	r2,r5,r2
 800b248:	3007883a 	mov	r3,r6
 800b24c:	003ffa06 	br	800b238 <__lshrdi3+0x2c>

0800b250 <__ashldi3>:
 800b250:	2005883a 	mov	r2,r4
 800b254:	2807883a 	mov	r3,r5
 800b258:	30000826 	beq	r6,zero,800b27c <__ashldi3+0x2c>
 800b25c:	01000804 	movi	r4,32
 800b260:	2189c83a 	sub	r4,r4,r6
 800b264:	0100060e 	bge	zero,r4,800b280 <__ashldi3+0x30>
 800b268:	1108d83a 	srl	r4,r2,r4
 800b26c:	2986983a 	sll	r3,r5,r6
 800b270:	118c983a 	sll	r6,r2,r6
 800b274:	20c6b03a 	or	r3,r4,r3
 800b278:	3005883a 	mov	r2,r6
 800b27c:	f800283a 	ret
 800b280:	0107c83a 	sub	r3,zero,r4
 800b284:	000d883a 	mov	r6,zero
 800b288:	10c6983a 	sll	r3,r2,r3
 800b28c:	3005883a 	mov	r2,r6
 800b290:	003ffa06 	br	800b27c <__ashldi3+0x2c>

0800b294 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800b294:	defffe04 	addi	sp,sp,-8
 800b298:	dfc00115 	stw	ra,4(sp)
 800b29c:	df000015 	stw	fp,0(sp)
 800b2a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800b2a4:	00820074 	movhi	r2,2049
 800b2a8:	10baea04 	addi	r2,r2,-5208
 800b2ac:	10800017 	ldw	r2,0(r2)
 800b2b0:	10000526 	beq	r2,zero,800b2c8 <alt_get_errno+0x34>
 800b2b4:	00820074 	movhi	r2,2049
 800b2b8:	10baea04 	addi	r2,r2,-5208
 800b2bc:	10800017 	ldw	r2,0(r2)
 800b2c0:	103ee83a 	callr	r2
 800b2c4:	00000206 	br	800b2d0 <alt_get_errno+0x3c>
 800b2c8:	00820074 	movhi	r2,2049
 800b2cc:	10bde704 	addi	r2,r2,-2148
}
 800b2d0:	e037883a 	mov	sp,fp
 800b2d4:	dfc00117 	ldw	ra,4(sp)
 800b2d8:	df000017 	ldw	fp,0(sp)
 800b2dc:	dec00204 	addi	sp,sp,8
 800b2e0:	f800283a 	ret

0800b2e4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800b2e4:	defffb04 	addi	sp,sp,-20
 800b2e8:	dfc00415 	stw	ra,16(sp)
 800b2ec:	df000315 	stw	fp,12(sp)
 800b2f0:	df000304 	addi	fp,sp,12
 800b2f4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800b2f8:	e0bfff17 	ldw	r2,-4(fp)
 800b2fc:	10000716 	blt	r2,zero,800b31c <close+0x38>
 800b300:	e13fff17 	ldw	r4,-4(fp)
 800b304:	01400304 	movi	r5,12
 800b308:	8001bbc0 	call	8001bbc <__mulsi3>
 800b30c:	00c20074 	movhi	r3,2049
 800b310:	18fa4204 	addi	r3,r3,-5880
 800b314:	10c5883a 	add	r2,r2,r3
 800b318:	00000106 	br	800b320 <close+0x3c>
 800b31c:	0005883a 	mov	r2,zero
 800b320:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 800b324:	e0bffd17 	ldw	r2,-12(fp)
 800b328:	10001826 	beq	r2,zero,800b38c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800b32c:	e0bffd17 	ldw	r2,-12(fp)
 800b330:	10800017 	ldw	r2,0(r2)
 800b334:	10800417 	ldw	r2,16(r2)
 800b338:	10000626 	beq	r2,zero,800b354 <close+0x70>
 800b33c:	e0bffd17 	ldw	r2,-12(fp)
 800b340:	10800017 	ldw	r2,0(r2)
 800b344:	10800417 	ldw	r2,16(r2)
 800b348:	e13ffd17 	ldw	r4,-12(fp)
 800b34c:	103ee83a 	callr	r2
 800b350:	00000106 	br	800b358 <close+0x74>
 800b354:	0005883a 	mov	r2,zero
 800b358:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800b35c:	e13fff17 	ldw	r4,-4(fp)
 800b360:	800b9c00 	call	800b9c0 <alt_release_fd>
    if (rval < 0)
 800b364:	e0bffe17 	ldw	r2,-8(fp)
 800b368:	1000060e 	bge	r2,zero,800b384 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 800b36c:	800b2940 	call	800b294 <alt_get_errno>
 800b370:	e0fffe17 	ldw	r3,-8(fp)
 800b374:	00c7c83a 	sub	r3,zero,r3
 800b378:	10c00015 	stw	r3,0(r2)
      return -1;
 800b37c:	00bfffc4 	movi	r2,-1
 800b380:	00000606 	br	800b39c <close+0xb8>
    }
    return 0;
 800b384:	0005883a 	mov	r2,zero
 800b388:	00000406 	br	800b39c <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800b38c:	800b2940 	call	800b294 <alt_get_errno>
 800b390:	00c01444 	movi	r3,81
 800b394:	10c00015 	stw	r3,0(r2)
    return -1;
 800b398:	00bfffc4 	movi	r2,-1
  }
}
 800b39c:	e037883a 	mov	sp,fp
 800b3a0:	dfc00117 	ldw	ra,4(sp)
 800b3a4:	df000017 	ldw	fp,0(sp)
 800b3a8:	dec00204 	addi	sp,sp,8
 800b3ac:	f800283a 	ret

0800b3b0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800b3b0:	defffc04 	addi	sp,sp,-16
 800b3b4:	df000315 	stw	fp,12(sp)
 800b3b8:	df000304 	addi	fp,sp,12
 800b3bc:	e13ffd15 	stw	r4,-12(fp)
 800b3c0:	e17ffe15 	stw	r5,-8(fp)
 800b3c4:	e1bfff15 	stw	r6,-4(fp)
  return len;
 800b3c8:	e0bfff17 	ldw	r2,-4(fp)
}
 800b3cc:	e037883a 	mov	sp,fp
 800b3d0:	df000017 	ldw	fp,0(sp)
 800b3d4:	dec00104 	addi	sp,sp,4
 800b3d8:	f800283a 	ret

0800b3dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800b3dc:	defffe04 	addi	sp,sp,-8
 800b3e0:	dfc00115 	stw	ra,4(sp)
 800b3e4:	df000015 	stw	fp,0(sp)
 800b3e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800b3ec:	00820074 	movhi	r2,2049
 800b3f0:	10baea04 	addi	r2,r2,-5208
 800b3f4:	10800017 	ldw	r2,0(r2)
 800b3f8:	10000526 	beq	r2,zero,800b410 <alt_get_errno+0x34>
 800b3fc:	00820074 	movhi	r2,2049
 800b400:	10baea04 	addi	r2,r2,-5208
 800b404:	10800017 	ldw	r2,0(r2)
 800b408:	103ee83a 	callr	r2
 800b40c:	00000206 	br	800b418 <alt_get_errno+0x3c>
 800b410:	00820074 	movhi	r2,2049
 800b414:	10bde704 	addi	r2,r2,-2148
}
 800b418:	e037883a 	mov	sp,fp
 800b41c:	dfc00117 	ldw	ra,4(sp)
 800b420:	df000017 	ldw	fp,0(sp)
 800b424:	dec00204 	addi	sp,sp,8
 800b428:	f800283a 	ret

0800b42c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 800b42c:	defffb04 	addi	sp,sp,-20
 800b430:	dfc00415 	stw	ra,16(sp)
 800b434:	df000315 	stw	fp,12(sp)
 800b438:	df000304 	addi	fp,sp,12
 800b43c:	e13ffe15 	stw	r4,-8(fp)
 800b440:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800b444:	e0bffe17 	ldw	r2,-8(fp)
 800b448:	10000716 	blt	r2,zero,800b468 <fstat+0x3c>
 800b44c:	e13ffe17 	ldw	r4,-8(fp)
 800b450:	01400304 	movi	r5,12
 800b454:	8001bbc0 	call	8001bbc <__mulsi3>
 800b458:	00c20074 	movhi	r3,2049
 800b45c:	18fa4204 	addi	r3,r3,-5880
 800b460:	10c5883a 	add	r2,r2,r3
 800b464:	00000106 	br	800b46c <fstat+0x40>
 800b468:	0005883a 	mov	r2,zero
 800b46c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 800b470:	e0bffd17 	ldw	r2,-12(fp)
 800b474:	10001026 	beq	r2,zero,800b4b8 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 800b478:	e0bffd17 	ldw	r2,-12(fp)
 800b47c:	10800017 	ldw	r2,0(r2)
 800b480:	10800817 	ldw	r2,32(r2)
 800b484:	10000726 	beq	r2,zero,800b4a4 <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
 800b488:	e0bffd17 	ldw	r2,-12(fp)
 800b48c:	10800017 	ldw	r2,0(r2)
 800b490:	10800817 	ldw	r2,32(r2)
 800b494:	e13ffd17 	ldw	r4,-12(fp)
 800b498:	e17fff17 	ldw	r5,-4(fp)
 800b49c:	103ee83a 	callr	r2
 800b4a0:	00000906 	br	800b4c8 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 800b4a4:	e0bfff17 	ldw	r2,-4(fp)
 800b4a8:	00c80004 	movi	r3,8192
 800b4ac:	10c00115 	stw	r3,4(r2)
      return 0;
 800b4b0:	0005883a 	mov	r2,zero
 800b4b4:	00000406 	br	800b4c8 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800b4b8:	800b3dc0 	call	800b3dc <alt_get_errno>
 800b4bc:	00c01444 	movi	r3,81
 800b4c0:	10c00015 	stw	r3,0(r2)
    return -1;
 800b4c4:	00bfffc4 	movi	r2,-1
  }
}
 800b4c8:	e037883a 	mov	sp,fp
 800b4cc:	dfc00117 	ldw	ra,4(sp)
 800b4d0:	df000017 	ldw	fp,0(sp)
 800b4d4:	dec00204 	addi	sp,sp,8
 800b4d8:	f800283a 	ret

0800b4dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800b4dc:	defffe04 	addi	sp,sp,-8
 800b4e0:	dfc00115 	stw	ra,4(sp)
 800b4e4:	df000015 	stw	fp,0(sp)
 800b4e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800b4ec:	00820074 	movhi	r2,2049
 800b4f0:	10baea04 	addi	r2,r2,-5208
 800b4f4:	10800017 	ldw	r2,0(r2)
 800b4f8:	10000526 	beq	r2,zero,800b510 <alt_get_errno+0x34>
 800b4fc:	00820074 	movhi	r2,2049
 800b500:	10baea04 	addi	r2,r2,-5208
 800b504:	10800017 	ldw	r2,0(r2)
 800b508:	103ee83a 	callr	r2
 800b50c:	00000206 	br	800b518 <alt_get_errno+0x3c>
 800b510:	00820074 	movhi	r2,2049
 800b514:	10bde704 	addi	r2,r2,-2148
}
 800b518:	e037883a 	mov	sp,fp
 800b51c:	dfc00117 	ldw	ra,4(sp)
 800b520:	df000017 	ldw	fp,0(sp)
 800b524:	dec00204 	addi	sp,sp,8
 800b528:	f800283a 	ret

0800b52c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 800b52c:	deffed04 	addi	sp,sp,-76
 800b530:	dfc01215 	stw	ra,72(sp)
 800b534:	df001115 	stw	fp,68(sp)
 800b538:	df001104 	addi	fp,sp,68
 800b53c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800b540:	e0bfff17 	ldw	r2,-4(fp)
 800b544:	10000716 	blt	r2,zero,800b564 <isatty+0x38>
 800b548:	e13fff17 	ldw	r4,-4(fp)
 800b54c:	01400304 	movi	r5,12
 800b550:	8001bbc0 	call	8001bbc <__mulsi3>
 800b554:	00c20074 	movhi	r3,2049
 800b558:	18fa4204 	addi	r3,r3,-5880
 800b55c:	10c5883a 	add	r2,r2,r3
 800b560:	00000106 	br	800b568 <isatty+0x3c>
 800b564:	0005883a 	mov	r2,zero
 800b568:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 800b56c:	e0bfef17 	ldw	r2,-68(fp)
 800b570:	10000e26 	beq	r2,zero,800b5ac <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 800b574:	e0bfef17 	ldw	r2,-68(fp)
 800b578:	10800017 	ldw	r2,0(r2)
 800b57c:	10800817 	ldw	r2,32(r2)
 800b580:	1000021e 	bne	r2,zero,800b58c <isatty+0x60>
    {
      return 1;
 800b584:	00800044 	movi	r2,1
 800b588:	00000c06 	br	800b5bc <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 800b58c:	e0bff004 	addi	r2,fp,-64
 800b590:	e13fff17 	ldw	r4,-4(fp)
 800b594:	100b883a 	mov	r5,r2
 800b598:	800b42c0 	call	800b42c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 800b59c:	e0bff117 	ldw	r2,-60(fp)
 800b5a0:	10880020 	cmpeqi	r2,r2,8192
 800b5a4:	10803fcc 	andi	r2,r2,255
 800b5a8:	00000406 	br	800b5bc <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800b5ac:	800b4dc0 	call	800b4dc <alt_get_errno>
 800b5b0:	00c01444 	movi	r3,81
 800b5b4:	10c00015 	stw	r3,0(r2)
    return 0;
 800b5b8:	0005883a 	mov	r2,zero
  }
}
 800b5bc:	e037883a 	mov	sp,fp
 800b5c0:	dfc00117 	ldw	ra,4(sp)
 800b5c4:	df000017 	ldw	fp,0(sp)
 800b5c8:	dec00204 	addi	sp,sp,8
 800b5cc:	f800283a 	ret

0800b5d0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800b5d0:	defffc04 	addi	sp,sp,-16
 800b5d4:	df000315 	stw	fp,12(sp)
 800b5d8:	df000304 	addi	fp,sp,12
 800b5dc:	e13ffd15 	stw	r4,-12(fp)
 800b5e0:	e17ffe15 	stw	r5,-8(fp)
 800b5e4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 800b5e8:	e0fffe17 	ldw	r3,-8(fp)
 800b5ec:	e0bffd17 	ldw	r2,-12(fp)
 800b5f0:	18800e26 	beq	r3,r2,800b62c <alt_load_section+0x5c>
  {
    while( to != end )
 800b5f4:	00000a06 	br	800b620 <alt_load_section+0x50>
    {
      *to++ = *from++;
 800b5f8:	e0bffd17 	ldw	r2,-12(fp)
 800b5fc:	10c00017 	ldw	r3,0(r2)
 800b600:	e0bffe17 	ldw	r2,-8(fp)
 800b604:	10c00015 	stw	r3,0(r2)
 800b608:	e0bffe17 	ldw	r2,-8(fp)
 800b60c:	10800104 	addi	r2,r2,4
 800b610:	e0bffe15 	stw	r2,-8(fp)
 800b614:	e0bffd17 	ldw	r2,-12(fp)
 800b618:	10800104 	addi	r2,r2,4
 800b61c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 800b620:	e0fffe17 	ldw	r3,-8(fp)
 800b624:	e0bfff17 	ldw	r2,-4(fp)
 800b628:	18bff31e 	bne	r3,r2,800b5f8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 800b62c:	e037883a 	mov	sp,fp
 800b630:	df000017 	ldw	fp,0(sp)
 800b634:	dec00104 	addi	sp,sp,4
 800b638:	f800283a 	ret

0800b63c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800b63c:	defffe04 	addi	sp,sp,-8
 800b640:	dfc00115 	stw	ra,4(sp)
 800b644:	df000015 	stw	fp,0(sp)
 800b648:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 800b64c:	01020074 	movhi	r4,2049
 800b650:	213aec04 	addi	r4,r4,-5200
 800b654:	01420074 	movhi	r5,2049
 800b658:	2977f904 	addi	r5,r5,-8220
 800b65c:	01820074 	movhi	r6,2049
 800b660:	31baec04 	addi	r6,r6,-5200
 800b664:	800b5d00 	call	800b5d0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 800b668:	01020034 	movhi	r4,2048
 800b66c:	21000804 	addi	r4,r4,32
 800b670:	01420034 	movhi	r5,2048
 800b674:	29400804 	addi	r5,r5,32
 800b678:	01820034 	movhi	r6,2048
 800b67c:	31800804 	addi	r6,r6,32
 800b680:	800b5d00 	call	800b5d0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 800b684:	01020074 	movhi	r4,2049
 800b688:	21322604 	addi	r4,r4,-14184
 800b68c:	01420074 	movhi	r5,2049
 800b690:	29722604 	addi	r5,r5,-14184
 800b694:	01820074 	movhi	r6,2049
 800b698:	31b7f904 	addi	r6,r6,-8220
 800b69c:	800b5d00 	call	800b5d0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 800b6a0:	800c2340 	call	800c234 <alt_dcache_flush_all>
  alt_icache_flush_all();
 800b6a4:	800c4880 	call	800c488 <alt_icache_flush_all>
}
 800b6a8:	e037883a 	mov	sp,fp
 800b6ac:	dfc00117 	ldw	ra,4(sp)
 800b6b0:	df000017 	ldw	fp,0(sp)
 800b6b4:	dec00204 	addi	sp,sp,8
 800b6b8:	f800283a 	ret

0800b6bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800b6bc:	defffe04 	addi	sp,sp,-8
 800b6c0:	dfc00115 	stw	ra,4(sp)
 800b6c4:	df000015 	stw	fp,0(sp)
 800b6c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800b6cc:	00820074 	movhi	r2,2049
 800b6d0:	10baea04 	addi	r2,r2,-5208
 800b6d4:	10800017 	ldw	r2,0(r2)
 800b6d8:	10000526 	beq	r2,zero,800b6f0 <alt_get_errno+0x34>
 800b6dc:	00820074 	movhi	r2,2049
 800b6e0:	10baea04 	addi	r2,r2,-5208
 800b6e4:	10800017 	ldw	r2,0(r2)
 800b6e8:	103ee83a 	callr	r2
 800b6ec:	00000206 	br	800b6f8 <alt_get_errno+0x3c>
 800b6f0:	00820074 	movhi	r2,2049
 800b6f4:	10bde704 	addi	r2,r2,-2148
}
 800b6f8:	e037883a 	mov	sp,fp
 800b6fc:	dfc00117 	ldw	ra,4(sp)
 800b700:	df000017 	ldw	fp,0(sp)
 800b704:	dec00204 	addi	sp,sp,8
 800b708:	f800283a 	ret

0800b70c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 800b70c:	defff904 	addi	sp,sp,-28
 800b710:	dfc00615 	stw	ra,24(sp)
 800b714:	df000515 	stw	fp,20(sp)
 800b718:	df000504 	addi	fp,sp,20
 800b71c:	e13ffd15 	stw	r4,-12(fp)
 800b720:	e17ffe15 	stw	r5,-8(fp)
 800b724:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 800b728:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800b72c:	e0bffd17 	ldw	r2,-12(fp)
 800b730:	10000716 	blt	r2,zero,800b750 <lseek+0x44>
 800b734:	e13ffd17 	ldw	r4,-12(fp)
 800b738:	01400304 	movi	r5,12
 800b73c:	8001bbc0 	call	8001bbc <__mulsi3>
 800b740:	00c20074 	movhi	r3,2049
 800b744:	18fa4204 	addi	r3,r3,-5880
 800b748:	10c5883a 	add	r2,r2,r3
 800b74c:	00000106 	br	800b754 <lseek+0x48>
 800b750:	0005883a 	mov	r2,zero
 800b754:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 800b758:	e0bffc17 	ldw	r2,-16(fp)
 800b75c:	10001026 	beq	r2,zero,800b7a0 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 800b760:	e0bffc17 	ldw	r2,-16(fp)
 800b764:	10800017 	ldw	r2,0(r2)
 800b768:	10800717 	ldw	r2,28(r2)
 800b76c:	10000926 	beq	r2,zero,800b794 <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 800b770:	e0bffc17 	ldw	r2,-16(fp)
 800b774:	10800017 	ldw	r2,0(r2)
 800b778:	10800717 	ldw	r2,28(r2)
 800b77c:	e13ffc17 	ldw	r4,-16(fp)
 800b780:	e17ffe17 	ldw	r5,-8(fp)
 800b784:	e1bfff17 	ldw	r6,-4(fp)
 800b788:	103ee83a 	callr	r2
 800b78c:	e0bffb15 	stw	r2,-20(fp)
 800b790:	00000506 	br	800b7a8 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 800b794:	00bfde84 	movi	r2,-134
 800b798:	e0bffb15 	stw	r2,-20(fp)
 800b79c:	00000206 	br	800b7a8 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
 800b7a0:	00bfebc4 	movi	r2,-81
 800b7a4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 800b7a8:	e0bffb17 	ldw	r2,-20(fp)
 800b7ac:	1000060e 	bge	r2,zero,800b7c8 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 800b7b0:	800b6bc0 	call	800b6bc <alt_get_errno>
 800b7b4:	e0fffb17 	ldw	r3,-20(fp)
 800b7b8:	00c7c83a 	sub	r3,zero,r3
 800b7bc:	10c00015 	stw	r3,0(r2)
    rc = -1;
 800b7c0:	00bfffc4 	movi	r2,-1
 800b7c4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 800b7c8:	e0bffb17 	ldw	r2,-20(fp)
}
 800b7cc:	e037883a 	mov	sp,fp
 800b7d0:	dfc00117 	ldw	ra,4(sp)
 800b7d4:	df000017 	ldw	fp,0(sp)
 800b7d8:	dec00204 	addi	sp,sp,8
 800b7dc:	f800283a 	ret

0800b7e0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800b7e0:	defffd04 	addi	sp,sp,-12
 800b7e4:	dfc00215 	stw	ra,8(sp)
 800b7e8:	df000115 	stw	fp,4(sp)
 800b7ec:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800b7f0:	0009883a 	mov	r4,zero
 800b7f4:	800bc680 	call	800bc68 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 800b7f8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800b7fc:	800bc9c0 	call	800bc9c <alt_sys_init>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 800b800:	800c3400 	call	800c340 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800b804:	01020074 	movhi	r4,2049
 800b808:	2130e704 	addi	r4,r4,-15460
 800b80c:	800c4c40 	call	800c4c4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 800b810:	d1232217 	ldw	r4,-29560(gp)
 800b814:	d0e32317 	ldw	r3,-29556(gp)
 800b818:	d0a32417 	ldw	r2,-29552(gp)
 800b81c:	180b883a 	mov	r5,r3
 800b820:	100d883a 	mov	r6,r2
 800b824:	800005c0 	call	800005c <main>
 800b828:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 800b82c:	01000044 	movi	r4,1
 800b830:	800b2e40 	call	800b2e4 <close>
  exit (result);
 800b834:	e13fff17 	ldw	r4,-4(fp)
 800b838:	800c4d80 	call	800c4d8 <exit>

0800b83c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 800b83c:	defffe04 	addi	sp,sp,-8
 800b840:	df000115 	stw	fp,4(sp)
 800b844:	df000104 	addi	fp,sp,4
 800b848:	e13fff15 	stw	r4,-4(fp)
}
 800b84c:	e037883a 	mov	sp,fp
 800b850:	df000017 	ldw	fp,0(sp)
 800b854:	dec00104 	addi	sp,sp,4
 800b858:	f800283a 	ret

0800b85c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 800b85c:	defffe04 	addi	sp,sp,-8
 800b860:	df000115 	stw	fp,4(sp)
 800b864:	df000104 	addi	fp,sp,4
 800b868:	e13fff15 	stw	r4,-4(fp)
}
 800b86c:	e037883a 	mov	sp,fp
 800b870:	df000017 	ldw	fp,0(sp)
 800b874:	dec00104 	addi	sp,sp,4
 800b878:	f800283a 	ret

0800b87c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800b87c:	defffe04 	addi	sp,sp,-8
 800b880:	dfc00115 	stw	ra,4(sp)
 800b884:	df000015 	stw	fp,0(sp)
 800b888:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800b88c:	00820074 	movhi	r2,2049
 800b890:	10baea04 	addi	r2,r2,-5208
 800b894:	10800017 	ldw	r2,0(r2)
 800b898:	10000526 	beq	r2,zero,800b8b0 <alt_get_errno+0x34>
 800b89c:	00820074 	movhi	r2,2049
 800b8a0:	10baea04 	addi	r2,r2,-5208
 800b8a4:	10800017 	ldw	r2,0(r2)
 800b8a8:	103ee83a 	callr	r2
 800b8ac:	00000206 	br	800b8b8 <alt_get_errno+0x3c>
 800b8b0:	00820074 	movhi	r2,2049
 800b8b4:	10bde704 	addi	r2,r2,-2148
}
 800b8b8:	e037883a 	mov	sp,fp
 800b8bc:	dfc00117 	ldw	ra,4(sp)
 800b8c0:	df000017 	ldw	fp,0(sp)
 800b8c4:	dec00204 	addi	sp,sp,8
 800b8c8:	f800283a 	ret

0800b8cc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 800b8cc:	defff904 	addi	sp,sp,-28
 800b8d0:	dfc00615 	stw	ra,24(sp)
 800b8d4:	df000515 	stw	fp,20(sp)
 800b8d8:	df000504 	addi	fp,sp,20
 800b8dc:	e13ffd15 	stw	r4,-12(fp)
 800b8e0:	e17ffe15 	stw	r5,-8(fp)
 800b8e4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800b8e8:	e0bffd17 	ldw	r2,-12(fp)
 800b8ec:	10000716 	blt	r2,zero,800b90c <read+0x40>
 800b8f0:	e13ffd17 	ldw	r4,-12(fp)
 800b8f4:	01400304 	movi	r5,12
 800b8f8:	8001bbc0 	call	8001bbc <__mulsi3>
 800b8fc:	00c20074 	movhi	r3,2049
 800b900:	18fa4204 	addi	r3,r3,-5880
 800b904:	10c5883a 	add	r2,r2,r3
 800b908:	00000106 	br	800b910 <read+0x44>
 800b90c:	0005883a 	mov	r2,zero
 800b910:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800b914:	e0bffb17 	ldw	r2,-20(fp)
 800b918:	10002026 	beq	r2,zero,800b99c <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800b91c:	e0bffb17 	ldw	r2,-20(fp)
 800b920:	10800217 	ldw	r2,8(r2)
 800b924:	108000cc 	andi	r2,r2,3
 800b928:	10800060 	cmpeqi	r2,r2,1
 800b92c:	1000171e 	bne	r2,zero,800b98c <read+0xc0>
        (fd->dev->read))
 800b930:	e0bffb17 	ldw	r2,-20(fp)
 800b934:	10800017 	ldw	r2,0(r2)
 800b938:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800b93c:	10001326 	beq	r2,zero,800b98c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 800b940:	e0bffb17 	ldw	r2,-20(fp)
 800b944:	10800017 	ldw	r2,0(r2)
 800b948:	10c00517 	ldw	r3,20(r2)
 800b94c:	e0bfff17 	ldw	r2,-4(fp)
 800b950:	e13ffb17 	ldw	r4,-20(fp)
 800b954:	e17ffe17 	ldw	r5,-8(fp)
 800b958:	100d883a 	mov	r6,r2
 800b95c:	183ee83a 	callr	r3
 800b960:	e0bffc15 	stw	r2,-16(fp)
 800b964:	e0bffc17 	ldw	r2,-16(fp)
 800b968:	1000060e 	bge	r2,zero,800b984 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 800b96c:	800b87c0 	call	800b87c <alt_get_errno>
 800b970:	e0fffc17 	ldw	r3,-16(fp)
 800b974:	00c7c83a 	sub	r3,zero,r3
 800b978:	10c00015 	stw	r3,0(r2)
          return -1;
 800b97c:	00bfffc4 	movi	r2,-1
 800b980:	00000a06 	br	800b9ac <read+0xe0>
        }
        return rval;
 800b984:	e0bffc17 	ldw	r2,-16(fp)
 800b988:	00000806 	br	800b9ac <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 800b98c:	800b87c0 	call	800b87c <alt_get_errno>
 800b990:	00c00344 	movi	r3,13
 800b994:	10c00015 	stw	r3,0(r2)
 800b998:	00000306 	br	800b9a8 <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 800b99c:	800b87c0 	call	800b87c <alt_get_errno>
 800b9a0:	00c01444 	movi	r3,81
 800b9a4:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 800b9a8:	00bfffc4 	movi	r2,-1
}
 800b9ac:	e037883a 	mov	sp,fp
 800b9b0:	dfc00117 	ldw	ra,4(sp)
 800b9b4:	df000017 	ldw	fp,0(sp)
 800b9b8:	dec00204 	addi	sp,sp,8
 800b9bc:	f800283a 	ret

0800b9c0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800b9c0:	defffc04 	addi	sp,sp,-16
 800b9c4:	dfc00315 	stw	ra,12(sp)
 800b9c8:	df000215 	stw	fp,8(sp)
 800b9cc:	dc000115 	stw	r16,4(sp)
 800b9d0:	df000104 	addi	fp,sp,4
 800b9d4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 800b9d8:	e0bfff17 	ldw	r2,-4(fp)
 800b9dc:	108000d0 	cmplti	r2,r2,3
 800b9e0:	1000111e 	bne	r2,zero,800ba28 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 800b9e4:	04020074 	movhi	r16,2049
 800b9e8:	843a4204 	addi	r16,r16,-5880
 800b9ec:	e0bfff17 	ldw	r2,-4(fp)
 800b9f0:	1009883a 	mov	r4,r2
 800b9f4:	01400304 	movi	r5,12
 800b9f8:	8001bbc0 	call	8001bbc <__mulsi3>
 800b9fc:	8085883a 	add	r2,r16,r2
 800ba00:	10800204 	addi	r2,r2,8
 800ba04:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 800ba08:	04020074 	movhi	r16,2049
 800ba0c:	843a4204 	addi	r16,r16,-5880
 800ba10:	e0bfff17 	ldw	r2,-4(fp)
 800ba14:	1009883a 	mov	r4,r2
 800ba18:	01400304 	movi	r5,12
 800ba1c:	8001bbc0 	call	8001bbc <__mulsi3>
 800ba20:	8085883a 	add	r2,r16,r2
 800ba24:	10000015 	stw	zero,0(r2)
  }
}
 800ba28:	e037883a 	mov	sp,fp
 800ba2c:	dfc00217 	ldw	ra,8(sp)
 800ba30:	df000117 	ldw	fp,4(sp)
 800ba34:	dc000017 	ldw	r16,0(sp)
 800ba38:	dec00304 	addi	sp,sp,12
 800ba3c:	f800283a 	ret

0800ba40 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800ba40:	defff904 	addi	sp,sp,-28
 800ba44:	df000615 	stw	fp,24(sp)
 800ba48:	df000604 	addi	fp,sp,24
 800ba4c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800ba50:	0005303a 	rdctl	r2,status
 800ba54:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800ba58:	e0fffc17 	ldw	r3,-16(fp)
 800ba5c:	00bfff84 	movi	r2,-2
 800ba60:	1884703a 	and	r2,r3,r2
 800ba64:	1001703a 	wrctl	status,r2
  
  return context;
 800ba68:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800ba6c:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800ba70:	d0a02217 	ldw	r2,-32632(gp)
 800ba74:	10c000c4 	addi	r3,r2,3
 800ba78:	00bfff04 	movi	r2,-4
 800ba7c:	1884703a 	and	r2,r3,r2
 800ba80:	d0a02215 	stw	r2,-32632(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800ba84:	d0e02217 	ldw	r3,-32632(gp)
 800ba88:	e0bfff17 	ldw	r2,-4(fp)
 800ba8c:	1885883a 	add	r2,r3,r2
 800ba90:	00c40034 	movhi	r3,4096
 800ba94:	18c00004 	addi	r3,r3,0
 800ba98:	1880062e 	bgeu	r3,r2,800bab4 <sbrk+0x74>
 800ba9c:	e0bffa17 	ldw	r2,-24(fp)
 800baa0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800baa4:	e0bffd17 	ldw	r2,-12(fp)
 800baa8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800baac:	00bfffc4 	movi	r2,-1
 800bab0:	00000b06 	br	800bae0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 800bab4:	d0a02217 	ldw	r2,-32632(gp)
 800bab8:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 800babc:	d0e02217 	ldw	r3,-32632(gp)
 800bac0:	e0bfff17 	ldw	r2,-4(fp)
 800bac4:	1885883a 	add	r2,r3,r2
 800bac8:	d0a02215 	stw	r2,-32632(gp)
 800bacc:	e0bffa17 	ldw	r2,-24(fp)
 800bad0:	e0bffe15 	stw	r2,-8(fp)
 800bad4:	e0bffe17 	ldw	r2,-8(fp)
 800bad8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800badc:	e0bffb17 	ldw	r2,-20(fp)
} 
 800bae0:	e037883a 	mov	sp,fp
 800bae4:	df000017 	ldw	fp,0(sp)
 800bae8:	dec00104 	addi	sp,sp,4
 800baec:	f800283a 	ret

0800baf0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800baf0:	defffe04 	addi	sp,sp,-8
 800baf4:	dfc00115 	stw	ra,4(sp)
 800baf8:	df000015 	stw	fp,0(sp)
 800bafc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800bb00:	00820074 	movhi	r2,2049
 800bb04:	10baea04 	addi	r2,r2,-5208
 800bb08:	10800017 	ldw	r2,0(r2)
 800bb0c:	10000526 	beq	r2,zero,800bb24 <alt_get_errno+0x34>
 800bb10:	00820074 	movhi	r2,2049
 800bb14:	10baea04 	addi	r2,r2,-5208
 800bb18:	10800017 	ldw	r2,0(r2)
 800bb1c:	103ee83a 	callr	r2
 800bb20:	00000206 	br	800bb2c <alt_get_errno+0x3c>
 800bb24:	00820074 	movhi	r2,2049
 800bb28:	10bde704 	addi	r2,r2,-2148
}
 800bb2c:	e037883a 	mov	sp,fp
 800bb30:	dfc00117 	ldw	ra,4(sp)
 800bb34:	df000017 	ldw	fp,0(sp)
 800bb38:	dec00204 	addi	sp,sp,8
 800bb3c:	f800283a 	ret

0800bb40 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 800bb40:	defff904 	addi	sp,sp,-28
 800bb44:	dfc00615 	stw	ra,24(sp)
 800bb48:	df000515 	stw	fp,20(sp)
 800bb4c:	df000504 	addi	fp,sp,20
 800bb50:	e13ffd15 	stw	r4,-12(fp)
 800bb54:	e17ffe15 	stw	r5,-8(fp)
 800bb58:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800bb5c:	e0bffd17 	ldw	r2,-12(fp)
 800bb60:	10000716 	blt	r2,zero,800bb80 <write+0x40>
 800bb64:	e13ffd17 	ldw	r4,-12(fp)
 800bb68:	01400304 	movi	r5,12
 800bb6c:	8001bbc0 	call	8001bbc <__mulsi3>
 800bb70:	00c20074 	movhi	r3,2049
 800bb74:	18fa4204 	addi	r3,r3,-5880
 800bb78:	10c5883a 	add	r2,r2,r3
 800bb7c:	00000106 	br	800bb84 <write+0x44>
 800bb80:	0005883a 	mov	r2,zero
 800bb84:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800bb88:	e0bffb17 	ldw	r2,-20(fp)
 800bb8c:	10001f26 	beq	r2,zero,800bc0c <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 800bb90:	e0bffb17 	ldw	r2,-20(fp)
 800bb94:	10800217 	ldw	r2,8(r2)
 800bb98:	108000cc 	andi	r2,r2,3
 800bb9c:	10001726 	beq	r2,zero,800bbfc <write+0xbc>
 800bba0:	e0bffb17 	ldw	r2,-20(fp)
 800bba4:	10800017 	ldw	r2,0(r2)
 800bba8:	10800617 	ldw	r2,24(r2)
 800bbac:	10001326 	beq	r2,zero,800bbfc <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 800bbb0:	e0bffb17 	ldw	r2,-20(fp)
 800bbb4:	10800017 	ldw	r2,0(r2)
 800bbb8:	10c00617 	ldw	r3,24(r2)
 800bbbc:	e0bfff17 	ldw	r2,-4(fp)
 800bbc0:	e13ffb17 	ldw	r4,-20(fp)
 800bbc4:	e17ffe17 	ldw	r5,-8(fp)
 800bbc8:	100d883a 	mov	r6,r2
 800bbcc:	183ee83a 	callr	r3
 800bbd0:	e0bffc15 	stw	r2,-16(fp)
 800bbd4:	e0bffc17 	ldw	r2,-16(fp)
 800bbd8:	1000060e 	bge	r2,zero,800bbf4 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 800bbdc:	800baf00 	call	800baf0 <alt_get_errno>
 800bbe0:	e0fffc17 	ldw	r3,-16(fp)
 800bbe4:	00c7c83a 	sub	r3,zero,r3
 800bbe8:	10c00015 	stw	r3,0(r2)
        return -1;
 800bbec:	00bfffc4 	movi	r2,-1
 800bbf0:	00000a06 	br	800bc1c <write+0xdc>
      }
      return rval;
 800bbf4:	e0bffc17 	ldw	r2,-16(fp)
 800bbf8:	00000806 	br	800bc1c <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
 800bbfc:	800baf00 	call	800baf0 <alt_get_errno>
 800bc00:	00c00344 	movi	r3,13
 800bc04:	10c00015 	stw	r3,0(r2)
 800bc08:	00000306 	br	800bc18 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 800bc0c:	800baf00 	call	800baf0 <alt_get_errno>
 800bc10:	00c01444 	movi	r3,81
 800bc14:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 800bc18:	00bfffc4 	movi	r2,-1
}
 800bc1c:	e037883a 	mov	sp,fp
 800bc20:	dfc00117 	ldw	ra,4(sp)
 800bc24:	df000017 	ldw	fp,0(sp)
 800bc28:	dec00204 	addi	sp,sp,8
 800bc2c:	f800283a 	ret

0800bc30 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 800bc30:	defffd04 	addi	sp,sp,-12
 800bc34:	dfc00215 	stw	ra,8(sp)
 800bc38:	df000115 	stw	fp,4(sp)
 800bc3c:	df000104 	addi	fp,sp,4
 800bc40:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 800bc44:	e13fff17 	ldw	r4,-4(fp)
 800bc48:	01420074 	movhi	r5,2049
 800bc4c:	297ae704 	addi	r5,r5,-5220
 800bc50:	800c2a00 	call	800c2a0 <alt_dev_llist_insert>
}
 800bc54:	e037883a 	mov	sp,fp
 800bc58:	dfc00117 	ldw	ra,4(sp)
 800bc5c:	df000017 	ldw	fp,0(sp)
 800bc60:	dec00204 	addi	sp,sp,8
 800bc64:	f800283a 	ret

0800bc68 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 800bc68:	defffd04 	addi	sp,sp,-12
 800bc6c:	dfc00215 	stw	ra,8(sp)
 800bc70:	df000115 	stw	fp,4(sp)
 800bc74:	df000104 	addi	fp,sp,4
 800bc78:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
 800bc7c:	800c4a40 	call	800c4a4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 800bc80:	00800044 	movi	r2,1
 800bc84:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 800bc88:	e037883a 	mov	sp,fp
 800bc8c:	dfc00117 	ldw	ra,4(sp)
 800bc90:	df000017 	ldw	fp,0(sp)
 800bc94:	dec00204 	addi	sp,sp,8
 800bc98:	f800283a 	ret

0800bc9c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 800bc9c:	defffd04 	addi	sp,sp,-12
 800bca0:	dfc00215 	stw	ra,8(sp)
 800bca4:	df000115 	stw	fp,4(sp)
 800bca8:	df000104 	addi	fp,sp,4
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( CHAR_BUFFER_WITH_DMA, Char_Buffer_with_DMA);
 800bcac:	00820074 	movhi	r2,2049
 800bcb0:	10baa204 	addi	r2,r2,-5496
 800bcb4:	10800a17 	ldw	r2,40(r2)
 800bcb8:	10800104 	addi	r2,r2,4
 800bcbc:	10800017 	ldw	r2,0(r2)
 800bcc0:	10ffffcc 	andi	r3,r2,65535
 800bcc4:	00820074 	movhi	r2,2049
 800bcc8:	10baa204 	addi	r2,r2,-5496
 800bccc:	10c00c15 	stw	r3,48(r2)
 800bcd0:	00820074 	movhi	r2,2049
 800bcd4:	10baa204 	addi	r2,r2,-5496
 800bcd8:	10800a17 	ldw	r2,40(r2)
 800bcdc:	10800104 	addi	r2,r2,4
 800bce0:	10800017 	ldw	r2,0(r2)
 800bce4:	1006d43a 	srli	r3,r2,16
 800bce8:	00820074 	movhi	r2,2049
 800bcec:	10baa204 	addi	r2,r2,-5496
 800bcf0:	10c00d15 	stw	r3,52(r2)
 800bcf4:	00820074 	movhi	r2,2049
 800bcf8:	10baa204 	addi	r2,r2,-5496
 800bcfc:	10800c17 	ldw	r2,48(r2)
 800bd00:	10801068 	cmpgeui	r2,r2,65
 800bd04:	1000081e 	bne	r2,zero,800bd28 <alt_sys_init+0x8c>
 800bd08:	00820074 	movhi	r2,2049
 800bd0c:	10baa204 	addi	r2,r2,-5496
 800bd10:	00c00fc4 	movi	r3,63
 800bd14:	10c00f15 	stw	r3,60(r2)
 800bd18:	00820074 	movhi	r2,2049
 800bd1c:	10baa204 	addi	r2,r2,-5496
 800bd20:	00c00184 	movi	r3,6
 800bd24:	10c01015 	stw	r3,64(r2)
 800bd28:	00820074 	movhi	r2,2049
 800bd2c:	10baa204 	addi	r2,r2,-5496
 800bd30:	10800d17 	ldw	r2,52(r2)
 800bd34:	10800868 	cmpgeui	r2,r2,33
 800bd38:	1000041e 	bne	r2,zero,800bd4c <alt_sys_init+0xb0>
 800bd3c:	00820074 	movhi	r2,2049
 800bd40:	10baa204 	addi	r2,r2,-5496
 800bd44:	00c007c4 	movi	r3,31
 800bd48:	10c01115 	stw	r3,68(r2)
 800bd4c:	01020074 	movhi	r4,2049
 800bd50:	213aa204 	addi	r4,r4,-5496
 800bd54:	800bf540 	call	800bf54 <alt_up_char_buffer_init>
 800bd58:	01020074 	movhi	r4,2049
 800bd5c:	213aa204 	addi	r4,r4,-5496
 800bd60:	800bc300 	call	800bc30 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( PIXEL_BUFFER_DMA, Pixel_Buffer_DMA);
 800bd64:	00820074 	movhi	r2,2049
 800bd68:	10bab404 	addi	r2,r2,-5424
 800bd6c:	10800a17 	ldw	r2,40(r2)
 800bd70:	10800017 	ldw	r2,0(r2)
 800bd74:	1007883a 	mov	r3,r2
 800bd78:	00820074 	movhi	r2,2049
 800bd7c:	10bab404 	addi	r2,r2,-5424
 800bd80:	10c00b15 	stw	r3,44(r2)
 800bd84:	00820074 	movhi	r2,2049
 800bd88:	10bab404 	addi	r2,r2,-5424
 800bd8c:	10800a17 	ldw	r2,40(r2)
 800bd90:	10800104 	addi	r2,r2,4
 800bd94:	10800017 	ldw	r2,0(r2)
 800bd98:	1007883a 	mov	r3,r2
 800bd9c:	00820074 	movhi	r2,2049
 800bda0:	10bab404 	addi	r2,r2,-5424
 800bda4:	10c00c15 	stw	r3,48(r2)
 800bda8:	00820074 	movhi	r2,2049
 800bdac:	10bab404 	addi	r2,r2,-5424
 800bdb0:	10800a17 	ldw	r2,40(r2)
 800bdb4:	10800204 	addi	r2,r2,8
 800bdb8:	10800017 	ldw	r2,0(r2)
 800bdbc:	10ffffcc 	andi	r3,r2,65535
 800bdc0:	00820074 	movhi	r2,2049
 800bdc4:	10bab404 	addi	r2,r2,-5424
 800bdc8:	10c00f15 	stw	r3,60(r2)
 800bdcc:	00820074 	movhi	r2,2049
 800bdd0:	10bab404 	addi	r2,r2,-5424
 800bdd4:	10800a17 	ldw	r2,40(r2)
 800bdd8:	10800204 	addi	r2,r2,8
 800bddc:	10800017 	ldw	r2,0(r2)
 800bde0:	1006d43a 	srli	r3,r2,16
 800bde4:	00820074 	movhi	r2,2049
 800bde8:	10bab404 	addi	r2,r2,-5424
 800bdec:	10c01015 	stw	r3,64(r2)
 800bdf0:	00820074 	movhi	r2,2049
 800bdf4:	10bab404 	addi	r2,r2,-5424
 800bdf8:	10800a17 	ldw	r2,40(r2)
 800bdfc:	10800304 	addi	r2,r2,12
 800be00:	10800017 	ldw	r2,0(r2)
 800be04:	1005d07a 	srai	r2,r2,1
 800be08:	10c0004c 	andi	r3,r2,1
 800be0c:	00820074 	movhi	r2,2049
 800be10:	10bab404 	addi	r2,r2,-5424
 800be14:	10c00d15 	stw	r3,52(r2)
 800be18:	00820074 	movhi	r2,2049
 800be1c:	10bab404 	addi	r2,r2,-5424
 800be20:	10800a17 	ldw	r2,40(r2)
 800be24:	10800304 	addi	r2,r2,12
 800be28:	10800017 	ldw	r2,0(r2)
 800be2c:	1005d13a 	srai	r2,r2,4
 800be30:	10c003cc 	andi	r3,r2,15
 800be34:	00820074 	movhi	r2,2049
 800be38:	10bab404 	addi	r2,r2,-5424
 800be3c:	10c00e15 	stw	r3,56(r2)
 800be40:	00820074 	movhi	r2,2049
 800be44:	10bab404 	addi	r2,r2,-5424
 800be48:	10800a17 	ldw	r2,40(r2)
 800be4c:	10800304 	addi	r2,r2,12
 800be50:	10800017 	ldw	r2,0(r2)
 800be54:	1005d43a 	srai	r2,r2,16
 800be58:	e0bfff05 	stb	r2,-4(fp)
 800be5c:	00820074 	movhi	r2,2049
 800be60:	10bab404 	addi	r2,r2,-5424
 800be64:	10800a17 	ldw	r2,40(r2)
 800be68:	10800304 	addi	r2,r2,12
 800be6c:	10800017 	ldw	r2,0(r2)
 800be70:	1004d63a 	srli	r2,r2,24
 800be74:	e0bfff45 	stb	r2,-3(fp)
 800be78:	00820074 	movhi	r2,2049
 800be7c:	10bab404 	addi	r2,r2,-5424
 800be80:	10800e17 	ldw	r2,56(r2)
 800be84:	10800058 	cmpnei	r2,r2,1
 800be88:	1000041e 	bne	r2,zero,800be9c <alt_sys_init+0x200>
 800be8c:	00820074 	movhi	r2,2049
 800be90:	10bab404 	addi	r2,r2,-5424
 800be94:	10001115 	stw	zero,68(r2)
 800be98:	00000e06 	br	800bed4 <alt_sys_init+0x238>
 800be9c:	00820074 	movhi	r2,2049
 800bea0:	10bab404 	addi	r2,r2,-5424
 800bea4:	10800e17 	ldw	r2,56(r2)
 800bea8:	10800098 	cmpnei	r2,r2,2
 800beac:	1000051e 	bne	r2,zero,800bec4 <alt_sys_init+0x228>
 800beb0:	00820074 	movhi	r2,2049
 800beb4:	10bab404 	addi	r2,r2,-5424
 800beb8:	00c00044 	movi	r3,1
 800bebc:	10c01115 	stw	r3,68(r2)
 800bec0:	00000406 	br	800bed4 <alt_sys_init+0x238>
 800bec4:	00820074 	movhi	r2,2049
 800bec8:	10bab404 	addi	r2,r2,-5424
 800becc:	00c00084 	movi	r3,2
 800bed0:	10c01115 	stw	r3,68(r2)
 800bed4:	e0bfff03 	ldbu	r2,-4(fp)
 800bed8:	00c00804 	movi	r3,32
 800bedc:	1885c83a 	sub	r2,r3,r2
 800bee0:	00ffffc4 	movi	r3,-1
 800bee4:	1886d83a 	srl	r3,r3,r2
 800bee8:	00820074 	movhi	r2,2049
 800beec:	10bab404 	addi	r2,r2,-5424
 800bef0:	10c01215 	stw	r3,72(r2)
 800bef4:	e0ffff03 	ldbu	r3,-4(fp)
 800bef8:	00820074 	movhi	r2,2049
 800befc:	10bab404 	addi	r2,r2,-5424
 800bf00:	10801117 	ldw	r2,68(r2)
 800bf04:	1887883a 	add	r3,r3,r2
 800bf08:	00820074 	movhi	r2,2049
 800bf0c:	10bab404 	addi	r2,r2,-5424
 800bf10:	10c01315 	stw	r3,76(r2)
 800bf14:	e0bfff43 	ldbu	r2,-3(fp)
 800bf18:	00c00804 	movi	r3,32
 800bf1c:	1885c83a 	sub	r2,r3,r2
 800bf20:	00ffffc4 	movi	r3,-1
 800bf24:	1886d83a 	srl	r3,r3,r2
 800bf28:	00820074 	movhi	r2,2049
 800bf2c:	10bab404 	addi	r2,r2,-5424
 800bf30:	10c01415 	stw	r3,80(r2)
 800bf34:	01020074 	movhi	r4,2049
 800bf38:	213ab404 	addi	r4,r4,-5424
 800bf3c:	800bc300 	call	800bc30 <alt_dev_reg>
}
 800bf40:	e037883a 	mov	sp,fp
 800bf44:	dfc00117 	ldw	ra,4(sp)
 800bf48:	df000017 	ldw	fp,0(sp)
 800bf4c:	dec00204 	addi	sp,sp,8
 800bf50:	f800283a 	ret

0800bf54 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
 800bf54:	defffc04 	addi	sp,sp,-16
 800bf58:	dfc00315 	stw	ra,12(sp)
 800bf5c:	df000215 	stw	fp,8(sp)
 800bf60:	df000204 	addi	fp,sp,8
 800bf64:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
 800bf68:	e0bfff17 	ldw	r2,-4(fp)
 800bf6c:	10800217 	ldw	r2,8(r2)
 800bf70:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
 800bf74:	00000d06 	br	800bfac <alt_up_char_buffer_init+0x58>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
 800bf78:	e13ffe17 	ldw	r4,-8(fp)
 800bf7c:	01420074 	movhi	r5,2049
 800bf80:	2977f204 	addi	r5,r5,-8248
 800bf84:	8008bc00 	call	8008bc0 <strcmp>
 800bf88:	1000051e 	bne	r2,zero,800bfa0 <alt_up_char_buffer_init+0x4c>
			(*name) = '\0';
 800bf8c:	e0bffe17 	ldw	r2,-8(fp)
 800bf90:	10000005 	stb	zero,0(r2)
			break;
 800bf94:	0001883a 	nop
		}
	}
	
	return;
 800bf98:	0001883a 	nop
 800bf9c:	00000906 	br	800bfc4 <alt_up_char_buffer_init+0x70>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
 800bfa0:	e0bffe17 	ldw	r2,-8(fp)
 800bfa4:	10800044 	addi	r2,r2,1
 800bfa8:	e0bffe15 	stw	r2,-8(fp)
 800bfac:	e0bffe17 	ldw	r2,-8(fp)
 800bfb0:	10800003 	ldbu	r2,0(r2)
 800bfb4:	10803fcc 	andi	r2,r2,255
 800bfb8:	1080201c 	xori	r2,r2,128
 800bfbc:	10bfe004 	addi	r2,r2,-128
 800bfc0:	103fed1e 	bne	r2,zero,800bf78 <alt_up_char_buffer_init+0x24>
			(*name) = '\0';
			break;
		}
	}
	
	return;
 800bfc4:	0001883a 	nop
}
 800bfc8:	e037883a 	mov	sp,fp
 800bfcc:	dfc00117 	ldw	ra,4(sp)
 800bfd0:	df000017 	ldw	fp,0(sp)
 800bfd4:	dec00204 	addi	sp,sp,8
 800bfd8:	f800283a 	ret

0800bfdc <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
 800bfdc:	defffc04 	addi	sp,sp,-16
 800bfe0:	dfc00315 	stw	ra,12(sp)
 800bfe4:	df000215 	stw	fp,8(sp)
 800bfe8:	df000204 	addi	fp,sp,8
 800bfec:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
 800bff0:	e13fff17 	ldw	r4,-4(fp)
 800bff4:	01420074 	movhi	r5,2049
 800bff8:	297ae704 	addi	r5,r5,-5220
 800bffc:	800c3f80 	call	800c3f8 <alt_find_dev>
 800c000:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 800c004:	e0bffe17 	ldw	r2,-8(fp)
}
 800c008:	e037883a 	mov	sp,fp
 800c00c:	dfc00117 	ldw	ra,4(sp)
 800c010:	df000017 	ldw	fp,0(sp)
 800c014:	dec00204 	addi	sp,sp,8
 800c018:	f800283a 	ret

0800c01c <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
 800c01c:	defffa04 	addi	sp,sp,-24
 800c020:	df000515 	stw	fp,20(sp)
 800c024:	df000504 	addi	fp,sp,20
 800c028:	e13ffc15 	stw	r4,-16(fp)
 800c02c:	2805883a 	mov	r2,r5
 800c030:	e1bffe15 	stw	r6,-8(fp)
 800c034:	e1ffff15 	stw	r7,-4(fp)
 800c038:	e0bffd05 	stb	r2,-12(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 800c03c:	e0bffc17 	ldw	r2,-16(fp)
 800c040:	10800c17 	ldw	r2,48(r2)
 800c044:	e0fffe17 	ldw	r3,-8(fp)
 800c048:	1880042e 	bgeu	r3,r2,800c05c <alt_up_char_buffer_draw+0x40>
 800c04c:	e0bffc17 	ldw	r2,-16(fp)
 800c050:	10800d17 	ldw	r2,52(r2)
 800c054:	e0ffff17 	ldw	r3,-4(fp)
 800c058:	18800236 	bltu	r3,r2,800c064 <alt_up_char_buffer_draw+0x48>
		return -1;
 800c05c:	00bfffc4 	movi	r2,-1
 800c060:	00001c06 	br	800c0d4 <alt_up_char_buffer_draw+0xb8>
	
	unsigned int addr = 0;
 800c064:	e03ffb15 	stw	zero,-20(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
 800c068:	e0bffc17 	ldw	r2,-16(fp)
 800c06c:	10c00f17 	ldw	r3,60(r2)
 800c070:	e0bffe17 	ldw	r2,-8(fp)
 800c074:	1886703a 	and	r3,r3,r2
 800c078:	e0bffc17 	ldw	r2,-16(fp)
 800c07c:	10800e17 	ldw	r2,56(r2)
 800c080:	1884983a 	sll	r2,r3,r2
 800c084:	e0fffb17 	ldw	r3,-20(fp)
 800c088:	1884b03a 	or	r2,r3,r2
 800c08c:	e0bffb15 	stw	r2,-20(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
 800c090:	e0bffc17 	ldw	r2,-16(fp)
 800c094:	10c01117 	ldw	r3,68(r2)
 800c098:	e0bfff17 	ldw	r2,-4(fp)
 800c09c:	1886703a 	and	r3,r3,r2
 800c0a0:	e0bffc17 	ldw	r2,-16(fp)
 800c0a4:	10801017 	ldw	r2,64(r2)
 800c0a8:	1884983a 	sll	r2,r3,r2
 800c0ac:	e0fffb17 	ldw	r3,-20(fp)
 800c0b0:	1884b03a 	or	r2,r3,r2
 800c0b4:	e0bffb15 	stw	r2,-20(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
 800c0b8:	e0bffc17 	ldw	r2,-16(fp)
 800c0bc:	10c00b17 	ldw	r3,44(r2)
 800c0c0:	e0bffb17 	ldw	r2,-20(fp)
 800c0c4:	1885883a 	add	r2,r3,r2
 800c0c8:	e0fffd03 	ldbu	r3,-12(fp)
 800c0cc:	10c00025 	stbio	r3,0(r2)

	return 0;
 800c0d0:	0005883a 	mov	r2,zero
}
 800c0d4:	e037883a 	mov	sp,fp
 800c0d8:	df000017 	ldw	fp,0(sp)
 800c0dc:	dec00104 	addi	sp,sp,4
 800c0e0:	f800283a 	ret

0800c0e4 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
 800c0e4:	defffa04 	addi	sp,sp,-24
 800c0e8:	df000515 	stw	fp,20(sp)
 800c0ec:	df000504 	addi	fp,sp,20
 800c0f0:	e13ffc15 	stw	r4,-16(fp)
 800c0f4:	e17ffd15 	stw	r5,-12(fp)
 800c0f8:	e1bffe15 	stw	r6,-8(fp)
 800c0fc:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 800c100:	e0bffc17 	ldw	r2,-16(fp)
 800c104:	10800c17 	ldw	r2,48(r2)
 800c108:	e0fffe17 	ldw	r3,-8(fp)
 800c10c:	1880042e 	bgeu	r3,r2,800c120 <alt_up_char_buffer_string+0x3c>
 800c110:	e0bffc17 	ldw	r2,-16(fp)
 800c114:	10800d17 	ldw	r2,52(r2)
 800c118:	e0ffff17 	ldw	r3,-4(fp)
 800c11c:	18800236 	bltu	r3,r2,800c128 <alt_up_char_buffer_string+0x44>
		return -1;
 800c120:	00bfffc4 	movi	r2,-1
 800c124:	00002906 	br	800c1cc <alt_up_char_buffer_string+0xe8>
	
	unsigned int offset = 0;
 800c128:	e03ffb15 	stw	zero,-20(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
 800c12c:	e0bffc17 	ldw	r2,-16(fp)
 800c130:	10801017 	ldw	r2,64(r2)
 800c134:	e0ffff17 	ldw	r3,-4(fp)
 800c138:	1886983a 	sll	r3,r3,r2
 800c13c:	e0bffe17 	ldw	r2,-8(fp)
 800c140:	1885883a 	add	r2,r3,r2
 800c144:	e0bffb15 	stw	r2,-20(fp)

	while ( *ptr )
 800c148:	00001906 	br	800c1b0 <alt_up_char_buffer_string+0xcc>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
 800c14c:	e0bffc17 	ldw	r2,-16(fp)
 800c150:	10c00b17 	ldw	r3,44(r2)
 800c154:	e0bffb17 	ldw	r2,-20(fp)
 800c158:	1885883a 	add	r2,r3,r2
 800c15c:	e0fffd17 	ldw	r3,-12(fp)
 800c160:	18c00003 	ldbu	r3,0(r3)
 800c164:	18c03fcc 	andi	r3,r3,255
 800c168:	18c0201c 	xori	r3,r3,128
 800c16c:	18ffe004 	addi	r3,r3,-128
 800c170:	10c00025 	stbio	r3,0(r2)
		++ptr;
 800c174:	e0bffd17 	ldw	r2,-12(fp)
 800c178:	10800044 	addi	r2,r2,1
 800c17c:	e0bffd15 	stw	r2,-12(fp)
		if (++x >= char_buffer->x_resolution)
 800c180:	e0bffe17 	ldw	r2,-8(fp)
 800c184:	10800044 	addi	r2,r2,1
 800c188:	e0bffe15 	stw	r2,-8(fp)
 800c18c:	e0bffc17 	ldw	r2,-16(fp)
 800c190:	10800c17 	ldw	r2,48(r2)
 800c194:	e0fffe17 	ldw	r3,-8(fp)
 800c198:	18800236 	bltu	r3,r2,800c1a4 <alt_up_char_buffer_string+0xc0>
			return -1;
 800c19c:	00bfffc4 	movi	r2,-1
 800c1a0:	00000a06 	br	800c1cc <alt_up_char_buffer_string+0xe8>
		++offset;
 800c1a4:	e0bffb17 	ldw	r2,-20(fp)
 800c1a8:	10800044 	addi	r2,r2,1
 800c1ac:	e0bffb15 	stw	r2,-20(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
 800c1b0:	e0bffd17 	ldw	r2,-12(fp)
 800c1b4:	10800003 	ldbu	r2,0(r2)
 800c1b8:	10803fcc 	andi	r2,r2,255
 800c1bc:	1080201c 	xori	r2,r2,128
 800c1c0:	10bfe004 	addi	r2,r2,-128
 800c1c4:	103fe11e 	bne	r2,zero,800c14c <alt_up_char_buffer_string+0x68>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
 800c1c8:	0005883a 	mov	r2,zero
}
 800c1cc:	e037883a 	mov	sp,fp
 800c1d0:	df000017 	ldw	fp,0(sp)
 800c1d4:	dec00104 	addi	sp,sp,4
 800c1d8:	f800283a 	ret

0800c1dc <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
 800c1dc:	defffe04 	addi	sp,sp,-8
 800c1e0:	df000115 	stw	fp,4(sp)
 800c1e4:	df000104 	addi	fp,sp,4
 800c1e8:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
 800c1ec:	e0bfff17 	ldw	r2,-4(fp)
 800c1f0:	10800a17 	ldw	r2,40(r2)
 800c1f4:	10800084 	addi	r2,r2,2
 800c1f8:	00c00044 	movi	r3,1
 800c1fc:	10c00025 	stbio	r3,0(r2)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
 800c200:	0001883a 	nop
 800c204:	e0bfff17 	ldw	r2,-4(fp)
 800c208:	10800a17 	ldw	r2,40(r2)
 800c20c:	10800084 	addi	r2,r2,2
 800c210:	10800023 	ldbuio	r2,0(r2)
 800c214:	10803fcc 	andi	r2,r2,255
 800c218:	1080004c 	andi	r2,r2,1
 800c21c:	103ff91e 	bne	r2,zero,800c204 <alt_up_char_buffer_clear+0x28>
	return 0;
 800c220:	0005883a 	mov	r2,zero
}
 800c224:	e037883a 	mov	sp,fp
 800c228:	df000017 	ldw	fp,0(sp)
 800c22c:	dec00104 	addi	sp,sp,4
 800c230:	f800283a 	ret

0800c234 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 800c234:	deffff04 	addi	sp,sp,-4
 800c238:	df000015 	stw	fp,0(sp)
 800c23c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 800c240:	e037883a 	mov	sp,fp
 800c244:	df000017 	ldw	fp,0(sp)
 800c248:	dec00104 	addi	sp,sp,4
 800c24c:	f800283a 	ret

0800c250 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800c250:	defffe04 	addi	sp,sp,-8
 800c254:	dfc00115 	stw	ra,4(sp)
 800c258:	df000015 	stw	fp,0(sp)
 800c25c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800c260:	00820074 	movhi	r2,2049
 800c264:	10baea04 	addi	r2,r2,-5208
 800c268:	10800017 	ldw	r2,0(r2)
 800c26c:	10000526 	beq	r2,zero,800c284 <alt_get_errno+0x34>
 800c270:	00820074 	movhi	r2,2049
 800c274:	10baea04 	addi	r2,r2,-5208
 800c278:	10800017 	ldw	r2,0(r2)
 800c27c:	103ee83a 	callr	r2
 800c280:	00000206 	br	800c28c <alt_get_errno+0x3c>
 800c284:	00820074 	movhi	r2,2049
 800c288:	10bde704 	addi	r2,r2,-2148
}
 800c28c:	e037883a 	mov	sp,fp
 800c290:	dfc00117 	ldw	ra,4(sp)
 800c294:	df000017 	ldw	fp,0(sp)
 800c298:	dec00204 	addi	sp,sp,8
 800c29c:	f800283a 	ret

0800c2a0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 800c2a0:	defffa04 	addi	sp,sp,-24
 800c2a4:	dfc00515 	stw	ra,20(sp)
 800c2a8:	df000415 	stw	fp,16(sp)
 800c2ac:	df000404 	addi	fp,sp,16
 800c2b0:	e13ffe15 	stw	r4,-8(fp)
 800c2b4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 800c2b8:	e0bffe17 	ldw	r2,-8(fp)
 800c2bc:	10000326 	beq	r2,zero,800c2cc <alt_dev_llist_insert+0x2c>
 800c2c0:	e0bffe17 	ldw	r2,-8(fp)
 800c2c4:	10800217 	ldw	r2,8(r2)
 800c2c8:	1000051e 	bne	r2,zero,800c2e0 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
 800c2cc:	800c2500 	call	800c250 <alt_get_errno>
 800c2d0:	00c00584 	movi	r3,22
 800c2d4:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 800c2d8:	00bffa84 	movi	r2,-22
 800c2dc:	00001306 	br	800c32c <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 800c2e0:	e0bffe17 	ldw	r2,-8(fp)
 800c2e4:	e0ffff17 	ldw	r3,-4(fp)
 800c2e8:	e0fffc15 	stw	r3,-16(fp)
 800c2ec:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800c2f0:	e0bffd17 	ldw	r2,-12(fp)
 800c2f4:	e0fffc17 	ldw	r3,-16(fp)
 800c2f8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 800c2fc:	e0bffc17 	ldw	r2,-16(fp)
 800c300:	10c00017 	ldw	r3,0(r2)
 800c304:	e0bffd17 	ldw	r2,-12(fp)
 800c308:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800c30c:	e0bffc17 	ldw	r2,-16(fp)
 800c310:	10800017 	ldw	r2,0(r2)
 800c314:	e0fffd17 	ldw	r3,-12(fp)
 800c318:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 800c31c:	e0bffc17 	ldw	r2,-16(fp)
 800c320:	e0fffd17 	ldw	r3,-12(fp)
 800c324:	10c00015 	stw	r3,0(r2)

  return 0;  
 800c328:	0005883a 	mov	r2,zero
}
 800c32c:	e037883a 	mov	sp,fp
 800c330:	dfc00117 	ldw	ra,4(sp)
 800c334:	df000017 	ldw	fp,0(sp)
 800c338:	dec00204 	addi	sp,sp,8
 800c33c:	f800283a 	ret

0800c340 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 800c340:	defffd04 	addi	sp,sp,-12
 800c344:	dfc00215 	stw	ra,8(sp)
 800c348:	df000115 	stw	fp,4(sp)
 800c34c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800c350:	00820074 	movhi	r2,2049
 800c354:	10b22504 	addi	r2,r2,-14188
 800c358:	e0bfff15 	stw	r2,-4(fp)
 800c35c:	00000606 	br	800c378 <_do_ctors+0x38>
        (*ctor) (); 
 800c360:	e0bfff17 	ldw	r2,-4(fp)
 800c364:	10800017 	ldw	r2,0(r2)
 800c368:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800c36c:	e0bfff17 	ldw	r2,-4(fp)
 800c370:	10bfff04 	addi	r2,r2,-4
 800c374:	e0bfff15 	stw	r2,-4(fp)
 800c378:	e0ffff17 	ldw	r3,-4(fp)
 800c37c:	00820074 	movhi	r2,2049
 800c380:	10b22604 	addi	r2,r2,-14184
 800c384:	18bff62e 	bgeu	r3,r2,800c360 <_do_ctors+0x20>
        (*ctor) (); 
}
 800c388:	e037883a 	mov	sp,fp
 800c38c:	dfc00117 	ldw	ra,4(sp)
 800c390:	df000017 	ldw	fp,0(sp)
 800c394:	dec00204 	addi	sp,sp,8
 800c398:	f800283a 	ret

0800c39c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 800c39c:	defffd04 	addi	sp,sp,-12
 800c3a0:	dfc00215 	stw	ra,8(sp)
 800c3a4:	df000115 	stw	fp,4(sp)
 800c3a8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800c3ac:	00820074 	movhi	r2,2049
 800c3b0:	10b22504 	addi	r2,r2,-14188
 800c3b4:	e0bfff15 	stw	r2,-4(fp)
 800c3b8:	00000606 	br	800c3d4 <_do_dtors+0x38>
        (*dtor) (); 
 800c3bc:	e0bfff17 	ldw	r2,-4(fp)
 800c3c0:	10800017 	ldw	r2,0(r2)
 800c3c4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800c3c8:	e0bfff17 	ldw	r2,-4(fp)
 800c3cc:	10bfff04 	addi	r2,r2,-4
 800c3d0:	e0bfff15 	stw	r2,-4(fp)
 800c3d4:	e0ffff17 	ldw	r3,-4(fp)
 800c3d8:	00820074 	movhi	r2,2049
 800c3dc:	10b22604 	addi	r2,r2,-14184
 800c3e0:	18bff62e 	bgeu	r3,r2,800c3bc <_do_dtors+0x20>
        (*dtor) (); 
}
 800c3e4:	e037883a 	mov	sp,fp
 800c3e8:	dfc00117 	ldw	ra,4(sp)
 800c3ec:	df000017 	ldw	fp,0(sp)
 800c3f0:	dec00204 	addi	sp,sp,8
 800c3f4:	f800283a 	ret

0800c3f8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 800c3f8:	defffa04 	addi	sp,sp,-24
 800c3fc:	dfc00515 	stw	ra,20(sp)
 800c400:	df000415 	stw	fp,16(sp)
 800c404:	df000404 	addi	fp,sp,16
 800c408:	e13ffe15 	stw	r4,-8(fp)
 800c40c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 800c410:	e0bfff17 	ldw	r2,-4(fp)
 800c414:	10800017 	ldw	r2,0(r2)
 800c418:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 800c41c:	e13ffe17 	ldw	r4,-8(fp)
 800c420:	8008c640 	call	8008c64 <strlen>
 800c424:	10800044 	addi	r2,r2,1
 800c428:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800c42c:	00000d06 	br	800c464 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 800c430:	e0bffc17 	ldw	r2,-16(fp)
 800c434:	10c00217 	ldw	r3,8(r2)
 800c438:	e0bffd17 	ldw	r2,-12(fp)
 800c43c:	1809883a 	mov	r4,r3
 800c440:	e17ffe17 	ldw	r5,-8(fp)
 800c444:	100d883a 	mov	r6,r2
 800c448:	800c5100 	call	800c510 <memcmp>
 800c44c:	1000021e 	bne	r2,zero,800c458 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 800c450:	e0bffc17 	ldw	r2,-16(fp)
 800c454:	00000706 	br	800c474 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 800c458:	e0bffc17 	ldw	r2,-16(fp)
 800c45c:	10800017 	ldw	r2,0(r2)
 800c460:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800c464:	e0fffc17 	ldw	r3,-16(fp)
 800c468:	e0bfff17 	ldw	r2,-4(fp)
 800c46c:	18bff01e 	bne	r3,r2,800c430 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 800c470:	0005883a 	mov	r2,zero
}
 800c474:	e037883a 	mov	sp,fp
 800c478:	dfc00117 	ldw	ra,4(sp)
 800c47c:	df000017 	ldw	fp,0(sp)
 800c480:	dec00204 	addi	sp,sp,8
 800c484:	f800283a 	ret

0800c488 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 800c488:	deffff04 	addi	sp,sp,-4
 800c48c:	df000015 	stw	fp,0(sp)
 800c490:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 800c494:	e037883a 	mov	sp,fp
 800c498:	df000017 	ldw	fp,0(sp)
 800c49c:	dec00104 	addi	sp,sp,4
 800c4a0:	f800283a 	ret

0800c4a4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 800c4a4:	deffff04 	addi	sp,sp,-4
 800c4a8:	df000015 	stw	fp,0(sp)
 800c4ac:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 800c4b0:	000170fa 	wrctl	ienable,zero
}
 800c4b4:	e037883a 	mov	sp,fp
 800c4b8:	df000017 	ldw	fp,0(sp)
 800c4bc:	dec00104 	addi	sp,sp,4
 800c4c0:	f800283a 	ret

0800c4c4 <atexit>:
 800c4c4:	200b883a 	mov	r5,r4
 800c4c8:	000d883a 	mov	r6,zero
 800c4cc:	0009883a 	mov	r4,zero
 800c4d0:	000f883a 	mov	r7,zero
 800c4d4:	800c58c1 	jmpi	800c58c <__register_exitproc>

0800c4d8 <exit>:
 800c4d8:	defffe04 	addi	sp,sp,-8
 800c4dc:	000b883a 	mov	r5,zero
 800c4e0:	dc000015 	stw	r16,0(sp)
 800c4e4:	dfc00115 	stw	ra,4(sp)
 800c4e8:	2021883a 	mov	r16,r4
 800c4ec:	800c6bc0 	call	800c6bc <__call_exitprocs>
 800c4f0:	00820074 	movhi	r2,2049
 800c4f4:	10bae204 	addi	r2,r2,-5240
 800c4f8:	11000017 	ldw	r4,0(r2)
 800c4fc:	20800f17 	ldw	r2,60(r4)
 800c500:	10000126 	beq	r2,zero,800c508 <exit+0x30>
 800c504:	103ee83a 	callr	r2
 800c508:	8009883a 	mov	r4,r16
 800c50c:	800c85c0 	call	800c85c <_exit>

0800c510 <memcmp>:
 800c510:	01c000c4 	movi	r7,3
 800c514:	3980192e 	bgeu	r7,r6,800c57c <memcmp+0x6c>
 800c518:	2904b03a 	or	r2,r5,r4
 800c51c:	11c4703a 	and	r2,r2,r7
 800c520:	10000f26 	beq	r2,zero,800c560 <memcmp+0x50>
 800c524:	20c00003 	ldbu	r3,0(r4)
 800c528:	28800003 	ldbu	r2,0(r5)
 800c52c:	1880151e 	bne	r3,r2,800c584 <memcmp+0x74>
 800c530:	31bfff84 	addi	r6,r6,-2
 800c534:	01ffffc4 	movi	r7,-1
 800c538:	00000406 	br	800c54c <memcmp+0x3c>
 800c53c:	20c00003 	ldbu	r3,0(r4)
 800c540:	28800003 	ldbu	r2,0(r5)
 800c544:	31bfffc4 	addi	r6,r6,-1
 800c548:	18800e1e 	bne	r3,r2,800c584 <memcmp+0x74>
 800c54c:	21000044 	addi	r4,r4,1
 800c550:	29400044 	addi	r5,r5,1
 800c554:	31fff91e 	bne	r6,r7,800c53c <memcmp+0x2c>
 800c558:	0005883a 	mov	r2,zero
 800c55c:	f800283a 	ret
 800c560:	20c00017 	ldw	r3,0(r4)
 800c564:	28800017 	ldw	r2,0(r5)
 800c568:	1880041e 	bne	r3,r2,800c57c <memcmp+0x6c>
 800c56c:	31bfff04 	addi	r6,r6,-4
 800c570:	21000104 	addi	r4,r4,4
 800c574:	29400104 	addi	r5,r5,4
 800c578:	39bff936 	bltu	r7,r6,800c560 <memcmp+0x50>
 800c57c:	303fe91e 	bne	r6,zero,800c524 <memcmp+0x14>
 800c580:	003ff506 	br	800c558 <memcmp+0x48>
 800c584:	1885c83a 	sub	r2,r3,r2
 800c588:	f800283a 	ret

0800c58c <__register_exitproc>:
 800c58c:	defffa04 	addi	sp,sp,-24
 800c590:	00820074 	movhi	r2,2049
 800c594:	10bae204 	addi	r2,r2,-5240
 800c598:	dc000315 	stw	r16,12(sp)
 800c59c:	14000017 	ldw	r16,0(r2)
 800c5a0:	dc400415 	stw	r17,16(sp)
 800c5a4:	dfc00515 	stw	ra,20(sp)
 800c5a8:	80805217 	ldw	r2,328(r16)
 800c5ac:	2023883a 	mov	r17,r4
 800c5b0:	10003e26 	beq	r2,zero,800c6ac <__register_exitproc+0x120>
 800c5b4:	10c00117 	ldw	r3,4(r2)
 800c5b8:	020007c4 	movi	r8,31
 800c5bc:	40c0180e 	bge	r8,r3,800c620 <__register_exitproc+0x94>
 800c5c0:	00820034 	movhi	r2,2048
 800c5c4:	1086f904 	addi	r2,r2,7140
 800c5c8:	1000061e 	bne	r2,zero,800c5e4 <__register_exitproc+0x58>
 800c5cc:	00bfffc4 	movi	r2,-1
 800c5d0:	dfc00517 	ldw	ra,20(sp)
 800c5d4:	dc400417 	ldw	r17,16(sp)
 800c5d8:	dc000317 	ldw	r16,12(sp)
 800c5dc:	dec00604 	addi	sp,sp,24
 800c5e0:	f800283a 	ret
 800c5e4:	01006404 	movi	r4,400
 800c5e8:	d9400015 	stw	r5,0(sp)
 800c5ec:	d9800115 	stw	r6,4(sp)
 800c5f0:	d9c00215 	stw	r7,8(sp)
 800c5f4:	8001be40 	call	8001be4 <malloc>
 800c5f8:	d9400017 	ldw	r5,0(sp)
 800c5fc:	d9800117 	ldw	r6,4(sp)
 800c600:	d9c00217 	ldw	r7,8(sp)
 800c604:	103ff126 	beq	r2,zero,800c5cc <__register_exitproc+0x40>
 800c608:	80c05217 	ldw	r3,328(r16)
 800c60c:	10000115 	stw	zero,4(r2)
 800c610:	10c00015 	stw	r3,0(r2)
 800c614:	80805215 	stw	r2,328(r16)
 800c618:	10006215 	stw	zero,392(r2)
 800c61c:	10006315 	stw	zero,396(r2)
 800c620:	10c00117 	ldw	r3,4(r2)
 800c624:	88000d1e 	bne	r17,zero,800c65c <__register_exitproc+0xd0>
 800c628:	19000084 	addi	r4,r3,2
 800c62c:	2109883a 	add	r4,r4,r4
 800c630:	18c00044 	addi	r3,r3,1
 800c634:	2109883a 	add	r4,r4,r4
 800c638:	1109883a 	add	r4,r2,r4
 800c63c:	10c00115 	stw	r3,4(r2)
 800c640:	0005883a 	mov	r2,zero
 800c644:	21400015 	stw	r5,0(r4)
 800c648:	dfc00517 	ldw	ra,20(sp)
 800c64c:	dc400417 	ldw	r17,16(sp)
 800c650:	dc000317 	ldw	r16,12(sp)
 800c654:	dec00604 	addi	sp,sp,24
 800c658:	f800283a 	ret
 800c65c:	02400044 	movi	r9,1
 800c660:	12806217 	ldw	r10,392(r2)
 800c664:	48d2983a 	sll	r9,r9,r3
 800c668:	19000804 	addi	r4,r3,32
 800c66c:	18d1883a 	add	r8,r3,r3
 800c670:	2109883a 	add	r4,r4,r4
 800c674:	4211883a 	add	r8,r8,r8
 800c678:	2109883a 	add	r4,r4,r4
 800c67c:	1109883a 	add	r4,r2,r4
 800c680:	1211883a 	add	r8,r2,r8
 800c684:	5254b03a 	or	r10,r10,r9
 800c688:	21c02215 	stw	r7,136(r4)
 800c68c:	41802215 	stw	r6,136(r8)
 800c690:	12806215 	stw	r10,392(r2)
 800c694:	01000084 	movi	r4,2
 800c698:	893fe31e 	bne	r17,r4,800c628 <__register_exitproc+0x9c>
 800c69c:	11006317 	ldw	r4,396(r2)
 800c6a0:	2252b03a 	or	r9,r4,r9
 800c6a4:	12406315 	stw	r9,396(r2)
 800c6a8:	003fdf06 	br	800c628 <__register_exitproc+0x9c>
 800c6ac:	00820074 	movhi	r2,2049
 800c6b0:	10be0204 	addi	r2,r2,-2040
 800c6b4:	80805215 	stw	r2,328(r16)
 800c6b8:	003fbe06 	br	800c5b4 <__register_exitproc+0x28>

0800c6bc <__call_exitprocs>:
 800c6bc:	00820074 	movhi	r2,2049
 800c6c0:	10bae204 	addi	r2,r2,-5240
 800c6c4:	10800017 	ldw	r2,0(r2)
 800c6c8:	defff304 	addi	sp,sp,-52
 800c6cc:	df000b15 	stw	fp,44(sp)
 800c6d0:	d8800015 	stw	r2,0(sp)
 800c6d4:	10805204 	addi	r2,r2,328
 800c6d8:	dd400815 	stw	r21,32(sp)
 800c6dc:	dfc00c15 	stw	ra,48(sp)
 800c6e0:	ddc00a15 	stw	r23,40(sp)
 800c6e4:	dd800915 	stw	r22,36(sp)
 800c6e8:	dd000715 	stw	r20,28(sp)
 800c6ec:	dcc00615 	stw	r19,24(sp)
 800c6f0:	dc800515 	stw	r18,20(sp)
 800c6f4:	dc400415 	stw	r17,16(sp)
 800c6f8:	dc000315 	stw	r16,12(sp)
 800c6fc:	d9000115 	stw	r4,4(sp)
 800c700:	2839883a 	mov	fp,r5
 800c704:	d8800215 	stw	r2,8(sp)
 800c708:	057fffc4 	movi	r21,-1
 800c70c:	d8800017 	ldw	r2,0(sp)
 800c710:	ddc00217 	ldw	r23,8(sp)
 800c714:	14805217 	ldw	r18,328(r2)
 800c718:	90001726 	beq	r18,zero,800c778 <__call_exitprocs+0xbc>
 800c71c:	94400117 	ldw	r17,4(r18)
 800c720:	8c3fffc4 	addi	r16,r17,-1
 800c724:	80001116 	blt	r16,zero,800c76c <__call_exitprocs+0xb0>
 800c728:	8c400044 	addi	r17,r17,1
 800c72c:	8427883a 	add	r19,r16,r16
 800c730:	8c63883a 	add	r17,r17,r17
 800c734:	95802204 	addi	r22,r18,136
 800c738:	9ce7883a 	add	r19,r19,r19
 800c73c:	8c63883a 	add	r17,r17,r17
 800c740:	b4e7883a 	add	r19,r22,r19
 800c744:	9463883a 	add	r17,r18,r17
 800c748:	e0001726 	beq	fp,zero,800c7a8 <__call_exitprocs+0xec>
 800c74c:	8c87c83a 	sub	r3,r17,r18
 800c750:	b0c7883a 	add	r3,r22,r3
 800c754:	18c01e17 	ldw	r3,120(r3)
 800c758:	1f001326 	beq	r3,fp,800c7a8 <__call_exitprocs+0xec>
 800c75c:	843fffc4 	addi	r16,r16,-1
 800c760:	9cffff04 	addi	r19,r19,-4
 800c764:	8c7fff04 	addi	r17,r17,-4
 800c768:	857ff71e 	bne	r16,r21,800c748 <__call_exitprocs+0x8c>
 800c76c:	00820034 	movhi	r2,2048
 800c770:	1086fe04 	addi	r2,r2,7160
 800c774:	10002a1e 	bne	r2,zero,800c820 <__call_exitprocs+0x164>
 800c778:	dfc00c17 	ldw	ra,48(sp)
 800c77c:	df000b17 	ldw	fp,44(sp)
 800c780:	ddc00a17 	ldw	r23,40(sp)
 800c784:	dd800917 	ldw	r22,36(sp)
 800c788:	dd400817 	ldw	r21,32(sp)
 800c78c:	dd000717 	ldw	r20,28(sp)
 800c790:	dcc00617 	ldw	r19,24(sp)
 800c794:	dc800517 	ldw	r18,20(sp)
 800c798:	dc400417 	ldw	r17,16(sp)
 800c79c:	dc000317 	ldw	r16,12(sp)
 800c7a0:	dec00d04 	addi	sp,sp,52
 800c7a4:	f800283a 	ret
 800c7a8:	91000117 	ldw	r4,4(r18)
 800c7ac:	88c00017 	ldw	r3,0(r17)
 800c7b0:	213fffc4 	addi	r4,r4,-1
 800c7b4:	24001526 	beq	r4,r16,800c80c <__call_exitprocs+0x150>
 800c7b8:	88000015 	stw	zero,0(r17)
 800c7bc:	183fe726 	beq	r3,zero,800c75c <__call_exitprocs+0xa0>
 800c7c0:	00800044 	movi	r2,1
 800c7c4:	1408983a 	sll	r4,r2,r16
 800c7c8:	91406217 	ldw	r5,392(r18)
 800c7cc:	95000117 	ldw	r20,4(r18)
 800c7d0:	214a703a 	and	r5,r4,r5
 800c7d4:	28000b26 	beq	r5,zero,800c804 <__call_exitprocs+0x148>
 800c7d8:	91406317 	ldw	r5,396(r18)
 800c7dc:	2148703a 	and	r4,r4,r5
 800c7e0:	20000c1e 	bne	r4,zero,800c814 <__call_exitprocs+0x158>
 800c7e4:	99400017 	ldw	r5,0(r19)
 800c7e8:	d9000117 	ldw	r4,4(sp)
 800c7ec:	183ee83a 	callr	r3
 800c7f0:	90c00117 	ldw	r3,4(r18)
 800c7f4:	1d3fc51e 	bne	r3,r20,800c70c <__call_exitprocs+0x50>
 800c7f8:	b8c00017 	ldw	r3,0(r23)
 800c7fc:	1cbfd726 	beq	r3,r18,800c75c <__call_exitprocs+0xa0>
 800c800:	003fc206 	br	800c70c <__call_exitprocs+0x50>
 800c804:	183ee83a 	callr	r3
 800c808:	003ff906 	br	800c7f0 <__call_exitprocs+0x134>
 800c80c:	94000115 	stw	r16,4(r18)
 800c810:	003fea06 	br	800c7bc <__call_exitprocs+0x100>
 800c814:	99000017 	ldw	r4,0(r19)
 800c818:	183ee83a 	callr	r3
 800c81c:	003ff406 	br	800c7f0 <__call_exitprocs+0x134>
 800c820:	90c00117 	ldw	r3,4(r18)
 800c824:	1800071e 	bne	r3,zero,800c844 <__call_exitprocs+0x188>
 800c828:	90c00017 	ldw	r3,0(r18)
 800c82c:	18000926 	beq	r3,zero,800c854 <__call_exitprocs+0x198>
 800c830:	9009883a 	mov	r4,r18
 800c834:	b8c00015 	stw	r3,0(r23)
 800c838:	8001bf80 	call	8001bf8 <free>
 800c83c:	bc800017 	ldw	r18,0(r23)
 800c840:	003fb506 	br	800c718 <__call_exitprocs+0x5c>
 800c844:	90c00017 	ldw	r3,0(r18)
 800c848:	902f883a 	mov	r23,r18
 800c84c:	1825883a 	mov	r18,r3
 800c850:	003fb106 	br	800c718 <__call_exitprocs+0x5c>
 800c854:	0007883a 	mov	r3,zero
 800c858:	003ffb06 	br	800c848 <__call_exitprocs+0x18c>

0800c85c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 800c85c:	defffc04 	addi	sp,sp,-16
 800c860:	df000315 	stw	fp,12(sp)
 800c864:	df000304 	addi	fp,sp,12
 800c868:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 800c86c:	0001883a 	nop
 800c870:	e0bfff17 	ldw	r2,-4(fp)
 800c874:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
 800c878:	e0bffd17 	ldw	r2,-12(fp)
 800c87c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 800c880:	e0bffe17 	ldw	r2,-8(fp)
 800c884:	10000226 	beq	r2,zero,800c890 <_exit+0x34>
    ALT_SIM_FAIL();
 800c888:	002af070 	cmpltui	zero,zero,43969
 800c88c:	00000106 	br	800c894 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
 800c890:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 800c894:	003fff06 	br	800c894 <_exit+0x38>


vga_test6.elf:     file format elf32-littlenios2
vga_test6.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000020

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x0000ddf4 memsz 0x0000ddf4 flags r-x
    LOAD off    0x0000ee14 vaddr 0x0800de14 paddr 0x0800e9e0 align 2**12
         filesz 0x00000bcc memsz 0x00000bcc flags rw-
    LOAD off    0x000105ac vaddr 0x0800f5ac paddr 0x0800f5ac align 2**12
         filesz 0x00000000 memsz 0x0000021c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         0000c6c8  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000172c  0800c6e8  0800c6e8  0000d6e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       00000bcc  0800de14  0800e9e0  0000ee14  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          0000021c  0800f5ac  0800f5ac  000105ac  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000023  00000000  00000000  0000f9e0  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000b00  00000000  00000000  0000fa08  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00020397  00000000  00000000  00010508  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00007d6b  00000000  00000000  0003089f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00009379  00000000  00000000  0003860a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000015c4  00000000  00000000  00041984  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002b85  00000000  00000000  00042f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000109e2  00000000  00000000  00045acd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_alt_sim_info 00000010  00000000  00000000  000564b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000009b8  00000000  00000000  000564c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .thread_model 00000003  00000000  00000000  00059adf  2**0
                  CONTENTS, READONLY
 16 .cpu          00000003  00000000  00000000  00059ae2  2**0
                  CONTENTS, READONLY
 17 .qsys         00000001  00000000  00000000  00059ae5  2**0
                  CONTENTS, READONLY
 18 .simulation_enabled 00000001  00000000  00000000  00059ae6  2**0
                  CONTENTS, READONLY
 19 .stderr_dev   00000004  00000000  00000000  00059ae7  2**0
                  CONTENTS, READONLY
 20 .stdin_dev    00000004  00000000  00000000  00059aeb  2**0
                  CONTENTS, READONLY
 21 .stdout_dev   00000004  00000000  00000000  00059aef  2**0
                  CONTENTS, READONLY
 22 .sopc_system_name 0000000c  00000000  00000000  00059af3  2**0
                  CONTENTS, READONLY
 23 .quartus_project_dir 0000005e  00000000  00000000  00059aff  2**0
                  CONTENTS, READONLY
 24 .jdi          0000374e  00000000  00000000  00059b5d  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     0006df72  00000000  00000000  0005d2ab  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .text	00000000 .text
0800c6e8 l    d  .rodata	00000000 .rodata
0800de14 l    d  .rwdata	00000000 .rwdata
0800f5ac l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../vga_test6_bsp//obj/HAL/src/crt0.o
08000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 display.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 rpg385.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 vfprintf.c
08002448 l     F .text	00000034 __sprint_r
0800daf2 l     O .rodata	00000010 blanks.3546
0800db02 l     O .rodata	00000010 zeroes.3547
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
08004490 l     F .text	0000023c quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08005f00 l     F .text	00000008 __fp_lock
08005f08 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0800e304 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0800db38 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0800dc80 l     O .rodata	0000000c p05.2466
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
08009c48 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0800a978 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0800b0e4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0800b200 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0800b22c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0800b32c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0800b420 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0800b50c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0800b6cc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0800e9dc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0800b940 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0800ba80 l     F .text	00000038 alt_dev_reg
0800e8b8 l     O .rwdata	00000048 Char_Buffer_with_DMA
0800e900 l     O .rwdata	00000054 Pixel_Buffer_DMA
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0800c0a0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
080080fc g     F .text	00000074 _mprec_log10
080081ec g     F .text	00000084 __any_on
08008e94 g     F .text	00000064 _isatty_r
0800db68 g     O .rodata	00000028 __mprec_tinytens
0800b630 g     F .text	0000005c alt_main
0800b0a0 g     F .text	00000044 __ashldi3
0800f5b4 g     O .bss	00000004 numChoices
08008ef8 g     F .text	0000006c _lseek_r
080015d4 g     F .text	000001b4 addToScreen
0800e9e0 g       *ABS*	00000000 __flash_rwdata_start
0800e98b g     O .rwdata	00000001 RIGHT
0800a4e8 g     F .text	0000005c __eqdf2
0800f7c8 g       *ABS*	00000000 __alt_heap_start
080089ac g     F .text	0000005c __sseek
08005fa4 g     F .text	0000010c __sinit
0800e964 g     O .rwdata	00000004 keycode
0800bf34 g     F .text	000000f8 alt_up_char_buffer_string
08006c3c g     F .text	0000009c _setlocale_r
08005f1c g     F .text	00000078 __sfmoreglue
0800b6ac g     F .text	00000020 __malloc_unlock
0800be6c g     F .text	000000c8 alt_up_char_buffer_draw
08006fb8 g     F .text	0000018c memmove
08000c08 g     F .text	000007d4 initEvents
08005f94 g     F .text	00000010 _cleanup
08007220 g     F .text	000000a8 _Balloc
0800e98d g     O .rwdata	00000001 ESC
0800a5a0 g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
0800f5b0 g     O .bss	00000004 week
0800e96e g     O .rwdata	00000002 BOXCOLOR
0800e96c g     O .rwdata	00000002 BGCOLOR
08000000 g     F .entry	0000000c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
08008e2c g     F .text	00000068 _fstat_r
080013dc g     F .text	0000013c printChoices
0800f5cc g     O .bss	00000004 errno
080017b8 g     F .text	0000002c flush
0800f5e0 g     O .bss	00000004 alt_argv
08016954 g       *ABS*	00000000 _gp
0800f5b8 g     O .bss	00000004 curTextY
0800e978 g     O .rwdata	00000004 SCRWIDTH
0800e738 g     O .rwdata	00000180 alt_fd_list
0800de14 g     O .rwdata	00000028 eventTexts
0800c248 g     F .text	00000090 alt_find_dev
080021e0 g     F .text	00000140 memcpy
0800c02c g     F .text	00000058 alt_up_char_buffer_clear
08005f10 g     F .text	0000000c _cleanup_r
0800a6c4 g     F .text	000000d4 __floatsidf
0800a668 g     F .text	0000005c __ltdf2
0800c6e8 g       *ABS*	00000000 __DTOR_END__
08001838 g     F .text	000000a4 flushChar
08008058 g     F .text	000000a4 __ratio
08001a34 g     F .text	00000014 malloc
0800aa98 g     F .text	00000008 __udivsi3
0800b37c g     F .text	000000a4 isatty
0800dbb8 g     O .rodata	000000c8 __mprec_tens
08006cd8 g     F .text	0000000c __locale_charset
0800f5c8 g     O .bss	00000004 __malloc_top_pad
0800e998 g     O .rwdata	00000004 SELWIDTH
0800e9c0 g     O .rwdata	00000004 __mb_cur_max
08006ce4 g     F .text	0000000c _localeconv_r
08007650 g     F .text	0000003c __i2b
080065f8 g     F .text	000004e4 __sfvwrite_r
08002320 g     F .text	00000064 _sbrk_r
0800e974 g     O .rwdata	00000004 XPADDING
0800e98c g     O .rwdata	00000001 ENT
08008f64 g     F .text	0000006c _read_r
0800e704 g     O .rwdata	0000000c __lc_ctype
0800e9d4 g     O .rwdata	00000004 alt_max_fd
0800ae88 g     F .text	00000104 __unpack_d
08008cdc g     F .text	0000013c _fclose_r
08005ed0 g     F .text	00000030 fflush
0800f5c4 g     O .bss	00000004 __malloc_max_sbrked_mem
08009f9c g     F .text	00000054 __adddf3
08007dcc g     F .text	00000148 __b2d
08009620 g     F .text	00000628 __umoddi3
0800b55c g     F .text	000000d4 lseek
08000000 g       *ABS*	00000000 __alt_mem_sdram_controller_0
0800e9b8 g     O .rwdata	00000004 _global_impure_ptr
08008270 g     F .text	000005fc _realloc_r
0800f7c8 g       *ABS*	00000000 __bss_end
0800e984 g     O .rwdata	00000004 SCRPIXH
08008fd0 g     F .text	00000650 __udivdi3
0800db90 g     O .rodata	00000028 __mprec_bigtens
08007434 g     F .text	00000104 __s2b
0800a85c g     F .text	0000011c __floatunsidf
08007b6c g     F .text	00000058 __mcmp
080061bc g     F .text	00000018 __fp_lock_all
080018dc g     F .text	00000088 VGA_text
0800e710 g     O .rwdata	00000028 alt_dev_null
0800e95c g     O .rwdata	00000004 character_buffer
0800c084 g     F .text	0000001c alt_dcache_flush_all
08007538 g     F .text	00000068 __hi0bits
0800a798 g     F .text	000000c4 __fixdfsi
0800e9e0 g       *ABS*	00000000 __ram_rwdata_end
0800e9cc g     O .rwdata	00000008 alt_dev_list
0800e9a8 g     O .rwdata	00000004 grd
0800b990 g     F .text	000000f0 write
0800de14 g       *ABS*	00000000 __ram_rodata_end
0800b27c g     F .text	000000b0 fstat
0800b05c g     F .text	00000044 __lshrdi3
080078e4 g     F .text	0000012c __pow5mult
0800f5d8 g     O .bss	00000004 __nlocale_changed
0800aaa0 g     F .text	00000008 __umodsi3
0800f7c8 g       *ABS*	00000000 end
0800e97c g     O .rwdata	00000004 SCRHIGHT
0800bda4 g     F .text	00000088 alt_up_char_buffer_init
0800c6e8 g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
0800abb8 g     F .text	000000ac __clzsi2
080061ac g     F .text	00000004 __sfp_lock_acquire
08006ec0 g     F .text	000000f8 memchr
0800247c g     F .text	00001e7c ___vfprintf_internal_r
08002384 g     F .text	00000058 _sprintf_r
08006328 g     F .text	000002d0 _free_r
0800c50c g     F .text	000001a0 __call_exitprocs
0800f5d4 g     O .bss	00000004 __mlocale_changed
0800e9b0 g     O .rwdata	00000004 __malloc_sbrk_base
08000020 g     F .text	0000003c _start
08007a10 g     F .text	0000015c __lshift
0800b71c g     F .text	000000f4 read
0800baec g     F .text	000002b8 alt_sys_init
0800c3dc g     F .text	00000130 __register_exitproc
08001964 g     F .text	000000a8 VGA_box
0800768c g     F .text	00000258 __multiply
08001a0c g     F .text	00000028 __mulsi3
0800de14 g       *ABS*	00000000 __ram_rwdata_start
0800c6e8 g       *ABS*	00000000 __ram_rodata_start
0800f5e8 g     O .bss	00000028 __malloc_current_mallinfo
08007f14 g     F .text	00000144 __d2b
0800af8c g     F .text	000000d0 __fpcmp_parts_d
08008c78 g     F .text	00000064 _close_r
0800c360 g     F .text	0000007c memcmp
0800f7c8 g       *ABS*	00000000 __alt_stack_base
0800431c g     F .text	00000174 __swsetup_r
0800a334 g     F .text	000001b4 __divdf3
080060b0 g     F .text	000000fc __sfp
08008170 g     F .text	0000007c __copybits
0800defc g     O .rwdata	00000408 __malloc_av_
080061b8 g     F .text	00000004 __sinit_lock_release
0800a050 g     F .text	000002e4 __muldf3
08001540 g     F .text	00000050 waitPress
080088d0 g     F .text	00000054 __sread
0800e98a g     O .rwdata	00000001 LEFT
0800c0f0 g     F .text	000000a0 alt_dev_llist_insert
0800b68c g     F .text	00000020 __malloc_lock
0800b890 g     F .text	000000b0 sbrk
08005ce8 g     F .text	000001e8 _fflush_r
08008bac g     F .text	000000cc _calloc_r
0800e980 g     O .rwdata	00000004 SCRPIXW
0800f5ac g     O .bss	00000004 choice
0800f5ac g       *ABS*	00000000 __bss_start
0800e9a4 g     O .rwdata	00000004 hyg
08007144 g     F .text	000000dc memset
0800e990 g     O .rwdata	00000004 SELXOFFSET
0800005c g     F .text	00000a04 main
080017e4 g     F .text	00000054 flushPixels
0800f5e4 g     O .bss	00000004 alt_envp
0800f5c0 g     O .bss	00000004 __malloc_max_total_mem
0800be2c g     F .text	00000040 alt_up_char_buffer_open_dev
0800e989 g     O .rwdata	00000001 DOWN
08008a08 g     F .text	00000008 __sclose
10000000 g       *ABS*	00000000 __alt_heap_limit
08008e18 g     F .text	00000014 fclose
0800f638 g     O .bss	00000190 _atexit0
080046cc g     F .text	0000161c _dtoa_r
08001a5c g     F .text	00000784 _malloc_r
0800e954 g     O .rwdata	00000004 openingText
0800e9d8 g     O .rwdata	00000004 alt_errno
08006adc g     F .text	000000a8 _fwalk
0800de3c g     O .rwdata	00000064 choiceTexts
0800a9ec g     F .text	00000050 __divsi3
0800dc8c g     O .rodata	00000014 __thenan_df
080061ec g     F .text	0000013c _malloc_trim_r
0800c6e8 g       *ABS*	00000000 __CTOR_END__
08008a10 g     F .text	000000a4 strcmp
0800c6e8 g       *ABS*	00000000 __flash_rodata_start
0800c6e8 g       *ABS*	00000000 __DTOR_LIST__
0800a544 g     F .text	0000005c __nedf2
0800bab8 g     F .text	00000034 alt_irq_init
0800b810 g     F .text	00000080 alt_release_fd
080023dc g     F .text	0000006c sprintf
0800dca0 g     O .rodata	00000100 __clz_tab
0800f5d0 g     O .bss	00000004 _PathLocale
0800e960 g     O .rwdata	00000004 pixel_buffer
0800c314 g     F .text	00000014 atexit
08008b40 g     F .text	0000006c _write_r
0800e958 g     O .rwdata	00000004 Pixel_DMA_controller
08006cf0 g     F .text	0000001c setlocale
0800e9bc g     O .rwdata	00000004 _impure_ptr
0800f5dc g     O .bss	00000004 alt_argc
0800c1ec g     F .text	0000005c _do_dtors
0800e99c g     O .rwdata	00000004 SELCHOICEHEIGHT
08007d6c g     F .text	00000060 __ulp
0800886c g     F .text	00000038 __isinfd
080061d4 g     F .text	00000018 __fp_unlock_all
08000a60 g     F .text	000001a8 Event_new
0800e968 g     O .rwdata	00000004 press
0800e9c4 g     O .rwdata	00000008 alt_fs_list
0800e9ac g     O .rwdata	00000004 diff
0800f5bc g     O .bss	00000004 curE
08000020 g       *ABS*	00000000 __ram_exceptions_start
08006d0c g     F .text	0000000c localeconv
08001518 g     F .text	00000028 blinkText
0800e970 g     O .rwdata	00000004 YPADDING
0800e9e0 g       *ABS*	00000000 _edata
0800f7c8 g       *ABS*	00000000 _end
08000020 g       *ABS*	00000000 __ram_exceptions_end
08008924 g     F .text	00000088 __swrite
0800e9b4 g     O .rwdata	00000004 __malloc_trim_threshold
0800c2f4 g     F .text	00000020 altera_nios2_qsys_irq_init
0800c328 g     F .text	00000038 exit
08006b84 g     F .text	000000b8 _fwalk_reent
08007bc4 g     F .text	000001a8 __mdiff
0800dea0 g     O .rwdata	0000005c choiceResponses
0800aa3c g     F .text	0000005c __modsi3
10000000 g       *ABS*	00000000 __alt_data_end
080061b0 g     F .text	00000004 __sfp_lock_release
0800c6ac g     F .text	0000003c _exit
080088a4 g     F .text	0000002c __isnand
0800aaa8 g     F .text	00000110 __muldi3
0800e988 g     O .rwdata	00000001 UP
08006d18 g     F .text	000001a8 __smakebuf_r
08008ab4 g     F .text	0000008c strlen
0800a604 g     F .text	00000064 __gedf2
0800f610 g     O .bss	00000028 ev
0800e9a0 g     O .rwdata	00000004 hap
0800c2d8 g     F .text	0000001c alt_icache_flush_all
0800e994 g     O .rwdata	00000004 SELYOFFSET
080042f8 g     F .text	00000024 __vfprintf_internal
08009ff0 g     F .text	00000060 __subdf3
08001590 g     F .text	00000044 waitRelease
08001788 g     F .text	00000030 initFrame
080075a0 g     F .text	000000b0 __lo0bits
0800c190 g     F .text	0000005c _do_ctors
0800b134 g     F .text	000000cc close
0800b48c g     F .text	00000080 alt_load
0800ac64 g     F .text	00000224 __pack_d
08001a48 g     F .text	00000014 free
080061b4 g     F .text	00000004 __sinit_lock_acquire
080072f0 g     F .text	00000144 __multadd
080072c8 g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08400814 	ori	at,at,32
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .text:

08000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000020:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 8000024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 8000028:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 800002c:	d69a5514 	ori	gp,gp,26964
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000030:	00820034 	movhi	r2,2048
    ori r2, r2, %lo(__bss_start)
 8000034:	10bd6b14 	ori	r2,r2,62892

    movhi r3, %hi(__bss_end)
 8000038:	00c20034 	movhi	r3,2048
    ori r3, r3, %lo(__bss_end)
 800003c:	18fdf214 	ori	r3,r3,63432

    beq r2, r3, 1f
 8000040:	10c00326 	beq	r2,r3,8000050 <_start+0x30>

0:
    stw zero, (r2)
 8000044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 800004c:	10fffd36 	bltu	r2,r3,8000044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000050:	800b48c0 	call	800b48c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000054:	800b6300 	call	800b630 <alt_main>

08000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000058:	003fff06 	br	8000058 <alt_after_alt_main>

0800005c <main>:

Event* ev[10];
Event* curE;

int main(void)
{
 800005c:	deffb904 	addi	sp,sp,-284
 8000060:	dfc04615 	stw	ra,280(sp)
 8000064:	df004515 	stw	fp,276(sp)
 8000068:	dcc04415 	stw	r19,272(sp)
 800006c:	dc804315 	stw	r18,268(sp)
 8000070:	dc404215 	stw	r17,264(sp)
 8000074:	dc004115 	stw	r16,260(sp)
 8000078:	df004104 	addi	fp,sp,260
	START:
	initEvents();
 800007c:	8000c080 	call	8000c08 <initEvents>
	curE = ev[0];
 8000080:	00820074 	movhi	r2,2049
 8000084:	10bd8404 	addi	r2,r2,-2544
 8000088:	10800017 	ldw	r2,0(r2)
 800008c:	d0a31a15 	stw	r2,-29592(gp)
	choice = 0;
 8000090:	d0231615 	stw	zero,-29608(gp)
	week = 0;
 8000094:	d0231715 	stw	zero,-29604(gp)

	int TXTBOXX1 = 20;
 8000098:	00800504 	movi	r2,20
 800009c:	e0bfc115 	stw	r2,-252(fp)
	int TXTBOXX2 = SCRPIXW - TXTBOXX1;
 80000a0:	d0e00b17 	ldw	r3,-32724(gp)
 80000a4:	e0bfc117 	ldw	r2,-252(fp)
 80000a8:	1885c83a 	sub	r2,r3,r2
 80000ac:	e0bfc215 	stw	r2,-248(fp)
	int EVBOXY1 = 20;
 80000b0:	00800504 	movi	r2,20
 80000b4:	e0bfc315 	stw	r2,-244(fp)
	int EVBOXY2 = 70 + EVBOXY1;
 80000b8:	e0bfc317 	ldw	r2,-244(fp)
 80000bc:	10801184 	addi	r2,r2,70
 80000c0:	e0bfc415 	stw	r2,-240(fp)
	int CHBOXY1 = EVBOXY2 + 10;
 80000c4:	e0bfc417 	ldw	r2,-240(fp)
 80000c8:	10800284 	addi	r2,r2,10
 80000cc:	e0bfc515 	stw	r2,-236(fp)
	int CHBOXY2 = 100 + CHBOXY1;
 80000d0:	e0bfc517 	ldw	r2,-236(fp)
 80000d4:	10801904 	addi	r2,r2,100
 80000d8:	e0bfc615 	stw	r2,-232(fp)

	hap = 100;
 80000dc:	00801904 	movi	r2,100
 80000e0:	d0a01315 	stw	r2,-32692(gp)
	hyg = 100;
 80000e4:	00801904 	movi	r2,100
 80000e8:	d0a01415 	stw	r2,-32688(gp)
	grd = 100;
 80000ec:	00801904 	movi	r2,100
 80000f0:	d0a01515 	stw	r2,-32684(gp)
	diff = 8;	// arbitrary magic number
 80000f4:	00800204 	movi	r2,8
 80000f8:	d0a01615 	stw	r2,-32680(gp)
	/* the following variables give the size of the pixel buffer */
	//screen_x = 319; screen_y = 239;
	//color = 0x1863;		// a dark grey color
	//VGA_box (0, 0, SCRPIXW, SCRPIXH, Black);	// fill the screen with grey
	// draw a medium-blue box around the above text, based on the character buffer coordinates
	box_x1 = 28; box_x2 = 52; box_y1 = 23; box_y2 = 31;
 80000fc:	00800704 	movi	r2,28
 8000100:	e0bfc715 	stw	r2,-228(fp)
 8000104:	00800d04 	movi	r2,52
 8000108:	e0bfc815 	stw	r2,-224(fp)
 800010c:	008005c4 	movi	r2,23
 8000110:	e0bfc915 	stw	r2,-220(fp)
 8000114:	008007c4 	movi	r2,31
 8000118:	e0bfca15 	stw	r2,-216(fp)
	//ALT_x1 = 0; ALT_x2 = 5/* ALTERA = 6 chars */; ALT_y = 0; ALT_inc_x = 1; ALT_inc_y = 1;
	//VGA_text (ALT_x1, ALT_y, text_ALTERA);
	//flushChar();
	//flush();

	initFrame();
 800011c:	80017880 	call	8001788 <initFrame>
	//flushChar();
	//flushPixels();
	VGA_box (box_x1 * 4, box_y1 * 4, box_x2 * 4, box_y2 * 4, Orange);
 8000120:	e0bfc717 	ldw	r2,-228(fp)
 8000124:	1085883a 	add	r2,r2,r2
 8000128:	1085883a 	add	r2,r2,r2
 800012c:	1009883a 	mov	r4,r2
 8000130:	e0bfc917 	ldw	r2,-220(fp)
 8000134:	1085883a 	add	r2,r2,r2
 8000138:	1085883a 	add	r2,r2,r2
 800013c:	100b883a 	mov	r5,r2
 8000140:	e0bfc817 	ldw	r2,-224(fp)
 8000144:	1085883a 	add	r2,r2,r2
 8000148:	1085883a 	add	r2,r2,r2
 800014c:	1007883a 	mov	r3,r2
 8000150:	e0bfca17 	ldw	r2,-216(fp)
 8000154:	1085883a 	add	r2,r2,r2
 8000158:	1085883a 	add	r2,r2,r2
 800015c:	01bef804 	movi	r6,-1056
 8000160:	d9800015 	stw	r6,0(sp)
 8000164:	180d883a 	mov	r6,r3
 8000168:	100f883a 	mov	r7,r2
 800016c:	80019640 	call	8001964 <VGA_box>
	VGA_text(box_x1+9, box_y1+4, "RPG385\0");
 8000170:	e0bfc717 	ldw	r2,-228(fp)
 8000174:	10c00244 	addi	r3,r2,9
 8000178:	e0bfc917 	ldw	r2,-220(fp)
 800017c:	10800104 	addi	r2,r2,4
 8000180:	1809883a 	mov	r4,r3
 8000184:	100b883a 	mov	r5,r2
 8000188:	01820074 	movhi	r6,2049
 800018c:	31b51304 	addi	r6,r6,-11188
 8000190:	80018dc0 	call	80018dc <VGA_text>
	VGA_text(box_x1-1, box_y1+14, "Press any key to continue...\0");
 8000194:	e0bfc717 	ldw	r2,-228(fp)
 8000198:	10ffffc4 	addi	r3,r2,-1
 800019c:	e0bfc917 	ldw	r2,-220(fp)
 80001a0:	10800384 	addi	r2,r2,14
 80001a4:	1809883a 	mov	r4,r3
 80001a8:	100b883a 	mov	r5,r2
 80001ac:	01820074 	movhi	r6,2049
 80001b0:	31b51504 	addi	r6,r6,-11180
 80001b4:	80018dc0 	call	80018dc <VGA_text>
	waitPress();
 80001b8:	80015400 	call	8001540 <waitPress>

	//curTextY = YPADDING;
	//flushPixels();
	//flushChar();
	//curTextY = YPADDING;
	initFrame();
 80001bc:	80017880 	call	8001788 <initFrame>
	*(Pixel_DMA_controller) = 0;	// dummy write to start buffer swap process
 80001c0:	d0a00117 	ldw	r2,-32764(gp)
 80001c4:	10000015 	stw	zero,0(r2)
	while (1)
	{
			while(week < 10){
 80001c8:	0001c206 	br	80008d4 <main+0x878>
				//addToScreen(XPADDING, "lol\0");
				if ( (*(Pixel_DMA_controller+3) & 1) == 0){ // wait for Status register bit S == 0
 80001cc:	d0a00117 	ldw	r2,-32764(gp)
 80001d0:	10800304 	addi	r2,r2,12
 80001d4:	10800017 	ldw	r2,0(r2)
 80001d8:	1080004c 	andi	r2,r2,1
 80001dc:	1001bd1e 	bne	r2,zero,80008d4 <main+0x878>
					//initFrame();
					VGA_box(TXTBOXX1, EVBOXY1, TXTBOXX2, EVBOXY2, BOXCOLOR);
 80001e0:	d0a0068b 	ldhu	r2,-32742(gp)
 80001e4:	10bfffcc 	andi	r2,r2,65535
 80001e8:	10a0001c 	xori	r2,r2,32768
 80001ec:	10a00004 	addi	r2,r2,-32768
 80001f0:	d8800015 	stw	r2,0(sp)
 80001f4:	e13fc117 	ldw	r4,-252(fp)
 80001f8:	e17fc317 	ldw	r5,-244(fp)
 80001fc:	e1bfc217 	ldw	r6,-248(fp)
 8000200:	e1ffc417 	ldw	r7,-240(fp)
 8000204:	80019640 	call	8001964 <VGA_box>
					VGA_box(TXTBOXX1, CHBOXY1, TXTBOXX2, CHBOXY2, BOXCOLOR);
 8000208:	d0a0068b 	ldhu	r2,-32742(gp)
 800020c:	10bfffcc 	andi	r2,r2,65535
 8000210:	10a0001c 	xori	r2,r2,32768
 8000214:	10a00004 	addi	r2,r2,-32768
 8000218:	d8800015 	stw	r2,0(sp)
 800021c:	e13fc117 	ldw	r4,-252(fp)
 8000220:	e17fc517 	ldw	r5,-236(fp)
 8000224:	e1bfc217 	ldw	r6,-248(fp)
 8000228:	e1ffc617 	ldw	r7,-232(fp)
 800022c:	80019640 	call	8001964 <VGA_box>
					char buf[100];
					sprintf(buf, "Week %i: \n\n\0", week+1);
 8000230:	d0a31717 	ldw	r2,-29604(gp)
 8000234:	10800044 	addi	r2,r2,1
 8000238:	e0ffe704 	addi	r3,fp,-100
 800023c:	1809883a 	mov	r4,r3
 8000240:	01420074 	movhi	r5,2049
 8000244:	29751d04 	addi	r5,r5,-11148
 8000248:	100d883a 	mov	r6,r2
 800024c:	80023dc0 	call	80023dc <sprintf>
					addToScreen(XPADDING, buf);
 8000250:	d0e00817 	ldw	r3,-32736(gp)
 8000254:	e0bfe704 	addi	r2,fp,-100
 8000258:	1809883a 	mov	r4,r3
 800025c:	100b883a 	mov	r5,r2
 8000260:	80015d40 	call	80015d4 <addToScreen>
					addToScreen(XPADDING, eventTexts[curE->promptI]);
 8000264:	d0e00817 	ldw	r3,-32736(gp)
 8000268:	d0a31a17 	ldw	r2,-29592(gp)
 800026c:	10800017 	ldw	r2,0(r2)
 8000270:	01020074 	movhi	r4,2049
 8000274:	21378504 	addi	r4,r4,-8684
 8000278:	1085883a 	add	r2,r2,r2
 800027c:	1085883a 	add	r2,r2,r2
 8000280:	2085883a 	add	r2,r4,r2
 8000284:	10800017 	ldw	r2,0(r2)
 8000288:	1809883a 	mov	r4,r3
 800028c:	100b883a 	mov	r5,r2
 8000290:	80015d40 	call	80015d4 <addToScreen>
					//addToScreen(XPADDING, "You wake up and look out to see a blanket of snow about a foot thick. \nThe chancellor sent out an email letting you know that class was NOT canceled today. \nWelcome back to campus.\0");
					printChoices(curE);
 8000294:	d0a31a17 	ldw	r2,-29592(gp)
 8000298:	1009883a 	mov	r4,r2
 800029c:	80013dc0 	call	80013dc <printChoices>
					VGA_box(SELXOFFSET, SELYOFFSET+choice*SELCHOICEHEIGHT, SELXOFFSET+SELWIDTH, SELYOFFSET+SELWIDTH+choice*SELCHOICEHEIGHT, White);
 80002a0:	d4a00f17 	ldw	r18,-32708(gp)
 80002a4:	d0e31617 	ldw	r3,-29608(gp)
 80002a8:	d0a01217 	ldw	r2,-32696(gp)
 80002ac:	1809883a 	mov	r4,r3
 80002b0:	100b883a 	mov	r5,r2
 80002b4:	8001a0c0 	call	8001a0c <__mulsi3>
 80002b8:	1007883a 	mov	r3,r2
 80002bc:	d0a01017 	ldw	r2,-32704(gp)
 80002c0:	18a3883a 	add	r17,r3,r2
 80002c4:	d0e00f17 	ldw	r3,-32708(gp)
 80002c8:	d0a01117 	ldw	r2,-32700(gp)
 80002cc:	18a1883a 	add	r16,r3,r2
 80002d0:	d0e01017 	ldw	r3,-32704(gp)
 80002d4:	d0a01117 	ldw	r2,-32700(gp)
 80002d8:	18a7883a 	add	r19,r3,r2
 80002dc:	d0e31617 	ldw	r3,-29608(gp)
 80002e0:	d0a01217 	ldw	r2,-32696(gp)
 80002e4:	1809883a 	mov	r4,r3
 80002e8:	100b883a 	mov	r5,r2
 80002ec:	8001a0c0 	call	8001a0c <__mulsi3>
 80002f0:	9885883a 	add	r2,r19,r2
 80002f4:	00ffffc4 	movi	r3,-1
 80002f8:	d8c00015 	stw	r3,0(sp)
 80002fc:	9009883a 	mov	r4,r18
 8000300:	880b883a 	mov	r5,r17
 8000304:	800d883a 	mov	r6,r16
 8000308:	100f883a 	mov	r7,r2
 800030c:	80019640 	call	8001964 <VGA_box>

					while(!((*press & 0x1) && (*keycode == ENT))){
 8000310:	0000a506 	br	80005a8 <main+0x54c>
						if((*press & 0x1) && (*keycode == UP)){
 8000314:	d0a00517 	ldw	r2,-32748(gp)
 8000318:	10800003 	ldbu	r2,0(r2)
 800031c:	10803fcc 	andi	r2,r2,255
 8000320:	1080004c 	andi	r2,r2,1
 8000324:	10004e26 	beq	r2,zero,8000460 <main+0x404>
 8000328:	d0a00417 	ldw	r2,-32752(gp)
 800032c:	10c00003 	ldbu	r3,0(r2)
 8000330:	d0a00d03 	ldbu	r2,-32716(gp)
 8000334:	18c03fcc 	andi	r3,r3,255
 8000338:	18c0201c 	xori	r3,r3,128
 800033c:	18ffe004 	addi	r3,r3,-128
 8000340:	10803fcc 	andi	r2,r2,255
 8000344:	1080201c 	xori	r2,r2,128
 8000348:	10bfe004 	addi	r2,r2,-128
 800034c:	1880441e 	bne	r3,r2,8000460 <main+0x404>
							int temp = choice;
 8000350:	d0a31617 	ldw	r2,-29608(gp)
 8000354:	e0bfcb15 	stw	r2,-212(fp)
							choice--;
 8000358:	d0a31617 	ldw	r2,-29608(gp)
 800035c:	10bfffc4 	addi	r2,r2,-1
 8000360:	d0a31615 	stw	r2,-29608(gp)
							if(choice < 0)
 8000364:	d0a31617 	ldw	r2,-29608(gp)
 8000368:	1000020e 	bge	r2,zero,8000374 <main+0x318>
								choice = 3;
 800036c:	008000c4 	movi	r2,3
 8000370:	d0a31615 	stw	r2,-29608(gp)
							VGA_box(SELXOFFSET, SELYOFFSET+temp*SELCHOICEHEIGHT, SELXOFFSET+SELWIDTH, SELYOFFSET+SELWIDTH+temp*SELCHOICEHEIGHT, BOXCOLOR);
 8000374:	d4a00f17 	ldw	r18,-32708(gp)
 8000378:	d0a01217 	ldw	r2,-32696(gp)
 800037c:	1009883a 	mov	r4,r2
 8000380:	e17fcb17 	ldw	r5,-212(fp)
 8000384:	8001a0c0 	call	8001a0c <__mulsi3>
 8000388:	1007883a 	mov	r3,r2
 800038c:	d0a01017 	ldw	r2,-32704(gp)
 8000390:	18a3883a 	add	r17,r3,r2
 8000394:	d0e00f17 	ldw	r3,-32708(gp)
 8000398:	d0a01117 	ldw	r2,-32700(gp)
 800039c:	18a1883a 	add	r16,r3,r2
 80003a0:	d0e01017 	ldw	r3,-32704(gp)
 80003a4:	d0a01117 	ldw	r2,-32700(gp)
 80003a8:	18a7883a 	add	r19,r3,r2
 80003ac:	d0a01217 	ldw	r2,-32696(gp)
 80003b0:	1009883a 	mov	r4,r2
 80003b4:	e17fcb17 	ldw	r5,-212(fp)
 80003b8:	8001a0c0 	call	8001a0c <__mulsi3>
 80003bc:	9885883a 	add	r2,r19,r2
 80003c0:	d0e0068b 	ldhu	r3,-32742(gp)
 80003c4:	18ffffcc 	andi	r3,r3,65535
 80003c8:	18e0001c 	xori	r3,r3,32768
 80003cc:	18e00004 	addi	r3,r3,-32768
 80003d0:	d8c00015 	stw	r3,0(sp)
 80003d4:	9009883a 	mov	r4,r18
 80003d8:	880b883a 	mov	r5,r17
 80003dc:	800d883a 	mov	r6,r16
 80003e0:	100f883a 	mov	r7,r2
 80003e4:	80019640 	call	8001964 <VGA_box>
							VGA_box(SELXOFFSET, SELYOFFSET+choice*SELCHOICEHEIGHT, SELXOFFSET+SELWIDTH, SELYOFFSET+SELWIDTH+choice*SELCHOICEHEIGHT, White);
 80003e8:	d4a00f17 	ldw	r18,-32708(gp)
 80003ec:	d0e31617 	ldw	r3,-29608(gp)
 80003f0:	d0a01217 	ldw	r2,-32696(gp)
 80003f4:	1809883a 	mov	r4,r3
 80003f8:	100b883a 	mov	r5,r2
 80003fc:	8001a0c0 	call	8001a0c <__mulsi3>
 8000400:	1007883a 	mov	r3,r2
 8000404:	d0a01017 	ldw	r2,-32704(gp)
 8000408:	18a3883a 	add	r17,r3,r2
 800040c:	d0e00f17 	ldw	r3,-32708(gp)
 8000410:	d0a01117 	ldw	r2,-32700(gp)
 8000414:	18a1883a 	add	r16,r3,r2
 8000418:	d0e01017 	ldw	r3,-32704(gp)
 800041c:	d0a01117 	ldw	r2,-32700(gp)
 8000420:	18a7883a 	add	r19,r3,r2
 8000424:	d0e31617 	ldw	r3,-29608(gp)
 8000428:	d0a01217 	ldw	r2,-32696(gp)
 800042c:	1809883a 	mov	r4,r3
 8000430:	100b883a 	mov	r5,r2
 8000434:	8001a0c0 	call	8001a0c <__mulsi3>
 8000438:	9885883a 	add	r2,r19,r2
 800043c:	00ffffc4 	movi	r3,-1
 8000440:	d8c00015 	stw	r3,0(sp)
 8000444:	9009883a 	mov	r4,r18
 8000448:	880b883a 	mov	r5,r17
 800044c:	800d883a 	mov	r6,r16
 8000450:	100f883a 	mov	r7,r2
 8000454:	80019640 	call	8001964 <VGA_box>
							waitRelease();
 8000458:	80015900 	call	8001590 <waitRelease>
					//addToScreen(XPADDING, "You wake up and look out to see a blanket of snow about a foot thick. \nThe chancellor sent out an email letting you know that class was NOT canceled today. \nWelcome back to campus.\0");
					printChoices(curE);
					VGA_box(SELXOFFSET, SELYOFFSET+choice*SELCHOICEHEIGHT, SELXOFFSET+SELWIDTH, SELYOFFSET+SELWIDTH+choice*SELCHOICEHEIGHT, White);

					while(!((*press & 0x1) && (*keycode == ENT))){
						if((*press & 0x1) && (*keycode == UP)){
 800045c:	00005206 	br	80005a8 <main+0x54c>
								choice = 3;
							VGA_box(SELXOFFSET, SELYOFFSET+temp*SELCHOICEHEIGHT, SELXOFFSET+SELWIDTH, SELYOFFSET+SELWIDTH+temp*SELCHOICEHEIGHT, BOXCOLOR);
							VGA_box(SELXOFFSET, SELYOFFSET+choice*SELCHOICEHEIGHT, SELXOFFSET+SELWIDTH, SELYOFFSET+SELWIDTH+choice*SELCHOICEHEIGHT, White);
							waitRelease();
						}
						else if((*press & 0x1) && (*keycode == DOWN)){
 8000460:	d0a00517 	ldw	r2,-32748(gp)
 8000464:	10800003 	ldbu	r2,0(r2)
 8000468:	10803fcc 	andi	r2,r2,255
 800046c:	1080004c 	andi	r2,r2,1
 8000470:	10004d26 	beq	r2,zero,80005a8 <main+0x54c>
 8000474:	d0a00417 	ldw	r2,-32752(gp)
 8000478:	10c00003 	ldbu	r3,0(r2)
 800047c:	d0a00d43 	ldbu	r2,-32715(gp)
 8000480:	18c03fcc 	andi	r3,r3,255
 8000484:	18c0201c 	xori	r3,r3,128
 8000488:	18ffe004 	addi	r3,r3,-128
 800048c:	10803fcc 	andi	r2,r2,255
 8000490:	1080201c 	xori	r2,r2,128
 8000494:	10bfe004 	addi	r2,r2,-128
 8000498:	1880431e 	bne	r3,r2,80005a8 <main+0x54c>
							int temp = choice;
 800049c:	d0a31617 	ldw	r2,-29608(gp)
 80004a0:	e0bfcc15 	stw	r2,-208(fp)
							choice++;
 80004a4:	d0a31617 	ldw	r2,-29608(gp)
 80004a8:	10800044 	addi	r2,r2,1
 80004ac:	d0a31615 	stw	r2,-29608(gp)
							if(choice > 3)
 80004b0:	d0a31617 	ldw	r2,-29608(gp)
 80004b4:	10800110 	cmplti	r2,r2,4
 80004b8:	1000011e 	bne	r2,zero,80004c0 <main+0x464>
								choice = 0;
 80004bc:	d0231615 	stw	zero,-29608(gp)
							VGA_box(SELXOFFSET, SELYOFFSET+temp*SELCHOICEHEIGHT, SELXOFFSET+SELWIDTH, SELYOFFSET+SELWIDTH+temp*SELCHOICEHEIGHT, BOXCOLOR);
 80004c0:	d4a00f17 	ldw	r18,-32708(gp)
 80004c4:	d0a01217 	ldw	r2,-32696(gp)
 80004c8:	1009883a 	mov	r4,r2
 80004cc:	e17fcc17 	ldw	r5,-208(fp)
 80004d0:	8001a0c0 	call	8001a0c <__mulsi3>
 80004d4:	1007883a 	mov	r3,r2
 80004d8:	d0a01017 	ldw	r2,-32704(gp)
 80004dc:	18a3883a 	add	r17,r3,r2
 80004e0:	d0e00f17 	ldw	r3,-32708(gp)
 80004e4:	d0a01117 	ldw	r2,-32700(gp)
 80004e8:	18a1883a 	add	r16,r3,r2
 80004ec:	d0e01017 	ldw	r3,-32704(gp)
 80004f0:	d0a01117 	ldw	r2,-32700(gp)
 80004f4:	18a7883a 	add	r19,r3,r2
 80004f8:	d0a01217 	ldw	r2,-32696(gp)
 80004fc:	1009883a 	mov	r4,r2
 8000500:	e17fcc17 	ldw	r5,-208(fp)
 8000504:	8001a0c0 	call	8001a0c <__mulsi3>
 8000508:	9885883a 	add	r2,r19,r2
 800050c:	d0e0068b 	ldhu	r3,-32742(gp)
 8000510:	18ffffcc 	andi	r3,r3,65535
 8000514:	18e0001c 	xori	r3,r3,32768
 8000518:	18e00004 	addi	r3,r3,-32768
 800051c:	d8c00015 	stw	r3,0(sp)
 8000520:	9009883a 	mov	r4,r18
 8000524:	880b883a 	mov	r5,r17
 8000528:	800d883a 	mov	r6,r16
 800052c:	100f883a 	mov	r7,r2
 8000530:	80019640 	call	8001964 <VGA_box>
							VGA_box(SELXOFFSET, SELYOFFSET+choice*SELCHOICEHEIGHT, SELXOFFSET+SELWIDTH, SELYOFFSET+SELWIDTH+choice*SELCHOICEHEIGHT, White);
 8000534:	d4a00f17 	ldw	r18,-32708(gp)
 8000538:	d0e31617 	ldw	r3,-29608(gp)
 800053c:	d0a01217 	ldw	r2,-32696(gp)
 8000540:	1809883a 	mov	r4,r3
 8000544:	100b883a 	mov	r5,r2
 8000548:	8001a0c0 	call	8001a0c <__mulsi3>
 800054c:	1007883a 	mov	r3,r2
 8000550:	d0a01017 	ldw	r2,-32704(gp)
 8000554:	18a3883a 	add	r17,r3,r2
 8000558:	d0e00f17 	ldw	r3,-32708(gp)
 800055c:	d0a01117 	ldw	r2,-32700(gp)
 8000560:	18a1883a 	add	r16,r3,r2
 8000564:	d0e01017 	ldw	r3,-32704(gp)
 8000568:	d0a01117 	ldw	r2,-32700(gp)
 800056c:	18a7883a 	add	r19,r3,r2
 8000570:	d0e31617 	ldw	r3,-29608(gp)
 8000574:	d0a01217 	ldw	r2,-32696(gp)
 8000578:	1809883a 	mov	r4,r3
 800057c:	100b883a 	mov	r5,r2
 8000580:	8001a0c0 	call	8001a0c <__mulsi3>
 8000584:	9885883a 	add	r2,r19,r2
 8000588:	00ffffc4 	movi	r3,-1
 800058c:	d8c00015 	stw	r3,0(sp)
 8000590:	9009883a 	mov	r4,r18
 8000594:	880b883a 	mov	r5,r17
 8000598:	800d883a 	mov	r6,r16
 800059c:	100f883a 	mov	r7,r2
 80005a0:	80019640 	call	8001964 <VGA_box>
							waitRelease();
 80005a4:	80015900 	call	8001590 <waitRelease>
					addToScreen(XPADDING, eventTexts[curE->promptI]);
					//addToScreen(XPADDING, "You wake up and look out to see a blanket of snow about a foot thick. \nThe chancellor sent out an email letting you know that class was NOT canceled today. \nWelcome back to campus.\0");
					printChoices(curE);
					VGA_box(SELXOFFSET, SELYOFFSET+choice*SELCHOICEHEIGHT, SELXOFFSET+SELWIDTH, SELYOFFSET+SELWIDTH+choice*SELCHOICEHEIGHT, White);

					while(!((*press & 0x1) && (*keycode == ENT))){
 80005a8:	d0a00517 	ldw	r2,-32748(gp)
 80005ac:	10800003 	ldbu	r2,0(r2)
 80005b0:	10803fcc 	andi	r2,r2,255
 80005b4:	1080004c 	andi	r2,r2,1
 80005b8:	103f5626 	beq	r2,zero,8000314 <main+0x2b8>
 80005bc:	d0a00417 	ldw	r2,-32752(gp)
 80005c0:	10c00003 	ldbu	r3,0(r2)
 80005c4:	d0a00e03 	ldbu	r2,-32712(gp)
 80005c8:	18c03fcc 	andi	r3,r3,255
 80005cc:	18c0201c 	xori	r3,r3,128
 80005d0:	18ffe004 	addi	r3,r3,-128
 80005d4:	10803fcc 	andi	r2,r2,255
 80005d8:	1080201c 	xori	r2,r2,128
 80005dc:	10bfe004 	addi	r2,r2,-128
 80005e0:	18bf4c1e 	bne	r3,r2,8000314 <main+0x2b8>
							VGA_box(SELXOFFSET, SELYOFFSET+choice*SELCHOICEHEIGHT, SELXOFFSET+SELWIDTH, SELYOFFSET+SELWIDTH+choice*SELCHOICEHEIGHT, White);
							waitRelease();

						}
					}
					waitRelease();
 80005e4:	80015900 	call	8001590 <waitRelease>
					VGA_box(SELXOFFSET, SELYOFFSET+choice*SELCHOICEHEIGHT, SELXOFFSET+SELWIDTH, SELYOFFSET+SELWIDTH+choice*SELCHOICEHEIGHT, BOXCOLOR);
 80005e8:	d4a00f17 	ldw	r18,-32708(gp)
 80005ec:	d0e31617 	ldw	r3,-29608(gp)
 80005f0:	d0a01217 	ldw	r2,-32696(gp)
 80005f4:	1809883a 	mov	r4,r3
 80005f8:	100b883a 	mov	r5,r2
 80005fc:	8001a0c0 	call	8001a0c <__mulsi3>
 8000600:	1007883a 	mov	r3,r2
 8000604:	d0a01017 	ldw	r2,-32704(gp)
 8000608:	18a3883a 	add	r17,r3,r2
 800060c:	d0e00f17 	ldw	r3,-32708(gp)
 8000610:	d0a01117 	ldw	r2,-32700(gp)
 8000614:	18a1883a 	add	r16,r3,r2
 8000618:	d0e01017 	ldw	r3,-32704(gp)
 800061c:	d0a01117 	ldw	r2,-32700(gp)
 8000620:	18a7883a 	add	r19,r3,r2
 8000624:	d0e31617 	ldw	r3,-29608(gp)
 8000628:	d0a01217 	ldw	r2,-32696(gp)
 800062c:	1809883a 	mov	r4,r3
 8000630:	100b883a 	mov	r5,r2
 8000634:	8001a0c0 	call	8001a0c <__mulsi3>
 8000638:	9885883a 	add	r2,r19,r2
 800063c:	d0e0068b 	ldhu	r3,-32742(gp)
 8000640:	18ffffcc 	andi	r3,r3,65535
 8000644:	18e0001c 	xori	r3,r3,32768
 8000648:	18e00004 	addi	r3,r3,-32768
 800064c:	d8c00015 	stw	r3,0(sp)
 8000650:	9009883a 	mov	r4,r18
 8000654:	880b883a 	mov	r5,r17
 8000658:	800d883a 	mov	r6,r16
 800065c:	100f883a 	mov	r7,r2
 8000660:	80019640 	call	8001964 <VGA_box>
					addToScreen(XPADDING, choiceResponses[((curE->choices)[choice]).responseI]);
 8000664:	d4200817 	ldw	r16,-32736(gp)
 8000668:	d0a31a17 	ldw	r2,-29592(gp)
 800066c:	14400117 	ldw	r17,4(r2)
 8000670:	d0a31617 	ldw	r2,-29608(gp)
 8000674:	1009883a 	mov	r4,r2
 8000678:	01400704 	movi	r5,28
 800067c:	8001a0c0 	call	8001a0c <__mulsi3>
 8000680:	8885883a 	add	r2,r17,r2
 8000684:	10800117 	ldw	r2,4(r2)
 8000688:	00c20074 	movhi	r3,2049
 800068c:	18f7a804 	addi	r3,r3,-8544
 8000690:	1085883a 	add	r2,r2,r2
 8000694:	1085883a 	add	r2,r2,r2
 8000698:	1885883a 	add	r2,r3,r2
 800069c:	10800017 	ldw	r2,0(r2)
 80006a0:	8009883a 	mov	r4,r16
 80006a4:	100b883a 	mov	r5,r2
 80006a8:	80015d40 	call	80015d4 <addToScreen>
					char temp[100];
					sprintf(temp, "\n%+i HAP, %+i HYG, %+i GRD, %+i DIF \0", ((curE->choices)[choice]).impacts[0], ((curE->choices)[choice]).impacts[1], ((curE->choices)[choice]).impacts[2], ((curE->choices)[choice]).impacts[3]);
 80006ac:	d0a31a17 	ldw	r2,-29592(gp)
 80006b0:	14000117 	ldw	r16,4(r2)
 80006b4:	d0a31617 	ldw	r2,-29608(gp)
 80006b8:	1009883a 	mov	r4,r2
 80006bc:	01400704 	movi	r5,28
 80006c0:	8001a0c0 	call	8001a0c <__mulsi3>
 80006c4:	8085883a 	add	r2,r16,r2
 80006c8:	14400317 	ldw	r17,12(r2)
 80006cc:	d0a31a17 	ldw	r2,-29592(gp)
 80006d0:	14000117 	ldw	r16,4(r2)
 80006d4:	d0a31617 	ldw	r2,-29608(gp)
 80006d8:	1009883a 	mov	r4,r2
 80006dc:	01400704 	movi	r5,28
 80006e0:	8001a0c0 	call	8001a0c <__mulsi3>
 80006e4:	8085883a 	add	r2,r16,r2
 80006e8:	14000417 	ldw	r16,16(r2)
 80006ec:	d0a31a17 	ldw	r2,-29592(gp)
 80006f0:	14800117 	ldw	r18,4(r2)
 80006f4:	d0a31617 	ldw	r2,-29608(gp)
 80006f8:	1009883a 	mov	r4,r2
 80006fc:	01400704 	movi	r5,28
 8000700:	8001a0c0 	call	8001a0c <__mulsi3>
 8000704:	9085883a 	add	r2,r18,r2
 8000708:	14800517 	ldw	r18,20(r2)
 800070c:	d0a31a17 	ldw	r2,-29592(gp)
 8000710:	14c00117 	ldw	r19,4(r2)
 8000714:	d0a31617 	ldw	r2,-29608(gp)
 8000718:	1009883a 	mov	r4,r2
 800071c:	01400704 	movi	r5,28
 8000720:	8001a0c0 	call	8001a0c <__mulsi3>
 8000724:	9885883a 	add	r2,r19,r2
 8000728:	10c00617 	ldw	r3,24(r2)
 800072c:	e0bfce04 	addi	r2,fp,-200
 8000730:	dc800015 	stw	r18,0(sp)
 8000734:	d8c00115 	stw	r3,4(sp)
 8000738:	1009883a 	mov	r4,r2
 800073c:	01420074 	movhi	r5,2049
 8000740:	29752104 	addi	r5,r5,-11132
 8000744:	880d883a 	mov	r6,r17
 8000748:	800f883a 	mov	r7,r16
 800074c:	80023dc0 	call	80023dc <sprintf>
					addToScreen(XPADDING, temp);
 8000750:	d0e00817 	ldw	r3,-32736(gp)
 8000754:	e0bfce04 	addi	r2,fp,-200
 8000758:	1809883a 	mov	r4,r3
 800075c:	100b883a 	mov	r5,r2
 8000760:	80015d40 	call	80015d4 <addToScreen>

					// modify and clamp values
					hap += ((curE->choices)[choice]).impacts[0];
 8000764:	d0a31a17 	ldw	r2,-29592(gp)
 8000768:	14000117 	ldw	r16,4(r2)
 800076c:	d0a31617 	ldw	r2,-29608(gp)
 8000770:	1009883a 	mov	r4,r2
 8000774:	01400704 	movi	r5,28
 8000778:	8001a0c0 	call	8001a0c <__mulsi3>
 800077c:	8085883a 	add	r2,r16,r2
 8000780:	10c00317 	ldw	r3,12(r2)
 8000784:	d0a01317 	ldw	r2,-32692(gp)
 8000788:	1885883a 	add	r2,r3,r2
 800078c:	d0a01315 	stw	r2,-32692(gp)
					hap = (hap > 100)? 100: hap;
 8000790:	d0a01317 	ldw	r2,-32692(gp)
 8000794:	10c01950 	cmplti	r3,r2,101
 8000798:	1800011e 	bne	r3,zero,80007a0 <main+0x744>
 800079c:	00801904 	movi	r2,100
 80007a0:	d0a01315 	stw	r2,-32692(gp)
					hyg += ((curE->choices)[choice]).impacts[1];
 80007a4:	d0a31a17 	ldw	r2,-29592(gp)
 80007a8:	14000117 	ldw	r16,4(r2)
 80007ac:	d0a31617 	ldw	r2,-29608(gp)
 80007b0:	1009883a 	mov	r4,r2
 80007b4:	01400704 	movi	r5,28
 80007b8:	8001a0c0 	call	8001a0c <__mulsi3>
 80007bc:	8085883a 	add	r2,r16,r2
 80007c0:	10c00417 	ldw	r3,16(r2)
 80007c4:	d0a01417 	ldw	r2,-32688(gp)
 80007c8:	1885883a 	add	r2,r3,r2
 80007cc:	d0a01415 	stw	r2,-32688(gp)
					hyg = (hyg > 100)? 100: hyg;
 80007d0:	d0a01417 	ldw	r2,-32688(gp)
 80007d4:	10c01950 	cmplti	r3,r2,101
 80007d8:	1800011e 	bne	r3,zero,80007e0 <main+0x784>
 80007dc:	00801904 	movi	r2,100
 80007e0:	d0a01415 	stw	r2,-32688(gp)
					grd += ((curE->choices)[choice]).impacts[2];
 80007e4:	d0a31a17 	ldw	r2,-29592(gp)
 80007e8:	14000117 	ldw	r16,4(r2)
 80007ec:	d0a31617 	ldw	r2,-29608(gp)
 80007f0:	1009883a 	mov	r4,r2
 80007f4:	01400704 	movi	r5,28
 80007f8:	8001a0c0 	call	8001a0c <__mulsi3>
 80007fc:	8085883a 	add	r2,r16,r2
 8000800:	10c00517 	ldw	r3,20(r2)
 8000804:	d0a01517 	ldw	r2,-32684(gp)
 8000808:	1885883a 	add	r2,r3,r2
 800080c:	d0a01515 	stw	r2,-32684(gp)
					grd = (grd > 100)? 100: grd;
 8000810:	d0a01517 	ldw	r2,-32684(gp)
 8000814:	10c01950 	cmplti	r3,r2,101
 8000818:	1800011e 	bne	r3,zero,8000820 <main+0x7c4>
 800081c:	00801904 	movi	r2,100
 8000820:	d0a01515 	stw	r2,-32684(gp)
					diff +=((curE->choices)[choice]).impacts[3];
 8000824:	d0a31a17 	ldw	r2,-29592(gp)
 8000828:	14000117 	ldw	r16,4(r2)
 800082c:	d0a31617 	ldw	r2,-29608(gp)
 8000830:	1009883a 	mov	r4,r2
 8000834:	01400704 	movi	r5,28
 8000838:	8001a0c0 	call	8001a0c <__mulsi3>
 800083c:	8085883a 	add	r2,r16,r2
 8000840:	10c00617 	ldw	r3,24(r2)
 8000844:	d0a01617 	ldw	r2,-32680(gp)
 8000848:	1885883a 	add	r2,r3,r2
 800084c:	d0a01615 	stw	r2,-32680(gp)

					addToScreen(XPADDING, "\nPress any key to continue...\0");
 8000850:	d0a00817 	ldw	r2,-32736(gp)
 8000854:	1009883a 	mov	r4,r2
 8000858:	01420074 	movhi	r5,2049
 800085c:	29752b04 	addi	r5,r5,-11092
 8000860:	80015d40 	call	80015d4 <addToScreen>
					waitPress();
 8000864:	80015400 	call	8001540 <waitPress>

					if(hap < 0 || hyg < 0 || grd < 0)
 8000868:	d0a01317 	ldw	r2,-32692(gp)
 800086c:	10001c16 	blt	r2,zero,80008e0 <main+0x884>
 8000870:	d0a01417 	ldw	r2,-32688(gp)
 8000874:	10001a16 	blt	r2,zero,80008e0 <main+0x884>
 8000878:	d0a01517 	ldw	r2,-32684(gp)
 800087c:	10001816 	blt	r2,zero,80008e0 <main+0x884>
						break;	// lose condition

					week++;
 8000880:	d0a31717 	ldw	r2,-29604(gp)
 8000884:	10800044 	addi	r2,r2,1
 8000888:	d0a31715 	stw	r2,-29604(gp)
					curE = ev[((curE->choices)[choice]).nextEventI];
 800088c:	d0a31a17 	ldw	r2,-29592(gp)
 8000890:	14000117 	ldw	r16,4(r2)
 8000894:	d0a31617 	ldw	r2,-29608(gp)
 8000898:	1009883a 	mov	r4,r2
 800089c:	01400704 	movi	r5,28
 80008a0:	8001a0c0 	call	8001a0c <__mulsi3>
 80008a4:	8085883a 	add	r2,r16,r2
 80008a8:	10800217 	ldw	r2,8(r2)
 80008ac:	00c20074 	movhi	r3,2049
 80008b0:	18fd8404 	addi	r3,r3,-2544
 80008b4:	1085883a 	add	r2,r2,r2
 80008b8:	1085883a 	add	r2,r2,r2
 80008bc:	1885883a 	add	r2,r3,r2
 80008c0:	10800017 	ldw	r2,0(r2)
 80008c4:	d0a31a15 	stw	r2,-29592(gp)
					//waitPress();
					initFrame();
 80008c8:	80017880 	call	8001788 <initFrame>
					//flushPixels();
					//flushChar();
					//curTextY = YPADDING;
					//flush();
					*(Pixel_DMA_controller) = 0;
 80008cc:	d0a00117 	ldw	r2,-32764(gp)
 80008d0:	10000015 	stw	zero,0(r2)
	//curTextY = YPADDING;
	initFrame();
	*(Pixel_DMA_controller) = 0;	// dummy write to start buffer swap process
	while (1)
	{
			while(week < 10){
 80008d4:	d0a31717 	ldw	r2,-29604(gp)
 80008d8:	10800290 	cmplti	r2,r2,10
 80008dc:	103e3b1e 	bne	r2,zero,80001cc <main+0x170>
			/* Execute a swap buffer command. This will allow us to check if the screen has
			 * been redrawn before generating a new animation frame. */

		}

		flushChar();
 80008e0:	80018380 	call	8001838 <flushChar>
		curTextY = YPADDING;
 80008e4:	d0a00717 	ldw	r2,-32740(gp)
 80008e8:	d0a31915 	stw	r2,-29596(gp)
		// tally score
		int score = (hap + hyg + grd) * diff;
 80008ec:	d0e01317 	ldw	r3,-32692(gp)
 80008f0:	d0a01417 	ldw	r2,-32688(gp)
 80008f4:	1887883a 	add	r3,r3,r2
 80008f8:	d0a01517 	ldw	r2,-32684(gp)
 80008fc:	1887883a 	add	r3,r3,r2
 8000900:	d0a01617 	ldw	r2,-32680(gp)
 8000904:	1809883a 	mov	r4,r3
 8000908:	100b883a 	mov	r5,r2
 800090c:	8001a0c0 	call	8001a0c <__mulsi3>
 8000910:	e0bfcd15 	stw	r2,-204(fp)
		if(hap < 0)
 8000914:	d0a01317 	ldw	r2,-32692(gp)
 8000918:	1000060e 	bge	r2,zero,8000934 <main+0x8d8>
			addToScreen(XPADDING, "Sadly you worked yourself to the bone this semester, \nand one day you just burned out from \nbeing unhappy all the time. \n\nLooks like you\'ll be taking a gap semester, buddy.\n\n\n\0");
 800091c:	d0a00817 	ldw	r2,-32736(gp)
 8000920:	1009883a 	mov	r4,r2
 8000924:	01420074 	movhi	r5,2049
 8000928:	29753304 	addi	r5,r5,-11060
 800092c:	80015d40 	call	80015d4 <addToScreen>
 8000930:	00001506 	br	8000988 <main+0x92c>
		else if(hyg < 0)
 8000934:	d0a01417 	ldw	r2,-32688(gp)
 8000938:	1000060e 	bge	r2,zero,8000954 <main+0x8f8>
			addToScreen(XPADDING, "You let yourself go, big time. \nAt first, people just gave you a big berth in the hallway, \nthen your friends stopped hanging out with you because of your smell, \nbut now the EPA came and sealed you off in your apartment. \n\nMaybe you can try again next semester, \nafter you\'ve been decontaminated?\n\n\n\0");
 800093c:	d0a00817 	ldw	r2,-32736(gp)
 8000940:	1009883a 	mov	r4,r2
 8000944:	01420074 	movhi	r5,2049
 8000948:	29756004 	addi	r5,r5,-10880
 800094c:	80015d40 	call	80015d4 <addToScreen>
 8000950:	00000d06 	br	8000988 <main+0x92c>
		else if(grd < 0)
 8000954:	d0a01517 	ldw	r2,-32684(gp)
 8000958:	1000060e 	bge	r2,zero,8000974 <main+0x918>
			addToScreen(XPADDING, "It turns out if you flunk out of all your classes, \nyou get kicked out of them. \nWho knew? \n\nGuess you\'ll have to wait until next semester to try again.\n\n\n\0");
 800095c:	d0a00817 	ldw	r2,-32736(gp)
 8000960:	1009883a 	mov	r4,r2
 8000964:	01420074 	movhi	r5,2049
 8000968:	2975ac04 	addi	r5,r5,-10576
 800096c:	80015d40 	call	80015d4 <addToScreen>
 8000970:	00000506 	br	8000988 <main+0x92c>
		else
			addToScreen(XPADDING, "Congrats, you made it through 385 while somehow keeping sane!\nWant to try it again? \n\n\n\0");
 8000974:	d0a00817 	ldw	r2,-32736(gp)
 8000978:	1009883a 	mov	r4,r2
 800097c:	01420074 	movhi	r5,2049
 8000980:	2975d404 	addi	r5,r5,-10416
 8000984:	80015d40 	call	80015d4 <addToScreen>


		char temp[100];
		sprintf(temp, "Happiness: %i\0", hap);
 8000988:	d0a01317 	ldw	r2,-32692(gp)
 800098c:	e0ffce04 	addi	r3,fp,-200
 8000990:	1809883a 	mov	r4,r3
 8000994:	01420074 	movhi	r5,2049
 8000998:	2975eb04 	addi	r5,r5,-10324
 800099c:	100d883a 	mov	r6,r2
 80009a0:	80023dc0 	call	80023dc <sprintf>
		addToScreen(XPADDING, temp);
 80009a4:	d0e00817 	ldw	r3,-32736(gp)
 80009a8:	e0bfce04 	addi	r2,fp,-200
 80009ac:	1809883a 	mov	r4,r3
 80009b0:	100b883a 	mov	r5,r2
 80009b4:	80015d40 	call	80015d4 <addToScreen>
		sprintf(temp, "Hygiene: %i\0", hyg);
 80009b8:	d0a01417 	ldw	r2,-32688(gp)
 80009bc:	e0ffce04 	addi	r3,fp,-200
 80009c0:	1809883a 	mov	r4,r3
 80009c4:	01420074 	movhi	r5,2049
 80009c8:	2975ef04 	addi	r5,r5,-10308
 80009cc:	100d883a 	mov	r6,r2
 80009d0:	80023dc0 	call	80023dc <sprintf>
		addToScreen(XPADDING, temp);
 80009d4:	d0e00817 	ldw	r3,-32736(gp)
 80009d8:	e0bfce04 	addi	r2,fp,-200
 80009dc:	1809883a 	mov	r4,r3
 80009e0:	100b883a 	mov	r5,r2
 80009e4:	80015d40 	call	80015d4 <addToScreen>
		sprintf(temp, "Grades: %i\0", grd);
 80009e8:	d0a01517 	ldw	r2,-32684(gp)
 80009ec:	e0ffce04 	addi	r3,fp,-200
 80009f0:	1809883a 	mov	r4,r3
 80009f4:	01420074 	movhi	r5,2049
 80009f8:	2975f304 	addi	r5,r5,-10292
 80009fc:	100d883a 	mov	r6,r2
 8000a00:	80023dc0 	call	80023dc <sprintf>
		addToScreen(XPADDING, temp);
 8000a04:	d0e00817 	ldw	r3,-32736(gp)
 8000a08:	e0bfce04 	addi	r2,fp,-200
 8000a0c:	1809883a 	mov	r4,r3
 8000a10:	100b883a 	mov	r5,r2
 8000a14:	80015d40 	call	80015d4 <addToScreen>
		sprintf(temp, "Total Score: %i\0", score);
 8000a18:	e0bfce04 	addi	r2,fp,-200
 8000a1c:	1009883a 	mov	r4,r2
 8000a20:	01420074 	movhi	r5,2049
 8000a24:	2975f604 	addi	r5,r5,-10280
 8000a28:	e1bfcd17 	ldw	r6,-204(fp)
 8000a2c:	80023dc0 	call	80023dc <sprintf>
		addToScreen(XPADDING, temp);
 8000a30:	d0e00817 	ldw	r3,-32736(gp)
 8000a34:	e0bfce04 	addi	r2,fp,-200
 8000a38:	1809883a 	mov	r4,r3
 8000a3c:	100b883a 	mov	r5,r2
 8000a40:	80015d40 	call	80015d4 <addToScreen>
		addToScreen(XPADDING, "\nPress any key to play again...\0");
 8000a44:	d0a00817 	ldw	r2,-32736(gp)
 8000a48:	1009883a 	mov	r4,r2
 8000a4c:	01420074 	movhi	r5,2049
 8000a50:	2975fb04 	addi	r5,r5,-10260
 8000a54:	80015d40 	call	80015d4 <addToScreen>
		waitPress();
 8000a58:	80015400 	call	8001540 <waitPress>
 8000a5c:	003d8706 	br	800007c <main+0x20>

08000a60 <Event_new>:

	}
}


Event* Event_new(int eventTextI, int choiceTextI[], int choiceResponsesI[], int choiceNextEventI[], int choiceImpacts[]){
 8000a60:	defff604 	addi	sp,sp,-40
 8000a64:	dfc00915 	stw	ra,36(sp)
 8000a68:	df000815 	stw	fp,32(sp)
 8000a6c:	df000804 	addi	fp,sp,32
 8000a70:	e13ffc15 	stw	r4,-16(fp)
 8000a74:	e17ffd15 	stw	r5,-12(fp)
 8000a78:	e1bffe15 	stw	r6,-8(fp)
 8000a7c:	e1ffff15 	stw	r7,-4(fp)
	Event* e = malloc(sizeof(Event));
 8000a80:	01000204 	movi	r4,8
 8000a84:	8001a340 	call	8001a34 <malloc>
 8000a88:	e0bffa15 	stw	r2,-24(fp)
	e->promptI = eventTextI;
 8000a8c:	e0bffa17 	ldw	r2,-24(fp)
 8000a90:	e0fffc17 	ldw	r3,-16(fp)
 8000a94:	10c00015 	stw	r3,0(r2)
	e->choices = malloc(4 * sizeof(Choice));
 8000a98:	01001c04 	movi	r4,112
 8000a9c:	8001a340 	call	8001a34 <malloc>
 8000aa0:	1007883a 	mov	r3,r2
 8000aa4:	e0bffa17 	ldw	r2,-24(fp)
 8000aa8:	10c00115 	stw	r3,4(r2)

	int i;
	Choice* c = e->choices;
 8000aac:	e0bffa17 	ldw	r2,-24(fp)
 8000ab0:	10800117 	ldw	r2,4(r2)
 8000ab4:	e0bffb15 	stw	r2,-20(fp)
	for(i = 0; i < 4; i++){ // we use nextEventI to mark if this choice is possible (if -1, don't show the choice)
 8000ab8:	e03ff815 	stw	zero,-32(fp)
 8000abc:	00004906 	br	8000be4 <Event_new+0x184>
		c[i].textI = choiceTextI[i];
 8000ac0:	e0bff817 	ldw	r2,-32(fp)
 8000ac4:	1009883a 	mov	r4,r2
 8000ac8:	01400704 	movi	r5,28
 8000acc:	8001a0c0 	call	8001a0c <__mulsi3>
 8000ad0:	e0fffb17 	ldw	r3,-20(fp)
 8000ad4:	1887883a 	add	r3,r3,r2
 8000ad8:	e0bff817 	ldw	r2,-32(fp)
 8000adc:	1085883a 	add	r2,r2,r2
 8000ae0:	1085883a 	add	r2,r2,r2
 8000ae4:	e13ffd17 	ldw	r4,-12(fp)
 8000ae8:	2085883a 	add	r2,r4,r2
 8000aec:	10800017 	ldw	r2,0(r2)
 8000af0:	18800015 	stw	r2,0(r3)
		c[i].responseI = choiceResponsesI[i];
 8000af4:	e0bff817 	ldw	r2,-32(fp)
 8000af8:	1009883a 	mov	r4,r2
 8000afc:	01400704 	movi	r5,28
 8000b00:	8001a0c0 	call	8001a0c <__mulsi3>
 8000b04:	e0fffb17 	ldw	r3,-20(fp)
 8000b08:	1887883a 	add	r3,r3,r2
 8000b0c:	e0bff817 	ldw	r2,-32(fp)
 8000b10:	1085883a 	add	r2,r2,r2
 8000b14:	1085883a 	add	r2,r2,r2
 8000b18:	e13ffe17 	ldw	r4,-8(fp)
 8000b1c:	2085883a 	add	r2,r4,r2
 8000b20:	10800017 	ldw	r2,0(r2)
 8000b24:	18800115 	stw	r2,4(r3)
		c[i].nextEventI = choiceNextEventI[i];
 8000b28:	e0bff817 	ldw	r2,-32(fp)
 8000b2c:	1009883a 	mov	r4,r2
 8000b30:	01400704 	movi	r5,28
 8000b34:	8001a0c0 	call	8001a0c <__mulsi3>
 8000b38:	e0fffb17 	ldw	r3,-20(fp)
 8000b3c:	1887883a 	add	r3,r3,r2
 8000b40:	e0bff817 	ldw	r2,-32(fp)
 8000b44:	1085883a 	add	r2,r2,r2
 8000b48:	1085883a 	add	r2,r2,r2
 8000b4c:	e13fff17 	ldw	r4,-4(fp)
 8000b50:	2085883a 	add	r2,r4,r2
 8000b54:	10800017 	ldw	r2,0(r2)
 8000b58:	18800215 	stw	r2,8(r3)
		int a;
		for(a = 0; a < 4; a++)
 8000b5c:	e03ff915 	stw	zero,-28(fp)
 8000b60:	00001a06 	br	8000bcc <Event_new+0x16c>
			c[i].impacts[a] = choiceImpacts[i*4 + a];
 8000b64:	e0bff817 	ldw	r2,-32(fp)
 8000b68:	1009883a 	mov	r4,r2
 8000b6c:	01400704 	movi	r5,28
 8000b70:	8001a0c0 	call	8001a0c <__mulsi3>
 8000b74:	e0fffb17 	ldw	r3,-20(fp)
 8000b78:	1889883a 	add	r4,r3,r2
 8000b7c:	e0bff817 	ldw	r2,-32(fp)
 8000b80:	1085883a 	add	r2,r2,r2
 8000b84:	1085883a 	add	r2,r2,r2
 8000b88:	1007883a 	mov	r3,r2
 8000b8c:	e0bff917 	ldw	r2,-28(fp)
 8000b90:	1885883a 	add	r2,r3,r2
 8000b94:	1085883a 	add	r2,r2,r2
 8000b98:	1085883a 	add	r2,r2,r2
 8000b9c:	e0c00217 	ldw	r3,8(fp)
 8000ba0:	1885883a 	add	r2,r3,r2
 8000ba4:	10c00017 	ldw	r3,0(r2)
 8000ba8:	e0bff917 	ldw	r2,-28(fp)
 8000bac:	108000c4 	addi	r2,r2,3
 8000bb0:	1085883a 	add	r2,r2,r2
 8000bb4:	1085883a 	add	r2,r2,r2
 8000bb8:	2085883a 	add	r2,r4,r2
 8000bbc:	10c00015 	stw	r3,0(r2)
	for(i = 0; i < 4; i++){ // we use nextEventI to mark if this choice is possible (if -1, don't show the choice)
		c[i].textI = choiceTextI[i];
		c[i].responseI = choiceResponsesI[i];
		c[i].nextEventI = choiceNextEventI[i];
		int a;
		for(a = 0; a < 4; a++)
 8000bc0:	e0bff917 	ldw	r2,-28(fp)
 8000bc4:	10800044 	addi	r2,r2,1
 8000bc8:	e0bff915 	stw	r2,-28(fp)
 8000bcc:	e0bff917 	ldw	r2,-28(fp)
 8000bd0:	10800110 	cmplti	r2,r2,4
 8000bd4:	103fe31e 	bne	r2,zero,8000b64 <Event_new+0x104>
	e->promptI = eventTextI;
	e->choices = malloc(4 * sizeof(Choice));

	int i;
	Choice* c = e->choices;
	for(i = 0; i < 4; i++){ // we use nextEventI to mark if this choice is possible (if -1, don't show the choice)
 8000bd8:	e0bff817 	ldw	r2,-32(fp)
 8000bdc:	10800044 	addi	r2,r2,1
 8000be0:	e0bff815 	stw	r2,-32(fp)
 8000be4:	e0bff817 	ldw	r2,-32(fp)
 8000be8:	10800110 	cmplti	r2,r2,4
 8000bec:	103fb41e 	bne	r2,zero,8000ac0 <Event_new+0x60>
			c[i].impacts[a] = choiceImpacts[i*4 + a];
	}

	//printf("%i\n", c[0].textI);

	return e;
 8000bf0:	e0bffa17 	ldw	r2,-24(fp)
}
 8000bf4:	e037883a 	mov	sp,fp
 8000bf8:	dfc00117 	ldw	ra,4(sp)
 8000bfc:	df000017 	ldw	fp,0(sp)
 8000c00:	dec00204 	addi	sp,sp,8
 8000c04:	f800283a 	ret

08000c08 <initEvents>:

void initEvents(){
 8000c08:	defee104 	addi	sp,sp,-1148
 8000c0c:	dfc11e15 	stw	ra,1144(sp)
 8000c10:	df011d15 	stw	fp,1140(sp)
 8000c14:	df011d04 	addi	fp,sp,1140
	int* cTI;	// choice text indices
	int* cRI;	// choice response indices
	int* cNI;	// choice next event indices
	int* cI	;	// choice impacts (on happiness, hygiene, grades, difficulty)

	cTI = (int[4]) {0, 1, 2, 3};
 8000c18:	e03ffc15 	stw	zero,-16(fp)
 8000c1c:	00800044 	movi	r2,1
 8000c20:	e0bffd15 	stw	r2,-12(fp)
 8000c24:	00800084 	movi	r2,2
 8000c28:	e0bffe15 	stw	r2,-8(fp)
 8000c2c:	008000c4 	movi	r2,3
 8000c30:	e0bfff15 	stw	r2,-4(fp)
 8000c34:	e0bffc04 	addi	r2,fp,-16
 8000c38:	e0bee415 	stw	r2,-1136(fp)
	cRI = (int[4]) {0, 0, 3, 5};
 8000c3c:	e03ff815 	stw	zero,-32(fp)
 8000c40:	e03ff915 	stw	zero,-28(fp)
 8000c44:	008000c4 	movi	r2,3
 8000c48:	e0bffa15 	stw	r2,-24(fp)
 8000c4c:	00800144 	movi	r2,5
 8000c50:	e0bffb15 	stw	r2,-20(fp)
 8000c54:	e0bff804 	addi	r2,fp,-32
 8000c58:	e0bee515 	stw	r2,-1132(fp)
	cNI = (int[4]) {1, 1, 1, 1};
 8000c5c:	00800044 	movi	r2,1
 8000c60:	e0bff415 	stw	r2,-48(fp)
 8000c64:	00800044 	movi	r2,1
 8000c68:	e0bff515 	stw	r2,-44(fp)
 8000c6c:	00800044 	movi	r2,1
 8000c70:	e0bff615 	stw	r2,-40(fp)
 8000c74:	00800044 	movi	r2,1
 8000c78:	e0bff715 	stw	r2,-36(fp)
 8000c7c:	e0bff404 	addi	r2,fp,-48
 8000c80:	e0bee615 	stw	r2,-1128(fp)
	cI  = (int[16]) { 	0, 0, 0, 0,
 8000c84:	00820074 	movhi	r2,2049
 8000c88:	10b60404 	addi	r2,r2,-10224
 8000c8c:	e13fe404 	addi	r4,fp,-112
 8000c90:	1007883a 	mov	r3,r2
 8000c94:	00801004 	movi	r2,64
 8000c98:	180b883a 	mov	r5,r3
 8000c9c:	100d883a 	mov	r6,r2
 8000ca0:	80021e00 	call	80021e0 <memcpy>
 8000ca4:	e0bfe404 	addi	r2,fp,-112
 8000ca8:	e0bee715 	stw	r2,-1124(fp)
						0, 0, 0, 0,
						-10, 0, 10, 0,
						15, -5, -20, 2};
	ev[0] = Event_new(0, cTI, cRI, cNI, cI);
 8000cac:	e0bee717 	ldw	r2,-1124(fp)
 8000cb0:	d8800015 	stw	r2,0(sp)
 8000cb4:	0009883a 	mov	r4,zero
 8000cb8:	e17ee417 	ldw	r5,-1136(fp)
 8000cbc:	e1bee517 	ldw	r6,-1132(fp)
 8000cc0:	e1fee617 	ldw	r7,-1128(fp)
 8000cc4:	8000a600 	call	8000a60 <Event_new>
 8000cc8:	00c20074 	movhi	r3,2049
 8000ccc:	18fd8404 	addi	r3,r3,-2544
 8000cd0:	18800015 	stw	r2,0(r3)
	cTI = (int[4]) {4, 5, 6, 3};
 8000cd4:	00800104 	movi	r2,4
 8000cd8:	e0bfe015 	stw	r2,-128(fp)
 8000cdc:	00800144 	movi	r2,5
 8000ce0:	e0bfe115 	stw	r2,-124(fp)
 8000ce4:	00800184 	movi	r2,6
 8000ce8:	e0bfe215 	stw	r2,-120(fp)
 8000cec:	008000c4 	movi	r2,3
 8000cf0:	e0bfe315 	stw	r2,-116(fp)
 8000cf4:	e0bfe004 	addi	r2,fp,-128
 8000cf8:	e0bee415 	stw	r2,-1136(fp)
	cRI = (int[4]) {8, 7, 9, 1};
 8000cfc:	00800204 	movi	r2,8
 8000d00:	e0bfdc15 	stw	r2,-144(fp)
 8000d04:	008001c4 	movi	r2,7
 8000d08:	e0bfdd15 	stw	r2,-140(fp)
 8000d0c:	00800244 	movi	r2,9
 8000d10:	e0bfde15 	stw	r2,-136(fp)
 8000d14:	00800044 	movi	r2,1
 8000d18:	e0bfdf15 	stw	r2,-132(fp)
 8000d1c:	e0bfdc04 	addi	r2,fp,-144
 8000d20:	e0bee515 	stw	r2,-1132(fp)
	cNI = (int[4]) {2, 2, 2, 2};
 8000d24:	00800084 	movi	r2,2
 8000d28:	e0bfd815 	stw	r2,-160(fp)
 8000d2c:	00800084 	movi	r2,2
 8000d30:	e0bfd915 	stw	r2,-156(fp)
 8000d34:	00800084 	movi	r2,2
 8000d38:	e0bfda15 	stw	r2,-152(fp)
 8000d3c:	00800084 	movi	r2,2
 8000d40:	e0bfdb15 	stw	r2,-148(fp)
 8000d44:	e0bfd804 	addi	r2,fp,-160
 8000d48:	e0bee615 	stw	r2,-1128(fp)
	cI  = (int[16]) { 	0, 0, 10, 0,
 8000d4c:	00820074 	movhi	r2,2049
 8000d50:	10b61404 	addi	r2,r2,-10160
 8000d54:	e13fc804 	addi	r4,fp,-224
 8000d58:	1007883a 	mov	r3,r2
 8000d5c:	00801004 	movi	r2,64
 8000d60:	180b883a 	mov	r5,r3
 8000d64:	100d883a 	mov	r6,r2
 8000d68:	80021e00 	call	80021e0 <memcpy>
 8000d6c:	e0bfc804 	addi	r2,fp,-224
 8000d70:	e0bee715 	stw	r2,-1124(fp)
						10, 0, -10, 0,
						0, -5, -20, 1,
						15, -5, -20, 2};
	ev[1] = Event_new(1, cTI, cRI, cNI, cI);
 8000d74:	e0bee717 	ldw	r2,-1124(fp)
 8000d78:	d8800015 	stw	r2,0(sp)
 8000d7c:	01000044 	movi	r4,1
 8000d80:	e17ee417 	ldw	r5,-1136(fp)
 8000d84:	e1bee517 	ldw	r6,-1132(fp)
 8000d88:	e1fee617 	ldw	r7,-1128(fp)
 8000d8c:	8000a600 	call	8000a60 <Event_new>
 8000d90:	00c20074 	movhi	r3,2049
 8000d94:	18fd8404 	addi	r3,r3,-2544
 8000d98:	18800115 	stw	r2,4(r3)

	cTI = (int[4]) {7, 8, 9, 3};
 8000d9c:	008001c4 	movi	r2,7
 8000da0:	e0bfc415 	stw	r2,-240(fp)
 8000da4:	00800204 	movi	r2,8
 8000da8:	e0bfc515 	stw	r2,-236(fp)
 8000dac:	00800244 	movi	r2,9
 8000db0:	e0bfc615 	stw	r2,-232(fp)
 8000db4:	008000c4 	movi	r2,3
 8000db8:	e0bfc715 	stw	r2,-228(fp)
 8000dbc:	e0bfc404 	addi	r2,fp,-240
 8000dc0:	e0bee415 	stw	r2,-1136(fp)
	cRI = (int[4]) {12, 3, 11, 2};
 8000dc4:	00800304 	movi	r2,12
 8000dc8:	e0bfc015 	stw	r2,-256(fp)
 8000dcc:	008000c4 	movi	r2,3
 8000dd0:	e0bfc115 	stw	r2,-252(fp)
 8000dd4:	008002c4 	movi	r2,11
 8000dd8:	e0bfc215 	stw	r2,-248(fp)
 8000ddc:	00800084 	movi	r2,2
 8000de0:	e0bfc315 	stw	r2,-244(fp)
 8000de4:	e0bfc004 	addi	r2,fp,-256
 8000de8:	e0bee515 	stw	r2,-1132(fp)
	cNI = (int[4]) {3, 3, 3, 3};
 8000dec:	008000c4 	movi	r2,3
 8000df0:	e0bfbc15 	stw	r2,-272(fp)
 8000df4:	008000c4 	movi	r2,3
 8000df8:	e0bfbd15 	stw	r2,-268(fp)
 8000dfc:	008000c4 	movi	r2,3
 8000e00:	e0bfbe15 	stw	r2,-264(fp)
 8000e04:	008000c4 	movi	r2,3
 8000e08:	e0bfbf15 	stw	r2,-260(fp)
 8000e0c:	e0bfbc04 	addi	r2,fp,-272
 8000e10:	e0bee615 	stw	r2,-1128(fp)
	cI  = (int[16]) { 	10, 0, -10, 0,
 8000e14:	00820074 	movhi	r2,2049
 8000e18:	10b62404 	addi	r2,r2,-10096
 8000e1c:	e13fac04 	addi	r4,fp,-336
 8000e20:	1007883a 	mov	r3,r2
 8000e24:	00801004 	movi	r2,64
 8000e28:	180b883a 	mov	r5,r3
 8000e2c:	100d883a 	mov	r6,r2
 8000e30:	80021e00 	call	80021e0 <memcpy>
 8000e34:	e0bfac04 	addi	r2,fp,-336
 8000e38:	e0bee715 	stw	r2,-1124(fp)
						-10, 0, 5, 0,
						10, 0, -5, 0,
						15, -5, -20, 2};
	ev[2] = Event_new(2, cTI, cRI, cNI, cI);
 8000e3c:	e0bee717 	ldw	r2,-1124(fp)
 8000e40:	d8800015 	stw	r2,0(sp)
 8000e44:	01000084 	movi	r4,2
 8000e48:	e17ee417 	ldw	r5,-1136(fp)
 8000e4c:	e1bee517 	ldw	r6,-1132(fp)
 8000e50:	e1fee617 	ldw	r7,-1128(fp)
 8000e54:	8000a600 	call	8000a60 <Event_new>
 8000e58:	00c20074 	movhi	r3,2049
 8000e5c:	18fd8404 	addi	r3,r3,-2544
 8000e60:	18800215 	stw	r2,8(r3)

	cTI = (int[4]) {20, 15, 7, 3};
 8000e64:	00800504 	movi	r2,20
 8000e68:	e0bfa815 	stw	r2,-352(fp)
 8000e6c:	008003c4 	movi	r2,15
 8000e70:	e0bfa915 	stw	r2,-348(fp)
 8000e74:	008001c4 	movi	r2,7
 8000e78:	e0bfaa15 	stw	r2,-344(fp)
 8000e7c:	008000c4 	movi	r2,3
 8000e80:	e0bfab15 	stw	r2,-340(fp)
 8000e84:	e0bfa804 	addi	r2,fp,-352
 8000e88:	e0bee415 	stw	r2,-1136(fp)
	cRI = (int[4]) {10, 1, 1, 1};
 8000e8c:	00800284 	movi	r2,10
 8000e90:	e0bfa415 	stw	r2,-368(fp)
 8000e94:	00800044 	movi	r2,1
 8000e98:	e0bfa515 	stw	r2,-364(fp)
 8000e9c:	00800044 	movi	r2,1
 8000ea0:	e0bfa615 	stw	r2,-360(fp)
 8000ea4:	00800044 	movi	r2,1
 8000ea8:	e0bfa715 	stw	r2,-356(fp)
 8000eac:	e0bfa404 	addi	r2,fp,-368
 8000eb0:	e0bee515 	stw	r2,-1132(fp)
	cNI = (int[4]) {4, 4, 4, 4};
 8000eb4:	00800104 	movi	r2,4
 8000eb8:	e0bfa015 	stw	r2,-384(fp)
 8000ebc:	00800104 	movi	r2,4
 8000ec0:	e0bfa115 	stw	r2,-380(fp)
 8000ec4:	00800104 	movi	r2,4
 8000ec8:	e0bfa215 	stw	r2,-376(fp)
 8000ecc:	00800104 	movi	r2,4
 8000ed0:	e0bfa315 	stw	r2,-372(fp)
 8000ed4:	e0bfa004 	addi	r2,fp,-384
 8000ed8:	e0bee615 	stw	r2,-1128(fp)
	cI  = (int[16]) { 	-10, -10, 10, 0,
 8000edc:	00820074 	movhi	r2,2049
 8000ee0:	10b63404 	addi	r2,r2,-10032
 8000ee4:	e13f9004 	addi	r4,fp,-448
 8000ee8:	1007883a 	mov	r3,r2
 8000eec:	00801004 	movi	r2,64
 8000ef0:	180b883a 	mov	r5,r3
 8000ef4:	100d883a 	mov	r6,r2
 8000ef8:	80021e00 	call	80021e0 <memcpy>
 8000efc:	e0bf9004 	addi	r2,fp,-448
 8000f00:	e0bee715 	stw	r2,-1124(fp)
						10, 0, -15, 0,
						10, 0, -15, 0,
						15, -5, -20, 2};
	ev[3] = Event_new(3, cTI, cRI, cNI, cI);
 8000f04:	e0bee717 	ldw	r2,-1124(fp)
 8000f08:	d8800015 	stw	r2,0(sp)
 8000f0c:	010000c4 	movi	r4,3
 8000f10:	e17ee417 	ldw	r5,-1136(fp)
 8000f14:	e1bee517 	ldw	r6,-1132(fp)
 8000f18:	e1fee617 	ldw	r7,-1128(fp)
 8000f1c:	8000a600 	call	8000a60 <Event_new>
 8000f20:	00c20074 	movhi	r3,2049
 8000f24:	18fd8404 	addi	r3,r3,-2544
 8000f28:	18800315 	stw	r2,12(r3)

	cTI = (int[4]) {11, 12, 13, 3};
 8000f2c:	008002c4 	movi	r2,11
 8000f30:	e0bf8c15 	stw	r2,-464(fp)
 8000f34:	00800304 	movi	r2,12
 8000f38:	e0bf8d15 	stw	r2,-460(fp)
 8000f3c:	00800344 	movi	r2,13
 8000f40:	e0bf8e15 	stw	r2,-456(fp)
 8000f44:	008000c4 	movi	r2,3
 8000f48:	e0bf8f15 	stw	r2,-452(fp)
 8000f4c:	e0bf8c04 	addi	r2,fp,-464
 8000f50:	e0bee415 	stw	r2,-1136(fp)
	cRI = (int[4]) {13, 14, 15, 2};
 8000f54:	00800344 	movi	r2,13
 8000f58:	e0bf8815 	stw	r2,-480(fp)
 8000f5c:	00800384 	movi	r2,14
 8000f60:	e0bf8915 	stw	r2,-476(fp)
 8000f64:	008003c4 	movi	r2,15
 8000f68:	e0bf8a15 	stw	r2,-472(fp)
 8000f6c:	00800084 	movi	r2,2
 8000f70:	e0bf8b15 	stw	r2,-468(fp)
 8000f74:	e0bf8804 	addi	r2,fp,-480
 8000f78:	e0bee515 	stw	r2,-1132(fp)
	cNI = (int[4]) {5, 5, 5, 5};
 8000f7c:	00800144 	movi	r2,5
 8000f80:	e0bf8415 	stw	r2,-496(fp)
 8000f84:	00800144 	movi	r2,5
 8000f88:	e0bf8515 	stw	r2,-492(fp)
 8000f8c:	00800144 	movi	r2,5
 8000f90:	e0bf8615 	stw	r2,-488(fp)
 8000f94:	00800144 	movi	r2,5
 8000f98:	e0bf8715 	stw	r2,-484(fp)
 8000f9c:	e0bf8404 	addi	r2,fp,-496
 8000fa0:	e0bee615 	stw	r2,-1128(fp)
	cI  = (int[16]) { 	0, -10, 10, 0,
 8000fa4:	00820074 	movhi	r2,2049
 8000fa8:	10b64404 	addi	r2,r2,-9968
 8000fac:	e13f7404 	addi	r4,fp,-560
 8000fb0:	1007883a 	mov	r3,r2
 8000fb4:	00801004 	movi	r2,64
 8000fb8:	180b883a 	mov	r5,r3
 8000fbc:	100d883a 	mov	r6,r2
 8000fc0:	80021e00 	call	80021e0 <memcpy>
 8000fc4:	e0bf7404 	addi	r2,fp,-560
 8000fc8:	e0bee715 	stw	r2,-1124(fp)
						10, 0, -10, 0,
						15, -10, -5, 0,
						15, -5, -20, 2};
	ev[4] = Event_new(4, cTI, cRI, cNI, cI);
 8000fcc:	e0bee717 	ldw	r2,-1124(fp)
 8000fd0:	d8800015 	stw	r2,0(sp)
 8000fd4:	01000104 	movi	r4,4
 8000fd8:	e17ee417 	ldw	r5,-1136(fp)
 8000fdc:	e1bee517 	ldw	r6,-1132(fp)
 8000fe0:	e1fee617 	ldw	r7,-1128(fp)
 8000fe4:	8000a600 	call	8000a60 <Event_new>
 8000fe8:	00c20074 	movhi	r3,2049
 8000fec:	18fd8404 	addi	r3,r3,-2544
 8000ff0:	18800415 	stw	r2,16(r3)

	cTI = (int[4]) {3, 3, 3, 3};
 8000ff4:	008000c4 	movi	r2,3
 8000ff8:	e0bf7015 	stw	r2,-576(fp)
 8000ffc:	008000c4 	movi	r2,3
 8001000:	e0bf7115 	stw	r2,-572(fp)
 8001004:	008000c4 	movi	r2,3
 8001008:	e0bf7215 	stw	r2,-568(fp)
 800100c:	008000c4 	movi	r2,3
 8001010:	e0bf7315 	stw	r2,-564(fp)
 8001014:	e0bf7004 	addi	r2,fp,-576
 8001018:	e0bee415 	stw	r2,-1136(fp)
	cRI = (int[4]) {22, 22, 22, 22};
 800101c:	00800584 	movi	r2,22
 8001020:	e0bf6c15 	stw	r2,-592(fp)
 8001024:	00800584 	movi	r2,22
 8001028:	e0bf6d15 	stw	r2,-588(fp)
 800102c:	00800584 	movi	r2,22
 8001030:	e0bf6e15 	stw	r2,-584(fp)
 8001034:	00800584 	movi	r2,22
 8001038:	e0bf6f15 	stw	r2,-580(fp)
 800103c:	e0bf6c04 	addi	r2,fp,-592
 8001040:	e0bee515 	stw	r2,-1132(fp)
	cNI = (int[4]) {6, 6, 6, 6};
 8001044:	00800184 	movi	r2,6
 8001048:	e0bf6815 	stw	r2,-608(fp)
 800104c:	00800184 	movi	r2,6
 8001050:	e0bf6915 	stw	r2,-604(fp)
 8001054:	00800184 	movi	r2,6
 8001058:	e0bf6a15 	stw	r2,-600(fp)
 800105c:	00800184 	movi	r2,6
 8001060:	e0bf6b15 	stw	r2,-596(fp)
 8001064:	e0bf6804 	addi	r2,fp,-608
 8001068:	e0bee615 	stw	r2,-1128(fp)
	cI  = (int[16]) { 	15, -5, -10, 2,
 800106c:	00820074 	movhi	r2,2049
 8001070:	10b65404 	addi	r2,r2,-9904
 8001074:	e13f5804 	addi	r4,fp,-672
 8001078:	1007883a 	mov	r3,r2
 800107c:	00801004 	movi	r2,64
 8001080:	180b883a 	mov	r5,r3
 8001084:	100d883a 	mov	r6,r2
 8001088:	80021e00 	call	80021e0 <memcpy>
 800108c:	e0bf5804 	addi	r2,fp,-672
 8001090:	e0bee715 	stw	r2,-1124(fp)
						15, -5, -10, 2,
						15, -5, -10, 2,
						15, -5, -10, 2};
	ev[5] = Event_new(5, cTI, cRI, cNI, cI);
 8001094:	e0bee717 	ldw	r2,-1124(fp)
 8001098:	d8800015 	stw	r2,0(sp)
 800109c:	01000144 	movi	r4,5
 80010a0:	e17ee417 	ldw	r5,-1136(fp)
 80010a4:	e1bee517 	ldw	r6,-1132(fp)
 80010a8:	e1fee617 	ldw	r7,-1128(fp)
 80010ac:	8000a600 	call	8000a60 <Event_new>
 80010b0:	00c20074 	movhi	r3,2049
 80010b4:	18fd8404 	addi	r3,r3,-2544
 80010b8:	18800515 	stw	r2,20(r3)

	cTI = (int[4]) {14, 15, 16, 3};
 80010bc:	00800384 	movi	r2,14
 80010c0:	e0bf5415 	stw	r2,-688(fp)
 80010c4:	008003c4 	movi	r2,15
 80010c8:	e0bf5515 	stw	r2,-684(fp)
 80010cc:	00800404 	movi	r2,16
 80010d0:	e0bf5615 	stw	r2,-680(fp)
 80010d4:	008000c4 	movi	r2,3
 80010d8:	e0bf5715 	stw	r2,-676(fp)
 80010dc:	e0bf5404 	addi	r2,fp,-688
 80010e0:	e0bee415 	stw	r2,-1136(fp)
	cRI = (int[4]) {10, 2, 20, 20};
 80010e4:	00800284 	movi	r2,10
 80010e8:	e0bf5015 	stw	r2,-704(fp)
 80010ec:	00800084 	movi	r2,2
 80010f0:	e0bf5115 	stw	r2,-700(fp)
 80010f4:	00800504 	movi	r2,20
 80010f8:	e0bf5215 	stw	r2,-696(fp)
 80010fc:	00800504 	movi	r2,20
 8001100:	e0bf5315 	stw	r2,-692(fp)
 8001104:	e0bf5004 	addi	r2,fp,-704
 8001108:	e0bee515 	stw	r2,-1132(fp)
	cNI = (int[4]) {7, 7, 7, 7};
 800110c:	008001c4 	movi	r2,7
 8001110:	e0bf4c15 	stw	r2,-720(fp)
 8001114:	008001c4 	movi	r2,7
 8001118:	e0bf4d15 	stw	r2,-716(fp)
 800111c:	008001c4 	movi	r2,7
 8001120:	e0bf4e15 	stw	r2,-712(fp)
 8001124:	008001c4 	movi	r2,7
 8001128:	e0bf4f15 	stw	r2,-708(fp)
 800112c:	e0bf4c04 	addi	r2,fp,-720
 8001130:	e0bee615 	stw	r2,-1128(fp)
	cI  = (int[16]) { 	0, 0, 5, 0,
 8001134:	00820074 	movhi	r2,2049
 8001138:	10b66404 	addi	r2,r2,-9840
 800113c:	e13f3c04 	addi	r4,fp,-784
 8001140:	1007883a 	mov	r3,r2
 8001144:	00801004 	movi	r2,64
 8001148:	180b883a 	mov	r5,r3
 800114c:	100d883a 	mov	r6,r2
 8001150:	80021e00 	call	80021e0 <memcpy>
 8001154:	e0bf3c04 	addi	r2,fp,-784
 8001158:	e0bee715 	stw	r2,-1124(fp)
						5, 0, -15, 1,
						-10, 0, 10, 0,
						15, -5, -20, 2};
	ev[6] = Event_new(6, cTI, cRI, cNI, cI);
 800115c:	e0bee717 	ldw	r2,-1124(fp)
 8001160:	d8800015 	stw	r2,0(sp)
 8001164:	01000184 	movi	r4,6
 8001168:	e17ee417 	ldw	r5,-1136(fp)
 800116c:	e1bee517 	ldw	r6,-1132(fp)
 8001170:	e1fee617 	ldw	r7,-1128(fp)
 8001174:	8000a600 	call	8000a60 <Event_new>
 8001178:	00c20074 	movhi	r3,2049
 800117c:	18fd8404 	addi	r3,r3,-2544
 8001180:	18800615 	stw	r2,24(r3)

	cTI = (int[4]) {17, 18, 19, 3};
 8001184:	00800444 	movi	r2,17
 8001188:	e0bf3815 	stw	r2,-800(fp)
 800118c:	00800484 	movi	r2,18
 8001190:	e0bf3915 	stw	r2,-796(fp)
 8001194:	008004c4 	movi	r2,19
 8001198:	e0bf3a15 	stw	r2,-792(fp)
 800119c:	008000c4 	movi	r2,3
 80011a0:	e0bf3b15 	stw	r2,-788(fp)
 80011a4:	e0bf3804 	addi	r2,fp,-800
 80011a8:	e0bee415 	stw	r2,-1136(fp)
	cRI = (int[4]) {16, 6, 17, 0};
 80011ac:	00800404 	movi	r2,16
 80011b0:	e0bf3415 	stw	r2,-816(fp)
 80011b4:	00800184 	movi	r2,6
 80011b8:	e0bf3515 	stw	r2,-812(fp)
 80011bc:	00800444 	movi	r2,17
 80011c0:	e0bf3615 	stw	r2,-808(fp)
 80011c4:	e03f3715 	stw	zero,-804(fp)
 80011c8:	e0bf3404 	addi	r2,fp,-816
 80011cc:	e0bee515 	stw	r2,-1132(fp)
	cNI = (int[4]) {8, 8, 8, 8};
 80011d0:	00800204 	movi	r2,8
 80011d4:	e0bf3015 	stw	r2,-832(fp)
 80011d8:	00800204 	movi	r2,8
 80011dc:	e0bf3115 	stw	r2,-828(fp)
 80011e0:	00800204 	movi	r2,8
 80011e4:	e0bf3215 	stw	r2,-824(fp)
 80011e8:	00800204 	movi	r2,8
 80011ec:	e0bf3315 	stw	r2,-820(fp)
 80011f0:	e0bf3004 	addi	r2,fp,-832
 80011f4:	e0bee615 	stw	r2,-1128(fp)
	cI  = (int[16]) { 	0, 0, 0, 0,
 80011f8:	00820074 	movhi	r2,2049
 80011fc:	10b67404 	addi	r2,r2,-9776
 8001200:	e13f2004 	addi	r4,fp,-896
 8001204:	1007883a 	mov	r3,r2
 8001208:	00801004 	movi	r2,64
 800120c:	180b883a 	mov	r5,r3
 8001210:	100d883a 	mov	r6,r2
 8001214:	80021e00 	call	80021e0 <memcpy>
 8001218:	e0bf2004 	addi	r2,fp,-896
 800121c:	e0bee715 	stw	r2,-1124(fp)
						5, 5, 0, 0,
						0, -20, 0, 1,
						15, -5, -20, 2};
	ev[7] = Event_new(7, cTI, cRI, cNI, cI);
 8001220:	e0bee717 	ldw	r2,-1124(fp)
 8001224:	d8800015 	stw	r2,0(sp)
 8001228:	010001c4 	movi	r4,7
 800122c:	e17ee417 	ldw	r5,-1136(fp)
 8001230:	e1bee517 	ldw	r6,-1132(fp)
 8001234:	e1fee617 	ldw	r7,-1128(fp)
 8001238:	8000a600 	call	8000a60 <Event_new>
 800123c:	00c20074 	movhi	r3,2049
 8001240:	18fd8404 	addi	r3,r3,-2544
 8001244:	18800715 	stw	r2,28(r3)

	cTI = (int[4]) {20, 21, 22, 3};
 8001248:	00800504 	movi	r2,20
 800124c:	e0bf1c15 	stw	r2,-912(fp)
 8001250:	00800544 	movi	r2,21
 8001254:	e0bf1d15 	stw	r2,-908(fp)
 8001258:	00800584 	movi	r2,22
 800125c:	e0bf1e15 	stw	r2,-904(fp)
 8001260:	008000c4 	movi	r2,3
 8001264:	e0bf1f15 	stw	r2,-900(fp)
 8001268:	e0bf1c04 	addi	r2,fp,-912
 800126c:	e0bee415 	stw	r2,-1136(fp)
	cRI = (int[4]) {18, 18, 18, 18};
 8001270:	00800484 	movi	r2,18
 8001274:	e0bf1815 	stw	r2,-928(fp)
 8001278:	00800484 	movi	r2,18
 800127c:	e0bf1915 	stw	r2,-924(fp)
 8001280:	00800484 	movi	r2,18
 8001284:	e0bf1a15 	stw	r2,-920(fp)
 8001288:	00800484 	movi	r2,18
 800128c:	e0bf1b15 	stw	r2,-916(fp)
 8001290:	e0bf1804 	addi	r2,fp,-928
 8001294:	e0bee515 	stw	r2,-1132(fp)
	cNI = (int[4]) {9, 9, 9, 9};
 8001298:	00800244 	movi	r2,9
 800129c:	e0bf1415 	stw	r2,-944(fp)
 80012a0:	00800244 	movi	r2,9
 80012a4:	e0bf1515 	stw	r2,-940(fp)
 80012a8:	00800244 	movi	r2,9
 80012ac:	e0bf1615 	stw	r2,-936(fp)
 80012b0:	00800244 	movi	r2,9
 80012b4:	e0bf1715 	stw	r2,-932(fp)
 80012b8:	e0bf1404 	addi	r2,fp,-944
 80012bc:	e0bee615 	stw	r2,-1128(fp)
	cI  = (int[16]) { 	-15, -10, 15, 0,
 80012c0:	00820074 	movhi	r2,2049
 80012c4:	10b68404 	addi	r2,r2,-9712
 80012c8:	e13f0404 	addi	r4,fp,-1008
 80012cc:	1007883a 	mov	r3,r2
 80012d0:	00801004 	movi	r2,64
 80012d4:	180b883a 	mov	r5,r3
 80012d8:	100d883a 	mov	r6,r2
 80012dc:	80021e00 	call	80021e0 <memcpy>
 80012e0:	e0bf0404 	addi	r2,fp,-1008
 80012e4:	e0bee715 	stw	r2,-1124(fp)
						10, 0, -10, 0,
						-10, 0, 10, 0,
						15, -5, -20, 2};
	ev[8] = Event_new(8, cTI, cRI, cNI, cI);
 80012e8:	e0bee717 	ldw	r2,-1124(fp)
 80012ec:	d8800015 	stw	r2,0(sp)
 80012f0:	01000204 	movi	r4,8
 80012f4:	e17ee417 	ldw	r5,-1136(fp)
 80012f8:	e1bee517 	ldw	r6,-1132(fp)
 80012fc:	e1fee617 	ldw	r7,-1128(fp)
 8001300:	8000a600 	call	8000a60 <Event_new>
 8001304:	00c20074 	movhi	r3,2049
 8001308:	18fd8404 	addi	r3,r3,-2544
 800130c:	18800815 	stw	r2,32(r3)

	cTI = (int[4]) {23, 20, 24, 3};
 8001310:	008005c4 	movi	r2,23
 8001314:	e0bf0015 	stw	r2,-1024(fp)
 8001318:	00800504 	movi	r2,20
 800131c:	e0bf0115 	stw	r2,-1020(fp)
 8001320:	00800604 	movi	r2,24
 8001324:	e0bf0215 	stw	r2,-1016(fp)
 8001328:	008000c4 	movi	r2,3
 800132c:	e0bf0315 	stw	r2,-1012(fp)
 8001330:	e0bf0004 	addi	r2,fp,-1024
 8001334:	e0bee415 	stw	r2,-1136(fp)
	cRI = (int[4]) {21, 19, 1, 6};
 8001338:	00800544 	movi	r2,21
 800133c:	e0befc15 	stw	r2,-1040(fp)
 8001340:	008004c4 	movi	r2,19
 8001344:	e0befd15 	stw	r2,-1036(fp)
 8001348:	00800044 	movi	r2,1
 800134c:	e0befe15 	stw	r2,-1032(fp)
 8001350:	00800184 	movi	r2,6
 8001354:	e0beff15 	stw	r2,-1028(fp)
 8001358:	e0befc04 	addi	r2,fp,-1040
 800135c:	e0bee515 	stw	r2,-1132(fp)
	cNI = (int[4]) {0, 0, 0, 0};
 8001360:	e03ef815 	stw	zero,-1056(fp)
 8001364:	e03ef915 	stw	zero,-1052(fp)
 8001368:	e03efa15 	stw	zero,-1048(fp)
 800136c:	e03efb15 	stw	zero,-1044(fp)
 8001370:	e0bef804 	addi	r2,fp,-1056
 8001374:	e0bee615 	stw	r2,-1128(fp)
	cI  = (int[16]) { 	-10, -10, 10, 1,
 8001378:	00820074 	movhi	r2,2049
 800137c:	10b69404 	addi	r2,r2,-9648
 8001380:	e13ee804 	addi	r4,fp,-1120
 8001384:	1007883a 	mov	r3,r2
 8001388:	00801004 	movi	r2,64
 800138c:	180b883a 	mov	r5,r3
 8001390:	100d883a 	mov	r6,r2
 8001394:	80021e00 	call	80021e0 <memcpy>
 8001398:	e0bee804 	addi	r2,fp,-1120
 800139c:	e0bee715 	stw	r2,-1124(fp)
						-15, -10, 15, 1,
						10, 0, -20, 1,
						15, -5, -20, 2};
	ev[9] = Event_new(9, cTI, cRI, cNI, cI);
 80013a0:	e0bee717 	ldw	r2,-1124(fp)
 80013a4:	d8800015 	stw	r2,0(sp)
 80013a8:	01000244 	movi	r4,9
 80013ac:	e17ee417 	ldw	r5,-1136(fp)
 80013b0:	e1bee517 	ldw	r6,-1132(fp)
 80013b4:	e1fee617 	ldw	r7,-1128(fp)
 80013b8:	8000a600 	call	8000a60 <Event_new>
 80013bc:	00c20074 	movhi	r3,2049
 80013c0:	18fd8404 	addi	r3,r3,-2544
 80013c4:	18800915 	stw	r2,36(r3)

}
 80013c8:	e037883a 	mov	sp,fp
 80013cc:	dfc00117 	ldw	ra,4(sp)
 80013d0:	df000017 	ldw	fp,0(sp)
 80013d4:	dec00204 	addi	sp,sp,8
 80013d8:	f800283a 	ret

080013dc <printChoices>:

void printChoices(Event* e){
 80013dc:	deffe104 	addi	sp,sp,-124
 80013e0:	dfc01e15 	stw	ra,120(sp)
 80013e4:	df001d15 	stw	fp,116(sp)
 80013e8:	dc001c15 	stw	r16,112(sp)
 80013ec:	df001c04 	addi	fp,sp,112
 80013f0:	e13fff15 	stw	r4,-4(fp)
	curTextY = 26;
 80013f4:	00800684 	movi	r2,26
 80013f8:	d0a31915 	stw	r2,-29596(gp)
	//numChoices = 0;

	addToScreen(XPADDING, "What do you do?\n\0");
 80013fc:	d0a00817 	ldw	r2,-32736(gp)
 8001400:	1009883a 	mov	r4,r2
 8001404:	01420074 	movhi	r5,2049
 8001408:	2976a404 	addi	r5,r5,-9584
 800140c:	80015d40 	call	80015d4 <addToScreen>

	int i;
	Choice* a = e->choices;
 8001410:	e0bfff17 	ldw	r2,-4(fp)
 8001414:	10800117 	ldw	r2,4(r2)
 8001418:	e0bfe515 	stw	r2,-108(fp)
	for(i = 0; i < 4; i++){
 800141c:	e03fe415 	stw	zero,-112(fp)
 8001420:	00002a06 	br	80014cc <printChoices+0xf0>
		if(a[i].nextEventI != -1){ // we don't print a choice with nextEvent index of -1
 8001424:	e0bfe417 	ldw	r2,-112(fp)
 8001428:	1009883a 	mov	r4,r2
 800142c:	01400704 	movi	r5,28
 8001430:	8001a0c0 	call	8001a0c <__mulsi3>
 8001434:	e0ffe517 	ldw	r3,-108(fp)
 8001438:	1885883a 	add	r2,r3,r2
 800143c:	10800217 	ldw	r2,8(r2)
 8001440:	10bfffe0 	cmpeqi	r2,r2,-1
 8001444:	10001e1e 	bne	r2,zero,80014c0 <printChoices+0xe4>
			//numChoices++;
			char buf[100];
			sprintf(buf, "%c. %s\n\n", (char)(i+97), choiceTexts[(a[i]).textI]);
 8001448:	e0bfe417 	ldw	r2,-112(fp)
 800144c:	10801844 	addi	r2,r2,97
 8001450:	14003fcc 	andi	r16,r2,255
 8001454:	8400201c 	xori	r16,r16,128
 8001458:	843fe004 	addi	r16,r16,-128
 800145c:	e0bfe417 	ldw	r2,-112(fp)
 8001460:	1009883a 	mov	r4,r2
 8001464:	01400704 	movi	r5,28
 8001468:	8001a0c0 	call	8001a0c <__mulsi3>
 800146c:	e0ffe517 	ldw	r3,-108(fp)
 8001470:	1885883a 	add	r2,r3,r2
 8001474:	10800017 	ldw	r2,0(r2)
 8001478:	00c20074 	movhi	r3,2049
 800147c:	18f78f04 	addi	r3,r3,-8644
 8001480:	1085883a 	add	r2,r2,r2
 8001484:	1085883a 	add	r2,r2,r2
 8001488:	1885883a 	add	r2,r3,r2
 800148c:	10800017 	ldw	r2,0(r2)
 8001490:	e0ffe604 	addi	r3,fp,-104
 8001494:	1809883a 	mov	r4,r3
 8001498:	01420074 	movhi	r5,2049
 800149c:	2976a904 	addi	r5,r5,-9564
 80014a0:	800d883a 	mov	r6,r16
 80014a4:	100f883a 	mov	r7,r2
 80014a8:	80023dc0 	call	80023dc <sprintf>
			addToScreen(XPADDING, buf);
 80014ac:	d0e00817 	ldw	r3,-32736(gp)
 80014b0:	e0bfe604 	addi	r2,fp,-104
 80014b4:	1809883a 	mov	r4,r3
 80014b8:	100b883a 	mov	r5,r2
 80014bc:	80015d40 	call	80015d4 <addToScreen>

	addToScreen(XPADDING, "What do you do?\n\0");

	int i;
	Choice* a = e->choices;
	for(i = 0; i < 4; i++){
 80014c0:	e0bfe417 	ldw	r2,-112(fp)
 80014c4:	10800044 	addi	r2,r2,1
 80014c8:	e0bfe415 	stw	r2,-112(fp)
 80014cc:	e0bfe417 	ldw	r2,-112(fp)
 80014d0:	10800110 	cmplti	r2,r2,4
 80014d4:	103fd31e 	bne	r2,zero,8001424 <printChoices+0x48>
			sprintf(buf, "%c. %s\n\n", (char)(i+97), choiceTexts[(a[i]).textI]);
			addToScreen(XPADDING, buf);
			//prints("%c. %s\n", (char)(i+97), choiceTexts[(a[i]).textI]);
		}
	}
	curTextY += 2;
 80014d8:	d0a31917 	ldw	r2,-29596(gp)
 80014dc:	10800084 	addi	r2,r2,2
 80014e0:	d0a31915 	stw	r2,-29596(gp)
	if(curTextY >= (SCRHIGHT - YPADDING) ){
 80014e4:	d0e00a17 	ldw	r3,-32728(gp)
 80014e8:	d0a00717 	ldw	r2,-32740(gp)
 80014ec:	1885c83a 	sub	r2,r3,r2
 80014f0:	d0e31917 	ldw	r3,-29596(gp)
 80014f4:	18800216 	blt	r3,r2,8001500 <printChoices+0x124>
		curTextY = YPADDING;
 80014f8:	d0a00717 	ldw	r2,-32740(gp)
 80014fc:	d0a31915 	stw	r2,-29596(gp)
	}
	//prints("\n\n");
}
 8001500:	e037883a 	mov	sp,fp
 8001504:	dfc00217 	ldw	ra,8(sp)
 8001508:	df000117 	ldw	fp,4(sp)
 800150c:	dc000017 	ldw	r16,0(sp)
 8001510:	dec00304 	addi	sp,sp,12
 8001514:	f800283a 	ret

08001518 <blinkText>:

// this function assumes only one line of text, which is sanely selected
void blinkText(int x, int y, char* text){
 8001518:	defffc04 	addi	sp,sp,-16
 800151c:	df000315 	stw	fp,12(sp)
 8001520:	df000304 	addi	fp,sp,12
 8001524:	e13ffd15 	stw	r4,-12(fp)
 8001528:	e17ffe15 	stw	r5,-8(fp)
 800152c:	e1bfff15 	stw	r6,-4(fp)
	// implementation would work better with interrupts
}
 8001530:	e037883a 	mov	sp,fp
 8001534:	df000017 	ldw	fp,0(sp)
 8001538:	dec00104 	addi	sp,sp,4
 800153c:	f800283a 	ret

08001540 <waitPress>:

void waitPress(){
 8001540:	defffd04 	addi	sp,sp,-12
 8001544:	dfc00215 	stw	ra,8(sp)
 8001548:	df000115 	stw	fp,4(sp)
 800154c:	df000104 	addi	fp,sp,4
	int i = 0;
 8001550:	e03fff15 	stw	zero,-4(fp)
	while(!((*press & 0x1))){	// while no key pressed
 8001554:	00000306 	br	8001564 <waitPress+0x24>
		i++;	// wait
 8001558:	e0bfff17 	ldw	r2,-4(fp)
 800155c:	10800044 	addi	r2,r2,1
 8001560:	e0bfff15 	stw	r2,-4(fp)
	// implementation would work better with interrupts
}

void waitPress(){
	int i = 0;
	while(!((*press & 0x1))){	// while no key pressed
 8001564:	d0a00517 	ldw	r2,-32748(gp)
 8001568:	10800003 	ldbu	r2,0(r2)
 800156c:	10803fcc 	andi	r2,r2,255
 8001570:	1080004c 	andi	r2,r2,1
 8001574:	103ff826 	beq	r2,zero,8001558 <waitPress+0x18>
		i++;	// wait
	}
	waitRelease();	// then wait for a release of the key
 8001578:	80015900 	call	8001590 <waitRelease>
}
 800157c:	e037883a 	mov	sp,fp
 8001580:	dfc00117 	ldw	ra,4(sp)
 8001584:	df000017 	ldw	fp,0(sp)
 8001588:	dec00204 	addi	sp,sp,8
 800158c:	f800283a 	ret

08001590 <waitRelease>:

void waitRelease(){
 8001590:	defffe04 	addi	sp,sp,-8
 8001594:	df000115 	stw	fp,4(sp)
 8001598:	df000104 	addi	fp,sp,4
	int i = 0;
 800159c:	e03fff15 	stw	zero,-4(fp)
	while(*press & 0x1){
 80015a0:	00000306 	br	80015b0 <waitRelease+0x20>
		i++;
 80015a4:	e0bfff17 	ldw	r2,-4(fp)
 80015a8:	10800044 	addi	r2,r2,1
 80015ac:	e0bfff15 	stw	r2,-4(fp)
	waitRelease();	// then wait for a release of the key
}

void waitRelease(){
	int i = 0;
	while(*press & 0x1){
 80015b0:	d0a00517 	ldw	r2,-32748(gp)
 80015b4:	10800003 	ldbu	r2,0(r2)
 80015b8:	10803fcc 	andi	r2,r2,255
 80015bc:	1080004c 	andi	r2,r2,1
 80015c0:	103ff81e 	bne	r2,zero,80015a4 <waitRelease+0x14>
		i++;
	}
}
 80015c4:	e037883a 	mov	sp,fp
 80015c8:	df000017 	ldw	fp,0(sp)
 80015cc:	dec00104 	addi	sp,sp,4
 80015d0:	f800283a 	ret

080015d4 <addToScreen>:

void addToScreen(int x, char* text_ptr)
{
 80015d4:	deffe204 	addi	sp,sp,-120
 80015d8:	dfc01d15 	stw	ra,116(sp)
 80015dc:	df001c15 	stw	fp,112(sp)
 80015e0:	df001c04 	addi	fp,sp,112
 80015e4:	e13ffe15 	stw	r4,-8(fp)
 80015e8:	e17fff15 	stw	r5,-4(fp)
	//char cur = text_ptr[0];
	char buf[100];	// buffer to parse multi-line strings
	buf[0] = '\0'; // init first one, in case we are passed a string of just '\0'
 80015ec:	e03fe505 	stb	zero,-108(fp)
	int pos = 0;
 80015f0:	e03fe415 	stw	zero,-112(fp)

	while ( *(text_ptr) ){	// while char array not terminated
 80015f4:	00004506 	br	800170c <addToScreen+0x138>
		if(*(text_ptr) == '\n'){	// if current char is a newline
 80015f8:	e0bfff17 	ldw	r2,-4(fp)
 80015fc:	10800003 	ldbu	r2,0(r2)
 8001600:	10803fcc 	andi	r2,r2,255
 8001604:	1080201c 	xori	r2,r2,128
 8001608:	10bfe004 	addi	r2,r2,-128
 800160c:	10800298 	cmpnei	r2,r2,10
 8001610:	1000161e 	bne	r2,zero,800166c <addToScreen+0x98>
			buf[pos] = '\0';		// terminate the buffer
 8001614:	e0ffe504 	addi	r3,fp,-108
 8001618:	e0bfe417 	ldw	r2,-112(fp)
 800161c:	1885883a 	add	r2,r3,r2
 8001620:	10000005 	stb	zero,0(r2)
			VGA_text(x, curTextY, buf);	// push to screen
 8001624:	d0e31917 	ldw	r3,-29596(gp)
 8001628:	e0bfe504 	addi	r2,fp,-108
 800162c:	e13ffe17 	ldw	r4,-8(fp)
 8001630:	180b883a 	mov	r5,r3
 8001634:	100d883a 	mov	r6,r2
 8001638:	80018dc0 	call	80018dc <VGA_text>
			pos = 0;				// reset buffer position
 800163c:	e03fe415 	stw	zero,-112(fp)

			curTextY++;				// increment Y, with bounds
 8001640:	d0a31917 	ldw	r2,-29596(gp)
 8001644:	10800044 	addi	r2,r2,1
 8001648:	d0a31915 	stw	r2,-29596(gp)
			if(curTextY >= SCRHIGHT - YPADDING){
 800164c:	d0e00a17 	ldw	r3,-32728(gp)
 8001650:	d0a00717 	ldw	r2,-32740(gp)
 8001654:	1885c83a 	sub	r2,r3,r2
 8001658:	d0e31917 	ldw	r3,-29596(gp)
 800165c:	18802816 	blt	r3,r2,8001700 <addToScreen+0x12c>
				curTextY = YPADDING;
 8001660:	d0a00717 	ldw	r2,-32740(gp)
 8001664:	d0a31915 	stw	r2,-29596(gp)
 8001668:	00002506 	br	8001700 <addToScreen+0x12c>
			}
		}
		else{	// if current char isn't a newline
			if(pos + x >= (SCRWIDTH - x) ){ // we hit the edge of our writable screen space
 800166c:	e0ffe417 	ldw	r3,-112(fp)
 8001670:	e0bffe17 	ldw	r2,-8(fp)
 8001674:	1887883a 	add	r3,r3,r2
 8001678:	d1200917 	ldw	r4,-32732(gp)
 800167c:	e0bffe17 	ldw	r2,-8(fp)
 8001680:	2085c83a 	sub	r2,r4,r2
 8001684:	18801516 	blt	r3,r2,80016dc <addToScreen+0x108>
				buf[pos] = '\0';		// terminate the buffer
 8001688:	e0ffe504 	addi	r3,fp,-108
 800168c:	e0bfe417 	ldw	r2,-112(fp)
 8001690:	1885883a 	add	r2,r3,r2
 8001694:	10000005 	stb	zero,0(r2)
				VGA_text(x, curTextY, buf);	// push to screen
 8001698:	d0e31917 	ldw	r3,-29596(gp)
 800169c:	e0bfe504 	addi	r2,fp,-108
 80016a0:	e13ffe17 	ldw	r4,-8(fp)
 80016a4:	180b883a 	mov	r5,r3
 80016a8:	100d883a 	mov	r6,r2
 80016ac:	80018dc0 	call	80018dc <VGA_text>
				pos = 0;				// reset buffer position
 80016b0:	e03fe415 	stw	zero,-112(fp)

				curTextY++;				// increment Y, with bounds
 80016b4:	d0a31917 	ldw	r2,-29596(gp)
 80016b8:	10800044 	addi	r2,r2,1
 80016bc:	d0a31915 	stw	r2,-29596(gp)
				if(curTextY >= SCRHIGHT - YPADDING){
 80016c0:	d0e00a17 	ldw	r3,-32728(gp)
 80016c4:	d0a00717 	ldw	r2,-32740(gp)
 80016c8:	1885c83a 	sub	r2,r3,r2
 80016cc:	d0e31917 	ldw	r3,-29596(gp)
 80016d0:	18800216 	blt	r3,r2,80016dc <addToScreen+0x108>
					curTextY = YPADDING;
 80016d4:	d0a00717 	ldw	r2,-32740(gp)
 80016d8:	d0a31915 	stw	r2,-29596(gp)
				}
			}

			buf[pos] = *(text_ptr);	// add it to the buffer
 80016dc:	e0bfff17 	ldw	r2,-4(fp)
 80016e0:	10c00003 	ldbu	r3,0(r2)
 80016e4:	e13fe504 	addi	r4,fp,-108
 80016e8:	e0bfe417 	ldw	r2,-112(fp)
 80016ec:	2085883a 	add	r2,r4,r2
 80016f0:	10c00005 	stb	r3,0(r2)
			pos++;
 80016f4:	e0bfe417 	ldw	r2,-112(fp)
 80016f8:	10800044 	addi	r2,r2,1
 80016fc:	e0bfe415 	stw	r2,-112(fp)
		}

		text_ptr++;	// move on
 8001700:	e0bfff17 	ldw	r2,-4(fp)
 8001704:	10800044 	addi	r2,r2,1
 8001708:	e0bfff15 	stw	r2,-4(fp)
	//char cur = text_ptr[0];
	char buf[100];	// buffer to parse multi-line strings
	buf[0] = '\0'; // init first one, in case we are passed a string of just '\0'
	int pos = 0;

	while ( *(text_ptr) ){	// while char array not terminated
 800170c:	e0bfff17 	ldw	r2,-4(fp)
 8001710:	10800003 	ldbu	r2,0(r2)
 8001714:	10803fcc 	andi	r2,r2,255
 8001718:	1080201c 	xori	r2,r2,128
 800171c:	10bfe004 	addi	r2,r2,-128
 8001720:	103fb51e 	bne	r2,zero,80015f8 <addToScreen+0x24>
			pos++;
		}

		text_ptr++;	// move on
	}
	buf[pos] = '\0';
 8001724:	e0ffe504 	addi	r3,fp,-108
 8001728:	e0bfe417 	ldw	r2,-112(fp)
 800172c:	1885883a 	add	r2,r3,r2
 8001730:	10000005 	stb	zero,0(r2)
	VGA_text(x, curTextY, buf);	// push out whatever's left in the buffer (last sentence)
 8001734:	d0e31917 	ldw	r3,-29596(gp)
 8001738:	e0bfe504 	addi	r2,fp,-108
 800173c:	e13ffe17 	ldw	r4,-8(fp)
 8001740:	180b883a 	mov	r5,r3
 8001744:	100d883a 	mov	r6,r2
 8001748:	80018dc0 	call	80018dc <VGA_text>
	//VGA_text(x, curTextY, text_ptr);
	curTextY++;
 800174c:	d0a31917 	ldw	r2,-29596(gp)
 8001750:	10800044 	addi	r2,r2,1
 8001754:	d0a31915 	stw	r2,-29596(gp)
	if(curTextY >= (SCRHIGHT - YPADDING) ){
 8001758:	d0e00a17 	ldw	r3,-32728(gp)
 800175c:	d0a00717 	ldw	r2,-32740(gp)
 8001760:	1885c83a 	sub	r2,r3,r2
 8001764:	d0e31917 	ldw	r3,-29596(gp)
 8001768:	18800216 	blt	r3,r2,8001774 <addToScreen+0x1a0>
		curTextY = YPADDING;
 800176c:	d0a00717 	ldw	r2,-32740(gp)
 8001770:	d0a31915 	stw	r2,-29596(gp)
	}
}
 8001774:	e037883a 	mov	sp,fp
 8001778:	dfc00117 	ldw	ra,4(sp)
 800177c:	df000017 	ldw	fp,0(sp)
 8001780:	dec00204 	addi	sp,sp,8
 8001784:	f800283a 	ret

08001788 <initFrame>:

void initFrame()
{
 8001788:	defffe04 	addi	sp,sp,-8
 800178c:	dfc00115 	stw	ra,4(sp)
 8001790:	df000015 	stw	fp,0(sp)
 8001794:	d839883a 	mov	fp,sp
	flush();
 8001798:	80017b80 	call	80017b8 <flush>
	curTextY = YPADDING;
 800179c:	d0a00717 	ldw	r2,-32740(gp)
 80017a0:	d0a31915 	stw	r2,-29596(gp)
}
 80017a4:	e037883a 	mov	sp,fp
 80017a8:	dfc00117 	ldw	ra,4(sp)
 80017ac:	df000017 	ldw	fp,0(sp)
 80017b0:	dec00204 	addi	sp,sp,8
 80017b4:	f800283a 	ret

080017b8 <flush>:

void flush(){
 80017b8:	defffe04 	addi	sp,sp,-8
 80017bc:	dfc00115 	stw	ra,4(sp)
 80017c0:	df000015 	stw	fp,0(sp)
 80017c4:	d839883a 	mov	fp,sp
	flushPixels();
 80017c8:	80017e40 	call	80017e4 <flushPixels>
	flushChar();
 80017cc:	80018380 	call	8001838 <flushChar>
}
 80017d0:	e037883a 	mov	sp,fp
 80017d4:	dfc00117 	ldw	ra,4(sp)
 80017d8:	df000017 	ldw	fp,0(sp)
 80017dc:	dec00204 	addi	sp,sp,8
 80017e0:	f800283a 	ret

080017e4 <flushPixels>:

// this function is cursed i think
void flushPixels(){
 80017e4:	defffd04 	addi	sp,sp,-12
 80017e8:	dfc00215 	stw	ra,8(sp)
 80017ec:	df000115 	stw	fp,4(sp)
 80017f0:	df000104 	addi	fp,sp,4
	VGA_box (0, 0, SCRPIXW, SCRPIXH, BGCOLOR);
 80017f4:	d0e00b17 	ldw	r3,-32724(gp)
 80017f8:	d0a00c17 	ldw	r2,-32720(gp)
 80017fc:	d120060b 	ldhu	r4,-32744(gp)
 8001800:	213fffcc 	andi	r4,r4,65535
 8001804:	2120001c 	xori	r4,r4,32768
 8001808:	21200004 	addi	r4,r4,-32768
 800180c:	d9000015 	stw	r4,0(sp)
 8001810:	0009883a 	mov	r4,zero
 8001814:	000b883a 	mov	r5,zero
 8001818:	180d883a 	mov	r6,r3
 800181c:	100f883a 	mov	r7,r2
 8001820:	80019640 	call	8001964 <VGA_box>
}
 8001824:	e037883a 	mov	sp,fp
 8001828:	dfc00117 	ldw	ra,4(sp)
 800182c:	df000017 	ldw	fp,0(sp)
 8001830:	dec00204 	addi	sp,sp,8
 8001834:	f800283a 	ret

08001838 <flushChar>:

void flushChar()
{
 8001838:	deffe404 	addi	sp,sp,-112
 800183c:	dfc01b15 	stw	ra,108(sp)
 8001840:	df001a15 	stw	fp,104(sp)
 8001844:	df001a04 	addi	fp,sp,104
	char temp[100];
	//int screenWidth = 81;
	//int screenHeight = 59;
	int i = 0;
 8001848:	e03fe615 	stw	zero,-104(fp)
	for(i = 0; i < SCRWIDTH-1; i++){
 800184c:	e03fe615 	stw	zero,-104(fp)
 8001850:	00000806 	br	8001874 <flushChar+0x3c>
		temp[i] = ' ';
 8001854:	e0ffe704 	addi	r3,fp,-100
 8001858:	e0bfe617 	ldw	r2,-104(fp)
 800185c:	1885883a 	add	r2,r3,r2
 8001860:	00c00804 	movi	r3,32
 8001864:	10c00005 	stb	r3,0(r2)
{
	char temp[100];
	//int screenWidth = 81;
	//int screenHeight = 59;
	int i = 0;
	for(i = 0; i < SCRWIDTH-1; i++){
 8001868:	e0bfe617 	ldw	r2,-104(fp)
 800186c:	10800044 	addi	r2,r2,1
 8001870:	e0bfe615 	stw	r2,-104(fp)
 8001874:	d0a00917 	ldw	r2,-32732(gp)
 8001878:	10bfffc4 	addi	r2,r2,-1
 800187c:	e0ffe617 	ldw	r3,-104(fp)
 8001880:	18bff416 	blt	r3,r2,8001854 <flushChar+0x1c>
		temp[i] = ' ';
	}
	temp[SCRWIDTH] = '\0';
 8001884:	d0a00917 	ldw	r2,-32732(gp)
 8001888:	e0ffe704 	addi	r3,fp,-100
 800188c:	1885883a 	add	r2,r3,r2
 8001890:	10000005 	stb	zero,0(r2)

	for(i = 0; i <= SCRHIGHT; i++)
 8001894:	e03fe615 	stw	zero,-104(fp)
 8001898:	00000806 	br	80018bc <flushChar+0x84>
		VGA_text(0, i, temp);
 800189c:	e0bfe704 	addi	r2,fp,-100
 80018a0:	0009883a 	mov	r4,zero
 80018a4:	e17fe617 	ldw	r5,-104(fp)
 80018a8:	100d883a 	mov	r6,r2
 80018ac:	80018dc0 	call	80018dc <VGA_text>
	for(i = 0; i < SCRWIDTH-1; i++){
		temp[i] = ' ';
	}
	temp[SCRWIDTH] = '\0';

	for(i = 0; i <= SCRHIGHT; i++)
 80018b0:	e0bfe617 	ldw	r2,-104(fp)
 80018b4:	10800044 	addi	r2,r2,1
 80018b8:	e0bfe615 	stw	r2,-104(fp)
 80018bc:	d0e00a17 	ldw	r3,-32728(gp)
 80018c0:	e0bfe617 	ldw	r2,-104(fp)
 80018c4:	18bff50e 	bge	r3,r2,800189c <flushChar+0x64>
		VGA_text(0, i, temp);
}
 80018c8:	e037883a 	mov	sp,fp
 80018cc:	dfc00117 	ldw	ra,4(sp)
 80018d0:	df000017 	ldw	fp,0(sp)
 80018d4:	dec00204 	addi	sp,sp,8
 80018d8:	f800283a 	ret

080018dc <VGA_text>:

/****************************************************************************************
 * Subroutine to send a string of text to the VGA monitor
****************************************************************************************/
void VGA_text(int x, int y, char * text_ptr)
{
 80018dc:	defffb04 	addi	sp,sp,-20
 80018e0:	df000415 	stw	fp,16(sp)
 80018e4:	df000404 	addi	fp,sp,16
 80018e8:	e13ffd15 	stw	r4,-12(fp)
 80018ec:	e17ffe15 	stw	r5,-8(fp)
 80018f0:	e1bfff15 	stw	r6,-4(fp)
	int offset;

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
 80018f4:	e0bffe17 	ldw	r2,-8(fp)
 80018f8:	100691fa 	slli	r3,r2,7
 80018fc:	e0bffd17 	ldw	r2,-12(fp)
 8001900:	1885883a 	add	r2,r3,r2
 8001904:	e0bffc15 	stw	r2,-16(fp)
	while ( *(text_ptr) )
 8001908:	00000c06 	br	800193c <VGA_text+0x60>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
 800190c:	d0e00217 	ldw	r3,-32760(gp)
 8001910:	e0bffc17 	ldw	r2,-16(fp)
 8001914:	1885883a 	add	r2,r3,r2
 8001918:	e0ffff17 	ldw	r3,-4(fp)
 800191c:	18c00003 	ldbu	r3,0(r3)
 8001920:	10c00005 	stb	r3,0(r2)
		++text_ptr;
 8001924:	e0bfff17 	ldw	r2,-4(fp)
 8001928:	10800044 	addi	r2,r2,1
 800192c:	e0bfff15 	stw	r2,-4(fp)
		++offset;
 8001930:	e0bffc17 	ldw	r2,-16(fp)
 8001934:	10800044 	addi	r2,r2,1
 8001938:	e0bffc15 	stw	r2,-16(fp)
{
	int offset;

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
	while ( *(text_ptr) )
 800193c:	e0bfff17 	ldw	r2,-4(fp)
 8001940:	10800003 	ldbu	r2,0(r2)
 8001944:	10803fcc 	andi	r2,r2,255
 8001948:	1080201c 	xori	r2,r2,128
 800194c:	10bfe004 	addi	r2,r2,-128
 8001950:	103fee1e 	bne	r2,zero,800190c <VGA_text+0x30>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
		++text_ptr;
		++offset;
	}
}
 8001954:	e037883a 	mov	sp,fp
 8001958:	df000017 	ldw	fp,0(sp)
 800195c:	dec00104 	addi	sp,sp,4
 8001960:	f800283a 	ret

08001964 <VGA_box>:

/****************************************************************************************
 * Draw a filled rectangle on the VGA monitor
****************************************************************************************/
void VGA_box(int x1, int y1, int x2, int y2, short pixel_color)
{
 8001964:	defff704 	addi	sp,sp,-36
 8001968:	df000815 	stw	fp,32(sp)
 800196c:	df000804 	addi	fp,sp,32
 8001970:	e13ffb15 	stw	r4,-20(fp)
 8001974:	e17ffc15 	stw	r5,-16(fp)
 8001978:	e1bffd15 	stw	r6,-12(fp)
 800197c:	e1fffe15 	stw	r7,-8(fp)
 8001980:	e0800117 	ldw	r2,4(fp)
 8001984:	e0bfff0d 	sth	r2,-4(fp)
	int offset, row, col;

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
 8001988:	e0bffc17 	ldw	r2,-16(fp)
 800198c:	e0bff815 	stw	r2,-32(fp)
 8001990:	00001706 	br	80019f0 <VGA_box+0x8c>
	{
		col = x1;
 8001994:	e0bffb17 	ldw	r2,-20(fp)
 8001998:	e0bff915 	stw	r2,-28(fp)
		while (col <= x2)
 800199c:	00000e06 	br	80019d8 <VGA_box+0x74>
		{
			offset = (row << 9) + col;
 80019a0:	e0bff817 	ldw	r2,-32(fp)
 80019a4:	1006927a 	slli	r3,r2,9
 80019a8:	e0bff917 	ldw	r2,-28(fp)
 80019ac:	1885883a 	add	r2,r3,r2
 80019b0:	e0bffa15 	stw	r2,-24(fp)
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
 80019b4:	d0e00317 	ldw	r3,-32756(gp)
 80019b8:	e0bffa17 	ldw	r2,-24(fp)
 80019bc:	1085883a 	add	r2,r2,r2
 80019c0:	1885883a 	add	r2,r3,r2
 80019c4:	e0ffff0b 	ldhu	r3,-4(fp)
 80019c8:	10c0000d 	sth	r3,0(r2)
			++col;
 80019cc:	e0bff917 	ldw	r2,-28(fp)
 80019d0:	10800044 	addi	r2,r2,1
 80019d4:	e0bff915 	stw	r2,-28(fp)

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
	{
		col = x1;
		while (col <= x2)
 80019d8:	e0bff917 	ldw	r2,-28(fp)
 80019dc:	e0fffd17 	ldw	r3,-12(fp)
 80019e0:	18bfef0e 	bge	r3,r2,80019a0 <VGA_box+0x3c>
void VGA_box(int x1, int y1, int x2, int y2, short pixel_color)
{
	int offset, row, col;

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
 80019e4:	e0bff817 	ldw	r2,-32(fp)
 80019e8:	10800044 	addi	r2,r2,1
 80019ec:	e0bff815 	stw	r2,-32(fp)
 80019f0:	e0bff817 	ldw	r2,-32(fp)
 80019f4:	e0fffe17 	ldw	r3,-8(fp)
 80019f8:	18bfe60e 	bge	r3,r2,8001994 <VGA_box+0x30>
			offset = (row << 9) + col;
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
			++col;
		}
	}
}
 80019fc:	e037883a 	mov	sp,fp
 8001a00:	df000017 	ldw	fp,0(sp)
 8001a04:	dec00104 	addi	sp,sp,4
 8001a08:	f800283a 	ret

08001a0c <__mulsi3>:
 8001a0c:	0005883a 	mov	r2,zero
 8001a10:	20000726 	beq	r4,zero,8001a30 <__mulsi3+0x24>
 8001a14:	20c0004c 	andi	r3,r4,1
 8001a18:	2008d07a 	srli	r4,r4,1
 8001a1c:	18000126 	beq	r3,zero,8001a24 <__mulsi3+0x18>
 8001a20:	1145883a 	add	r2,r2,r5
 8001a24:	294b883a 	add	r5,r5,r5
 8001a28:	203ffa1e 	bne	r4,zero,8001a14 <__mulsi3+0x8>
 8001a2c:	f800283a 	ret
 8001a30:	f800283a 	ret

08001a34 <malloc>:
 8001a34:	00820074 	movhi	r2,2049
 8001a38:	10ba6f04 	addi	r2,r2,-5700
 8001a3c:	200b883a 	mov	r5,r4
 8001a40:	11000017 	ldw	r4,0(r2)
 8001a44:	8001a5c1 	jmpi	8001a5c <_malloc_r>

08001a48 <free>:
 8001a48:	00820074 	movhi	r2,2049
 8001a4c:	10ba6f04 	addi	r2,r2,-5700
 8001a50:	200b883a 	mov	r5,r4
 8001a54:	11000017 	ldw	r4,0(r2)
 8001a58:	80063281 	jmpi	8006328 <_free_r>

08001a5c <_malloc_r>:
 8001a5c:	defff604 	addi	sp,sp,-40
 8001a60:	dc800215 	stw	r18,8(sp)
 8001a64:	dfc00915 	stw	ra,36(sp)
 8001a68:	df000815 	stw	fp,32(sp)
 8001a6c:	ddc00715 	stw	r23,28(sp)
 8001a70:	dd800615 	stw	r22,24(sp)
 8001a74:	dd400515 	stw	r21,20(sp)
 8001a78:	dd000415 	stw	r20,16(sp)
 8001a7c:	dcc00315 	stw	r19,12(sp)
 8001a80:	dc400115 	stw	r17,4(sp)
 8001a84:	dc000015 	stw	r16,0(sp)
 8001a88:	288002c4 	addi	r2,r5,11
 8001a8c:	00c00584 	movi	r3,22
 8001a90:	2025883a 	mov	r18,r4
 8001a94:	18802b2e 	bgeu	r3,r2,8001b44 <_malloc_r+0xe8>
 8001a98:	047ffe04 	movi	r17,-8
 8001a9c:	1462703a 	and	r17,r2,r17
 8001aa0:	88002a16 	blt	r17,zero,8001b4c <_malloc_r+0xf0>
 8001aa4:	89402936 	bltu	r17,r5,8001b4c <_malloc_r+0xf0>
 8001aa8:	9009883a 	mov	r4,r18
 8001aac:	800b68c0 	call	800b68c <__malloc_lock>
 8001ab0:	00807dc4 	movi	r2,503
 8001ab4:	14402936 	bltu	r2,r17,8001b5c <_malloc_r+0x100>
 8001ab8:	8808d0fa 	srli	r4,r17,3
 8001abc:	04c20074 	movhi	r19,2049
 8001ac0:	9cf7bf04 	addi	r19,r19,-8452
 8001ac4:	2105883a 	add	r2,r4,r4
 8001ac8:	1085883a 	add	r2,r2,r2
 8001acc:	1085883a 	add	r2,r2,r2
 8001ad0:	9885883a 	add	r2,r19,r2
 8001ad4:	14000317 	ldw	r16,12(r2)
 8001ad8:	80815526 	beq	r16,r2,8002030 <_malloc_r+0x5d4>
 8001adc:	81000117 	ldw	r4,4(r16)
 8001ae0:	00bfff04 	movi	r2,-4
 8001ae4:	80c00317 	ldw	r3,12(r16)
 8001ae8:	2084703a 	and	r2,r4,r2
 8001aec:	8085883a 	add	r2,r16,r2
 8001af0:	11800117 	ldw	r6,4(r2)
 8001af4:	81400217 	ldw	r5,8(r16)
 8001af8:	9009883a 	mov	r4,r18
 8001afc:	31800054 	ori	r6,r6,1
 8001b00:	11800115 	stw	r6,4(r2)
 8001b04:	28c00315 	stw	r3,12(r5)
 8001b08:	19400215 	stw	r5,8(r3)
 8001b0c:	800b6ac0 	call	800b6ac <__malloc_unlock>
 8001b10:	80800204 	addi	r2,r16,8
 8001b14:	dfc00917 	ldw	ra,36(sp)
 8001b18:	df000817 	ldw	fp,32(sp)
 8001b1c:	ddc00717 	ldw	r23,28(sp)
 8001b20:	dd800617 	ldw	r22,24(sp)
 8001b24:	dd400517 	ldw	r21,20(sp)
 8001b28:	dd000417 	ldw	r20,16(sp)
 8001b2c:	dcc00317 	ldw	r19,12(sp)
 8001b30:	dc800217 	ldw	r18,8(sp)
 8001b34:	dc400117 	ldw	r17,4(sp)
 8001b38:	dc000017 	ldw	r16,0(sp)
 8001b3c:	dec00a04 	addi	sp,sp,40
 8001b40:	f800283a 	ret
 8001b44:	04400404 	movi	r17,16
 8001b48:	897fd72e 	bgeu	r17,r5,8001aa8 <_malloc_r+0x4c>
 8001b4c:	00800304 	movi	r2,12
 8001b50:	90800015 	stw	r2,0(r18)
 8001b54:	0005883a 	mov	r2,zero
 8001b58:	003fee06 	br	8001b14 <_malloc_r+0xb8>
 8001b5c:	8808d27a 	srli	r4,r17,9
 8001b60:	20007126 	beq	r4,zero,8001d28 <_malloc_r+0x2cc>
 8001b64:	00800104 	movi	r2,4
 8001b68:	1100eb36 	bltu	r2,r4,8001f18 <_malloc_r+0x4bc>
 8001b6c:	8808d1ba 	srli	r4,r17,6
 8001b70:	21000e04 	addi	r4,r4,56
 8001b74:	210b883a 	add	r5,r4,r4
 8001b78:	294b883a 	add	r5,r5,r5
 8001b7c:	294b883a 	add	r5,r5,r5
 8001b80:	04c20074 	movhi	r19,2049
 8001b84:	9cf7bf04 	addi	r19,r19,-8452
 8001b88:	994b883a 	add	r5,r19,r5
 8001b8c:	2c000317 	ldw	r16,12(r5)
 8001b90:	2c000e26 	beq	r5,r16,8001bcc <_malloc_r+0x170>
 8001b94:	80c00117 	ldw	r3,4(r16)
 8001b98:	01ffff04 	movi	r7,-4
 8001b9c:	018003c4 	movi	r6,15
 8001ba0:	19c6703a 	and	r3,r3,r7
 8001ba4:	1c45c83a 	sub	r2,r3,r17
 8001ba8:	30800716 	blt	r6,r2,8001bc8 <_malloc_r+0x16c>
 8001bac:	1000610e 	bge	r2,zero,8001d34 <_malloc_r+0x2d8>
 8001bb0:	84000317 	ldw	r16,12(r16)
 8001bb4:	2c000526 	beq	r5,r16,8001bcc <_malloc_r+0x170>
 8001bb8:	80c00117 	ldw	r3,4(r16)
 8001bbc:	19c6703a 	and	r3,r3,r7
 8001bc0:	1c45c83a 	sub	r2,r3,r17
 8001bc4:	30bff90e 	bge	r6,r2,8001bac <_malloc_r+0x150>
 8001bc8:	213fffc4 	addi	r4,r4,-1
 8001bcc:	21000044 	addi	r4,r4,1
 8001bd0:	9c000417 	ldw	r16,16(r19)
 8001bd4:	00c20074 	movhi	r3,2049
 8001bd8:	18f7bf04 	addi	r3,r3,-8452
 8001bdc:	1a400204 	addi	r9,r3,8
 8001be0:	8240ff26 	beq	r16,r9,8001fe0 <_malloc_r+0x584>
 8001be4:	81400117 	ldw	r5,4(r16)
 8001be8:	00bfff04 	movi	r2,-4
 8001bec:	018003c4 	movi	r6,15
 8001bf0:	2884703a 	and	r2,r5,r2
 8001bf4:	144bc83a 	sub	r5,r2,r17
 8001bf8:	3140ea16 	blt	r6,r5,8001fa4 <_malloc_r+0x548>
 8001bfc:	1a400515 	stw	r9,20(r3)
 8001c00:	1a400415 	stw	r9,16(r3)
 8001c04:	2800570e 	bge	r5,zero,8001d64 <_malloc_r+0x308>
 8001c08:	01407fc4 	movi	r5,511
 8001c0c:	2880ca36 	bltu	r5,r2,8001f38 <_malloc_r+0x4dc>
 8001c10:	1004d0fa 	srli	r2,r2,3
 8001c14:	02000044 	movi	r8,1
 8001c18:	19c00117 	ldw	r7,4(r3)
 8001c1c:	108b883a 	add	r5,r2,r2
 8001c20:	294b883a 	add	r5,r5,r5
 8001c24:	1005d0ba 	srai	r2,r2,2
 8001c28:	294b883a 	add	r5,r5,r5
 8001c2c:	28cb883a 	add	r5,r5,r3
 8001c30:	29800217 	ldw	r6,8(r5)
 8001c34:	4084983a 	sll	r2,r8,r2
 8001c38:	81400315 	stw	r5,12(r16)
 8001c3c:	81800215 	stw	r6,8(r16)
 8001c40:	11c4b03a 	or	r2,r2,r7
 8001c44:	18800115 	stw	r2,4(r3)
 8001c48:	2c000215 	stw	r16,8(r5)
 8001c4c:	34000315 	stw	r16,12(r6)
 8001c50:	200bd0ba 	srai	r5,r4,2
 8001c54:	00c00044 	movi	r3,1
 8001c58:	194a983a 	sll	r5,r3,r5
 8001c5c:	11404936 	bltu	r2,r5,8001d84 <_malloc_r+0x328>
 8001c60:	1146703a 	and	r3,r2,r5
 8001c64:	18000a1e 	bne	r3,zero,8001c90 <_malloc_r+0x234>
 8001c68:	00ffff04 	movi	r3,-4
 8001c6c:	294b883a 	add	r5,r5,r5
 8001c70:	20c8703a 	and	r4,r4,r3
 8001c74:	1146703a 	and	r3,r2,r5
 8001c78:	21000104 	addi	r4,r4,4
 8001c7c:	1800041e 	bne	r3,zero,8001c90 <_malloc_r+0x234>
 8001c80:	294b883a 	add	r5,r5,r5
 8001c84:	1146703a 	and	r3,r2,r5
 8001c88:	21000104 	addi	r4,r4,4
 8001c8c:	183ffc26 	beq	r3,zero,8001c80 <_malloc_r+0x224>
 8001c90:	023fff04 	movi	r8,-4
 8001c94:	01c003c4 	movi	r7,15
 8001c98:	2105883a 	add	r2,r4,r4
 8001c9c:	1085883a 	add	r2,r2,r2
 8001ca0:	1085883a 	add	r2,r2,r2
 8001ca4:	9899883a 	add	r12,r19,r2
 8001ca8:	62800304 	addi	r10,r12,12
 8001cac:	2017883a 	mov	r11,r4
 8001cb0:	54000017 	ldw	r16,0(r10)
 8001cb4:	51bffd04 	addi	r6,r10,-12
 8001cb8:	8180041e 	bne	r16,r6,8001ccc <_malloc_r+0x270>
 8001cbc:	0000ca06 	br	8001fe8 <_malloc_r+0x58c>
 8001cc0:	10001c0e 	bge	r2,zero,8001d34 <_malloc_r+0x2d8>
 8001cc4:	84000317 	ldw	r16,12(r16)
 8001cc8:	8180c726 	beq	r16,r6,8001fe8 <_malloc_r+0x58c>
 8001ccc:	80c00117 	ldw	r3,4(r16)
 8001cd0:	1a06703a 	and	r3,r3,r8
 8001cd4:	1c45c83a 	sub	r2,r3,r17
 8001cd8:	38bff90e 	bge	r7,r2,8001cc0 <_malloc_r+0x264>
 8001cdc:	81000317 	ldw	r4,12(r16)
 8001ce0:	81400217 	ldw	r5,8(r16)
 8001ce4:	8447883a 	add	r3,r16,r17
 8001ce8:	8c400054 	ori	r17,r17,1
 8001cec:	29000315 	stw	r4,12(r5)
 8001cf0:	21400215 	stw	r5,8(r4)
 8001cf4:	84400115 	stw	r17,4(r16)
 8001cf8:	1889883a 	add	r4,r3,r2
 8001cfc:	11400054 	ori	r5,r2,1
 8001d00:	98c00515 	stw	r3,20(r19)
 8001d04:	98c00415 	stw	r3,16(r19)
 8001d08:	20800015 	stw	r2,0(r4)
 8001d0c:	1a400315 	stw	r9,12(r3)
 8001d10:	1a400215 	stw	r9,8(r3)
 8001d14:	19400115 	stw	r5,4(r3)
 8001d18:	9009883a 	mov	r4,r18
 8001d1c:	800b6ac0 	call	800b6ac <__malloc_unlock>
 8001d20:	80800204 	addi	r2,r16,8
 8001d24:	003f7b06 	br	8001b14 <_malloc_r+0xb8>
 8001d28:	8808d0fa 	srli	r4,r17,3
 8001d2c:	210b883a 	add	r5,r4,r4
 8001d30:	003f9106 	br	8001b78 <_malloc_r+0x11c>
 8001d34:	80c7883a 	add	r3,r16,r3
 8001d38:	19400117 	ldw	r5,4(r3)
 8001d3c:	80800317 	ldw	r2,12(r16)
 8001d40:	81000217 	ldw	r4,8(r16)
 8001d44:	29400054 	ori	r5,r5,1
 8001d48:	19400115 	stw	r5,4(r3)
 8001d4c:	20800315 	stw	r2,12(r4)
 8001d50:	11000215 	stw	r4,8(r2)
 8001d54:	9009883a 	mov	r4,r18
 8001d58:	800b6ac0 	call	800b6ac <__malloc_unlock>
 8001d5c:	80800204 	addi	r2,r16,8
 8001d60:	003f6c06 	br	8001b14 <_malloc_r+0xb8>
 8001d64:	8085883a 	add	r2,r16,r2
 8001d68:	10c00117 	ldw	r3,4(r2)
 8001d6c:	9009883a 	mov	r4,r18
 8001d70:	18c00054 	ori	r3,r3,1
 8001d74:	10c00115 	stw	r3,4(r2)
 8001d78:	800b6ac0 	call	800b6ac <__malloc_unlock>
 8001d7c:	80800204 	addi	r2,r16,8
 8001d80:	003f6406 	br	8001b14 <_malloc_r+0xb8>
 8001d84:	9c000217 	ldw	r16,8(r19)
 8001d88:	00bfff04 	movi	r2,-4
 8001d8c:	85400117 	ldw	r21,4(r16)
 8001d90:	a8aa703a 	and	r21,r21,r2
 8001d94:	ac400336 	bltu	r21,r17,8001da4 <_malloc_r+0x348>
 8001d98:	ac45c83a 	sub	r2,r21,r17
 8001d9c:	00c003c4 	movi	r3,15
 8001da0:	18805316 	blt	r3,r2,8001ef0 <_malloc_r+0x494>
 8001da4:	d5e31d17 	ldw	r23,-29580(gp)
 8001da8:	d0e01717 	ldw	r3,-32676(gp)
 8001dac:	00bfffc4 	movi	r2,-1
 8001db0:	8579883a 	add	fp,r16,r21
 8001db4:	8def883a 	add	r23,r17,r23
 8001db8:	1880d226 	beq	r3,r2,8002104 <_malloc_r+0x6a8>
 8001dbc:	bdc403c4 	addi	r23,r23,4111
 8001dc0:	00bc0004 	movi	r2,-4096
 8001dc4:	b8ae703a 	and	r23,r23,r2
 8001dc8:	9009883a 	mov	r4,r18
 8001dcc:	b80b883a 	mov	r5,r23
 8001dd0:	80023200 	call	8002320 <_sbrk_r>
 8001dd4:	1029883a 	mov	r20,r2
 8001dd8:	00bfffc4 	movi	r2,-1
 8001ddc:	a080d126 	beq	r20,r2,8002124 <_malloc_r+0x6c8>
 8001de0:	a7009f36 	bltu	r20,fp,8002060 <_malloc_r+0x604>
 8001de4:	05820074 	movhi	r22,2049
 8001de8:	b5bd7a04 	addi	r22,r22,-2584
 8001dec:	b0800017 	ldw	r2,0(r22)
 8001df0:	b885883a 	add	r2,r23,r2
 8001df4:	b0800015 	stw	r2,0(r22)
 8001df8:	e500cf26 	beq	fp,r20,8002138 <_malloc_r+0x6dc>
 8001dfc:	d1201717 	ldw	r4,-32676(gp)
 8001e00:	00ffffc4 	movi	r3,-1
 8001e04:	20c0e026 	beq	r4,r3,8002188 <_malloc_r+0x72c>
 8001e08:	a739c83a 	sub	fp,r20,fp
 8001e0c:	1705883a 	add	r2,r2,fp
 8001e10:	b0800015 	stw	r2,0(r22)
 8001e14:	a08001cc 	andi	r2,r20,7
 8001e18:	1000a526 	beq	r2,zero,80020b0 <_malloc_r+0x654>
 8001e1c:	a0a9c83a 	sub	r20,r20,r2
 8001e20:	00c40204 	movi	r3,4104
 8001e24:	a5000204 	addi	r20,r20,8
 8001e28:	1885c83a 	sub	r2,r3,r2
 8001e2c:	a5c7883a 	add	r3,r20,r23
 8001e30:	18c3ffcc 	andi	r3,r3,4095
 8001e34:	10efc83a 	sub	r23,r2,r3
 8001e38:	9009883a 	mov	r4,r18
 8001e3c:	b80b883a 	mov	r5,r23
 8001e40:	80023200 	call	8002320 <_sbrk_r>
 8001e44:	00ffffc4 	movi	r3,-1
 8001e48:	10c0cc26 	beq	r2,r3,800217c <_malloc_r+0x720>
 8001e4c:	1505c83a 	sub	r2,r2,r20
 8001e50:	b887883a 	add	r3,r23,r2
 8001e54:	18c00054 	ori	r3,r3,1
 8001e58:	b0800017 	ldw	r2,0(r22)
 8001e5c:	9d000215 	stw	r20,8(r19)
 8001e60:	a0c00115 	stw	r3,4(r20)
 8001e64:	b885883a 	add	r2,r23,r2
 8001e68:	b0800015 	stw	r2,0(r22)
 8001e6c:	84c00e26 	beq	r16,r19,8001ea8 <_malloc_r+0x44c>
 8001e70:	00c003c4 	movi	r3,15
 8001e74:	1d40902e 	bgeu	r3,r21,80020b8 <_malloc_r+0x65c>
 8001e78:	ad7ffd04 	addi	r21,r21,-12
 8001e7c:	013ffe04 	movi	r4,-8
 8001e80:	a908703a 	and	r4,r21,r4
 8001e84:	810b883a 	add	r5,r16,r4
 8001e88:	01800144 	movi	r6,5
 8001e8c:	29800115 	stw	r6,4(r5)
 8001e90:	29800215 	stw	r6,8(r5)
 8001e94:	81400117 	ldw	r5,4(r16)
 8001e98:	2940004c 	andi	r5,r5,1
 8001e9c:	214ab03a 	or	r5,r4,r5
 8001ea0:	81400115 	stw	r5,4(r16)
 8001ea4:	1900ae36 	bltu	r3,r4,8002160 <_malloc_r+0x704>
 8001ea8:	d0e31c17 	ldw	r3,-29584(gp)
 8001eac:	1880012e 	bgeu	r3,r2,8001eb4 <_malloc_r+0x458>
 8001eb0:	d0a31c15 	stw	r2,-29584(gp)
 8001eb4:	d0e31b17 	ldw	r3,-29588(gp)
 8001eb8:	9c000217 	ldw	r16,8(r19)
 8001ebc:	1880012e 	bgeu	r3,r2,8001ec4 <_malloc_r+0x468>
 8001ec0:	d0a31b15 	stw	r2,-29588(gp)
 8001ec4:	80c00117 	ldw	r3,4(r16)
 8001ec8:	00bfff04 	movi	r2,-4
 8001ecc:	1886703a 	and	r3,r3,r2
 8001ed0:	1c45c83a 	sub	r2,r3,r17
 8001ed4:	1c400236 	bltu	r3,r17,8001ee0 <_malloc_r+0x484>
 8001ed8:	00c003c4 	movi	r3,15
 8001edc:	18800416 	blt	r3,r2,8001ef0 <_malloc_r+0x494>
 8001ee0:	9009883a 	mov	r4,r18
 8001ee4:	800b6ac0 	call	800b6ac <__malloc_unlock>
 8001ee8:	0005883a 	mov	r2,zero
 8001eec:	003f0906 	br	8001b14 <_malloc_r+0xb8>
 8001ef0:	88c00054 	ori	r3,r17,1
 8001ef4:	10800054 	ori	r2,r2,1
 8001ef8:	80c00115 	stw	r3,4(r16)
 8001efc:	8463883a 	add	r17,r16,r17
 8001f00:	88800115 	stw	r2,4(r17)
 8001f04:	9009883a 	mov	r4,r18
 8001f08:	9c400215 	stw	r17,8(r19)
 8001f0c:	800b6ac0 	call	800b6ac <__malloc_unlock>
 8001f10:	80800204 	addi	r2,r16,8
 8001f14:	003eff06 	br	8001b14 <_malloc_r+0xb8>
 8001f18:	00800504 	movi	r2,20
 8001f1c:	1100492e 	bgeu	r2,r4,8002044 <_malloc_r+0x5e8>
 8001f20:	00801504 	movi	r2,84
 8001f24:	11005c36 	bltu	r2,r4,8002098 <_malloc_r+0x63c>
 8001f28:	8808d33a 	srli	r4,r17,12
 8001f2c:	21001b84 	addi	r4,r4,110
 8001f30:	210b883a 	add	r5,r4,r4
 8001f34:	003f1006 	br	8001b78 <_malloc_r+0x11c>
 8001f38:	1006d27a 	srli	r3,r2,9
 8001f3c:	01400104 	movi	r5,4
 8001f40:	28c0432e 	bgeu	r5,r3,8002050 <_malloc_r+0x5f4>
 8001f44:	01400504 	movi	r5,20
 8001f48:	28c07036 	bltu	r5,r3,800210c <_malloc_r+0x6b0>
 8001f4c:	194016c4 	addi	r5,r3,91
 8001f50:	294d883a 	add	r6,r5,r5
 8001f54:	318d883a 	add	r6,r6,r6
 8001f58:	318d883a 	add	r6,r6,r6
 8001f5c:	998d883a 	add	r6,r19,r6
 8001f60:	30c00217 	ldw	r3,8(r6)
 8001f64:	01c20074 	movhi	r7,2049
 8001f68:	39f7bf04 	addi	r7,r7,-8452
 8001f6c:	19805726 	beq	r3,r6,80020cc <_malloc_r+0x670>
 8001f70:	01ffff04 	movi	r7,-4
 8001f74:	19400117 	ldw	r5,4(r3)
 8001f78:	29ca703a 	and	r5,r5,r7
 8001f7c:	1140022e 	bgeu	r2,r5,8001f88 <_malloc_r+0x52c>
 8001f80:	18c00217 	ldw	r3,8(r3)
 8001f84:	30fffb1e 	bne	r6,r3,8001f74 <_malloc_r+0x518>
 8001f88:	19400317 	ldw	r5,12(r3)
 8001f8c:	98800117 	ldw	r2,4(r19)
 8001f90:	81400315 	stw	r5,12(r16)
 8001f94:	80c00215 	stw	r3,8(r16)
 8001f98:	2c000215 	stw	r16,8(r5)
 8001f9c:	1c000315 	stw	r16,12(r3)
 8001fa0:	003f2b06 	br	8001c50 <_malloc_r+0x1f4>
 8001fa4:	8445883a 	add	r2,r16,r17
 8001fa8:	8c400054 	ori	r17,r17,1
 8001fac:	18800515 	stw	r2,20(r3)
 8001fb0:	18800415 	stw	r2,16(r3)
 8001fb4:	29000054 	ori	r4,r5,1
 8001fb8:	1147883a 	add	r3,r2,r5
 8001fbc:	84400115 	stw	r17,4(r16)
 8001fc0:	11000115 	stw	r4,4(r2)
 8001fc4:	12400315 	stw	r9,12(r2)
 8001fc8:	12400215 	stw	r9,8(r2)
 8001fcc:	19400015 	stw	r5,0(r3)
 8001fd0:	9009883a 	mov	r4,r18
 8001fd4:	800b6ac0 	call	800b6ac <__malloc_unlock>
 8001fd8:	80800204 	addi	r2,r16,8
 8001fdc:	003ecd06 	br	8001b14 <_malloc_r+0xb8>
 8001fe0:	18800117 	ldw	r2,4(r3)
 8001fe4:	003f1a06 	br	8001c50 <_malloc_r+0x1f4>
 8001fe8:	5ac00044 	addi	r11,r11,1
 8001fec:	588000cc 	andi	r2,r11,3
 8001ff0:	52800204 	addi	r10,r10,8
 8001ff4:	103f2e1e 	bne	r2,zero,8001cb0 <_malloc_r+0x254>
 8001ff8:	20c000cc 	andi	r3,r4,3
 8001ffc:	60bffe04 	addi	r2,r12,-8
 8002000:	18006f26 	beq	r3,zero,80021c0 <_malloc_r+0x764>
 8002004:	63000017 	ldw	r12,0(r12)
 8002008:	213fffc4 	addi	r4,r4,-1
 800200c:	60bffa26 	beq	r12,r2,8001ff8 <_malloc_r+0x59c>
 8002010:	98800117 	ldw	r2,4(r19)
 8002014:	294b883a 	add	r5,r5,r5
 8002018:	117f5a36 	bltu	r2,r5,8001d84 <_malloc_r+0x328>
 800201c:	283f5926 	beq	r5,zero,8001d84 <_malloc_r+0x328>
 8002020:	1146703a 	and	r3,r2,r5
 8002024:	18001626 	beq	r3,zero,8002080 <_malloc_r+0x624>
 8002028:	5809883a 	mov	r4,r11
 800202c:	003f1a06 	br	8001c98 <_malloc_r+0x23c>
 8002030:	80800204 	addi	r2,r16,8
 8002034:	84000517 	ldw	r16,20(r16)
 8002038:	143ea81e 	bne	r2,r16,8001adc <_malloc_r+0x80>
 800203c:	21000084 	addi	r4,r4,2
 8002040:	003ee306 	br	8001bd0 <_malloc_r+0x174>
 8002044:	210016c4 	addi	r4,r4,91
 8002048:	210b883a 	add	r5,r4,r4
 800204c:	003eca06 	br	8001b78 <_malloc_r+0x11c>
 8002050:	100ad1ba 	srli	r5,r2,6
 8002054:	29400e04 	addi	r5,r5,56
 8002058:	294d883a 	add	r6,r5,r5
 800205c:	003fbd06 	br	8001f54 <_malloc_r+0x4f8>
 8002060:	84ff6026 	beq	r16,r19,8001de4 <_malloc_r+0x388>
 8002064:	00820074 	movhi	r2,2049
 8002068:	10b7bf04 	addi	r2,r2,-8452
 800206c:	14000217 	ldw	r16,8(r2)
 8002070:	00bfff04 	movi	r2,-4
 8002074:	80c00117 	ldw	r3,4(r16)
 8002078:	1886703a 	and	r3,r3,r2
 800207c:	003f9406 	br	8001ed0 <_malloc_r+0x474>
 8002080:	294b883a 	add	r5,r5,r5
 8002084:	1146703a 	and	r3,r2,r5
 8002088:	5ac00104 	addi	r11,r11,4
 800208c:	183ffc26 	beq	r3,zero,8002080 <_malloc_r+0x624>
 8002090:	5809883a 	mov	r4,r11
 8002094:	003f0006 	br	8001c98 <_malloc_r+0x23c>
 8002098:	00805504 	movi	r2,340
 800209c:	11001336 	bltu	r2,r4,80020ec <_malloc_r+0x690>
 80020a0:	8808d3fa 	srli	r4,r17,15
 80020a4:	21001dc4 	addi	r4,r4,119
 80020a8:	210b883a 	add	r5,r4,r4
 80020ac:	003eb206 	br	8001b78 <_malloc_r+0x11c>
 80020b0:	00840004 	movi	r2,4096
 80020b4:	003f5d06 	br	8001e2c <_malloc_r+0x3d0>
 80020b8:	00800044 	movi	r2,1
 80020bc:	a0800115 	stw	r2,4(r20)
 80020c0:	a021883a 	mov	r16,r20
 80020c4:	0007883a 	mov	r3,zero
 80020c8:	003f8106 	br	8001ed0 <_malloc_r+0x474>
 80020cc:	280bd0ba 	srai	r5,r5,2
 80020d0:	01800044 	movi	r6,1
 80020d4:	38800117 	ldw	r2,4(r7)
 80020d8:	314c983a 	sll	r6,r6,r5
 80020dc:	180b883a 	mov	r5,r3
 80020e0:	3084b03a 	or	r2,r6,r2
 80020e4:	38800115 	stw	r2,4(r7)
 80020e8:	003fa906 	br	8001f90 <_malloc_r+0x534>
 80020ec:	00815504 	movi	r2,1364
 80020f0:	11001836 	bltu	r2,r4,8002154 <_malloc_r+0x6f8>
 80020f4:	8808d4ba 	srli	r4,r17,18
 80020f8:	21001f04 	addi	r4,r4,124
 80020fc:	210b883a 	add	r5,r4,r4
 8002100:	003e9d06 	br	8001b78 <_malloc_r+0x11c>
 8002104:	bdc00404 	addi	r23,r23,16
 8002108:	003f2f06 	br	8001dc8 <_malloc_r+0x36c>
 800210c:	01401504 	movi	r5,84
 8002110:	28c01f36 	bltu	r5,r3,8002190 <_malloc_r+0x734>
 8002114:	100ad33a 	srli	r5,r2,12
 8002118:	29401b84 	addi	r5,r5,110
 800211c:	294d883a 	add	r6,r5,r5
 8002120:	003f8c06 	br	8001f54 <_malloc_r+0x4f8>
 8002124:	9c000217 	ldw	r16,8(r19)
 8002128:	00bfff04 	movi	r2,-4
 800212c:	80c00117 	ldw	r3,4(r16)
 8002130:	1886703a 	and	r3,r3,r2
 8002134:	003f6606 	br	8001ed0 <_malloc_r+0x474>
 8002138:	e0c3ffcc 	andi	r3,fp,4095
 800213c:	183f2f1e 	bne	r3,zero,8001dfc <_malloc_r+0x3a0>
 8002140:	98c00217 	ldw	r3,8(r19)
 8002144:	bd49883a 	add	r4,r23,r21
 8002148:	21000054 	ori	r4,r4,1
 800214c:	19000115 	stw	r4,4(r3)
 8002150:	003f5506 	br	8001ea8 <_malloc_r+0x44c>
 8002154:	01403f04 	movi	r5,252
 8002158:	01001f84 	movi	r4,126
 800215c:	003e8606 	br	8001b78 <_malloc_r+0x11c>
 8002160:	9009883a 	mov	r4,r18
 8002164:	81400204 	addi	r5,r16,8
 8002168:	80063280 	call	8006328 <_free_r>
 800216c:	00820074 	movhi	r2,2049
 8002170:	10bd7a04 	addi	r2,r2,-2584
 8002174:	10800017 	ldw	r2,0(r2)
 8002178:	003f4b06 	br	8001ea8 <_malloc_r+0x44c>
 800217c:	00c00044 	movi	r3,1
 8002180:	002f883a 	mov	r23,zero
 8002184:	003f3406 	br	8001e58 <_malloc_r+0x3fc>
 8002188:	d5201715 	stw	r20,-32676(gp)
 800218c:	003f2106 	br	8001e14 <_malloc_r+0x3b8>
 8002190:	01405504 	movi	r5,340
 8002194:	28c00436 	bltu	r5,r3,80021a8 <_malloc_r+0x74c>
 8002198:	100ad3fa 	srli	r5,r2,15
 800219c:	29401dc4 	addi	r5,r5,119
 80021a0:	294d883a 	add	r6,r5,r5
 80021a4:	003f6b06 	br	8001f54 <_malloc_r+0x4f8>
 80021a8:	01415504 	movi	r5,1364
 80021ac:	28c00936 	bltu	r5,r3,80021d4 <_malloc_r+0x778>
 80021b0:	100ad4ba 	srli	r5,r2,18
 80021b4:	29401f04 	addi	r5,r5,124
 80021b8:	294d883a 	add	r6,r5,r5
 80021bc:	003f6506 	br	8001f54 <_malloc_r+0x4f8>
 80021c0:	98800117 	ldw	r2,4(r19)
 80021c4:	0146303a 	nor	r3,zero,r5
 80021c8:	1884703a 	and	r2,r3,r2
 80021cc:	98800115 	stw	r2,4(r19)
 80021d0:	003f9006 	br	8002014 <_malloc_r+0x5b8>
 80021d4:	01803f04 	movi	r6,252
 80021d8:	01401f84 	movi	r5,126
 80021dc:	003f5d06 	br	8001f54 <_malloc_r+0x4f8>

080021e0 <memcpy>:
 80021e0:	defffb04 	addi	sp,sp,-20
 80021e4:	dc000015 	stw	r16,0(sp)
 80021e8:	dfc00415 	stw	ra,16(sp)
 80021ec:	dcc00315 	stw	r19,12(sp)
 80021f0:	dc800215 	stw	r18,8(sp)
 80021f4:	dc400115 	stw	r17,4(sp)
 80021f8:	00c003c4 	movi	r3,15
 80021fc:	2021883a 	mov	r16,r4
 8002200:	3005883a 	mov	r2,r6
 8002204:	1980032e 	bgeu	r3,r6,8002214 <memcpy+0x34>
 8002208:	2906b03a 	or	r3,r5,r4
 800220c:	18c000cc 	andi	r3,r3,3
 8002210:	18001026 	beq	r3,zero,8002254 <memcpy+0x74>
 8002214:	8007883a 	mov	r3,r16
 8002218:	288f883a 	add	r7,r5,r2
 800221c:	10000526 	beq	r2,zero,8002234 <memcpy+0x54>
 8002220:	29800003 	ldbu	r6,0(r5)
 8002224:	18c00044 	addi	r3,r3,1
 8002228:	29400044 	addi	r5,r5,1
 800222c:	19bfffc5 	stb	r6,-1(r3)
 8002230:	29fffb1e 	bne	r5,r7,8002220 <memcpy+0x40>
 8002234:	8005883a 	mov	r2,r16
 8002238:	dfc00417 	ldw	ra,16(sp)
 800223c:	dcc00317 	ldw	r19,12(sp)
 8002240:	dc800217 	ldw	r18,8(sp)
 8002244:	dc400117 	ldw	r17,4(sp)
 8002248:	dc000017 	ldw	r16,0(sp)
 800224c:	dec00504 	addi	sp,sp,20
 8002250:	f800283a 	ret
 8002254:	32bffc04 	addi	r10,r6,-16
 8002258:	5014d13a 	srli	r10,r10,4
 800225c:	20800404 	addi	r2,r4,16
 8002260:	2007883a 	mov	r3,r4
 8002264:	5008913a 	slli	r4,r10,4
 8002268:	280f883a 	mov	r7,r5
 800226c:	1105883a 	add	r2,r2,r4
 8002270:	3a000017 	ldw	r8,0(r7)
 8002274:	18c00404 	addi	r3,r3,16
 8002278:	39c00404 	addi	r7,r7,16
 800227c:	1a3ffc15 	stw	r8,-16(r3)
 8002280:	3a3ffd17 	ldw	r8,-12(r7)
 8002284:	1a3ffd15 	stw	r8,-12(r3)
 8002288:	3a3ffe17 	ldw	r8,-8(r7)
 800228c:	1a3ffe15 	stw	r8,-8(r3)
 8002290:	3a3fff17 	ldw	r8,-4(r7)
 8002294:	1a3fff15 	stw	r8,-4(r3)
 8002298:	18bff51e 	bne	r3,r2,8002270 <memcpy+0x90>
 800229c:	52800044 	addi	r10,r10,1
 80022a0:	5014913a 	slli	r10,r10,4
 80022a4:	308003cc 	andi	r2,r6,15
 80022a8:	010000c4 	movi	r4,3
 80022ac:	8287883a 	add	r3,r16,r10
 80022b0:	2a95883a 	add	r10,r5,r10
 80022b4:	2080182e 	bgeu	r4,r2,8002318 <memcpy+0x138>
 80022b8:	147fff04 	addi	r17,r2,-4
 80022bc:	8808d0ba 	srli	r4,r17,2
 80022c0:	1a400104 	addi	r9,r3,4
 80022c4:	180d883a 	mov	r6,r3
 80022c8:	2105883a 	add	r2,r4,r4
 80022cc:	1085883a 	add	r2,r2,r2
 80022d0:	4893883a 	add	r9,r9,r2
 80022d4:	500f883a 	mov	r7,r10
 80022d8:	3a000017 	ldw	r8,0(r7)
 80022dc:	31800104 	addi	r6,r6,4
 80022e0:	39c00104 	addi	r7,r7,4
 80022e4:	323fff15 	stw	r8,-4(r6)
 80022e8:	327ffb1e 	bne	r6,r9,80022d8 <memcpy+0xf8>
 80022ec:	20800044 	addi	r2,r4,1
 80022f0:	1085883a 	add	r2,r2,r2
 80022f4:	1085883a 	add	r2,r2,r2
 80022f8:	017fff04 	movi	r5,-4
 80022fc:	18a5883a 	add	r18,r3,r2
 8002300:	50a7883a 	add	r19,r10,r2
 8002304:	8001a0c0 	call	8001a0c <__mulsi3>
 8002308:	1445883a 	add	r2,r2,r17
 800230c:	980b883a 	mov	r5,r19
 8002310:	9007883a 	mov	r3,r18
 8002314:	003fc006 	br	8002218 <memcpy+0x38>
 8002318:	500b883a 	mov	r5,r10
 800231c:	003fbe06 	br	8002218 <memcpy+0x38>

08002320 <_sbrk_r>:
 8002320:	defffd04 	addi	sp,sp,-12
 8002324:	dc400115 	stw	r17,4(sp)
 8002328:	dc000015 	stw	r16,0(sp)
 800232c:	2023883a 	mov	r17,r4
 8002330:	04020074 	movhi	r16,2049
 8002334:	843d7304 	addi	r16,r16,-2612
 8002338:	2809883a 	mov	r4,r5
 800233c:	dfc00215 	stw	ra,8(sp)
 8002340:	80000015 	stw	zero,0(r16)
 8002344:	800b8900 	call	800b890 <sbrk>
 8002348:	00ffffc4 	movi	r3,-1
 800234c:	10c00526 	beq	r2,r3,8002364 <_sbrk_r+0x44>
 8002350:	dfc00217 	ldw	ra,8(sp)
 8002354:	dc400117 	ldw	r17,4(sp)
 8002358:	dc000017 	ldw	r16,0(sp)
 800235c:	dec00304 	addi	sp,sp,12
 8002360:	f800283a 	ret
 8002364:	80c00017 	ldw	r3,0(r16)
 8002368:	183ff926 	beq	r3,zero,8002350 <_sbrk_r+0x30>
 800236c:	88c00015 	stw	r3,0(r17)
 8002370:	dfc00217 	ldw	ra,8(sp)
 8002374:	dc400117 	ldw	r17,4(sp)
 8002378:	dc000017 	ldw	r16,0(sp)
 800237c:	dec00304 	addi	sp,sp,12
 8002380:	f800283a 	ret

08002384 <_sprintf_r>:
 8002384:	deffe704 	addi	sp,sp,-100
 8002388:	2807883a 	mov	r3,r5
 800238c:	dfc01715 	stw	ra,92(sp)
 8002390:	d9c01815 	stw	r7,96(sp)
 8002394:	00a00034 	movhi	r2,32768
 8002398:	10bfffc4 	addi	r2,r2,-1
 800239c:	02008204 	movi	r8,520
 80023a0:	d8800215 	stw	r2,8(sp)
 80023a4:	d8800515 	stw	r2,20(sp)
 80023a8:	d80b883a 	mov	r5,sp
 80023ac:	d9c01804 	addi	r7,sp,96
 80023b0:	00bfffc4 	movi	r2,-1
 80023b4:	d8c00015 	stw	r3,0(sp)
 80023b8:	d8c00415 	stw	r3,16(sp)
 80023bc:	da00030d 	sth	r8,12(sp)
 80023c0:	d880038d 	sth	r2,14(sp)
 80023c4:	800247c0 	call	800247c <___vfprintf_internal_r>
 80023c8:	d8c00017 	ldw	r3,0(sp)
 80023cc:	18000005 	stb	zero,0(r3)
 80023d0:	dfc01717 	ldw	ra,92(sp)
 80023d4:	dec01904 	addi	sp,sp,100
 80023d8:	f800283a 	ret

080023dc <sprintf>:
 80023dc:	deffe604 	addi	sp,sp,-104
 80023e0:	2007883a 	mov	r3,r4
 80023e4:	dfc01715 	stw	ra,92(sp)
 80023e8:	d9801815 	stw	r6,96(sp)
 80023ec:	d9c01915 	stw	r7,100(sp)
 80023f0:	00820074 	movhi	r2,2049
 80023f4:	10ba6f04 	addi	r2,r2,-5700
 80023f8:	11000017 	ldw	r4,0(r2)
 80023fc:	00a00034 	movhi	r2,32768
 8002400:	10bfffc4 	addi	r2,r2,-1
 8002404:	280d883a 	mov	r6,r5
 8002408:	02008204 	movi	r8,520
 800240c:	d8800215 	stw	r2,8(sp)
 8002410:	d8800515 	stw	r2,20(sp)
 8002414:	d80b883a 	mov	r5,sp
 8002418:	d9c01804 	addi	r7,sp,96
 800241c:	00bfffc4 	movi	r2,-1
 8002420:	d8c00015 	stw	r3,0(sp)
 8002424:	d8c00415 	stw	r3,16(sp)
 8002428:	da00030d 	sth	r8,12(sp)
 800242c:	d880038d 	sth	r2,14(sp)
 8002430:	800247c0 	call	800247c <___vfprintf_internal_r>
 8002434:	d8c00017 	ldw	r3,0(sp)
 8002438:	18000005 	stb	zero,0(r3)
 800243c:	dfc01717 	ldw	ra,92(sp)
 8002440:	dec01a04 	addi	sp,sp,104
 8002444:	f800283a 	ret

08002448 <__sprint_r>:
 8002448:	30800217 	ldw	r2,8(r6)
 800244c:	defffe04 	addi	sp,sp,-8
 8002450:	dc000015 	stw	r16,0(sp)
 8002454:	dfc00115 	stw	ra,4(sp)
 8002458:	3021883a 	mov	r16,r6
 800245c:	10000226 	beq	r2,zero,8002468 <__sprint_r+0x20>
 8002460:	80065f80 	call	80065f8 <__sfvwrite_r>
 8002464:	80000215 	stw	zero,8(r16)
 8002468:	80000115 	stw	zero,4(r16)
 800246c:	dfc00117 	ldw	ra,4(sp)
 8002470:	dc000017 	ldw	r16,0(sp)
 8002474:	dec00204 	addi	sp,sp,8
 8002478:	f800283a 	ret

0800247c <___vfprintf_internal_r>:
 800247c:	defeb904 	addi	sp,sp,-1308
 8002480:	dc013d15 	stw	r16,1268(sp)
 8002484:	d9013015 	stw	r4,1216(sp)
 8002488:	dfc14615 	stw	ra,1304(sp)
 800248c:	df014515 	stw	fp,1300(sp)
 8002490:	ddc14415 	stw	r23,1296(sp)
 8002494:	dd814315 	stw	r22,1292(sp)
 8002498:	dd414215 	stw	r21,1288(sp)
 800249c:	dd014115 	stw	r20,1284(sp)
 80024a0:	dcc14015 	stw	r19,1280(sp)
 80024a4:	dc813f15 	stw	r18,1276(sp)
 80024a8:	dc413e15 	stw	r17,1272(sp)
 80024ac:	d9412915 	stw	r5,1188(sp)
 80024b0:	3021883a 	mov	r16,r6
 80024b4:	d9c12d15 	stw	r7,1204(sp)
 80024b8:	8006ce40 	call	8006ce4 <_localeconv_r>
 80024bc:	10800017 	ldw	r2,0(r2)
 80024c0:	d9013017 	ldw	r4,1216(sp)
 80024c4:	d8013315 	stw	zero,1228(sp)
 80024c8:	d8813715 	stw	r2,1244(sp)
 80024cc:	d8013415 	stw	zero,1232(sp)
 80024d0:	20000226 	beq	r4,zero,80024dc <___vfprintf_internal_r+0x60>
 80024d4:	20800e17 	ldw	r2,56(r4)
 80024d8:	10014b26 	beq	r2,zero,8002a08 <___vfprintf_internal_r+0x58c>
 80024dc:	d8c12917 	ldw	r3,1188(sp)
 80024e0:	1880030b 	ldhu	r2,12(r3)
 80024e4:	10c0020c 	andi	r3,r2,8
 80024e8:	18ffffcc 	andi	r3,r3,65535
 80024ec:	18e0001c 	xori	r3,r3,32768
 80024f0:	18e00004 	addi	r3,r3,-32768
 80024f4:	1800ed26 	beq	r3,zero,80028ac <___vfprintf_internal_r+0x430>
 80024f8:	d9012917 	ldw	r4,1188(sp)
 80024fc:	20c00417 	ldw	r3,16(r4)
 8002500:	1800ea26 	beq	r3,zero,80028ac <___vfprintf_internal_r+0x430>
 8002504:	1100068c 	andi	r4,r2,26
 8002508:	00c00284 	movi	r3,10
 800250c:	20c0f026 	beq	r4,r3,80028d0 <___vfprintf_internal_r+0x454>
 8002510:	d9010dc4 	addi	r4,sp,1079
 8002514:	d8810e04 	addi	r2,sp,1080
 8002518:	dc413017 	ldw	r17,1216(sp)
 800251c:	d8c00404 	addi	r3,sp,16
 8002520:	d9012615 	stw	r4,1176(sp)
 8002524:	1109c83a 	sub	r4,r2,r4
 8002528:	d8812715 	stw	r2,1180(sp)
 800252c:	d8c11b15 	stw	r3,1132(sp)
 8002530:	d8011d15 	stw	zero,1140(sp)
 8002534:	d8011c15 	stw	zero,1136(sp)
 8002538:	802b883a 	mov	r21,r16
 800253c:	d8013215 	stw	zero,1224(sp)
 8002540:	d8013615 	stw	zero,1240(sp)
 8002544:	d8013515 	stw	zero,1236(sp)
 8002548:	d8012c15 	stw	zero,1200(sp)
 800254c:	1813883a 	mov	r9,r3
 8002550:	d9013915 	stw	r4,1252(sp)
 8002554:	a8800007 	ldb	r2,0(r21)
 8002558:	1002f326 	beq	r2,zero,8003128 <___vfprintf_internal_r+0xcac>
 800255c:	00c00944 	movi	r3,37
 8002560:	a825883a 	mov	r18,r21
 8002564:	10c0021e 	bne	r2,r3,8002570 <___vfprintf_internal_r+0xf4>
 8002568:	00001406 	br	80025bc <___vfprintf_internal_r+0x140>
 800256c:	10c00326 	beq	r2,r3,800257c <___vfprintf_internal_r+0x100>
 8002570:	94800044 	addi	r18,r18,1
 8002574:	90800007 	ldb	r2,0(r18)
 8002578:	103ffc1e 	bne	r2,zero,800256c <___vfprintf_internal_r+0xf0>
 800257c:	9561c83a 	sub	r16,r18,r21
 8002580:	80000e26 	beq	r16,zero,80025bc <___vfprintf_internal_r+0x140>
 8002584:	da011d17 	ldw	r8,1140(sp)
 8002588:	d8c11c17 	ldw	r3,1136(sp)
 800258c:	4d400015 	stw	r21,0(r9)
 8002590:	4c000115 	stw	r16,4(r9)
 8002594:	4411883a 	add	r8,r8,r16
 8002598:	18c00044 	addi	r3,r3,1
 800259c:	da011d15 	stw	r8,1140(sp)
 80025a0:	d8c11c15 	stw	r3,1136(sp)
 80025a4:	008001c4 	movi	r2,7
 80025a8:	10c11016 	blt	r2,r3,80029ec <___vfprintf_internal_r+0x570>
 80025ac:	4a400204 	addi	r9,r9,8
 80025b0:	d8812c17 	ldw	r2,1200(sp)
 80025b4:	1405883a 	add	r2,r2,r16
 80025b8:	d8812c15 	stw	r2,1200(sp)
 80025bc:	90800007 	ldb	r2,0(r18)
 80025c0:	1000ee26 	beq	r2,zero,800297c <___vfprintf_internal_r+0x500>
 80025c4:	95400044 	addi	r21,r18,1
 80025c8:	94800047 	ldb	r18,1(r18)
 80025cc:	073fffc4 	movi	fp,-1
 80025d0:	e007883a 	mov	r3,fp
 80025d4:	d8012585 	stb	zero,1174(sp)
 80025d8:	d8012e15 	stw	zero,1208(sp)
 80025dc:	0021883a 	mov	r16,zero
 80025e0:	05001604 	movi	r20,88
 80025e4:	04c00244 	movi	r19,9
 80025e8:	4839883a 	mov	fp,r9
 80025ec:	ad400044 	addi	r21,r21,1
 80025f0:	90bff804 	addi	r2,r18,-32
 80025f4:	a080462e 	bgeu	r20,r2,8002710 <___vfprintf_internal_r+0x294>
 80025f8:	e013883a 	mov	r9,fp
 80025fc:	9000df26 	beq	r18,zero,800297c <___vfprintf_internal_r+0x500>
 8002600:	00c00044 	movi	r3,1
 8002604:	d8c12815 	stw	r3,1184(sp)
 8002608:	dc810405 	stb	r18,1040(sp)
 800260c:	d8012585 	stb	zero,1174(sp)
 8002610:	d8c12b15 	stw	r3,1196(sp)
 8002614:	dcc10404 	addi	r19,sp,1040
 8002618:	d8013115 	stw	zero,1220(sp)
 800261c:	80c0008c 	andi	r3,r16,2
 8002620:	d8c12a15 	stw	r3,1192(sp)
 8002624:	18000326 	beq	r3,zero,8002634 <___vfprintf_internal_r+0x1b8>
 8002628:	d8c12817 	ldw	r3,1184(sp)
 800262c:	18c00084 	addi	r3,r3,2
 8002630:	d8c12815 	stw	r3,1184(sp)
 8002634:	80c0210c 	andi	r3,r16,132
 8002638:	d8c12f15 	stw	r3,1212(sp)
 800263c:	1802251e 	bne	r3,zero,8002ed4 <___vfprintf_internal_r+0xa58>
 8002640:	d9012e17 	ldw	r4,1208(sp)
 8002644:	d8c12817 	ldw	r3,1184(sp)
 8002648:	20edc83a 	sub	r22,r4,r3
 800264c:	0582210e 	bge	zero,r22,8002ed4 <___vfprintf_internal_r+0xa58>
 8002650:	02800404 	movi	r10,16
 8002654:	da011d17 	ldw	r8,1140(sp)
 8002658:	d8c11c17 	ldw	r3,1136(sp)
 800265c:	05c20074 	movhi	r23,2049
 8002660:	bdf6bc84 	addi	r23,r23,-9486
 8002664:	5580200e 	bge	r10,r22,80026e8 <___vfprintf_internal_r+0x26c>
 8002668:	dc813815 	stw	r18,1248(sp)
 800266c:	5039883a 	mov	fp,r10
 8002670:	b825883a 	mov	r18,r23
 8002674:	050001c4 	movi	r20,7
 8002678:	b02f883a 	mov	r23,r22
 800267c:	802d883a 	mov	r22,r16
 8002680:	dc012917 	ldw	r16,1188(sp)
 8002684:	00000306 	br	8002694 <___vfprintf_internal_r+0x218>
 8002688:	bdfffc04 	addi	r23,r23,-16
 800268c:	4a400204 	addi	r9,r9,8
 8002690:	e5c0110e 	bge	fp,r23,80026d8 <___vfprintf_internal_r+0x25c>
 8002694:	4c800015 	stw	r18,0(r9)
 8002698:	4f000115 	stw	fp,4(r9)
 800269c:	42000404 	addi	r8,r8,16
 80026a0:	18c00044 	addi	r3,r3,1
 80026a4:	da011d15 	stw	r8,1140(sp)
 80026a8:	d8c11c15 	stw	r3,1136(sp)
 80026ac:	a0fff60e 	bge	r20,r3,8002688 <___vfprintf_internal_r+0x20c>
 80026b0:	8809883a 	mov	r4,r17
 80026b4:	800b883a 	mov	r5,r16
 80026b8:	d9811b04 	addi	r6,sp,1132
 80026bc:	80024480 	call	8002448 <__sprint_r>
 80026c0:	1000b41e 	bne	r2,zero,8002994 <___vfprintf_internal_r+0x518>
 80026c4:	bdfffc04 	addi	r23,r23,-16
 80026c8:	da011d17 	ldw	r8,1140(sp)
 80026cc:	d8c11c17 	ldw	r3,1136(sp)
 80026d0:	da400404 	addi	r9,sp,16
 80026d4:	e5ffef16 	blt	fp,r23,8002694 <___vfprintf_internal_r+0x218>
 80026d8:	b021883a 	mov	r16,r22
 80026dc:	b82d883a 	mov	r22,r23
 80026e0:	902f883a 	mov	r23,r18
 80026e4:	dc813817 	ldw	r18,1248(sp)
 80026e8:	4dc00015 	stw	r23,0(r9)
 80026ec:	4d800115 	stw	r22,4(r9)
 80026f0:	4591883a 	add	r8,r8,r22
 80026f4:	18c00044 	addi	r3,r3,1
 80026f8:	da011d15 	stw	r8,1140(sp)
 80026fc:	d8c11c15 	stw	r3,1136(sp)
 8002700:	008001c4 	movi	r2,7
 8002704:	10c3fe16 	blt	r2,r3,8003700 <___vfprintf_internal_r+0x1284>
 8002708:	4a400204 	addi	r9,r9,8
 800270c:	0001f306 	br	8002edc <___vfprintf_internal_r+0xa60>
 8002710:	1085883a 	add	r2,r2,r2
 8002714:	1085883a 	add	r2,r2,r2
 8002718:	01020034 	movhi	r4,2048
 800271c:	2109cb04 	addi	r4,r4,10028
 8002720:	1105883a 	add	r2,r2,r4
 8002724:	10800017 	ldw	r2,0(r2)
 8002728:	1000683a 	jmp	r2
 800272c:	08002e08 	cmpgei	zero,at,184
 8002730:	080025f8 	rdprs	zero,at,151
 8002734:	080025f8 	rdprs	zero,at,151
 8002738:	08002e20 	cmpeqi	zero,at,184
 800273c:	080025f8 	rdprs	zero,at,151
 8002740:	080025f8 	rdprs	zero,at,151
 8002744:	080025f8 	rdprs	zero,at,151
 8002748:	080025f8 	rdprs	zero,at,151
 800274c:	080025f8 	rdprs	zero,at,151
 8002750:	080025f8 	rdprs	zero,at,151
 8002754:	08002cd8 	cmpnei	zero,at,179
 8002758:	08002e6c 	andhi	zero,at,185
 800275c:	080025f8 	rdprs	zero,at,151
 8002760:	080028a0 	cmpeqi	zero,at,162
 8002764:	08002c40 	call	8002c4 <__alt_mem_sdram_controller_0-0x77ffd3c>
 8002768:	080025f8 	rdprs	zero,at,151
 800276c:	08002e2c 	andhi	zero,at,184
 8002770:	08002e38 	rdprs	zero,at,184
 8002774:	08002e38 	rdprs	zero,at,184
 8002778:	08002e38 	rdprs	zero,at,184
 800277c:	08002e38 	rdprs	zero,at,184
 8002780:	08002e38 	rdprs	zero,at,184
 8002784:	08002e38 	rdprs	zero,at,184
 8002788:	08002e38 	rdprs	zero,at,184
 800278c:	08002e38 	rdprs	zero,at,184
 8002790:	08002e38 	rdprs	zero,at,184
 8002794:	080025f8 	rdprs	zero,at,151
 8002798:	080025f8 	rdprs	zero,at,151
 800279c:	080025f8 	rdprs	zero,at,151
 80027a0:	080025f8 	rdprs	zero,at,151
 80027a4:	080025f8 	rdprs	zero,at,151
 80027a8:	080025f8 	rdprs	zero,at,151
 80027ac:	080025f8 	rdprs	zero,at,151
 80027b0:	080025f8 	rdprs	zero,at,151
 80027b4:	080025f8 	rdprs	zero,at,151
 80027b8:	080025f8 	rdprs	zero,at,151
 80027bc:	08002a10 	cmplti	zero,at,168
 80027c0:	08002ad0 	cmplti	zero,at,171
 80027c4:	080025f8 	rdprs	zero,at,151
 80027c8:	08002ad0 	cmplti	zero,at,171
 80027cc:	080025f8 	rdprs	zero,at,151
 80027d0:	080025f8 	rdprs	zero,at,151
 80027d4:	080025f8 	rdprs	zero,at,151
 80027d8:	080025f8 	rdprs	zero,at,151
 80027dc:	08002b64 	muli	zero,at,173
 80027e0:	080025f8 	rdprs	zero,at,151
 80027e4:	080025f8 	rdprs	zero,at,151
 80027e8:	08002b70 	cmpltui	zero,at,173
 80027ec:	080025f8 	rdprs	zero,at,151
 80027f0:	080025f8 	rdprs	zero,at,151
 80027f4:	080025f8 	rdprs	zero,at,151
 80027f8:	080025f8 	rdprs	zero,at,151
 80027fc:	080025f8 	rdprs	zero,at,151
 8002800:	08002ba8 	cmpgeui	zero,at,174
 8002804:	080025f8 	rdprs	zero,at,151
 8002808:	080025f8 	rdprs	zero,at,151
 800280c:	08002be4 	muli	zero,at,175
 8002810:	080025f8 	rdprs	zero,at,151
 8002814:	080025f8 	rdprs	zero,at,151
 8002818:	080025f8 	rdprs	zero,at,151
 800281c:	080025f8 	rdprs	zero,at,151
 8002820:	080025f8 	rdprs	zero,at,151
 8002824:	080025f8 	rdprs	zero,at,151
 8002828:	080025f8 	rdprs	zero,at,151
 800282c:	080025f8 	rdprs	zero,at,151
 8002830:	080025f8 	rdprs	zero,at,151
 8002834:	080025f8 	rdprs	zero,at,151
 8002838:	08002e7c 	xorhi	zero,at,185
 800283c:	08002eb0 	cmpltui	zero,at,186
 8002840:	08002ad0 	cmplti	zero,at,171
 8002844:	08002ad0 	cmplti	zero,at,171
 8002848:	08002ad0 	cmplti	zero,at,171
 800284c:	08002dfc 	xorhi	zero,at,183
 8002850:	08002eb0 	cmpltui	zero,at,186
 8002854:	080025f8 	rdprs	zero,at,151
 8002858:	080025f8 	rdprs	zero,at,151
 800285c:	08002c88 	cmpgei	zero,at,178
 8002860:	080025f8 	rdprs	zero,at,151
 8002864:	08002ca0 	cmpeqi	zero,at,178
 8002868:	08002ebc 	xorhi	zero,at,186
 800286c:	08002d00 	call	8002d0 <__alt_mem_sdram_controller_0-0x77ffd30>
 8002870:	08002d50 	cmplti	zero,at,181
 8002874:	080025f8 	rdprs	zero,at,151
 8002878:	08002d5c 	xori	zero,at,181
 800287c:	080025f8 	rdprs	zero,at,151
 8002880:	08002ec8 	cmpgei	zero,at,187
 8002884:	080025f8 	rdprs	zero,at,151
 8002888:	080025f8 	rdprs	zero,at,151
 800288c:	08002dc0 	call	8002dc <__alt_mem_sdram_controller_0-0x77ffd24>
 8002890:	d9012e17 	ldw	r4,1208(sp)
 8002894:	d8812d15 	stw	r2,1204(sp)
 8002898:	0109c83a 	sub	r4,zero,r4
 800289c:	d9012e15 	stw	r4,1208(sp)
 80028a0:	84000114 	ori	r16,r16,4
 80028a4:	ac800007 	ldb	r18,0(r21)
 80028a8:	003f5006 	br	80025ec <___vfprintf_internal_r+0x170>
 80028ac:	d9013017 	ldw	r4,1216(sp)
 80028b0:	d9412917 	ldw	r5,1188(sp)
 80028b4:	800431c0 	call	800431c <__swsetup_r>
 80028b8:	10003d1e 	bne	r2,zero,80029b0 <___vfprintf_internal_r+0x534>
 80028bc:	d8c12917 	ldw	r3,1188(sp)
 80028c0:	1880030b 	ldhu	r2,12(r3)
 80028c4:	00c00284 	movi	r3,10
 80028c8:	1100068c 	andi	r4,r2,26
 80028cc:	20ff101e 	bne	r4,r3,8002510 <___vfprintf_internal_r+0x94>
 80028d0:	d9012917 	ldw	r4,1188(sp)
 80028d4:	20c0038b 	ldhu	r3,14(r4)
 80028d8:	193fffcc 	andi	r4,r3,65535
 80028dc:	2120001c 	xori	r4,r4,32768
 80028e0:	21200004 	addi	r4,r4,-32768
 80028e4:	203f0a16 	blt	r4,zero,8002510 <___vfprintf_internal_r+0x94>
 80028e8:	d9012917 	ldw	r4,1188(sp)
 80028ec:	d9c12d17 	ldw	r7,1204(sp)
 80028f0:	10bfff4c 	andi	r2,r2,65533
 80028f4:	22800717 	ldw	r10,28(r4)
 80028f8:	22400917 	ldw	r9,36(r4)
 80028fc:	d9013017 	ldw	r4,1216(sp)
 8002900:	02010004 	movi	r8,1024
 8002904:	d881070d 	sth	r2,1052(sp)
 8002908:	d9410404 	addi	r5,sp,1040
 800290c:	d8800404 	addi	r2,sp,16
 8002910:	800d883a 	mov	r6,r16
 8002914:	d8c1078d 	sth	r3,1054(sp)
 8002918:	da810b15 	stw	r10,1068(sp)
 800291c:	da410d15 	stw	r9,1076(sp)
 8002920:	d8810415 	stw	r2,1040(sp)
 8002924:	d8810815 	stw	r2,1056(sp)
 8002928:	da010615 	stw	r8,1048(sp)
 800292c:	da010915 	stw	r8,1060(sp)
 8002930:	d8010a15 	stw	zero,1064(sp)
 8002934:	800247c0 	call	800247c <___vfprintf_internal_r>
 8002938:	d8812c15 	stw	r2,1200(sp)
 800293c:	10000416 	blt	r2,zero,8002950 <___vfprintf_internal_r+0x4d4>
 8002940:	d9013017 	ldw	r4,1216(sp)
 8002944:	d9410404 	addi	r5,sp,1040
 8002948:	8005ce80 	call	8005ce8 <_fflush_r>
 800294c:	1006501e 	bne	r2,zero,8004290 <___vfprintf_internal_r+0x1e14>
 8002950:	d881070b 	ldhu	r2,1052(sp)
 8002954:	1080100c 	andi	r2,r2,64
 8002958:	10bfffcc 	andi	r2,r2,65535
 800295c:	10a0001c 	xori	r2,r2,32768
 8002960:	10a00004 	addi	r2,r2,-32768
 8002964:	10001426 	beq	r2,zero,80029b8 <___vfprintf_internal_r+0x53c>
 8002968:	d8c12917 	ldw	r3,1188(sp)
 800296c:	1880030b 	ldhu	r2,12(r3)
 8002970:	10801014 	ori	r2,r2,64
 8002974:	1880030d 	sth	r2,12(r3)
 8002978:	00000f06 	br	80029b8 <___vfprintf_internal_r+0x53c>
 800297c:	d8811d17 	ldw	r2,1140(sp)
 8002980:	10000426 	beq	r2,zero,8002994 <___vfprintf_internal_r+0x518>
 8002984:	d9013017 	ldw	r4,1216(sp)
 8002988:	d9412917 	ldw	r5,1188(sp)
 800298c:	d9811b04 	addi	r6,sp,1132
 8002990:	80024480 	call	8002448 <__sprint_r>
 8002994:	d8c12917 	ldw	r3,1188(sp)
 8002998:	1880030b 	ldhu	r2,12(r3)
 800299c:	1080100c 	andi	r2,r2,64
 80029a0:	10bfffcc 	andi	r2,r2,65535
 80029a4:	10a0001c 	xori	r2,r2,32768
 80029a8:	10a00004 	addi	r2,r2,-32768
 80029ac:	10000226 	beq	r2,zero,80029b8 <___vfprintf_internal_r+0x53c>
 80029b0:	00bfffc4 	movi	r2,-1
 80029b4:	d8812c15 	stw	r2,1200(sp)
 80029b8:	d8812c17 	ldw	r2,1200(sp)
 80029bc:	dfc14617 	ldw	ra,1304(sp)
 80029c0:	df014517 	ldw	fp,1300(sp)
 80029c4:	ddc14417 	ldw	r23,1296(sp)
 80029c8:	dd814317 	ldw	r22,1292(sp)
 80029cc:	dd414217 	ldw	r21,1288(sp)
 80029d0:	dd014117 	ldw	r20,1284(sp)
 80029d4:	dcc14017 	ldw	r19,1280(sp)
 80029d8:	dc813f17 	ldw	r18,1276(sp)
 80029dc:	dc413e17 	ldw	r17,1272(sp)
 80029e0:	dc013d17 	ldw	r16,1268(sp)
 80029e4:	dec14704 	addi	sp,sp,1308
 80029e8:	f800283a 	ret
 80029ec:	d9412917 	ldw	r5,1188(sp)
 80029f0:	8809883a 	mov	r4,r17
 80029f4:	d9811b04 	addi	r6,sp,1132
 80029f8:	80024480 	call	8002448 <__sprint_r>
 80029fc:	103fe51e 	bne	r2,zero,8002994 <___vfprintf_internal_r+0x518>
 8002a00:	da400404 	addi	r9,sp,16
 8002a04:	003eea06 	br	80025b0 <___vfprintf_internal_r+0x134>
 8002a08:	8005fa40 	call	8005fa4 <__sinit>
 8002a0c:	003eb306 	br	80024dc <___vfprintf_internal_r+0x60>
 8002a10:	e013883a 	mov	r9,fp
 8002a14:	84000414 	ori	r16,r16,16
 8002a18:	1839883a 	mov	fp,r3
 8002a1c:	8080080c 	andi	r2,r16,32
 8002a20:	10034426 	beq	r2,zero,8003734 <___vfprintf_internal_r+0x12b8>
 8002a24:	d8c12d17 	ldw	r3,1204(sp)
 8002a28:	18800117 	ldw	r2,4(r3)
 8002a2c:	1dc00017 	ldw	r23,0(r3)
 8002a30:	18c00204 	addi	r3,r3,8
 8002a34:	d8c12d15 	stw	r3,1204(sp)
 8002a38:	102d883a 	mov	r22,r2
 8002a3c:	1003020e 	bge	r2,zero,8003648 <___vfprintf_internal_r+0x11cc>
 8002a40:	05efc83a 	sub	r23,zero,r23
 8002a44:	b804c03a 	cmpne	r2,r23,zero
 8002a48:	05adc83a 	sub	r22,zero,r22
 8002a4c:	b0adc83a 	sub	r22,r22,r2
 8002a50:	00800b44 	movi	r2,45
 8002a54:	d8812585 	stb	r2,1174(sp)
 8002a58:	00c00044 	movi	r3,1
 8002a5c:	bd84b03a 	or	r2,r23,r22
 8002a60:	e0000216 	blt	fp,zero,8002a6c <___vfprintf_internal_r+0x5f0>
 8002a64:	013fdfc4 	movi	r4,-129
 8002a68:	8120703a 	and	r16,r16,r4
 8002a6c:	1001cc1e 	bne	r2,zero,80031a0 <___vfprintf_internal_r+0xd24>
 8002a70:	e001cb1e 	bne	fp,zero,80031a0 <___vfprintf_internal_r+0xd24>
 8002a74:	18c03fcc 	andi	r3,r3,255
 8002a78:	1802ca1e 	bne	r3,zero,80035a4 <___vfprintf_internal_r+0x1128>
 8002a7c:	8080004c 	andi	r2,r16,1
 8002a80:	1002c826 	beq	r2,zero,80035a4 <___vfprintf_internal_r+0x1128>
 8002a84:	d8c13917 	ldw	r3,1252(sp)
 8002a88:	00800c04 	movi	r2,48
 8002a8c:	d8810dc5 	stb	r2,1079(sp)
 8002a90:	d8c12b15 	stw	r3,1196(sp)
 8002a94:	dcc10dc4 	addi	r19,sp,1079
 8002a98:	d8812b17 	ldw	r2,1196(sp)
 8002a9c:	d8812815 	stw	r2,1184(sp)
 8002aa0:	1700010e 	bge	r2,fp,8002aa8 <___vfprintf_internal_r+0x62c>
 8002aa4:	df012815 	stw	fp,1184(sp)
 8002aa8:	d8812583 	ldbu	r2,1174(sp)
 8002aac:	df013115 	stw	fp,1220(sp)
 8002ab0:	10803fcc 	andi	r2,r2,255
 8002ab4:	1080201c 	xori	r2,r2,128
 8002ab8:	10bfe004 	addi	r2,r2,-128
 8002abc:	103ed726 	beq	r2,zero,800261c <___vfprintf_internal_r+0x1a0>
 8002ac0:	d8c12817 	ldw	r3,1184(sp)
 8002ac4:	18c00044 	addi	r3,r3,1
 8002ac8:	d8c12815 	stw	r3,1184(sp)
 8002acc:	003ed306 	br	800261c <___vfprintf_internal_r+0x1a0>
 8002ad0:	8080020c 	andi	r2,r16,8
 8002ad4:	e013883a 	mov	r9,fp
 8002ad8:	1839883a 	mov	fp,r3
 8002adc:	1003a626 	beq	r2,zero,8003978 <___vfprintf_internal_r+0x14fc>
 8002ae0:	d9012d17 	ldw	r4,1204(sp)
 8002ae4:	25800017 	ldw	r22,0(r4)
 8002ae8:	25000117 	ldw	r20,4(r4)
 8002aec:	21000204 	addi	r4,r4,8
 8002af0:	d9012d15 	stw	r4,1204(sp)
 8002af4:	dd813315 	stw	r22,1228(sp)
 8002af8:	dd013415 	stw	r20,1232(sp)
 8002afc:	b009883a 	mov	r4,r22
 8002b00:	a00b883a 	mov	r5,r20
 8002b04:	da413c15 	stw	r9,1264(sp)
 8002b08:	800886c0 	call	800886c <__isinfd>
 8002b0c:	da413c17 	ldw	r9,1264(sp)
 8002b10:	b009883a 	mov	r4,r22
 8002b14:	a00b883a 	mov	r5,r20
 8002b18:	10041d26 	beq	r2,zero,8003b90 <___vfprintf_internal_r+0x1714>
 8002b1c:	000d883a 	mov	r6,zero
 8002b20:	000f883a 	mov	r7,zero
 8002b24:	800a6680 	call	800a668 <__ltdf2>
 8002b28:	da413c17 	ldw	r9,1264(sp)
 8002b2c:	1004da16 	blt	r2,zero,8003e98 <___vfprintf_internal_r+0x1a1c>
 8002b30:	d8812583 	ldbu	r2,1174(sp)
 8002b34:	00c011c4 	movi	r3,71
 8002b38:	1c83d116 	blt	r3,r18,8003a80 <___vfprintf_internal_r+0x1604>
 8002b3c:	04c20074 	movhi	r19,2049
 8002b40:	9cf6ac04 	addi	r19,r19,-9552
 8002b44:	00c000c4 	movi	r3,3
 8002b48:	d8c12815 	stw	r3,1184(sp)
 8002b4c:	00ffdfc4 	movi	r3,-129
 8002b50:	80e0703a 	and	r16,r16,r3
 8002b54:	d8c12817 	ldw	r3,1184(sp)
 8002b58:	d8013115 	stw	zero,1220(sp)
 8002b5c:	d8c12b15 	stw	r3,1196(sp)
 8002b60:	003fd306 	br	8002ab0 <___vfprintf_internal_r+0x634>
 8002b64:	84000214 	ori	r16,r16,8
 8002b68:	ac800007 	ldb	r18,0(r21)
 8002b6c:	003e9f06 	br	80025ec <___vfprintf_internal_r+0x170>
 8002b70:	e013883a 	mov	r9,fp
 8002b74:	84000414 	ori	r16,r16,16
 8002b78:	1839883a 	mov	fp,r3
 8002b7c:	8080080c 	andi	r2,r16,32
 8002b80:	10031d26 	beq	r2,zero,80037f8 <___vfprintf_internal_r+0x137c>
 8002b84:	d8812d17 	ldw	r2,1204(sp)
 8002b88:	0007883a 	mov	r3,zero
 8002b8c:	15c00017 	ldw	r23,0(r2)
 8002b90:	15800117 	ldw	r22,4(r2)
 8002b94:	10800204 	addi	r2,r2,8
 8002b98:	d8812d15 	stw	r2,1204(sp)
 8002b9c:	d8012585 	stb	zero,1174(sp)
 8002ba0:	bd84b03a 	or	r2,r23,r22
 8002ba4:	003fae06 	br	8002a60 <___vfprintf_internal_r+0x5e4>
 8002ba8:	e013883a 	mov	r9,fp
 8002bac:	84000414 	ori	r16,r16,16
 8002bb0:	1839883a 	mov	fp,r3
 8002bb4:	8080080c 	andi	r2,r16,32
 8002bb8:	1002e726 	beq	r2,zero,8003758 <___vfprintf_internal_r+0x12dc>
 8002bbc:	d8c12d17 	ldw	r3,1204(sp)
 8002bc0:	d9012d17 	ldw	r4,1204(sp)
 8002bc4:	1dc00017 	ldw	r23,0(r3)
 8002bc8:	1d800117 	ldw	r22,4(r3)
 8002bcc:	21000204 	addi	r4,r4,8
 8002bd0:	00c00044 	movi	r3,1
 8002bd4:	d9012d15 	stw	r4,1204(sp)
 8002bd8:	bd84b03a 	or	r2,r23,r22
 8002bdc:	d8012585 	stb	zero,1174(sp)
 8002be0:	003f9f06 	br	8002a60 <___vfprintf_internal_r+0x5e4>
 8002be4:	e013883a 	mov	r9,fp
 8002be8:	1839883a 	mov	fp,r3
 8002bec:	00c20074 	movhi	r3,2049
 8002bf0:	18f6b004 	addi	r3,r3,-9536
 8002bf4:	d8c13615 	stw	r3,1240(sp)
 8002bf8:	8080080c 	andi	r2,r16,32
 8002bfc:	10007726 	beq	r2,zero,8002ddc <___vfprintf_internal_r+0x960>
 8002c00:	d9012d17 	ldw	r4,1204(sp)
 8002c04:	25c00017 	ldw	r23,0(r4)
 8002c08:	25800117 	ldw	r22,4(r4)
 8002c0c:	21000204 	addi	r4,r4,8
 8002c10:	d9012d15 	stw	r4,1204(sp)
 8002c14:	8080004c 	andi	r2,r16,1
 8002c18:	1002c226 	beq	r2,zero,8003724 <___vfprintf_internal_r+0x12a8>
 8002c1c:	bd84b03a 	or	r2,r23,r22
 8002c20:	10035d26 	beq	r2,zero,8003998 <___vfprintf_internal_r+0x151c>
 8002c24:	00c00c04 	movi	r3,48
 8002c28:	d8c12505 	stb	r3,1172(sp)
 8002c2c:	dc812545 	stb	r18,1173(sp)
 8002c30:	84000094 	ori	r16,r16,2
 8002c34:	00c00084 	movi	r3,2
 8002c38:	d8012585 	stb	zero,1174(sp)
 8002c3c:	003f8806 	br	8002a60 <___vfprintf_internal_r+0x5e4>
 8002c40:	ac800007 	ldb	r18,0(r21)
 8002c44:	00c00a84 	movi	r3,42
 8002c48:	adc00044 	addi	r23,r21,1
 8002c4c:	90c57526 	beq	r18,r3,8004224 <___vfprintf_internal_r+0x1da8>
 8002c50:	95bff404 	addi	r22,r18,-48
 8002c54:	0009883a 	mov	r4,zero
 8002c58:	9d84ff36 	bltu	r19,r22,8004058 <___vfprintf_internal_r+0x1bdc>
 8002c5c:	01400284 	movi	r5,10
 8002c60:	8001a0c0 	call	8001a0c <__mulsi3>
 8002c64:	bc800007 	ldb	r18,0(r23)
 8002c68:	b089883a 	add	r4,r22,r2
 8002c6c:	bdc00044 	addi	r23,r23,1
 8002c70:	95bff404 	addi	r22,r18,-48
 8002c74:	9dbff92e 	bgeu	r19,r22,8002c5c <___vfprintf_internal_r+0x7e0>
 8002c78:	2007883a 	mov	r3,r4
 8002c7c:	20044316 	blt	r4,zero,8003d8c <___vfprintf_internal_r+0x1910>
 8002c80:	b82b883a 	mov	r21,r23
 8002c84:	003e5a06 	br	80025f0 <___vfprintf_internal_r+0x174>
 8002c88:	ac800007 	ldb	r18,0(r21)
 8002c8c:	01001b04 	movi	r4,108
 8002c90:	a805883a 	mov	r2,r21
 8002c94:	91045526 	beq	r18,r4,8003dec <___vfprintf_internal_r+0x1970>
 8002c98:	84000414 	ori	r16,r16,16
 8002c9c:	003e5306 	br	80025ec <___vfprintf_internal_r+0x170>
 8002ca0:	8080080c 	andi	r2,r16,32
 8002ca4:	e013883a 	mov	r9,fp
 8002ca8:	10034026 	beq	r2,zero,80039ac <___vfprintf_internal_r+0x1530>
 8002cac:	d9012d17 	ldw	r4,1204(sp)
 8002cb0:	20800017 	ldw	r2,0(r4)
 8002cb4:	d9012c17 	ldw	r4,1200(sp)
 8002cb8:	2007d7fa 	srai	r3,r4,31
 8002cbc:	d9012d17 	ldw	r4,1204(sp)
 8002cc0:	10c00115 	stw	r3,4(r2)
 8002cc4:	21000104 	addi	r4,r4,4
 8002cc8:	d9012d15 	stw	r4,1204(sp)
 8002ccc:	d9012c17 	ldw	r4,1200(sp)
 8002cd0:	11000015 	stw	r4,0(r2)
 8002cd4:	003e1f06 	br	8002554 <___vfprintf_internal_r+0xd8>
 8002cd8:	d9012d17 	ldw	r4,1204(sp)
 8002cdc:	21000017 	ldw	r4,0(r4)
 8002ce0:	d9012e15 	stw	r4,1208(sp)
 8002ce4:	d9012d17 	ldw	r4,1204(sp)
 8002ce8:	20800104 	addi	r2,r4,4
 8002cec:	d9012e17 	ldw	r4,1208(sp)
 8002cf0:	203ee716 	blt	r4,zero,8002890 <___vfprintf_internal_r+0x414>
 8002cf4:	d8812d15 	stw	r2,1204(sp)
 8002cf8:	ac800007 	ldb	r18,0(r21)
 8002cfc:	003e3b06 	br	80025ec <___vfprintf_internal_r+0x170>
 8002d00:	e013883a 	mov	r9,fp
 8002d04:	1839883a 	mov	fp,r3
 8002d08:	d8c12d17 	ldw	r3,1204(sp)
 8002d0c:	00800c04 	movi	r2,48
 8002d10:	01020074 	movhi	r4,2049
 8002d14:	2136b504 	addi	r4,r4,-9516
 8002d18:	1dc00017 	ldw	r23,0(r3)
 8002d1c:	18c00104 	addi	r3,r3,4
 8002d20:	d8812505 	stb	r2,1172(sp)
 8002d24:	00801e04 	movi	r2,120
 8002d28:	d8812545 	stb	r2,1173(sp)
 8002d2c:	d8c12d15 	stw	r3,1204(sp)
 8002d30:	002d883a 	mov	r22,zero
 8002d34:	84000094 	ori	r16,r16,2
 8002d38:	d9013615 	stw	r4,1240(sp)
 8002d3c:	00c00084 	movi	r3,2
 8002d40:	04801e04 	movi	r18,120
 8002d44:	b805883a 	mov	r2,r23
 8002d48:	d8012585 	stb	zero,1174(sp)
 8002d4c:	003f4406 	br	8002a60 <___vfprintf_internal_r+0x5e4>
 8002d50:	84000814 	ori	r16,r16,32
 8002d54:	ac800007 	ldb	r18,0(r21)
 8002d58:	003e2406 	br	80025ec <___vfprintf_internal_r+0x170>
 8002d5c:	d8812d17 	ldw	r2,1204(sp)
 8002d60:	d8012585 	stb	zero,1174(sp)
 8002d64:	e013883a 	mov	r9,fp
 8002d68:	14c00017 	ldw	r19,0(r2)
 8002d6c:	1839883a 	mov	fp,r3
 8002d70:	15c00104 	addi	r23,r2,4
 8002d74:	98045526 	beq	r19,zero,8003ecc <___vfprintf_internal_r+0x1a50>
 8002d78:	9809883a 	mov	r4,r19
 8002d7c:	18043116 	blt	r3,zero,8003e44 <___vfprintf_internal_r+0x19c8>
 8002d80:	000b883a 	mov	r5,zero
 8002d84:	180d883a 	mov	r6,r3
 8002d88:	da413c15 	stw	r9,1264(sp)
 8002d8c:	8006ec00 	call	8006ec0 <memchr>
 8002d90:	da413c17 	ldw	r9,1264(sp)
 8002d94:	10047a26 	beq	r2,zero,8003f80 <___vfprintf_internal_r+0x1b04>
 8002d98:	14c5c83a 	sub	r2,r2,r19
 8002d9c:	d8812b15 	stw	r2,1196(sp)
 8002da0:	e083d40e 	bge	fp,r2,8003cf4 <___vfprintf_internal_r+0x1878>
 8002da4:	df012815 	stw	fp,1184(sp)
 8002da8:	e004e416 	blt	fp,zero,800413c <___vfprintf_internal_r+0x1cc0>
 8002dac:	d8812583 	ldbu	r2,1174(sp)
 8002db0:	df012b15 	stw	fp,1196(sp)
 8002db4:	ddc12d15 	stw	r23,1204(sp)
 8002db8:	d8013115 	stw	zero,1220(sp)
 8002dbc:	003f3c06 	br	8002ab0 <___vfprintf_internal_r+0x634>
 8002dc0:	00820074 	movhi	r2,2049
 8002dc4:	10b6b504 	addi	r2,r2,-9516
 8002dc8:	d8813615 	stw	r2,1240(sp)
 8002dcc:	8080080c 	andi	r2,r16,32
 8002dd0:	e013883a 	mov	r9,fp
 8002dd4:	1839883a 	mov	fp,r3
 8002dd8:	103f891e 	bne	r2,zero,8002c00 <___vfprintf_internal_r+0x784>
 8002ddc:	8080040c 	andi	r2,r16,16
 8002de0:	1002c326 	beq	r2,zero,80038f0 <___vfprintf_internal_r+0x1474>
 8002de4:	d8812d17 	ldw	r2,1204(sp)
 8002de8:	002d883a 	mov	r22,zero
 8002dec:	15c00017 	ldw	r23,0(r2)
 8002df0:	10800104 	addi	r2,r2,4
 8002df4:	d8812d15 	stw	r2,1204(sp)
 8002df8:	003f8606 	br	8002c14 <___vfprintf_internal_r+0x798>
 8002dfc:	84001014 	ori	r16,r16,64
 8002e00:	ac800007 	ldb	r18,0(r21)
 8002e04:	003df906 	br	80025ec <___vfprintf_internal_r+0x170>
 8002e08:	d8812587 	ldb	r2,1174(sp)
 8002e0c:	1002e51e 	bne	r2,zero,80039a4 <___vfprintf_internal_r+0x1528>
 8002e10:	00800804 	movi	r2,32
 8002e14:	d8812585 	stb	r2,1174(sp)
 8002e18:	ac800007 	ldb	r18,0(r21)
 8002e1c:	003df306 	br	80025ec <___vfprintf_internal_r+0x170>
 8002e20:	84000054 	ori	r16,r16,1
 8002e24:	ac800007 	ldb	r18,0(r21)
 8002e28:	003df006 	br	80025ec <___vfprintf_internal_r+0x170>
 8002e2c:	84002014 	ori	r16,r16,128
 8002e30:	ac800007 	ldb	r18,0(r21)
 8002e34:	003ded06 	br	80025ec <___vfprintf_internal_r+0x170>
 8002e38:	0009883a 	mov	r4,zero
 8002e3c:	95bff404 	addi	r22,r18,-48
 8002e40:	182f883a 	mov	r23,r3
 8002e44:	01400284 	movi	r5,10
 8002e48:	8001a0c0 	call	8001a0c <__mulsi3>
 8002e4c:	ac800007 	ldb	r18,0(r21)
 8002e50:	1589883a 	add	r4,r2,r22
 8002e54:	ad400044 	addi	r21,r21,1
 8002e58:	95bff404 	addi	r22,r18,-48
 8002e5c:	9dbff92e 	bgeu	r19,r22,8002e44 <___vfprintf_internal_r+0x9c8>
 8002e60:	b807883a 	mov	r3,r23
 8002e64:	d9012e15 	stw	r4,1208(sp)
 8002e68:	003de106 	br	80025f0 <___vfprintf_internal_r+0x174>
 8002e6c:	00800ac4 	movi	r2,43
 8002e70:	d8812585 	stb	r2,1174(sp)
 8002e74:	ac800007 	ldb	r18,0(r21)
 8002e78:	003ddc06 	br	80025ec <___vfprintf_internal_r+0x170>
 8002e7c:	d8c12d17 	ldw	r3,1204(sp)
 8002e80:	d9012d17 	ldw	r4,1204(sp)
 8002e84:	e013883a 	mov	r9,fp
 8002e88:	18800017 	ldw	r2,0(r3)
 8002e8c:	21000104 	addi	r4,r4,4
 8002e90:	00c00044 	movi	r3,1
 8002e94:	d8c12815 	stw	r3,1184(sp)
 8002e98:	d8012585 	stb	zero,1174(sp)
 8002e9c:	d8810405 	stb	r2,1040(sp)
 8002ea0:	d9012d15 	stw	r4,1204(sp)
 8002ea4:	d8c12b15 	stw	r3,1196(sp)
 8002ea8:	dcc10404 	addi	r19,sp,1040
 8002eac:	003dda06 	br	8002618 <___vfprintf_internal_r+0x19c>
 8002eb0:	e013883a 	mov	r9,fp
 8002eb4:	1839883a 	mov	fp,r3
 8002eb8:	003ed806 	br	8002a1c <___vfprintf_internal_r+0x5a0>
 8002ebc:	e013883a 	mov	r9,fp
 8002ec0:	1839883a 	mov	fp,r3
 8002ec4:	003f2d06 	br	8002b7c <___vfprintf_internal_r+0x700>
 8002ec8:	e013883a 	mov	r9,fp
 8002ecc:	1839883a 	mov	fp,r3
 8002ed0:	003f3806 	br	8002bb4 <___vfprintf_internal_r+0x738>
 8002ed4:	da011d17 	ldw	r8,1140(sp)
 8002ed8:	d8c11c17 	ldw	r3,1136(sp)
 8002edc:	d8812587 	ldb	r2,1174(sp)
 8002ee0:	10000b26 	beq	r2,zero,8002f10 <___vfprintf_internal_r+0xa94>
 8002ee4:	d8812584 	addi	r2,sp,1174
 8002ee8:	48800015 	stw	r2,0(r9)
 8002eec:	00800044 	movi	r2,1
 8002ef0:	48800115 	stw	r2,4(r9)
 8002ef4:	4091883a 	add	r8,r8,r2
 8002ef8:	1887883a 	add	r3,r3,r2
 8002efc:	da011d15 	stw	r8,1140(sp)
 8002f00:	d8c11c15 	stw	r3,1136(sp)
 8002f04:	008001c4 	movi	r2,7
 8002f08:	10c18e16 	blt	r2,r3,8003544 <___vfprintf_internal_r+0x10c8>
 8002f0c:	4a400204 	addi	r9,r9,8
 8002f10:	d9012a17 	ldw	r4,1192(sp)
 8002f14:	20000b26 	beq	r4,zero,8002f44 <___vfprintf_internal_r+0xac8>
 8002f18:	d8812504 	addi	r2,sp,1172
 8002f1c:	48800015 	stw	r2,0(r9)
 8002f20:	00800084 	movi	r2,2
 8002f24:	48800115 	stw	r2,4(r9)
 8002f28:	4091883a 	add	r8,r8,r2
 8002f2c:	18c00044 	addi	r3,r3,1
 8002f30:	da011d15 	stw	r8,1140(sp)
 8002f34:	d8c11c15 	stw	r3,1136(sp)
 8002f38:	008001c4 	movi	r2,7
 8002f3c:	10c17816 	blt	r2,r3,8003520 <___vfprintf_internal_r+0x10a4>
 8002f40:	4a400204 	addi	r9,r9,8
 8002f44:	d9012f17 	ldw	r4,1212(sp)
 8002f48:	00802004 	movi	r2,128
 8002f4c:	2080fc26 	beq	r4,r2,8003340 <___vfprintf_internal_r+0xec4>
 8002f50:	d8813117 	ldw	r2,1220(sp)
 8002f54:	d9012b17 	ldw	r4,1196(sp)
 8002f58:	112fc83a 	sub	r23,r2,r4
 8002f5c:	05c02a0e 	bge	zero,r23,8003008 <___vfprintf_internal_r+0xb8c>
 8002f60:	07000404 	movi	fp,16
 8002f64:	05020074 	movhi	r20,2049
 8002f68:	a536c084 	addi	r20,r20,-9470
 8002f6c:	e5c01d0e 	bge	fp,r23,8002fe4 <___vfprintf_internal_r+0xb68>
 8002f70:	dc812a15 	stw	r18,1192(sp)
 8002f74:	058001c4 	movi	r22,7
 8002f78:	a025883a 	mov	r18,r20
 8002f7c:	8029883a 	mov	r20,r16
 8002f80:	dc012917 	ldw	r16,1188(sp)
 8002f84:	00000306 	br	8002f94 <___vfprintf_internal_r+0xb18>
 8002f88:	bdfffc04 	addi	r23,r23,-16
 8002f8c:	4a400204 	addi	r9,r9,8
 8002f90:	e5c0110e 	bge	fp,r23,8002fd8 <___vfprintf_internal_r+0xb5c>
 8002f94:	4c800015 	stw	r18,0(r9)
 8002f98:	4f000115 	stw	fp,4(r9)
 8002f9c:	42000404 	addi	r8,r8,16
 8002fa0:	18c00044 	addi	r3,r3,1
 8002fa4:	da011d15 	stw	r8,1140(sp)
 8002fa8:	d8c11c15 	stw	r3,1136(sp)
 8002fac:	b0fff60e 	bge	r22,r3,8002f88 <___vfprintf_internal_r+0xb0c>
 8002fb0:	8809883a 	mov	r4,r17
 8002fb4:	800b883a 	mov	r5,r16
 8002fb8:	d9811b04 	addi	r6,sp,1132
 8002fbc:	80024480 	call	8002448 <__sprint_r>
 8002fc0:	103e741e 	bne	r2,zero,8002994 <___vfprintf_internal_r+0x518>
 8002fc4:	bdfffc04 	addi	r23,r23,-16
 8002fc8:	da011d17 	ldw	r8,1140(sp)
 8002fcc:	d8c11c17 	ldw	r3,1136(sp)
 8002fd0:	da400404 	addi	r9,sp,16
 8002fd4:	e5ffef16 	blt	fp,r23,8002f94 <___vfprintf_internal_r+0xb18>
 8002fd8:	a021883a 	mov	r16,r20
 8002fdc:	9029883a 	mov	r20,r18
 8002fe0:	dc812a17 	ldw	r18,1192(sp)
 8002fe4:	4d000015 	stw	r20,0(r9)
 8002fe8:	4dc00115 	stw	r23,4(r9)
 8002fec:	45d1883a 	add	r8,r8,r23
 8002ff0:	18c00044 	addi	r3,r3,1
 8002ff4:	da011d15 	stw	r8,1140(sp)
 8002ff8:	d8c11c15 	stw	r3,1136(sp)
 8002ffc:	008001c4 	movi	r2,7
 8003000:	10c13e16 	blt	r2,r3,80034fc <___vfprintf_internal_r+0x1080>
 8003004:	4a400204 	addi	r9,r9,8
 8003008:	8080400c 	andi	r2,r16,256
 800300c:	1000831e 	bne	r2,zero,800321c <___vfprintf_internal_r+0xda0>
 8003010:	d8812b17 	ldw	r2,1196(sp)
 8003014:	4cc00015 	stw	r19,0(r9)
 8003018:	48800115 	stw	r2,4(r9)
 800301c:	4091883a 	add	r8,r8,r2
 8003020:	18c00044 	addi	r3,r3,1
 8003024:	da011d15 	stw	r8,1140(sp)
 8003028:	d8c11c15 	stw	r3,1136(sp)
 800302c:	008001c4 	movi	r2,7
 8003030:	10c05316 	blt	r2,r3,8003180 <___vfprintf_internal_r+0xd04>
 8003034:	4a400204 	addi	r9,r9,8
 8003038:	8400010c 	andi	r16,r16,4
 800303c:	80002e26 	beq	r16,zero,80030f8 <___vfprintf_internal_r+0xc7c>
 8003040:	d8812e17 	ldw	r2,1208(sp)
 8003044:	d8c12817 	ldw	r3,1184(sp)
 8003048:	10e1c83a 	sub	r16,r2,r3
 800304c:	04002a0e 	bge	zero,r16,80030f8 <___vfprintf_internal_r+0xc7c>
 8003050:	04800404 	movi	r18,16
 8003054:	d8c11c17 	ldw	r3,1136(sp)
 8003058:	05c20074 	movhi	r23,2049
 800305c:	bdf6bc84 	addi	r23,r23,-9486
 8003060:	9400170e 	bge	r18,r16,80030c0 <___vfprintf_internal_r+0xc44>
 8003064:	04c001c4 	movi	r19,7
 8003068:	dd012917 	ldw	r20,1188(sp)
 800306c:	00000306 	br	800307c <___vfprintf_internal_r+0xc00>
 8003070:	843ffc04 	addi	r16,r16,-16
 8003074:	4a400204 	addi	r9,r9,8
 8003078:	9400110e 	bge	r18,r16,80030c0 <___vfprintf_internal_r+0xc44>
 800307c:	4dc00015 	stw	r23,0(r9)
 8003080:	4c800115 	stw	r18,4(r9)
 8003084:	42000404 	addi	r8,r8,16
 8003088:	18c00044 	addi	r3,r3,1
 800308c:	da011d15 	stw	r8,1140(sp)
 8003090:	d8c11c15 	stw	r3,1136(sp)
 8003094:	98fff60e 	bge	r19,r3,8003070 <___vfprintf_internal_r+0xbf4>
 8003098:	8809883a 	mov	r4,r17
 800309c:	a00b883a 	mov	r5,r20
 80030a0:	d9811b04 	addi	r6,sp,1132
 80030a4:	80024480 	call	8002448 <__sprint_r>
 80030a8:	103e3a1e 	bne	r2,zero,8002994 <___vfprintf_internal_r+0x518>
 80030ac:	843ffc04 	addi	r16,r16,-16
 80030b0:	da011d17 	ldw	r8,1140(sp)
 80030b4:	d8c11c17 	ldw	r3,1136(sp)
 80030b8:	da400404 	addi	r9,sp,16
 80030bc:	943fef16 	blt	r18,r16,800307c <___vfprintf_internal_r+0xc00>
 80030c0:	4dc00015 	stw	r23,0(r9)
 80030c4:	4c000115 	stw	r16,4(r9)
 80030c8:	8211883a 	add	r8,r16,r8
 80030cc:	18c00044 	addi	r3,r3,1
 80030d0:	da011d15 	stw	r8,1140(sp)
 80030d4:	d8c11c15 	stw	r3,1136(sp)
 80030d8:	008001c4 	movi	r2,7
 80030dc:	10c0060e 	bge	r2,r3,80030f8 <___vfprintf_internal_r+0xc7c>
 80030e0:	d9412917 	ldw	r5,1188(sp)
 80030e4:	8809883a 	mov	r4,r17
 80030e8:	d9811b04 	addi	r6,sp,1132
 80030ec:	80024480 	call	8002448 <__sprint_r>
 80030f0:	103e281e 	bne	r2,zero,8002994 <___vfprintf_internal_r+0x518>
 80030f4:	da011d17 	ldw	r8,1140(sp)
 80030f8:	dd012817 	ldw	r20,1184(sp)
 80030fc:	d9012e17 	ldw	r4,1208(sp)
 8003100:	a100010e 	bge	r20,r4,8003108 <___vfprintf_internal_r+0xc8c>
 8003104:	2029883a 	mov	r20,r4
 8003108:	d8812c17 	ldw	r2,1200(sp)
 800310c:	1505883a 	add	r2,r2,r20
 8003110:	d8812c15 	stw	r2,1200(sp)
 8003114:	4000b91e 	bne	r8,zero,80033fc <___vfprintf_internal_r+0xf80>
 8003118:	d8011c15 	stw	zero,1136(sp)
 800311c:	a8800007 	ldb	r2,0(r21)
 8003120:	da400404 	addi	r9,sp,16
 8003124:	103d0d1e 	bne	r2,zero,800255c <___vfprintf_internal_r+0xe0>
 8003128:	a825883a 	mov	r18,r21
 800312c:	003d2306 	br	80025bc <___vfprintf_internal_r+0x140>
 8003130:	d9412917 	ldw	r5,1188(sp)
 8003134:	8809883a 	mov	r4,r17
 8003138:	d9811b04 	addi	r6,sp,1132
 800313c:	80024480 	call	8002448 <__sprint_r>
 8003140:	103e141e 	bne	r2,zero,8002994 <___vfprintf_internal_r+0x518>
 8003144:	da011d17 	ldw	r8,1140(sp)
 8003148:	da400404 	addi	r9,sp,16
 800314c:	8080004c 	andi	r2,r16,1
 8003150:	103fb926 	beq	r2,zero,8003038 <___vfprintf_internal_r+0xbbc>
 8003154:	d8c11c17 	ldw	r3,1136(sp)
 8003158:	d9013717 	ldw	r4,1244(sp)
 800315c:	00800044 	movi	r2,1
 8003160:	48800115 	stw	r2,4(r9)
 8003164:	49000015 	stw	r4,0(r9)
 8003168:	4091883a 	add	r8,r8,r2
 800316c:	1887883a 	add	r3,r3,r2
 8003170:	da011d15 	stw	r8,1140(sp)
 8003174:	d8c11c15 	stw	r3,1136(sp)
 8003178:	008001c4 	movi	r2,7
 800317c:	10ffad0e 	bge	r2,r3,8003034 <___vfprintf_internal_r+0xbb8>
 8003180:	d9412917 	ldw	r5,1188(sp)
 8003184:	8809883a 	mov	r4,r17
 8003188:	d9811b04 	addi	r6,sp,1132
 800318c:	80024480 	call	8002448 <__sprint_r>
 8003190:	103e001e 	bne	r2,zero,8002994 <___vfprintf_internal_r+0x518>
 8003194:	da400404 	addi	r9,sp,16
 8003198:	da011d17 	ldw	r8,1140(sp)
 800319c:	003fa606 	br	8003038 <___vfprintf_internal_r+0xbbc>
 80031a0:	18803fcc 	andi	r2,r3,255
 80031a4:	00c00044 	movi	r3,1
 80031a8:	10c10126 	beq	r2,r3,80035b0 <___vfprintf_internal_r+0x1134>
 80031ac:	00c00084 	movi	r3,2
 80031b0:	10c0ed26 	beq	r2,r3,8003568 <___vfprintf_internal_r+0x10ec>
 80031b4:	d8c10dc4 	addi	r3,sp,1079
 80031b8:	b808d0fa 	srli	r4,r23,3
 80031bc:	b00a977a 	slli	r5,r22,29
 80031c0:	b02cd0fa 	srli	r22,r22,3
 80031c4:	bdc001cc 	andi	r23,r23,7
 80031c8:	b8800c04 	addi	r2,r23,48
 80031cc:	292eb03a 	or	r23,r5,r4
 80031d0:	18800005 	stb	r2,0(r3)
 80031d4:	bd88b03a 	or	r4,r23,r22
 80031d8:	1827883a 	mov	r19,r3
 80031dc:	18ffffc4 	addi	r3,r3,-1
 80031e0:	203ff51e 	bne	r4,zero,80031b8 <___vfprintf_internal_r+0xd3c>
 80031e4:	8100004c 	andi	r4,r16,1
 80031e8:	980b883a 	mov	r5,r19
 80031ec:	20000726 	beq	r4,zero,800320c <___vfprintf_internal_r+0xd90>
 80031f0:	10803fcc 	andi	r2,r2,255
 80031f4:	1080201c 	xori	r2,r2,128
 80031f8:	10bfe004 	addi	r2,r2,-128
 80031fc:	01000c04 	movi	r4,48
 8003200:	11000226 	beq	r2,r4,800320c <___vfprintf_internal_r+0xd90>
 8003204:	1827883a 	mov	r19,r3
 8003208:	293fffc5 	stb	r4,-1(r5)
 800320c:	d8812717 	ldw	r2,1180(sp)
 8003210:	14c5c83a 	sub	r2,r2,r19
 8003214:	d8812b15 	stw	r2,1196(sp)
 8003218:	003e1f06 	br	8002a98 <___vfprintf_internal_r+0x61c>
 800321c:	00801944 	movi	r2,101
 8003220:	14807c0e 	bge	r2,r18,8003414 <___vfprintf_internal_r+0xf98>
 8003224:	d9013317 	ldw	r4,1228(sp)
 8003228:	d9413417 	ldw	r5,1232(sp)
 800322c:	000d883a 	mov	r6,zero
 8003230:	000f883a 	mov	r7,zero
 8003234:	d8c13b15 	stw	r3,1260(sp)
 8003238:	da013a15 	stw	r8,1256(sp)
 800323c:	da413c15 	stw	r9,1264(sp)
 8003240:	800a5440 	call	800a544 <__nedf2>
 8003244:	d8c13b17 	ldw	r3,1260(sp)
 8003248:	da013a17 	ldw	r8,1256(sp)
 800324c:	da413c17 	ldw	r9,1264(sp)
 8003250:	1001001e 	bne	r2,zero,8003654 <___vfprintf_internal_r+0x11d8>
 8003254:	00820074 	movhi	r2,2049
 8003258:	10b6bc04 	addi	r2,r2,-9488
 800325c:	48800015 	stw	r2,0(r9)
 8003260:	00800044 	movi	r2,1
 8003264:	48800115 	stw	r2,4(r9)
 8003268:	4091883a 	add	r8,r8,r2
 800326c:	1887883a 	add	r3,r3,r2
 8003270:	da011d15 	stw	r8,1140(sp)
 8003274:	d8c11c15 	stw	r3,1136(sp)
 8003278:	008001c4 	movi	r2,7
 800327c:	10c20316 	blt	r2,r3,8003a8c <___vfprintf_internal_r+0x1610>
 8003280:	4a400204 	addi	r9,r9,8
 8003284:	d8812417 	ldw	r2,1168(sp)
 8003288:	d8c13217 	ldw	r3,1224(sp)
 800328c:	10c00216 	blt	r2,r3,8003298 <___vfprintf_internal_r+0xe1c>
 8003290:	8080004c 	andi	r2,r16,1
 8003294:	103f6826 	beq	r2,zero,8003038 <___vfprintf_internal_r+0xbbc>
 8003298:	d8c11c17 	ldw	r3,1136(sp)
 800329c:	d9013717 	ldw	r4,1244(sp)
 80032a0:	00800044 	movi	r2,1
 80032a4:	48800115 	stw	r2,4(r9)
 80032a8:	49000015 	stw	r4,0(r9)
 80032ac:	4091883a 	add	r8,r8,r2
 80032b0:	1887883a 	add	r3,r3,r2
 80032b4:	da011d15 	stw	r8,1140(sp)
 80032b8:	d8c11c15 	stw	r3,1136(sp)
 80032bc:	008001c4 	movi	r2,7
 80032c0:	10c2ce16 	blt	r2,r3,8003dfc <___vfprintf_internal_r+0x1980>
 80032c4:	4a400204 	addi	r9,r9,8
 80032c8:	d8813217 	ldw	r2,1224(sp)
 80032cc:	14bfffc4 	addi	r18,r2,-1
 80032d0:	04bf590e 	bge	zero,r18,8003038 <___vfprintf_internal_r+0xbbc>
 80032d4:	04c00404 	movi	r19,16
 80032d8:	d8c11c17 	ldw	r3,1136(sp)
 80032dc:	05020074 	movhi	r20,2049
 80032e0:	a536c084 	addi	r20,r20,-9470
 80032e4:	9c818a0e 	bge	r19,r18,8003910 <___vfprintf_internal_r+0x1494>
 80032e8:	058001c4 	movi	r22,7
 80032ec:	ddc12917 	ldw	r23,1188(sp)
 80032f0:	00000306 	br	8003300 <___vfprintf_internal_r+0xe84>
 80032f4:	4a400204 	addi	r9,r9,8
 80032f8:	94bffc04 	addi	r18,r18,-16
 80032fc:	9c81840e 	bge	r19,r18,8003910 <___vfprintf_internal_r+0x1494>
 8003300:	4d000015 	stw	r20,0(r9)
 8003304:	4cc00115 	stw	r19,4(r9)
 8003308:	42000404 	addi	r8,r8,16
 800330c:	18c00044 	addi	r3,r3,1
 8003310:	da011d15 	stw	r8,1140(sp)
 8003314:	d8c11c15 	stw	r3,1136(sp)
 8003318:	b0fff60e 	bge	r22,r3,80032f4 <___vfprintf_internal_r+0xe78>
 800331c:	8809883a 	mov	r4,r17
 8003320:	b80b883a 	mov	r5,r23
 8003324:	d9811b04 	addi	r6,sp,1132
 8003328:	80024480 	call	8002448 <__sprint_r>
 800332c:	103d991e 	bne	r2,zero,8002994 <___vfprintf_internal_r+0x518>
 8003330:	da011d17 	ldw	r8,1140(sp)
 8003334:	d8c11c17 	ldw	r3,1136(sp)
 8003338:	da400404 	addi	r9,sp,16
 800333c:	003fee06 	br	80032f8 <___vfprintf_internal_r+0xe7c>
 8003340:	d8812e17 	ldw	r2,1208(sp)
 8003344:	d9012817 	ldw	r4,1184(sp)
 8003348:	112fc83a 	sub	r23,r2,r4
 800334c:	05ff000e 	bge	zero,r23,8002f50 <___vfprintf_internal_r+0xad4>
 8003350:	07000404 	movi	fp,16
 8003354:	05020074 	movhi	r20,2049
 8003358:	a536c084 	addi	r20,r20,-9470
 800335c:	e5c01d0e 	bge	fp,r23,80033d4 <___vfprintf_internal_r+0xf58>
 8003360:	dc812a15 	stw	r18,1192(sp)
 8003364:	058001c4 	movi	r22,7
 8003368:	a025883a 	mov	r18,r20
 800336c:	8029883a 	mov	r20,r16
 8003370:	dc012917 	ldw	r16,1188(sp)
 8003374:	00000306 	br	8003384 <___vfprintf_internal_r+0xf08>
 8003378:	bdfffc04 	addi	r23,r23,-16
 800337c:	4a400204 	addi	r9,r9,8
 8003380:	e5c0110e 	bge	fp,r23,80033c8 <___vfprintf_internal_r+0xf4c>
 8003384:	4c800015 	stw	r18,0(r9)
 8003388:	4f000115 	stw	fp,4(r9)
 800338c:	42000404 	addi	r8,r8,16
 8003390:	18c00044 	addi	r3,r3,1
 8003394:	da011d15 	stw	r8,1140(sp)
 8003398:	d8c11c15 	stw	r3,1136(sp)
 800339c:	b0fff60e 	bge	r22,r3,8003378 <___vfprintf_internal_r+0xefc>
 80033a0:	8809883a 	mov	r4,r17
 80033a4:	800b883a 	mov	r5,r16
 80033a8:	d9811b04 	addi	r6,sp,1132
 80033ac:	80024480 	call	8002448 <__sprint_r>
 80033b0:	103d781e 	bne	r2,zero,8002994 <___vfprintf_internal_r+0x518>
 80033b4:	bdfffc04 	addi	r23,r23,-16
 80033b8:	da011d17 	ldw	r8,1140(sp)
 80033bc:	d8c11c17 	ldw	r3,1136(sp)
 80033c0:	da400404 	addi	r9,sp,16
 80033c4:	e5ffef16 	blt	fp,r23,8003384 <___vfprintf_internal_r+0xf08>
 80033c8:	a021883a 	mov	r16,r20
 80033cc:	9029883a 	mov	r20,r18
 80033d0:	dc812a17 	ldw	r18,1192(sp)
 80033d4:	4d000015 	stw	r20,0(r9)
 80033d8:	4dc00115 	stw	r23,4(r9)
 80033dc:	45d1883a 	add	r8,r8,r23
 80033e0:	18c00044 	addi	r3,r3,1
 80033e4:	da011d15 	stw	r8,1140(sp)
 80033e8:	d8c11c15 	stw	r3,1136(sp)
 80033ec:	008001c4 	movi	r2,7
 80033f0:	10c13616 	blt	r2,r3,80038cc <___vfprintf_internal_r+0x1450>
 80033f4:	4a400204 	addi	r9,r9,8
 80033f8:	003ed506 	br	8002f50 <___vfprintf_internal_r+0xad4>
 80033fc:	d9412917 	ldw	r5,1188(sp)
 8003400:	8809883a 	mov	r4,r17
 8003404:	d9811b04 	addi	r6,sp,1132
 8003408:	80024480 	call	8002448 <__sprint_r>
 800340c:	103f4226 	beq	r2,zero,8003118 <___vfprintf_internal_r+0xc9c>
 8003410:	003d6006 	br	8002994 <___vfprintf_internal_r+0x518>
 8003414:	d9013217 	ldw	r4,1224(sp)
 8003418:	00800044 	movi	r2,1
 800341c:	4cc00015 	stw	r19,0(r9)
 8003420:	1101000e 	bge	r2,r4,8003824 <___vfprintf_internal_r+0x13a8>
 8003424:	00800044 	movi	r2,1
 8003428:	48800115 	stw	r2,4(r9)
 800342c:	4091883a 	add	r8,r8,r2
 8003430:	1887883a 	add	r3,r3,r2
 8003434:	da011d15 	stw	r8,1140(sp)
 8003438:	d8c11c15 	stw	r3,1136(sp)
 800343c:	008001c4 	movi	r2,7
 8003440:	10c10c16 	blt	r2,r3,8003874 <___vfprintf_internal_r+0x13f8>
 8003444:	4a400204 	addi	r9,r9,8
 8003448:	d8813717 	ldw	r2,1244(sp)
 800344c:	48800015 	stw	r2,0(r9)
 8003450:	00800044 	movi	r2,1
 8003454:	48800115 	stw	r2,4(r9)
 8003458:	4091883a 	add	r8,r8,r2
 800345c:	1887883a 	add	r3,r3,r2
 8003460:	da011d15 	stw	r8,1140(sp)
 8003464:	d8c11c15 	stw	r3,1136(sp)
 8003468:	008001c4 	movi	r2,7
 800346c:	10c10a16 	blt	r2,r3,8003898 <___vfprintf_internal_r+0x141c>
 8003470:	4c800204 	addi	r18,r9,8
 8003474:	d9013317 	ldw	r4,1228(sp)
 8003478:	d9413417 	ldw	r5,1232(sp)
 800347c:	000d883a 	mov	r6,zero
 8003480:	000f883a 	mov	r7,zero
 8003484:	d8c13b15 	stw	r3,1260(sp)
 8003488:	da013a15 	stw	r8,1256(sp)
 800348c:	800a4e80 	call	800a4e8 <__eqdf2>
 8003490:	d8c13b17 	ldw	r3,1260(sp)
 8003494:	da013a17 	ldw	r8,1256(sp)
 8003498:	1000ba26 	beq	r2,zero,8003784 <___vfprintf_internal_r+0x1308>
 800349c:	d9013217 	ldw	r4,1224(sp)
 80034a0:	9cc00044 	addi	r19,r19,1
 80034a4:	94c00015 	stw	r19,0(r18)
 80034a8:	20bfffc4 	addi	r2,r4,-1
 80034ac:	90800115 	stw	r2,4(r18)
 80034b0:	4091883a 	add	r8,r8,r2
 80034b4:	18c00044 	addi	r3,r3,1
 80034b8:	da011d15 	stw	r8,1140(sp)
 80034bc:	d8c11c15 	stw	r3,1136(sp)
 80034c0:	008001c4 	movi	r2,7
 80034c4:	10c0e216 	blt	r2,r3,8003850 <___vfprintf_internal_r+0x13d4>
 80034c8:	94800204 	addi	r18,r18,8
 80034cc:	d9013517 	ldw	r4,1236(sp)
 80034d0:	d8811fc4 	addi	r2,sp,1151
 80034d4:	90800015 	stw	r2,0(r18)
 80034d8:	91000115 	stw	r4,4(r18)
 80034dc:	4111883a 	add	r8,r8,r4
 80034e0:	18c00044 	addi	r3,r3,1
 80034e4:	da011d15 	stw	r8,1140(sp)
 80034e8:	d8c11c15 	stw	r3,1136(sp)
 80034ec:	008001c4 	movi	r2,7
 80034f0:	10ff2316 	blt	r2,r3,8003180 <___vfprintf_internal_r+0xd04>
 80034f4:	92400204 	addi	r9,r18,8
 80034f8:	003ecf06 	br	8003038 <___vfprintf_internal_r+0xbbc>
 80034fc:	d9412917 	ldw	r5,1188(sp)
 8003500:	8809883a 	mov	r4,r17
 8003504:	d9811b04 	addi	r6,sp,1132
 8003508:	80024480 	call	8002448 <__sprint_r>
 800350c:	103d211e 	bne	r2,zero,8002994 <___vfprintf_internal_r+0x518>
 8003510:	da011d17 	ldw	r8,1140(sp)
 8003514:	d8c11c17 	ldw	r3,1136(sp)
 8003518:	da400404 	addi	r9,sp,16
 800351c:	003eba06 	br	8003008 <___vfprintf_internal_r+0xb8c>
 8003520:	d9412917 	ldw	r5,1188(sp)
 8003524:	8809883a 	mov	r4,r17
 8003528:	d9811b04 	addi	r6,sp,1132
 800352c:	80024480 	call	8002448 <__sprint_r>
 8003530:	103d181e 	bne	r2,zero,8002994 <___vfprintf_internal_r+0x518>
 8003534:	da011d17 	ldw	r8,1140(sp)
 8003538:	d8c11c17 	ldw	r3,1136(sp)
 800353c:	da400404 	addi	r9,sp,16
 8003540:	003e8006 	br	8002f44 <___vfprintf_internal_r+0xac8>
 8003544:	d9412917 	ldw	r5,1188(sp)
 8003548:	8809883a 	mov	r4,r17
 800354c:	d9811b04 	addi	r6,sp,1132
 8003550:	80024480 	call	8002448 <__sprint_r>
 8003554:	103d0f1e 	bne	r2,zero,8002994 <___vfprintf_internal_r+0x518>
 8003558:	da011d17 	ldw	r8,1140(sp)
 800355c:	d8c11c17 	ldw	r3,1136(sp)
 8003560:	da400404 	addi	r9,sp,16
 8003564:	003e6a06 	br	8002f10 <___vfprintf_internal_r+0xa94>
 8003568:	d9413617 	ldw	r5,1240(sp)
 800356c:	d8810dc4 	addi	r2,sp,1079
 8003570:	b8c003cc 	andi	r3,r23,15
 8003574:	b008973a 	slli	r4,r22,28
 8003578:	28c7883a 	add	r3,r5,r3
 800357c:	b82ed13a 	srli	r23,r23,4
 8003580:	18c00003 	ldbu	r3,0(r3)
 8003584:	b02cd13a 	srli	r22,r22,4
 8003588:	25eeb03a 	or	r23,r4,r23
 800358c:	10c00005 	stb	r3,0(r2)
 8003590:	bd86b03a 	or	r3,r23,r22
 8003594:	1027883a 	mov	r19,r2
 8003598:	10bfffc4 	addi	r2,r2,-1
 800359c:	183ff41e 	bne	r3,zero,8003570 <___vfprintf_internal_r+0x10f4>
 80035a0:	003f1a06 	br	800320c <___vfprintf_internal_r+0xd90>
 80035a4:	d8012b15 	stw	zero,1196(sp)
 80035a8:	dcc10e04 	addi	r19,sp,1080
 80035ac:	003d3a06 	br	8002a98 <___vfprintf_internal_r+0x61c>
 80035b0:	b0025426 	beq	r22,zero,8003f04 <___vfprintf_internal_r+0x1a88>
 80035b4:	b807883a 	mov	r3,r23
 80035b8:	d8810dc4 	addi	r2,sp,1079
 80035bc:	882f883a 	mov	r23,r17
 80035c0:	04c00244 	movi	r19,9
 80035c4:	8023883a 	mov	r17,r16
 80035c8:	da412815 	stw	r9,1184(sp)
 80035cc:	1821883a 	mov	r16,r3
 80035d0:	8009883a 	mov	r4,r16
 80035d4:	b00b883a 	mov	r5,r22
 80035d8:	01800284 	movi	r6,10
 80035dc:	000f883a 	mov	r7,zero
 80035e0:	1029883a 	mov	r20,r2
 80035e4:	80096200 	call	8009620 <__umoddi3>
 80035e8:	10800c04 	addi	r2,r2,48
 80035ec:	8009883a 	mov	r4,r16
 80035f0:	b00b883a 	mov	r5,r22
 80035f4:	a0800005 	stb	r2,0(r20)
 80035f8:	01800284 	movi	r6,10
 80035fc:	000f883a 	mov	r7,zero
 8003600:	8008fd00 	call	8008fd0 <__udivdi3>
 8003604:	1021883a 	mov	r16,r2
 8003608:	182d883a 	mov	r22,r3
 800360c:	a0bfffc4 	addi	r2,r20,-1
 8003610:	183fef1e 	bne	r3,zero,80035d0 <___vfprintf_internal_r+0x1154>
 8003614:	9c3fee36 	bltu	r19,r16,80035d0 <___vfprintf_internal_r+0x1154>
 8003618:	da412817 	ldw	r9,1184(sp)
 800361c:	8005883a 	mov	r2,r16
 8003620:	8821883a 	mov	r16,r17
 8003624:	b823883a 	mov	r17,r23
 8003628:	102f883a 	mov	r23,r2
 800362c:	d8812717 	ldw	r2,1180(sp)
 8003630:	a4ffffc4 	addi	r19,r20,-1
 8003634:	bdc00c04 	addi	r23,r23,48
 8003638:	14c5c83a 	sub	r2,r2,r19
 800363c:	a5ffffc5 	stb	r23,-1(r20)
 8003640:	d8812b15 	stw	r2,1196(sp)
 8003644:	003d1406 	br	8002a98 <___vfprintf_internal_r+0x61c>
 8003648:	00c00044 	movi	r3,1
 800364c:	bd84b03a 	or	r2,r23,r22
 8003650:	003d0306 	br	8002a60 <___vfprintf_internal_r+0x5e4>
 8003654:	dc812417 	ldw	r18,1168(sp)
 8003658:	0481140e 	bge	zero,r18,8003aac <___vfprintf_internal_r+0x1630>
 800365c:	d9013217 	ldw	r4,1224(sp)
 8003660:	4cc00015 	stw	r19,0(r9)
 8003664:	9100ec16 	blt	r18,r4,8003a18 <___vfprintf_internal_r+0x159c>
 8003668:	49000115 	stw	r4,4(r9)
 800366c:	4111883a 	add	r8,r8,r4
 8003670:	18c00044 	addi	r3,r3,1
 8003674:	da011d15 	stw	r8,1140(sp)
 8003678:	d8c11c15 	stw	r3,1136(sp)
 800367c:	008001c4 	movi	r2,7
 8003680:	10c23616 	blt	r2,r3,8003f5c <___vfprintf_internal_r+0x1ae0>
 8003684:	4a400204 	addi	r9,r9,8
 8003688:	d8813217 	ldw	r2,1224(sp)
 800368c:	90a5c83a 	sub	r18,r18,r2
 8003690:	04beae0e 	bge	zero,r18,800314c <___vfprintf_internal_r+0xcd0>
 8003694:	04c00404 	movi	r19,16
 8003698:	d8c11c17 	ldw	r3,1136(sp)
 800369c:	05020074 	movhi	r20,2049
 80036a0:	a536c084 	addi	r20,r20,-9470
 80036a4:	9c81dd0e 	bge	r19,r18,8003e1c <___vfprintf_internal_r+0x19a0>
 80036a8:	058001c4 	movi	r22,7
 80036ac:	ddc12917 	ldw	r23,1188(sp)
 80036b0:	00000306 	br	80036c0 <___vfprintf_internal_r+0x1244>
 80036b4:	4a400204 	addi	r9,r9,8
 80036b8:	94bffc04 	addi	r18,r18,-16
 80036bc:	9c81d70e 	bge	r19,r18,8003e1c <___vfprintf_internal_r+0x19a0>
 80036c0:	4d000015 	stw	r20,0(r9)
 80036c4:	4cc00115 	stw	r19,4(r9)
 80036c8:	42000404 	addi	r8,r8,16
 80036cc:	18c00044 	addi	r3,r3,1
 80036d0:	da011d15 	stw	r8,1140(sp)
 80036d4:	d8c11c15 	stw	r3,1136(sp)
 80036d8:	b0fff60e 	bge	r22,r3,80036b4 <___vfprintf_internal_r+0x1238>
 80036dc:	8809883a 	mov	r4,r17
 80036e0:	b80b883a 	mov	r5,r23
 80036e4:	d9811b04 	addi	r6,sp,1132
 80036e8:	80024480 	call	8002448 <__sprint_r>
 80036ec:	103ca91e 	bne	r2,zero,8002994 <___vfprintf_internal_r+0x518>
 80036f0:	da011d17 	ldw	r8,1140(sp)
 80036f4:	d8c11c17 	ldw	r3,1136(sp)
 80036f8:	da400404 	addi	r9,sp,16
 80036fc:	003fee06 	br	80036b8 <___vfprintf_internal_r+0x123c>
 8003700:	d9412917 	ldw	r5,1188(sp)
 8003704:	8809883a 	mov	r4,r17
 8003708:	d9811b04 	addi	r6,sp,1132
 800370c:	80024480 	call	8002448 <__sprint_r>
 8003710:	103ca01e 	bne	r2,zero,8002994 <___vfprintf_internal_r+0x518>
 8003714:	da011d17 	ldw	r8,1140(sp)
 8003718:	d8c11c17 	ldw	r3,1136(sp)
 800371c:	da400404 	addi	r9,sp,16
 8003720:	003dee06 	br	8002edc <___vfprintf_internal_r+0xa60>
 8003724:	00c00084 	movi	r3,2
 8003728:	bd84b03a 	or	r2,r23,r22
 800372c:	d8012585 	stb	zero,1174(sp)
 8003730:	003ccb06 	br	8002a60 <___vfprintf_internal_r+0x5e4>
 8003734:	8080040c 	andi	r2,r16,16
 8003738:	1000ae26 	beq	r2,zero,80039f4 <___vfprintf_internal_r+0x1578>
 800373c:	d9012d17 	ldw	r4,1204(sp)
 8003740:	25c00017 	ldw	r23,0(r4)
 8003744:	21000104 	addi	r4,r4,4
 8003748:	d9012d15 	stw	r4,1204(sp)
 800374c:	b82dd7fa 	srai	r22,r23,31
 8003750:	b005883a 	mov	r2,r22
 8003754:	003cb906 	br	8002a3c <___vfprintf_internal_r+0x5c0>
 8003758:	8080040c 	andi	r2,r16,16
 800375c:	10007026 	beq	r2,zero,8003920 <___vfprintf_internal_r+0x14a4>
 8003760:	d8812d17 	ldw	r2,1204(sp)
 8003764:	002d883a 	mov	r22,zero
 8003768:	00c00044 	movi	r3,1
 800376c:	15c00017 	ldw	r23,0(r2)
 8003770:	10800104 	addi	r2,r2,4
 8003774:	d8812d15 	stw	r2,1204(sp)
 8003778:	d8012585 	stb	zero,1174(sp)
 800377c:	b805883a 	mov	r2,r23
 8003780:	003cb706 	br	8002a60 <___vfprintf_internal_r+0x5e4>
 8003784:	d8813217 	ldw	r2,1224(sp)
 8003788:	14ffffc4 	addi	r19,r2,-1
 800378c:	04ff4f0e 	bge	zero,r19,80034cc <___vfprintf_internal_r+0x1050>
 8003790:	05800404 	movi	r22,16
 8003794:	05020074 	movhi	r20,2049
 8003798:	a536c084 	addi	r20,r20,-9470
 800379c:	b4c0470e 	bge	r22,r19,80038bc <___vfprintf_internal_r+0x1440>
 80037a0:	05c001c4 	movi	r23,7
 80037a4:	df012917 	ldw	fp,1188(sp)
 80037a8:	00000306 	br	80037b8 <___vfprintf_internal_r+0x133c>
 80037ac:	94800204 	addi	r18,r18,8
 80037b0:	9cfffc04 	addi	r19,r19,-16
 80037b4:	b4c0410e 	bge	r22,r19,80038bc <___vfprintf_internal_r+0x1440>
 80037b8:	95000015 	stw	r20,0(r18)
 80037bc:	95800115 	stw	r22,4(r18)
 80037c0:	42000404 	addi	r8,r8,16
 80037c4:	18c00044 	addi	r3,r3,1
 80037c8:	da011d15 	stw	r8,1140(sp)
 80037cc:	d8c11c15 	stw	r3,1136(sp)
 80037d0:	b8fff60e 	bge	r23,r3,80037ac <___vfprintf_internal_r+0x1330>
 80037d4:	8809883a 	mov	r4,r17
 80037d8:	e00b883a 	mov	r5,fp
 80037dc:	d9811b04 	addi	r6,sp,1132
 80037e0:	80024480 	call	8002448 <__sprint_r>
 80037e4:	103c6b1e 	bne	r2,zero,8002994 <___vfprintf_internal_r+0x518>
 80037e8:	da011d17 	ldw	r8,1140(sp)
 80037ec:	d8c11c17 	ldw	r3,1136(sp)
 80037f0:	dc800404 	addi	r18,sp,16
 80037f4:	003fee06 	br	80037b0 <___vfprintf_internal_r+0x1334>
 80037f8:	8080040c 	andi	r2,r16,16
 80037fc:	10005326 	beq	r2,zero,800394c <___vfprintf_internal_r+0x14d0>
 8003800:	d8c12d17 	ldw	r3,1204(sp)
 8003804:	002d883a 	mov	r22,zero
 8003808:	1dc00017 	ldw	r23,0(r3)
 800380c:	18c00104 	addi	r3,r3,4
 8003810:	d8c12d15 	stw	r3,1204(sp)
 8003814:	b805883a 	mov	r2,r23
 8003818:	0007883a 	mov	r3,zero
 800381c:	d8012585 	stb	zero,1174(sp)
 8003820:	003c8f06 	br	8002a60 <___vfprintf_internal_r+0x5e4>
 8003824:	8088703a 	and	r4,r16,r2
 8003828:	203efe1e 	bne	r4,zero,8003424 <___vfprintf_internal_r+0xfa8>
 800382c:	48800115 	stw	r2,4(r9)
 8003830:	42000044 	addi	r8,r8,1
 8003834:	18c00044 	addi	r3,r3,1
 8003838:	da011d15 	stw	r8,1140(sp)
 800383c:	d8c11c15 	stw	r3,1136(sp)
 8003840:	008001c4 	movi	r2,7
 8003844:	10c00216 	blt	r2,r3,8003850 <___vfprintf_internal_r+0x13d4>
 8003848:	4c800204 	addi	r18,r9,8
 800384c:	003f1f06 	br	80034cc <___vfprintf_internal_r+0x1050>
 8003850:	d9412917 	ldw	r5,1188(sp)
 8003854:	8809883a 	mov	r4,r17
 8003858:	d9811b04 	addi	r6,sp,1132
 800385c:	80024480 	call	8002448 <__sprint_r>
 8003860:	103c4c1e 	bne	r2,zero,8002994 <___vfprintf_internal_r+0x518>
 8003864:	dc800404 	addi	r18,sp,16
 8003868:	da011d17 	ldw	r8,1140(sp)
 800386c:	d8c11c17 	ldw	r3,1136(sp)
 8003870:	003f1606 	br	80034cc <___vfprintf_internal_r+0x1050>
 8003874:	d9412917 	ldw	r5,1188(sp)
 8003878:	8809883a 	mov	r4,r17
 800387c:	d9811b04 	addi	r6,sp,1132
 8003880:	80024480 	call	8002448 <__sprint_r>
 8003884:	103c431e 	bne	r2,zero,8002994 <___vfprintf_internal_r+0x518>
 8003888:	da011d17 	ldw	r8,1140(sp)
 800388c:	d8c11c17 	ldw	r3,1136(sp)
 8003890:	da400404 	addi	r9,sp,16
 8003894:	003eec06 	br	8003448 <___vfprintf_internal_r+0xfcc>
 8003898:	d9412917 	ldw	r5,1188(sp)
 800389c:	8809883a 	mov	r4,r17
 80038a0:	d9811b04 	addi	r6,sp,1132
 80038a4:	80024480 	call	8002448 <__sprint_r>
 80038a8:	103c3a1e 	bne	r2,zero,8002994 <___vfprintf_internal_r+0x518>
 80038ac:	da011d17 	ldw	r8,1140(sp)
 80038b0:	d8c11c17 	ldw	r3,1136(sp)
 80038b4:	dc800404 	addi	r18,sp,16
 80038b8:	003eee06 	br	8003474 <___vfprintf_internal_r+0xff8>
 80038bc:	95000015 	stw	r20,0(r18)
 80038c0:	94c00115 	stw	r19,4(r18)
 80038c4:	44d1883a 	add	r8,r8,r19
 80038c8:	003efa06 	br	80034b4 <___vfprintf_internal_r+0x1038>
 80038cc:	d9412917 	ldw	r5,1188(sp)
 80038d0:	8809883a 	mov	r4,r17
 80038d4:	d9811b04 	addi	r6,sp,1132
 80038d8:	80024480 	call	8002448 <__sprint_r>
 80038dc:	103c2d1e 	bne	r2,zero,8002994 <___vfprintf_internal_r+0x518>
 80038e0:	da011d17 	ldw	r8,1140(sp)
 80038e4:	d8c11c17 	ldw	r3,1136(sp)
 80038e8:	da400404 	addi	r9,sp,16
 80038ec:	003d9806 	br	8002f50 <___vfprintf_internal_r+0xad4>
 80038f0:	8080100c 	andi	r2,r16,64
 80038f4:	10011626 	beq	r2,zero,8003d50 <___vfprintf_internal_r+0x18d4>
 80038f8:	d8c12d17 	ldw	r3,1204(sp)
 80038fc:	002d883a 	mov	r22,zero
 8003900:	1dc0000b 	ldhu	r23,0(r3)
 8003904:	18c00104 	addi	r3,r3,4
 8003908:	d8c12d15 	stw	r3,1204(sp)
 800390c:	003cc106 	br	8002c14 <___vfprintf_internal_r+0x798>
 8003910:	4d000015 	stw	r20,0(r9)
 8003914:	4c800115 	stw	r18,4(r9)
 8003918:	4491883a 	add	r8,r8,r18
 800391c:	003dc006 	br	8003020 <___vfprintf_internal_r+0xba4>
 8003920:	8080100c 	andi	r2,r16,64
 8003924:	10010126 	beq	r2,zero,8003d2c <___vfprintf_internal_r+0x18b0>
 8003928:	d8c12d17 	ldw	r3,1204(sp)
 800392c:	002d883a 	mov	r22,zero
 8003930:	1dc0000b 	ldhu	r23,0(r3)
 8003934:	18c00104 	addi	r3,r3,4
 8003938:	d8c12d15 	stw	r3,1204(sp)
 800393c:	b805883a 	mov	r2,r23
 8003940:	00c00044 	movi	r3,1
 8003944:	d8012585 	stb	zero,1174(sp)
 8003948:	003c4506 	br	8002a60 <___vfprintf_internal_r+0x5e4>
 800394c:	8080100c 	andi	r2,r16,64
 8003950:	10010526 	beq	r2,zero,8003d68 <___vfprintf_internal_r+0x18ec>
 8003954:	d9012d17 	ldw	r4,1204(sp)
 8003958:	002d883a 	mov	r22,zero
 800395c:	0007883a 	mov	r3,zero
 8003960:	25c0000b 	ldhu	r23,0(r4)
 8003964:	21000104 	addi	r4,r4,4
 8003968:	d9012d15 	stw	r4,1204(sp)
 800396c:	b805883a 	mov	r2,r23
 8003970:	d8012585 	stb	zero,1174(sp)
 8003974:	003c3a06 	br	8002a60 <___vfprintf_internal_r+0x5e4>
 8003978:	d8812d17 	ldw	r2,1204(sp)
 800397c:	15800017 	ldw	r22,0(r2)
 8003980:	15000117 	ldw	r20,4(r2)
 8003984:	10800204 	addi	r2,r2,8
 8003988:	d8812d15 	stw	r2,1204(sp)
 800398c:	dd813315 	stw	r22,1228(sp)
 8003990:	dd013415 	stw	r20,1232(sp)
 8003994:	003c5906 	br	8002afc <___vfprintf_internal_r+0x680>
 8003998:	00c00084 	movi	r3,2
 800399c:	d8012585 	stb	zero,1174(sp)
 80039a0:	003c2f06 	br	8002a60 <___vfprintf_internal_r+0x5e4>
 80039a4:	ac800007 	ldb	r18,0(r21)
 80039a8:	003b1006 	br	80025ec <___vfprintf_internal_r+0x170>
 80039ac:	8080040c 	andi	r2,r16,16
 80039b0:	1000091e 	bne	r2,zero,80039d8 <___vfprintf_internal_r+0x155c>
 80039b4:	8400100c 	andi	r16,r16,64
 80039b8:	80000726 	beq	r16,zero,80039d8 <___vfprintf_internal_r+0x155c>
 80039bc:	d8c12d17 	ldw	r3,1204(sp)
 80039c0:	d9012c17 	ldw	r4,1200(sp)
 80039c4:	18800017 	ldw	r2,0(r3)
 80039c8:	18c00104 	addi	r3,r3,4
 80039cc:	d8c12d15 	stw	r3,1204(sp)
 80039d0:	1100000d 	sth	r4,0(r2)
 80039d4:	003adf06 	br	8002554 <___vfprintf_internal_r+0xd8>
 80039d8:	d8c12d17 	ldw	r3,1204(sp)
 80039dc:	d9012c17 	ldw	r4,1200(sp)
 80039e0:	18800017 	ldw	r2,0(r3)
 80039e4:	18c00104 	addi	r3,r3,4
 80039e8:	d8c12d15 	stw	r3,1204(sp)
 80039ec:	11000015 	stw	r4,0(r2)
 80039f0:	003ad806 	br	8002554 <___vfprintf_internal_r+0xd8>
 80039f4:	8080100c 	andi	r2,r16,64
 80039f8:	1000c526 	beq	r2,zero,8003d10 <___vfprintf_internal_r+0x1894>
 80039fc:	d8812d17 	ldw	r2,1204(sp)
 8003a00:	15c0000f 	ldh	r23,0(r2)
 8003a04:	10800104 	addi	r2,r2,4
 8003a08:	d8812d15 	stw	r2,1204(sp)
 8003a0c:	b82dd7fa 	srai	r22,r23,31
 8003a10:	b005883a 	mov	r2,r22
 8003a14:	003c0906 	br	8002a3c <___vfprintf_internal_r+0x5c0>
 8003a18:	4c800115 	stw	r18,4(r9)
 8003a1c:	9211883a 	add	r8,r18,r8
 8003a20:	18c00044 	addi	r3,r3,1
 8003a24:	da011d15 	stw	r8,1140(sp)
 8003a28:	d8c11c15 	stw	r3,1136(sp)
 8003a2c:	008001c4 	movi	r2,7
 8003a30:	10c14016 	blt	r2,r3,8003f34 <___vfprintf_internal_r+0x1ab8>
 8003a34:	4a400204 	addi	r9,r9,8
 8003a38:	d8813717 	ldw	r2,1244(sp)
 8003a3c:	9ca7883a 	add	r19,r19,r18
 8003a40:	48800015 	stw	r2,0(r9)
 8003a44:	00800044 	movi	r2,1
 8003a48:	48800115 	stw	r2,4(r9)
 8003a4c:	4091883a 	add	r8,r8,r2
 8003a50:	1887883a 	add	r3,r3,r2
 8003a54:	da011d15 	stw	r8,1140(sp)
 8003a58:	d8c11c15 	stw	r3,1136(sp)
 8003a5c:	008001c4 	movi	r2,7
 8003a60:	10c12c16 	blt	r2,r3,8003f14 <___vfprintf_internal_r+0x1a98>
 8003a64:	4a400204 	addi	r9,r9,8
 8003a68:	d9013217 	ldw	r4,1224(sp)
 8003a6c:	da011d17 	ldw	r8,1140(sp)
 8003a70:	d8c11c17 	ldw	r3,1136(sp)
 8003a74:	24a5c83a 	sub	r18,r4,r18
 8003a78:	4cc00015 	stw	r19,0(r9)
 8003a7c:	003fa506 	br	8003914 <___vfprintf_internal_r+0x1498>
 8003a80:	04c20074 	movhi	r19,2049
 8003a84:	9cf6ad04 	addi	r19,r19,-9548
 8003a88:	003c2e06 	br	8002b44 <___vfprintf_internal_r+0x6c8>
 8003a8c:	d9412917 	ldw	r5,1188(sp)
 8003a90:	8809883a 	mov	r4,r17
 8003a94:	d9811b04 	addi	r6,sp,1132
 8003a98:	80024480 	call	8002448 <__sprint_r>
 8003a9c:	103bbd1e 	bne	r2,zero,8002994 <___vfprintf_internal_r+0x518>
 8003aa0:	da011d17 	ldw	r8,1140(sp)
 8003aa4:	da400404 	addi	r9,sp,16
 8003aa8:	003df606 	br	8003284 <___vfprintf_internal_r+0xe08>
 8003aac:	00820074 	movhi	r2,2049
 8003ab0:	10b6bc04 	addi	r2,r2,-9488
 8003ab4:	48800015 	stw	r2,0(r9)
 8003ab8:	00800044 	movi	r2,1
 8003abc:	48800115 	stw	r2,4(r9)
 8003ac0:	4091883a 	add	r8,r8,r2
 8003ac4:	1887883a 	add	r3,r3,r2
 8003ac8:	da011d15 	stw	r8,1140(sp)
 8003acc:	d8c11c15 	stw	r3,1136(sp)
 8003ad0:	008001c4 	movi	r2,7
 8003ad4:	10c0bc16 	blt	r2,r3,8003dc8 <___vfprintf_internal_r+0x194c>
 8003ad8:	4a400204 	addi	r9,r9,8
 8003adc:	9000041e 	bne	r18,zero,8003af0 <___vfprintf_internal_r+0x1674>
 8003ae0:	d8c13217 	ldw	r3,1224(sp)
 8003ae4:	1800021e 	bne	r3,zero,8003af0 <___vfprintf_internal_r+0x1674>
 8003ae8:	8080004c 	andi	r2,r16,1
 8003aec:	103d5226 	beq	r2,zero,8003038 <___vfprintf_internal_r+0xbbc>
 8003af0:	d8c11c17 	ldw	r3,1136(sp)
 8003af4:	d9013717 	ldw	r4,1244(sp)
 8003af8:	00800044 	movi	r2,1
 8003afc:	48800115 	stw	r2,4(r9)
 8003b00:	49000015 	stw	r4,0(r9)
 8003b04:	4091883a 	add	r8,r8,r2
 8003b08:	1887883a 	add	r3,r3,r2
 8003b0c:	da011d15 	stw	r8,1140(sp)
 8003b10:	d8c11c15 	stw	r3,1136(sp)
 8003b14:	008001c4 	movi	r2,7
 8003b18:	10c14516 	blt	r2,r3,8004030 <___vfprintf_internal_r+0x1bb4>
 8003b1c:	4a400204 	addi	r9,r9,8
 8003b20:	04a5c83a 	sub	r18,zero,r18
 8003b24:	0480d70e 	bge	zero,r18,8003e84 <___vfprintf_internal_r+0x1a08>
 8003b28:	05800404 	movi	r22,16
 8003b2c:	05020074 	movhi	r20,2049
 8003b30:	a536c084 	addi	r20,r20,-9470
 8003b34:	b480db0e 	bge	r22,r18,8003ea4 <___vfprintf_internal_r+0x1a28>
 8003b38:	05c001c4 	movi	r23,7
 8003b3c:	df012917 	ldw	fp,1188(sp)
 8003b40:	00000306 	br	8003b50 <___vfprintf_internal_r+0x16d4>
 8003b44:	4a400204 	addi	r9,r9,8
 8003b48:	94bffc04 	addi	r18,r18,-16
 8003b4c:	b480d50e 	bge	r22,r18,8003ea4 <___vfprintf_internal_r+0x1a28>
 8003b50:	4d000015 	stw	r20,0(r9)
 8003b54:	4d800115 	stw	r22,4(r9)
 8003b58:	42000404 	addi	r8,r8,16
 8003b5c:	18c00044 	addi	r3,r3,1
 8003b60:	da011d15 	stw	r8,1140(sp)
 8003b64:	d8c11c15 	stw	r3,1136(sp)
 8003b68:	b8fff60e 	bge	r23,r3,8003b44 <___vfprintf_internal_r+0x16c8>
 8003b6c:	8809883a 	mov	r4,r17
 8003b70:	e00b883a 	mov	r5,fp
 8003b74:	d9811b04 	addi	r6,sp,1132
 8003b78:	80024480 	call	8002448 <__sprint_r>
 8003b7c:	103b851e 	bne	r2,zero,8002994 <___vfprintf_internal_r+0x518>
 8003b80:	da011d17 	ldw	r8,1140(sp)
 8003b84:	d8c11c17 	ldw	r3,1136(sp)
 8003b88:	da400404 	addi	r9,sp,16
 8003b8c:	003fee06 	br	8003b48 <___vfprintf_internal_r+0x16cc>
 8003b90:	da413c15 	stw	r9,1264(sp)
 8003b94:	80088a40 	call	80088a4 <__isnand>
 8003b98:	da413c17 	ldw	r9,1264(sp)
 8003b9c:	10007e1e 	bne	r2,zero,8003d98 <___vfprintf_internal_r+0x191c>
 8003ba0:	00bfffc4 	movi	r2,-1
 8003ba4:	e0816a26 	beq	fp,r2,8004150 <___vfprintf_internal_r+0x1cd4>
 8003ba8:	008019c4 	movi	r2,103
 8003bac:	90816526 	beq	r18,r2,8004144 <___vfprintf_internal_r+0x1cc8>
 8003bb0:	008011c4 	movi	r2,71
 8003bb4:	90816326 	beq	r18,r2,8004144 <___vfprintf_internal_r+0x1cc8>
 8003bb8:	80c04014 	ori	r3,r16,256
 8003bbc:	d8c12a15 	stw	r3,1192(sp)
 8003bc0:	a0016516 	blt	r20,zero,8004158 <___vfprintf_internal_r+0x1cdc>
 8003bc4:	d8012f05 	stb	zero,1212(sp)
 8003bc8:	00801984 	movi	r2,102
 8003bcc:	9080f226 	beq	r18,r2,8003f98 <___vfprintf_internal_r+0x1b1c>
 8003bd0:	00801184 	movi	r2,70
 8003bd4:	9080f026 	beq	r18,r2,8003f98 <___vfprintf_internal_r+0x1b1c>
 8003bd8:	00801944 	movi	r2,101
 8003bdc:	90818d26 	beq	r18,r2,8004214 <___vfprintf_internal_r+0x1d98>
 8003be0:	00801144 	movi	r2,69
 8003be4:	90818b26 	beq	r18,r2,8004214 <___vfprintf_internal_r+0x1d98>
 8003be8:	e02f883a 	mov	r23,fp
 8003bec:	d8812404 	addi	r2,sp,1168
 8003bf0:	d8800115 	stw	r2,4(sp)
 8003bf4:	d8812304 	addi	r2,sp,1164
 8003bf8:	d8800215 	stw	r2,8(sp)
 8003bfc:	d8812204 	addi	r2,sp,1160
 8003c00:	ddc00015 	stw	r23,0(sp)
 8003c04:	d8800315 	stw	r2,12(sp)
 8003c08:	8809883a 	mov	r4,r17
 8003c0c:	b00b883a 	mov	r5,r22
 8003c10:	a00d883a 	mov	r6,r20
 8003c14:	01c00084 	movi	r7,2
 8003c18:	da413c15 	stw	r9,1264(sp)
 8003c1c:	80046cc0 	call	80046cc <_dtoa_r>
 8003c20:	1027883a 	mov	r19,r2
 8003c24:	008019c4 	movi	r2,103
 8003c28:	da413c17 	ldw	r9,1264(sp)
 8003c2c:	9081951e 	bne	r18,r2,8004284 <___vfprintf_internal_r+0x1e08>
 8003c30:	8080004c 	andi	r2,r16,1
 8003c34:	10017926 	beq	r2,zero,800421c <___vfprintf_internal_r+0x1da0>
 8003c38:	00801184 	movi	r2,70
 8003c3c:	9dc7883a 	add	r3,r19,r23
 8003c40:	9080e626 	beq	r18,r2,8003fdc <___vfprintf_internal_r+0x1b60>
 8003c44:	b009883a 	mov	r4,r22
 8003c48:	a00b883a 	mov	r5,r20
 8003c4c:	000d883a 	mov	r6,zero
 8003c50:	000f883a 	mov	r7,zero
 8003c54:	d8c13b15 	stw	r3,1260(sp)
 8003c58:	da413c15 	stw	r9,1264(sp)
 8003c5c:	800a4e80 	call	800a4e8 <__eqdf2>
 8003c60:	d8c13b17 	ldw	r3,1260(sp)
 8003c64:	da413c17 	ldw	r9,1264(sp)
 8003c68:	10000726 	beq	r2,zero,8003c88 <___vfprintf_internal_r+0x180c>
 8003c6c:	d8812217 	ldw	r2,1160(sp)
 8003c70:	10c18a2e 	bgeu	r2,r3,800429c <___vfprintf_internal_r+0x1e20>
 8003c74:	01000c04 	movi	r4,48
 8003c78:	11000005 	stb	r4,0(r2)
 8003c7c:	10800044 	addi	r2,r2,1
 8003c80:	d8812215 	stw	r2,1160(sp)
 8003c84:	10fffc1e 	bne	r2,r3,8003c78 <___vfprintf_internal_r+0x17fc>
 8003c88:	1cc7c83a 	sub	r3,r3,r19
 8003c8c:	d8c13215 	stw	r3,1224(sp)
 8003c90:	008019c4 	movi	r2,103
 8003c94:	9080fa26 	beq	r18,r2,8004080 <___vfprintf_internal_r+0x1c04>
 8003c98:	008011c4 	movi	r2,71
 8003c9c:	9080f826 	beq	r18,r2,8004080 <___vfprintf_internal_r+0x1c04>
 8003ca0:	00801984 	movi	r2,102
 8003ca4:	90818e1e 	bne	r18,r2,80042e0 <___vfprintf_internal_r+0x1e64>
 8003ca8:	d8812417 	ldw	r2,1168(sp)
 8003cac:	d8812b15 	stw	r2,1196(sp)
 8003cb0:	00817c0e 	bge	zero,r2,80042a4 <___vfprintf_internal_r+0x1e28>
 8003cb4:	e000021e 	bne	fp,zero,8003cc0 <___vfprintf_internal_r+0x1844>
 8003cb8:	8400004c 	andi	r16,r16,1
 8003cbc:	80000426 	beq	r16,zero,8003cd0 <___vfprintf_internal_r+0x1854>
 8003cc0:	d8812b17 	ldw	r2,1196(sp)
 8003cc4:	e2000044 	addi	r8,fp,1
 8003cc8:	1205883a 	add	r2,r2,r8
 8003ccc:	d8812b15 	stw	r2,1196(sp)
 8003cd0:	d8812815 	stw	r2,1184(sp)
 8003cd4:	10010b16 	blt	r2,zero,8004104 <___vfprintf_internal_r+0x1c88>
 8003cd8:	ddc12f07 	ldb	r23,1212(sp)
 8003cdc:	b800e426 	beq	r23,zero,8004070 <___vfprintf_internal_r+0x1bf4>
 8003ce0:	00800b44 	movi	r2,45
 8003ce4:	d8812585 	stb	r2,1174(sp)
 8003ce8:	dc012a17 	ldw	r16,1192(sp)
 8003cec:	d8013115 	stw	zero,1220(sp)
 8003cf0:	003b7306 	br	8002ac0 <___vfprintf_internal_r+0x644>
 8003cf4:	d8812b17 	ldw	r2,1196(sp)
 8003cf8:	d8812815 	stw	r2,1184(sp)
 8003cfc:	10005716 	blt	r2,zero,8003e5c <___vfprintf_internal_r+0x19e0>
 8003d00:	d8812583 	ldbu	r2,1174(sp)
 8003d04:	ddc12d15 	stw	r23,1204(sp)
 8003d08:	d8013115 	stw	zero,1220(sp)
 8003d0c:	003b6806 	br	8002ab0 <___vfprintf_internal_r+0x634>
 8003d10:	d8c12d17 	ldw	r3,1204(sp)
 8003d14:	1dc00017 	ldw	r23,0(r3)
 8003d18:	18c00104 	addi	r3,r3,4
 8003d1c:	d8c12d15 	stw	r3,1204(sp)
 8003d20:	b82dd7fa 	srai	r22,r23,31
 8003d24:	b005883a 	mov	r2,r22
 8003d28:	003b4406 	br	8002a3c <___vfprintf_internal_r+0x5c0>
 8003d2c:	d9012d17 	ldw	r4,1204(sp)
 8003d30:	002d883a 	mov	r22,zero
 8003d34:	00c00044 	movi	r3,1
 8003d38:	25c00017 	ldw	r23,0(r4)
 8003d3c:	21000104 	addi	r4,r4,4
 8003d40:	d9012d15 	stw	r4,1204(sp)
 8003d44:	b805883a 	mov	r2,r23
 8003d48:	d8012585 	stb	zero,1174(sp)
 8003d4c:	003b4406 	br	8002a60 <___vfprintf_internal_r+0x5e4>
 8003d50:	d9012d17 	ldw	r4,1204(sp)
 8003d54:	002d883a 	mov	r22,zero
 8003d58:	25c00017 	ldw	r23,0(r4)
 8003d5c:	21000104 	addi	r4,r4,4
 8003d60:	d9012d15 	stw	r4,1204(sp)
 8003d64:	003bab06 	br	8002c14 <___vfprintf_internal_r+0x798>
 8003d68:	d8812d17 	ldw	r2,1204(sp)
 8003d6c:	002d883a 	mov	r22,zero
 8003d70:	0007883a 	mov	r3,zero
 8003d74:	15c00017 	ldw	r23,0(r2)
 8003d78:	10800104 	addi	r2,r2,4
 8003d7c:	d8812d15 	stw	r2,1204(sp)
 8003d80:	d8012585 	stb	zero,1174(sp)
 8003d84:	b805883a 	mov	r2,r23
 8003d88:	003b3506 	br	8002a60 <___vfprintf_internal_r+0x5e4>
 8003d8c:	00ffffc4 	movi	r3,-1
 8003d90:	b82b883a 	mov	r21,r23
 8003d94:	003a1606 	br	80025f0 <___vfprintf_internal_r+0x174>
 8003d98:	008011c4 	movi	r2,71
 8003d9c:	1480b116 	blt	r2,r18,8004064 <___vfprintf_internal_r+0x1be8>
 8003da0:	04c20074 	movhi	r19,2049
 8003da4:	9cf6ae04 	addi	r19,r19,-9544
 8003da8:	00c000c4 	movi	r3,3
 8003dac:	00bfdfc4 	movi	r2,-129
 8003db0:	80a0703a 	and	r16,r16,r2
 8003db4:	d8c12815 	stw	r3,1184(sp)
 8003db8:	d8812583 	ldbu	r2,1174(sp)
 8003dbc:	d8c12b15 	stw	r3,1196(sp)
 8003dc0:	d8013115 	stw	zero,1220(sp)
 8003dc4:	003b3a06 	br	8002ab0 <___vfprintf_internal_r+0x634>
 8003dc8:	d9412917 	ldw	r5,1188(sp)
 8003dcc:	8809883a 	mov	r4,r17
 8003dd0:	d9811b04 	addi	r6,sp,1132
 8003dd4:	80024480 	call	8002448 <__sprint_r>
 8003dd8:	103aee1e 	bne	r2,zero,8002994 <___vfprintf_internal_r+0x518>
 8003ddc:	dc812417 	ldw	r18,1168(sp)
 8003de0:	da011d17 	ldw	r8,1140(sp)
 8003de4:	da400404 	addi	r9,sp,16
 8003de8:	003f3c06 	br	8003adc <___vfprintf_internal_r+0x1660>
 8003dec:	ad400044 	addi	r21,r21,1
 8003df0:	84000814 	ori	r16,r16,32
 8003df4:	14800047 	ldb	r18,1(r2)
 8003df8:	0039fc06 	br	80025ec <___vfprintf_internal_r+0x170>
 8003dfc:	d9412917 	ldw	r5,1188(sp)
 8003e00:	8809883a 	mov	r4,r17
 8003e04:	d9811b04 	addi	r6,sp,1132
 8003e08:	80024480 	call	8002448 <__sprint_r>
 8003e0c:	103ae11e 	bne	r2,zero,8002994 <___vfprintf_internal_r+0x518>
 8003e10:	da011d17 	ldw	r8,1140(sp)
 8003e14:	da400404 	addi	r9,sp,16
 8003e18:	003d2b06 	br	80032c8 <___vfprintf_internal_r+0xe4c>
 8003e1c:	4d000015 	stw	r20,0(r9)
 8003e20:	4c800115 	stw	r18,4(r9)
 8003e24:	4491883a 	add	r8,r8,r18
 8003e28:	18c00044 	addi	r3,r3,1
 8003e2c:	da011d15 	stw	r8,1140(sp)
 8003e30:	d8c11c15 	stw	r3,1136(sp)
 8003e34:	008001c4 	movi	r2,7
 8003e38:	10fcbd16 	blt	r2,r3,8003130 <___vfprintf_internal_r+0xcb4>
 8003e3c:	4a400204 	addi	r9,r9,8
 8003e40:	003cc206 	br	800314c <___vfprintf_internal_r+0xcd0>
 8003e44:	da413c15 	stw	r9,1264(sp)
 8003e48:	8008ab40 	call	8008ab4 <strlen>
 8003e4c:	d8812b15 	stw	r2,1196(sp)
 8003e50:	d8812815 	stw	r2,1184(sp)
 8003e54:	da413c17 	ldw	r9,1264(sp)
 8003e58:	103fa90e 	bge	r2,zero,8003d00 <___vfprintf_internal_r+0x1884>
 8003e5c:	d8012815 	stw	zero,1184(sp)
 8003e60:	003fa706 	br	8003d00 <___vfprintf_internal_r+0x1884>
 8003e64:	d9412917 	ldw	r5,1188(sp)
 8003e68:	8809883a 	mov	r4,r17
 8003e6c:	d9811b04 	addi	r6,sp,1132
 8003e70:	80024480 	call	8002448 <__sprint_r>
 8003e74:	103ac71e 	bne	r2,zero,8002994 <___vfprintf_internal_r+0x518>
 8003e78:	da011d17 	ldw	r8,1140(sp)
 8003e7c:	d8c11c17 	ldw	r3,1136(sp)
 8003e80:	da400404 	addi	r9,sp,16
 8003e84:	d8813217 	ldw	r2,1224(sp)
 8003e88:	4cc00015 	stw	r19,0(r9)
 8003e8c:	48800115 	stw	r2,4(r9)
 8003e90:	4091883a 	add	r8,r8,r2
 8003e94:	003c6206 	br	8003020 <___vfprintf_internal_r+0xba4>
 8003e98:	00800b44 	movi	r2,45
 8003e9c:	d8812585 	stb	r2,1174(sp)
 8003ea0:	003b2406 	br	8002b34 <___vfprintf_internal_r+0x6b8>
 8003ea4:	4d000015 	stw	r20,0(r9)
 8003ea8:	4c800115 	stw	r18,4(r9)
 8003eac:	4491883a 	add	r8,r8,r18
 8003eb0:	18c00044 	addi	r3,r3,1
 8003eb4:	da011d15 	stw	r8,1140(sp)
 8003eb8:	d8c11c15 	stw	r3,1136(sp)
 8003ebc:	008001c4 	movi	r2,7
 8003ec0:	10ffe816 	blt	r2,r3,8003e64 <___vfprintf_internal_r+0x19e8>
 8003ec4:	4a400204 	addi	r9,r9,8
 8003ec8:	003fee06 	br	8003e84 <___vfprintf_internal_r+0x1a08>
 8003ecc:	d8c12b15 	stw	r3,1196(sp)
 8003ed0:	00800184 	movi	r2,6
 8003ed4:	10c0062e 	bgeu	r2,r3,8003ef0 <___vfprintf_internal_r+0x1a74>
 8003ed8:	d8812b15 	stw	r2,1196(sp)
 8003edc:	d8812815 	stw	r2,1184(sp)
 8003ee0:	ddc12d15 	stw	r23,1204(sp)
 8003ee4:	04c20074 	movhi	r19,2049
 8003ee8:	9cf6ba04 	addi	r19,r19,-9496
 8003eec:	0039ca06 	br	8002618 <___vfprintf_internal_r+0x19c>
 8003ef0:	d8812b17 	ldw	r2,1196(sp)
 8003ef4:	d8812815 	stw	r2,1184(sp)
 8003ef8:	103ff90e 	bge	r2,zero,8003ee0 <___vfprintf_internal_r+0x1a64>
 8003efc:	d8012815 	stw	zero,1184(sp)
 8003f00:	003ff706 	br	8003ee0 <___vfprintf_internal_r+0x1a64>
 8003f04:	00800244 	movi	r2,9
 8003f08:	15fdaa36 	bltu	r2,r23,80035b4 <___vfprintf_internal_r+0x1138>
 8003f0c:	dd010e04 	addi	r20,sp,1080
 8003f10:	003dc606 	br	800362c <___vfprintf_internal_r+0x11b0>
 8003f14:	d9412917 	ldw	r5,1188(sp)
 8003f18:	8809883a 	mov	r4,r17
 8003f1c:	d9811b04 	addi	r6,sp,1132
 8003f20:	80024480 	call	8002448 <__sprint_r>
 8003f24:	103a9b1e 	bne	r2,zero,8002994 <___vfprintf_internal_r+0x518>
 8003f28:	dc812417 	ldw	r18,1168(sp)
 8003f2c:	da400404 	addi	r9,sp,16
 8003f30:	003ecd06 	br	8003a68 <___vfprintf_internal_r+0x15ec>
 8003f34:	d9412917 	ldw	r5,1188(sp)
 8003f38:	8809883a 	mov	r4,r17
 8003f3c:	d9811b04 	addi	r6,sp,1132
 8003f40:	80024480 	call	8002448 <__sprint_r>
 8003f44:	103a931e 	bne	r2,zero,8002994 <___vfprintf_internal_r+0x518>
 8003f48:	dc812417 	ldw	r18,1168(sp)
 8003f4c:	da011d17 	ldw	r8,1140(sp)
 8003f50:	d8c11c17 	ldw	r3,1136(sp)
 8003f54:	da400404 	addi	r9,sp,16
 8003f58:	003eb706 	br	8003a38 <___vfprintf_internal_r+0x15bc>
 8003f5c:	d9412917 	ldw	r5,1188(sp)
 8003f60:	8809883a 	mov	r4,r17
 8003f64:	d9811b04 	addi	r6,sp,1132
 8003f68:	80024480 	call	8002448 <__sprint_r>
 8003f6c:	103a891e 	bne	r2,zero,8002994 <___vfprintf_internal_r+0x518>
 8003f70:	dc812417 	ldw	r18,1168(sp)
 8003f74:	da011d17 	ldw	r8,1140(sp)
 8003f78:	da400404 	addi	r9,sp,16
 8003f7c:	003dc206 	br	8003688 <___vfprintf_internal_r+0x120c>
 8003f80:	df012815 	stw	fp,1184(sp)
 8003f84:	d8812583 	ldbu	r2,1174(sp)
 8003f88:	df012b15 	stw	fp,1196(sp)
 8003f8c:	ddc12d15 	stw	r23,1204(sp)
 8003f90:	d8013115 	stw	zero,1220(sp)
 8003f94:	003ac606 	br	8002ab0 <___vfprintf_internal_r+0x634>
 8003f98:	d8812404 	addi	r2,sp,1168
 8003f9c:	d8800115 	stw	r2,4(sp)
 8003fa0:	d8812304 	addi	r2,sp,1164
 8003fa4:	d8800215 	stw	r2,8(sp)
 8003fa8:	d8812204 	addi	r2,sp,1160
 8003fac:	df000015 	stw	fp,0(sp)
 8003fb0:	d8800315 	stw	r2,12(sp)
 8003fb4:	8809883a 	mov	r4,r17
 8003fb8:	b00b883a 	mov	r5,r22
 8003fbc:	a00d883a 	mov	r6,r20
 8003fc0:	01c000c4 	movi	r7,3
 8003fc4:	da413c15 	stw	r9,1264(sp)
 8003fc8:	80046cc0 	call	80046cc <_dtoa_r>
 8003fcc:	da413c17 	ldw	r9,1264(sp)
 8003fd0:	1027883a 	mov	r19,r2
 8003fd4:	1707883a 	add	r3,r2,fp
 8003fd8:	e02f883a 	mov	r23,fp
 8003fdc:	99000007 	ldb	r4,0(r19)
 8003fe0:	00800c04 	movi	r2,48
 8003fe4:	20800326 	beq	r4,r2,8003ff4 <___vfprintf_internal_r+0x1b78>
 8003fe8:	da812417 	ldw	r10,1168(sp)
 8003fec:	1a87883a 	add	r3,r3,r10
 8003ff0:	003f1406 	br	8003c44 <___vfprintf_internal_r+0x17c8>
 8003ff4:	b009883a 	mov	r4,r22
 8003ff8:	a00b883a 	mov	r5,r20
 8003ffc:	000d883a 	mov	r6,zero
 8004000:	000f883a 	mov	r7,zero
 8004004:	d8c13b15 	stw	r3,1260(sp)
 8004008:	da413c15 	stw	r9,1264(sp)
 800400c:	800a5440 	call	800a544 <__nedf2>
 8004010:	d8c13b17 	ldw	r3,1260(sp)
 8004014:	da413c17 	ldw	r9,1264(sp)
 8004018:	103ff326 	beq	r2,zero,8003fe8 <___vfprintf_internal_r+0x1b6c>
 800401c:	00800044 	movi	r2,1
 8004020:	15d5c83a 	sub	r10,r2,r23
 8004024:	da812415 	stw	r10,1168(sp)
 8004028:	1a87883a 	add	r3,r3,r10
 800402c:	003f0506 	br	8003c44 <___vfprintf_internal_r+0x17c8>
 8004030:	d9412917 	ldw	r5,1188(sp)
 8004034:	8809883a 	mov	r4,r17
 8004038:	d9811b04 	addi	r6,sp,1132
 800403c:	80024480 	call	8002448 <__sprint_r>
 8004040:	103a541e 	bne	r2,zero,8002994 <___vfprintf_internal_r+0x518>
 8004044:	dc812417 	ldw	r18,1168(sp)
 8004048:	da011d17 	ldw	r8,1140(sp)
 800404c:	d8c11c17 	ldw	r3,1136(sp)
 8004050:	da400404 	addi	r9,sp,16
 8004054:	003eb206 	br	8003b20 <___vfprintf_internal_r+0x16a4>
 8004058:	b82b883a 	mov	r21,r23
 800405c:	0007883a 	mov	r3,zero
 8004060:	00396306 	br	80025f0 <___vfprintf_internal_r+0x174>
 8004064:	04c20074 	movhi	r19,2049
 8004068:	9cf6af04 	addi	r19,r19,-9540
 800406c:	003f4e06 	br	8003da8 <___vfprintf_internal_r+0x192c>
 8004070:	d8812583 	ldbu	r2,1174(sp)
 8004074:	dc012a17 	ldw	r16,1192(sp)
 8004078:	d8013115 	stw	zero,1220(sp)
 800407c:	003a8c06 	br	8002ab0 <___vfprintf_internal_r+0x634>
 8004080:	d8812417 	ldw	r2,1168(sp)
 8004084:	d8812b15 	stw	r2,1196(sp)
 8004088:	1029883a 	mov	r20,r2
 800408c:	00bfff44 	movi	r2,-3
 8004090:	a0800116 	blt	r20,r2,8004098 <___vfprintf_internal_r+0x1c1c>
 8004094:	e5001d0e 	bge	fp,r20,800410c <___vfprintf_internal_r+0x1c90>
 8004098:	94bfff84 	addi	r18,r18,-2
 800409c:	a53fffc4 	addi	r20,r20,-1
 80040a0:	dd012415 	stw	r20,1168(sp)
 80040a4:	dc811fc5 	stb	r18,1151(sp)
 80040a8:	a0007216 	blt	r20,zero,8004274 <___vfprintf_internal_r+0x1df8>
 80040ac:	00800ac4 	movi	r2,43
 80040b0:	d8812005 	stb	r2,1152(sp)
 80040b4:	00800244 	movi	r2,9
 80040b8:	15003516 	blt	r2,r20,8004190 <___vfprintf_internal_r+0x1d14>
 80040bc:	00800c04 	movi	r2,48
 80040c0:	a5000c04 	addi	r20,r20,48
 80040c4:	d8812045 	stb	r2,1153(sp)
 80040c8:	dd012085 	stb	r20,1154(sp)
 80040cc:	d8c120c4 	addi	r3,sp,1155
 80040d0:	d8811fc4 	addi	r2,sp,1151
 80040d4:	1885c83a 	sub	r2,r3,r2
 80040d8:	d8c13217 	ldw	r3,1224(sp)
 80040dc:	d8813515 	stw	r2,1236(sp)
 80040e0:	1885883a 	add	r2,r3,r2
 80040e4:	d8812b15 	stw	r2,1196(sp)
 80040e8:	00800044 	movi	r2,1
 80040ec:	10c0580e 	bge	r2,r3,8004250 <___vfprintf_internal_r+0x1dd4>
 80040f0:	d8812b17 	ldw	r2,1196(sp)
 80040f4:	10800044 	addi	r2,r2,1
 80040f8:	d8812b15 	stw	r2,1196(sp)
 80040fc:	d8812815 	stw	r2,1184(sp)
 8004100:	103ef50e 	bge	r2,zero,8003cd8 <___vfprintf_internal_r+0x185c>
 8004104:	d8012815 	stw	zero,1184(sp)
 8004108:	003ef306 	br	8003cd8 <___vfprintf_internal_r+0x185c>
 800410c:	d8812b17 	ldw	r2,1196(sp)
 8004110:	d8c13217 	ldw	r3,1224(sp)
 8004114:	10c01416 	blt	r2,r3,8004168 <___vfprintf_internal_r+0x1cec>
 8004118:	8400004c 	andi	r16,r16,1
 800411c:	80000326 	beq	r16,zero,800412c <___vfprintf_internal_r+0x1cb0>
 8004120:	d8812b17 	ldw	r2,1196(sp)
 8004124:	10800044 	addi	r2,r2,1
 8004128:	d8812b15 	stw	r2,1196(sp)
 800412c:	d8812815 	stw	r2,1184(sp)
 8004130:	10001416 	blt	r2,zero,8004184 <___vfprintf_internal_r+0x1d08>
 8004134:	048019c4 	movi	r18,103
 8004138:	003ee706 	br	8003cd8 <___vfprintf_internal_r+0x185c>
 800413c:	d8012815 	stw	zero,1184(sp)
 8004140:	003b1a06 	br	8002dac <___vfprintf_internal_r+0x930>
 8004144:	e03e9c1e 	bne	fp,zero,8003bb8 <___vfprintf_internal_r+0x173c>
 8004148:	07000044 	movi	fp,1
 800414c:	003e9a06 	br	8003bb8 <___vfprintf_internal_r+0x173c>
 8004150:	07000184 	movi	fp,6
 8004154:	003e9806 	br	8003bb8 <___vfprintf_internal_r+0x173c>
 8004158:	00c00b44 	movi	r3,45
 800415c:	a520003c 	xorhi	r20,r20,32768
 8004160:	d8c12f05 	stb	r3,1212(sp)
 8004164:	003e9806 	br	8003bc8 <___vfprintf_internal_r+0x174c>
 8004168:	05003f0e 	bge	zero,r20,8004268 <___vfprintf_internal_r+0x1dec>
 800416c:	05000044 	movi	r20,1
 8004170:	d8c13217 	ldw	r3,1224(sp)
 8004174:	a0e9883a 	add	r20,r20,r3
 8004178:	dd012b15 	stw	r20,1196(sp)
 800417c:	dd012815 	stw	r20,1184(sp)
 8004180:	a03fec0e 	bge	r20,zero,8004134 <___vfprintf_internal_r+0x1cb8>
 8004184:	d8012815 	stw	zero,1184(sp)
 8004188:	048019c4 	movi	r18,103
 800418c:	003ed206 	br	8003cd8 <___vfprintf_internal_r+0x185c>
 8004190:	d8c11f84 	addi	r3,sp,1150
 8004194:	102f883a 	mov	r23,r2
 8004198:	4839883a 	mov	fp,r9
 800419c:	a009883a 	mov	r4,r20
 80041a0:	01400284 	movi	r5,10
 80041a4:	182d883a 	mov	r22,r3
 80041a8:	800aa3c0 	call	800aa3c <__modsi3>
 80041ac:	10800c04 	addi	r2,r2,48
 80041b0:	a009883a 	mov	r4,r20
 80041b4:	b0800005 	stb	r2,0(r22)
 80041b8:	01400284 	movi	r5,10
 80041bc:	800a9ec0 	call	800a9ec <__divsi3>
 80041c0:	1029883a 	mov	r20,r2
 80041c4:	b0ffffc4 	addi	r3,r22,-1
 80041c8:	b8bff416 	blt	r23,r2,800419c <___vfprintf_internal_r+0x1d20>
 80041cc:	11400c04 	addi	r5,r2,48
 80041d0:	b17fffc5 	stb	r5,-1(r22)
 80041d4:	d8811fc4 	addi	r2,sp,1151
 80041d8:	e013883a 	mov	r9,fp
 80041dc:	18803e2e 	bgeu	r3,r2,80042d8 <___vfprintf_internal_r+0x1e5c>
 80041e0:	b007883a 	mov	r3,r22
 80041e4:	d9012044 	addi	r4,sp,1153
 80041e8:	00000206 	br	80041f4 <___vfprintf_internal_r+0x1d78>
 80041ec:	19400003 	ldbu	r5,0(r3)
 80041f0:	18c00044 	addi	r3,r3,1
 80041f4:	21400005 	stb	r5,0(r4)
 80041f8:	21000044 	addi	r4,r4,1
 80041fc:	10fffb1e 	bne	r2,r3,80041ec <___vfprintf_internal_r+0x1d70>
 8004200:	d8c12004 	addi	r3,sp,1152
 8004204:	1d87c83a 	sub	r3,r3,r22
 8004208:	d9012044 	addi	r4,sp,1153
 800420c:	20c7883a 	add	r3,r4,r3
 8004210:	003fb006 	br	80040d4 <___vfprintf_internal_r+0x1c58>
 8004214:	e5c00044 	addi	r23,fp,1
 8004218:	003e7406 	br	8003bec <___vfprintf_internal_r+0x1770>
 800421c:	d8c12217 	ldw	r3,1160(sp)
 8004220:	003e9906 	br	8003c88 <___vfprintf_internal_r+0x180c>
 8004224:	d9012d17 	ldw	r4,1204(sp)
 8004228:	ac800043 	ldbu	r18,1(r21)
 800422c:	b82b883a 	mov	r21,r23
 8004230:	20c00017 	ldw	r3,0(r4)
 8004234:	20800104 	addi	r2,r4,4
 8004238:	d8812d15 	stw	r2,1204(sp)
 800423c:	18002116 	blt	r3,zero,80042c4 <___vfprintf_internal_r+0x1e48>
 8004240:	94803fcc 	andi	r18,r18,255
 8004244:	9480201c 	xori	r18,r18,128
 8004248:	94bfe004 	addi	r18,r18,-128
 800424c:	0038e706 	br	80025ec <___vfprintf_internal_r+0x170>
 8004250:	80a0703a 	and	r16,r16,r2
 8004254:	803fa61e 	bne	r16,zero,80040f0 <___vfprintf_internal_r+0x1c74>
 8004258:	d8812b17 	ldw	r2,1196(sp)
 800425c:	d8812815 	stw	r2,1184(sp)
 8004260:	103e9d0e 	bge	r2,zero,8003cd8 <___vfprintf_internal_r+0x185c>
 8004264:	003fa706 	br	8004104 <___vfprintf_internal_r+0x1c88>
 8004268:	00800084 	movi	r2,2
 800426c:	1529c83a 	sub	r20,r2,r20
 8004270:	003fbf06 	br	8004170 <___vfprintf_internal_r+0x1cf4>
 8004274:	00800b44 	movi	r2,45
 8004278:	0529c83a 	sub	r20,zero,r20
 800427c:	d8812005 	stb	r2,1152(sp)
 8004280:	003f8c06 	br	80040b4 <___vfprintf_internal_r+0x1c38>
 8004284:	008011c4 	movi	r2,71
 8004288:	90be6926 	beq	r18,r2,8003c30 <___vfprintf_internal_r+0x17b4>
 800428c:	003e6a06 	br	8003c38 <___vfprintf_internal_r+0x17bc>
 8004290:	00bfffc4 	movi	r2,-1
 8004294:	d8812c15 	stw	r2,1200(sp)
 8004298:	0039ad06 	br	8002950 <___vfprintf_internal_r+0x4d4>
 800429c:	1007883a 	mov	r3,r2
 80042a0:	003e7906 	br	8003c88 <___vfprintf_internal_r+0x180c>
 80042a4:	e000021e 	bne	fp,zero,80042b0 <___vfprintf_internal_r+0x1e34>
 80042a8:	8400004c 	andi	r16,r16,1
 80042ac:	80000e26 	beq	r16,zero,80042e8 <___vfprintf_internal_r+0x1e6c>
 80042b0:	e7000084 	addi	fp,fp,2
 80042b4:	df012b15 	stw	fp,1196(sp)
 80042b8:	df012815 	stw	fp,1184(sp)
 80042bc:	e03e860e 	bge	fp,zero,8003cd8 <___vfprintf_internal_r+0x185c>
 80042c0:	003f9006 	br	8004104 <___vfprintf_internal_r+0x1c88>
 80042c4:	94803fcc 	andi	r18,r18,255
 80042c8:	9480201c 	xori	r18,r18,128
 80042cc:	00ffffc4 	movi	r3,-1
 80042d0:	94bfe004 	addi	r18,r18,-128
 80042d4:	0038c506 	br	80025ec <___vfprintf_internal_r+0x170>
 80042d8:	d8c12044 	addi	r3,sp,1153
 80042dc:	003f7d06 	br	80040d4 <___vfprintf_internal_r+0x1c58>
 80042e0:	dd012417 	ldw	r20,1168(sp)
 80042e4:	003f6d06 	br	800409c <___vfprintf_internal_r+0x1c20>
 80042e8:	00c00044 	movi	r3,1
 80042ec:	d8c12815 	stw	r3,1184(sp)
 80042f0:	d8c12b15 	stw	r3,1196(sp)
 80042f4:	003e7806 	br	8003cd8 <___vfprintf_internal_r+0x185c>

080042f8 <__vfprintf_internal>:
 80042f8:	00820074 	movhi	r2,2049
 80042fc:	10ba6f04 	addi	r2,r2,-5700
 8004300:	2007883a 	mov	r3,r4
 8004304:	11000017 	ldw	r4,0(r2)
 8004308:	2805883a 	mov	r2,r5
 800430c:	300f883a 	mov	r7,r6
 8004310:	180b883a 	mov	r5,r3
 8004314:	100d883a 	mov	r6,r2
 8004318:	800247c1 	jmpi	800247c <___vfprintf_internal_r>

0800431c <__swsetup_r>:
 800431c:	00820074 	movhi	r2,2049
 8004320:	10ba6f04 	addi	r2,r2,-5700
 8004324:	10800017 	ldw	r2,0(r2)
 8004328:	defffd04 	addi	sp,sp,-12
 800432c:	dc400115 	stw	r17,4(sp)
 8004330:	dc000015 	stw	r16,0(sp)
 8004334:	dfc00215 	stw	ra,8(sp)
 8004338:	2023883a 	mov	r17,r4
 800433c:	2821883a 	mov	r16,r5
 8004340:	10000226 	beq	r2,zero,800434c <__swsetup_r+0x30>
 8004344:	10c00e17 	ldw	r3,56(r2)
 8004348:	18003d26 	beq	r3,zero,8004440 <__swsetup_r+0x124>
 800434c:	8080030b 	ldhu	r2,12(r16)
 8004350:	10c0020c 	andi	r3,r2,8
 8004354:	18ffffcc 	andi	r3,r3,65535
 8004358:	18e0001c 	xori	r3,r3,32768
 800435c:	18e00004 	addi	r3,r3,-32768
 8004360:	18001226 	beq	r3,zero,80043ac <__swsetup_r+0x90>
 8004364:	80c00417 	ldw	r3,16(r16)
 8004368:	18001f26 	beq	r3,zero,80043e8 <__swsetup_r+0xcc>
 800436c:	1100004c 	andi	r4,r2,1
 8004370:	2000261e 	bne	r4,zero,800440c <__swsetup_r+0xf0>
 8004374:	1080008c 	andi	r2,r2,2
 8004378:	10bfffcc 	andi	r2,r2,65535
 800437c:	10a0001c 	xori	r2,r2,32768
 8004380:	10a00004 	addi	r2,r2,-32768
 8004384:	1000311e 	bne	r2,zero,800444c <__swsetup_r+0x130>
 8004388:	80800517 	ldw	r2,20(r16)
 800438c:	80800215 	stw	r2,8(r16)
 8004390:	18002326 	beq	r3,zero,8004420 <__swsetup_r+0x104>
 8004394:	0005883a 	mov	r2,zero
 8004398:	dfc00217 	ldw	ra,8(sp)
 800439c:	dc400117 	ldw	r17,4(sp)
 80043a0:	dc000017 	ldw	r16,0(sp)
 80043a4:	dec00304 	addi	sp,sp,12
 80043a8:	f800283a 	ret
 80043ac:	10c0040c 	andi	r3,r2,16
 80043b0:	18ffffcc 	andi	r3,r3,65535
 80043b4:	18e0001c 	xori	r3,r3,32768
 80043b8:	18e00004 	addi	r3,r3,-32768
 80043bc:	18001e26 	beq	r3,zero,8004438 <__swsetup_r+0x11c>
 80043c0:	10c0010c 	andi	r3,r2,4
 80043c4:	18ffffcc 	andi	r3,r3,65535
 80043c8:	18e0001c 	xori	r3,r3,32768
 80043cc:	18e00004 	addi	r3,r3,-32768
 80043d0:	1800211e 	bne	r3,zero,8004458 <__swsetup_r+0x13c>
 80043d4:	80c00417 	ldw	r3,16(r16)
 80043d8:	11400214 	ori	r5,r2,8
 80043dc:	8140030d 	sth	r5,12(r16)
 80043e0:	2805883a 	mov	r2,r5
 80043e4:	183fe11e 	bne	r3,zero,800436c <__swsetup_r+0x50>
 80043e8:	1140a00c 	andi	r5,r2,640
 80043ec:	01008004 	movi	r4,512
 80043f0:	293fde26 	beq	r5,r4,800436c <__swsetup_r+0x50>
 80043f4:	8809883a 	mov	r4,r17
 80043f8:	800b883a 	mov	r5,r16
 80043fc:	8006d180 	call	8006d18 <__smakebuf_r>
 8004400:	8080030b 	ldhu	r2,12(r16)
 8004404:	80c00417 	ldw	r3,16(r16)
 8004408:	003fd806 	br	800436c <__swsetup_r+0x50>
 800440c:	80800517 	ldw	r2,20(r16)
 8004410:	80000215 	stw	zero,8(r16)
 8004414:	0085c83a 	sub	r2,zero,r2
 8004418:	80800615 	stw	r2,24(r16)
 800441c:	183fdd1e 	bne	r3,zero,8004394 <__swsetup_r+0x78>
 8004420:	8080030b 	ldhu	r2,12(r16)
 8004424:	1080200c 	andi	r2,r2,128
 8004428:	10bfffcc 	andi	r2,r2,65535
 800442c:	10a0001c 	xori	r2,r2,32768
 8004430:	10a00004 	addi	r2,r2,-32768
 8004434:	103fd826 	beq	r2,zero,8004398 <__swsetup_r+0x7c>
 8004438:	00bfffc4 	movi	r2,-1
 800443c:	003fd606 	br	8004398 <__swsetup_r+0x7c>
 8004440:	1009883a 	mov	r4,r2
 8004444:	8005fa40 	call	8005fa4 <__sinit>
 8004448:	003fc006 	br	800434c <__swsetup_r+0x30>
 800444c:	0005883a 	mov	r2,zero
 8004450:	80800215 	stw	r2,8(r16)
 8004454:	003fce06 	br	8004390 <__swsetup_r+0x74>
 8004458:	81400c17 	ldw	r5,48(r16)
 800445c:	28000626 	beq	r5,zero,8004478 <__swsetup_r+0x15c>
 8004460:	80c01004 	addi	r3,r16,64
 8004464:	28c00326 	beq	r5,r3,8004474 <__swsetup_r+0x158>
 8004468:	8809883a 	mov	r4,r17
 800446c:	80063280 	call	8006328 <_free_r>
 8004470:	8080030b 	ldhu	r2,12(r16)
 8004474:	80000c15 	stw	zero,48(r16)
 8004478:	80c00417 	ldw	r3,16(r16)
 800447c:	013ff6c4 	movi	r4,-37
 8004480:	2084703a 	and	r2,r4,r2
 8004484:	80000115 	stw	zero,4(r16)
 8004488:	80c00015 	stw	r3,0(r16)
 800448c:	003fd206 	br	80043d8 <__swsetup_r+0xbc>

08004490 <quorem>:
 8004490:	defff204 	addi	sp,sp,-56
 8004494:	dd000815 	stw	r20,32(sp)
 8004498:	20800417 	ldw	r2,16(r4)
 800449c:	2d000417 	ldw	r20,16(r5)
 80044a0:	dcc00715 	stw	r19,28(sp)
 80044a4:	dfc00d15 	stw	ra,52(sp)
 80044a8:	df000c15 	stw	fp,48(sp)
 80044ac:	ddc00b15 	stw	r23,44(sp)
 80044b0:	dd800a15 	stw	r22,40(sp)
 80044b4:	dd400915 	stw	r21,36(sp)
 80044b8:	dc800615 	stw	r18,24(sp)
 80044bc:	dc400515 	stw	r17,20(sp)
 80044c0:	dc000415 	stw	r16,16(sp)
 80044c4:	d9400015 	stw	r5,0(sp)
 80044c8:	2027883a 	mov	r19,r4
 80044cc:	15007d16 	blt	r2,r20,80046c4 <quorem+0x234>
 80044d0:	a0800104 	addi	r2,r20,4
 80044d4:	1085883a 	add	r2,r2,r2
 80044d8:	1085883a 	add	r2,r2,r2
 80044dc:	28ad883a 	add	r22,r5,r2
 80044e0:	2085883a 	add	r2,r4,r2
 80044e4:	10800017 	ldw	r2,0(r2)
 80044e8:	b1400017 	ldw	r5,0(r22)
 80044ec:	a53fffc4 	addi	r20,r20,-1
 80044f0:	1009883a 	mov	r4,r2
 80044f4:	29400044 	addi	r5,r5,1
 80044f8:	d8800115 	stw	r2,4(sp)
 80044fc:	800aa980 	call	800aa98 <__udivsi3>
 8004500:	1025883a 	mov	r18,r2
 8004504:	d8800017 	ldw	r2,0(sp)
 8004508:	9f000504 	addi	fp,r19,20
 800450c:	14000504 	addi	r16,r2,20
 8004510:	90003626 	beq	r18,zero,80045ec <quorem+0x15c>
 8004514:	802b883a 	mov	r21,r16
 8004518:	e023883a 	mov	r17,fp
 800451c:	0007883a 	mov	r3,zero
 8004520:	002f883a 	mov	r23,zero
 8004524:	a9800017 	ldw	r6,0(r21)
 8004528:	900b883a 	mov	r5,r18
 800452c:	d8c00315 	stw	r3,12(sp)
 8004530:	313fffcc 	andi	r4,r6,65535
 8004534:	d9800215 	stw	r6,8(sp)
 8004538:	8001a0c0 	call	8001a0c <__mulsi3>
 800453c:	d9800217 	ldw	r6,8(sp)
 8004540:	d8c00317 	ldw	r3,12(sp)
 8004544:	900b883a 	mov	r5,r18
 8004548:	3008d43a 	srli	r4,r6,16
 800454c:	1887883a 	add	r3,r3,r2
 8004550:	d8c00315 	stw	r3,12(sp)
 8004554:	8001a0c0 	call	8001a0c <__mulsi3>
 8004558:	89400017 	ldw	r5,0(r17)
 800455c:	d8c00317 	ldw	r3,12(sp)
 8004560:	ad400104 	addi	r21,r21,4
 8004564:	293fffcc 	andi	r4,r5,65535
 8004568:	1810d43a 	srli	r8,r3,16
 800456c:	25c9883a 	add	r4,r4,r23
 8004570:	18ffffcc 	andi	r3,r3,65535
 8004574:	20c9c83a 	sub	r4,r4,r3
 8004578:	280cd43a 	srli	r6,r5,16
 800457c:	4085883a 	add	r2,r8,r2
 8004580:	2007d43a 	srai	r3,r4,16
 8004584:	117fffcc 	andi	r5,r2,65535
 8004588:	314bc83a 	sub	r5,r6,r5
 800458c:	28cb883a 	add	r5,r5,r3
 8004590:	8940008d 	sth	r5,2(r17)
 8004594:	8900000d 	sth	r4,0(r17)
 8004598:	1006d43a 	srli	r3,r2,16
 800459c:	282fd43a 	srai	r23,r5,16
 80045a0:	8c400104 	addi	r17,r17,4
 80045a4:	b57fdf2e 	bgeu	r22,r21,8004524 <quorem+0x94>
 80045a8:	d8c00117 	ldw	r3,4(sp)
 80045ac:	18000f1e 	bne	r3,zero,80045ec <quorem+0x15c>
 80045b0:	a0800144 	addi	r2,r20,5
 80045b4:	1085883a 	add	r2,r2,r2
 80045b8:	1085883a 	add	r2,r2,r2
 80045bc:	9887883a 	add	r3,r19,r2
 80045c0:	18bfff04 	addi	r2,r3,-4
 80045c4:	e080082e 	bgeu	fp,r2,80045e8 <quorem+0x158>
 80045c8:	18ffff17 	ldw	r3,-4(r3)
 80045cc:	18000326 	beq	r3,zero,80045dc <quorem+0x14c>
 80045d0:	00000506 	br	80045e8 <quorem+0x158>
 80045d4:	10c00017 	ldw	r3,0(r2)
 80045d8:	1800031e 	bne	r3,zero,80045e8 <quorem+0x158>
 80045dc:	10bfff04 	addi	r2,r2,-4
 80045e0:	a53fffc4 	addi	r20,r20,-1
 80045e4:	e0bffb36 	bltu	fp,r2,80045d4 <quorem+0x144>
 80045e8:	9d000415 	stw	r20,16(r19)
 80045ec:	d9400017 	ldw	r5,0(sp)
 80045f0:	9809883a 	mov	r4,r19
 80045f4:	8007b6c0 	call	8007b6c <__mcmp>
 80045f8:	10002516 	blt	r2,zero,8004690 <quorem+0x200>
 80045fc:	94800044 	addi	r18,r18,1
 8004600:	e007883a 	mov	r3,fp
 8004604:	000d883a 	mov	r6,zero
 8004608:	18800017 	ldw	r2,0(r3)
 800460c:	82000017 	ldw	r8,0(r16)
 8004610:	84000104 	addi	r16,r16,4
 8004614:	11ffffcc 	andi	r7,r2,65535
 8004618:	413fffcc 	andi	r4,r8,65535
 800461c:	398d883a 	add	r6,r7,r6
 8004620:	310fc83a 	sub	r7,r6,r4
 8004624:	4010d43a 	srli	r8,r8,16
 8004628:	100cd43a 	srli	r6,r2,16
 800462c:	3809d43a 	srai	r4,r7,16
 8004630:	19c0000d 	sth	r7,0(r3)
 8004634:	320dc83a 	sub	r6,r6,r8
 8004638:	310d883a 	add	r6,r6,r4
 800463c:	1980008d 	sth	r6,2(r3)
 8004640:	300dd43a 	srai	r6,r6,16
 8004644:	18c00104 	addi	r3,r3,4
 8004648:	b43fef2e 	bgeu	r22,r16,8004608 <quorem+0x178>
 800464c:	a0800144 	addi	r2,r20,5
 8004650:	1085883a 	add	r2,r2,r2
 8004654:	1085883a 	add	r2,r2,r2
 8004658:	9885883a 	add	r2,r19,r2
 800465c:	10c00017 	ldw	r3,0(r2)
 8004660:	18000b1e 	bne	r3,zero,8004690 <quorem+0x200>
 8004664:	10ffff04 	addi	r3,r2,-4
 8004668:	e0c0082e 	bgeu	fp,r3,800468c <quorem+0x1fc>
 800466c:	10bfff17 	ldw	r2,-4(r2)
 8004670:	10000326 	beq	r2,zero,8004680 <quorem+0x1f0>
 8004674:	00000506 	br	800468c <quorem+0x1fc>
 8004678:	18800017 	ldw	r2,0(r3)
 800467c:	1000031e 	bne	r2,zero,800468c <quorem+0x1fc>
 8004680:	18ffff04 	addi	r3,r3,-4
 8004684:	a53fffc4 	addi	r20,r20,-1
 8004688:	e0fffb36 	bltu	fp,r3,8004678 <quorem+0x1e8>
 800468c:	9d000415 	stw	r20,16(r19)
 8004690:	9005883a 	mov	r2,r18
 8004694:	dfc00d17 	ldw	ra,52(sp)
 8004698:	df000c17 	ldw	fp,48(sp)
 800469c:	ddc00b17 	ldw	r23,44(sp)
 80046a0:	dd800a17 	ldw	r22,40(sp)
 80046a4:	dd400917 	ldw	r21,36(sp)
 80046a8:	dd000817 	ldw	r20,32(sp)
 80046ac:	dcc00717 	ldw	r19,28(sp)
 80046b0:	dc800617 	ldw	r18,24(sp)
 80046b4:	dc400517 	ldw	r17,20(sp)
 80046b8:	dc000417 	ldw	r16,16(sp)
 80046bc:	dec00e04 	addi	sp,sp,56
 80046c0:	f800283a 	ret
 80046c4:	0005883a 	mov	r2,zero
 80046c8:	003ff206 	br	8004694 <quorem+0x204>

080046cc <_dtoa_r>:
 80046cc:	20801017 	ldw	r2,64(r4)
 80046d0:	deffdf04 	addi	sp,sp,-132
 80046d4:	dcc01a15 	stw	r19,104(sp)
 80046d8:	dc801915 	stw	r18,100(sp)
 80046dc:	dc401815 	stw	r17,96(sp)
 80046e0:	dc001715 	stw	r16,92(sp)
 80046e4:	dfc02015 	stw	ra,128(sp)
 80046e8:	df001f15 	stw	fp,124(sp)
 80046ec:	ddc01e15 	stw	r23,120(sp)
 80046f0:	dd801d15 	stw	r22,116(sp)
 80046f4:	dd401c15 	stw	r21,112(sp)
 80046f8:	dd001b15 	stw	r20,108(sp)
 80046fc:	d9400315 	stw	r5,12(sp)
 8004700:	d9c00415 	stw	r7,16(sp)
 8004704:	2021883a 	mov	r16,r4
 8004708:	3025883a 	mov	r18,r6
 800470c:	dcc02317 	ldw	r19,140(sp)
 8004710:	3023883a 	mov	r17,r6
 8004714:	10000826 	beq	r2,zero,8004738 <_dtoa_r+0x6c>
 8004718:	20c01117 	ldw	r3,68(r4)
 800471c:	01800044 	movi	r6,1
 8004720:	100b883a 	mov	r5,r2
 8004724:	30cc983a 	sll	r6,r6,r3
 8004728:	10c00115 	stw	r3,4(r2)
 800472c:	11800215 	stw	r6,8(r2)
 8004730:	80072c80 	call	80072c8 <_Bfree>
 8004734:	80001015 	stw	zero,64(r16)
 8004738:	90002f16 	blt	r18,zero,80047f8 <_dtoa_r+0x12c>
 800473c:	98000015 	stw	zero,0(r19)
 8004740:	90dffc2c 	andhi	r3,r18,32752
 8004744:	009ffc34 	movhi	r2,32752
 8004748:	18801c26 	beq	r3,r2,80047bc <_dtoa_r+0xf0>
 800474c:	d9000317 	ldw	r4,12(sp)
 8004750:	880b883a 	mov	r5,r17
 8004754:	000d883a 	mov	r6,zero
 8004758:	000f883a 	mov	r7,zero
 800475c:	800a5440 	call	800a544 <__nedf2>
 8004760:	10002c1e 	bne	r2,zero,8004814 <_dtoa_r+0x148>
 8004764:	d9002217 	ldw	r4,136(sp)
 8004768:	d9c02417 	ldw	r7,144(sp)
 800476c:	00800044 	movi	r2,1
 8004770:	20800015 	stw	r2,0(r4)
 8004774:	38019426 	beq	r7,zero,8004dc8 <_dtoa_r+0x6fc>
 8004778:	00820074 	movhi	r2,2049
 800477c:	10b6bc44 	addi	r2,r2,-9487
 8004780:	38800015 	stw	r2,0(r7)
 8004784:	15ffffc4 	addi	r23,r2,-1
 8004788:	b805883a 	mov	r2,r23
 800478c:	dfc02017 	ldw	ra,128(sp)
 8004790:	df001f17 	ldw	fp,124(sp)
 8004794:	ddc01e17 	ldw	r23,120(sp)
 8004798:	dd801d17 	ldw	r22,116(sp)
 800479c:	dd401c17 	ldw	r21,112(sp)
 80047a0:	dd001b17 	ldw	r20,108(sp)
 80047a4:	dcc01a17 	ldw	r19,104(sp)
 80047a8:	dc801917 	ldw	r18,100(sp)
 80047ac:	dc401817 	ldw	r17,96(sp)
 80047b0:	dc001717 	ldw	r16,92(sp)
 80047b4:	dec02104 	addi	sp,sp,132
 80047b8:	f800283a 	ret
 80047bc:	d8c02217 	ldw	r3,136(sp)
 80047c0:	d9000317 	ldw	r4,12(sp)
 80047c4:	0089c3c4 	movi	r2,9999
 80047c8:	18800015 	stw	r2,0(r3)
 80047cc:	20016c26 	beq	r4,zero,8004d80 <_dtoa_r+0x6b4>
 80047d0:	05c20074 	movhi	r23,2049
 80047d4:	bdf6c804 	addi	r23,r23,-9440
 80047d8:	d9c02417 	ldw	r7,144(sp)
 80047dc:	383fea26 	beq	r7,zero,8004788 <_dtoa_r+0xbc>
 80047e0:	b88000c7 	ldb	r2,3(r23)
 80047e4:	10016d1e 	bne	r2,zero,8004d9c <_dtoa_r+0x6d0>
 80047e8:	b88000c4 	addi	r2,r23,3
 80047ec:	d8c02417 	ldw	r3,144(sp)
 80047f0:	18800015 	stw	r2,0(r3)
 80047f4:	003fe406 	br	8004788 <_dtoa_r+0xbc>
 80047f8:	04600034 	movhi	r17,32768
 80047fc:	8c7fffc4 	addi	r17,r17,-1
 8004800:	9462703a 	and	r17,r18,r17
 8004804:	00800044 	movi	r2,1
 8004808:	98800015 	stw	r2,0(r19)
 800480c:	8825883a 	mov	r18,r17
 8004810:	003fcb06 	br	8004740 <_dtoa_r+0x74>
 8004814:	d9400317 	ldw	r5,12(sp)
 8004818:	9028d53a 	srli	r20,r18,20
 800481c:	d8800204 	addi	r2,sp,8
 8004820:	d8800015 	stw	r2,0(sp)
 8004824:	8009883a 	mov	r4,r16
 8004828:	880d883a 	mov	r6,r17
 800482c:	d9c00104 	addi	r7,sp,4
 8004830:	8007f140 	call	8007f14 <__d2b>
 8004834:	a501ffcc 	andi	r20,r20,2047
 8004838:	1039883a 	mov	fp,r2
 800483c:	a001591e 	bne	r20,zero,8004da4 <_dtoa_r+0x6d8>
 8004840:	dd400217 	ldw	r21,8(sp)
 8004844:	dd000117 	ldw	r20,4(sp)
 8004848:	00befbc4 	movi	r2,-1041
 800484c:	ad29883a 	add	r20,r21,r20
 8004850:	a082d216 	blt	r20,r2,800539c <_dtoa_r+0xcd0>
 8004854:	d8c00317 	ldw	r3,12(sp)
 8004858:	013f0384 	movi	r4,-1010
 800485c:	2509c83a 	sub	r4,r4,r20
 8004860:	a0810484 	addi	r2,r20,1042
 8004864:	9124983a 	sll	r18,r18,r4
 8004868:	1884d83a 	srl	r2,r3,r2
 800486c:	9088b03a 	or	r4,r18,r2
 8004870:	800a85c0 	call	800a85c <__floatunsidf>
 8004874:	1009883a 	mov	r4,r2
 8004878:	017f8434 	movhi	r5,65040
 800487c:	00800044 	movi	r2,1
 8004880:	194b883a 	add	r5,r3,r5
 8004884:	a53fffc4 	addi	r20,r20,-1
 8004888:	d8800f15 	stw	r2,60(sp)
 800488c:	000d883a 	mov	r6,zero
 8004890:	01cffe34 	movhi	r7,16376
 8004894:	8009ff00 	call	8009ff0 <__subdf3>
 8004898:	1009883a 	mov	r4,r2
 800489c:	180b883a 	mov	r5,r3
 80048a0:	0198dbf4 	movhi	r6,25455
 80048a4:	3190d844 	addi	r6,r6,17249
 80048a8:	01cff4f4 	movhi	r7,16339
 80048ac:	39e1e9c4 	addi	r7,r7,-30809
 80048b0:	800a0500 	call	800a050 <__muldf3>
 80048b4:	180b883a 	mov	r5,r3
 80048b8:	01a2d874 	movhi	r6,35681
 80048bc:	31b22cc4 	addi	r6,r6,-14157
 80048c0:	01cff1f4 	movhi	r7,16327
 80048c4:	39e28a04 	addi	r7,r7,-30168
 80048c8:	1009883a 	mov	r4,r2
 80048cc:	8009f9c0 	call	8009f9c <__adddf3>
 80048d0:	a009883a 	mov	r4,r20
 80048d4:	1027883a 	mov	r19,r2
 80048d8:	1825883a 	mov	r18,r3
 80048dc:	800a6c40 	call	800a6c4 <__floatsidf>
 80048e0:	1009883a 	mov	r4,r2
 80048e4:	180b883a 	mov	r5,r3
 80048e8:	019427f4 	movhi	r6,20639
 80048ec:	319e7ec4 	addi	r6,r6,31227
 80048f0:	01cff4f4 	movhi	r7,16339
 80048f4:	39d104c4 	addi	r7,r7,17427
 80048f8:	800a0500 	call	800a050 <__muldf3>
 80048fc:	9809883a 	mov	r4,r19
 8004900:	900b883a 	mov	r5,r18
 8004904:	100d883a 	mov	r6,r2
 8004908:	180f883a 	mov	r7,r3
 800490c:	8009f9c0 	call	8009f9c <__adddf3>
 8004910:	1009883a 	mov	r4,r2
 8004914:	180b883a 	mov	r5,r3
 8004918:	1027883a 	mov	r19,r2
 800491c:	1825883a 	mov	r18,r3
 8004920:	800a7980 	call	800a798 <__fixdfsi>
 8004924:	9809883a 	mov	r4,r19
 8004928:	900b883a 	mov	r5,r18
 800492c:	000d883a 	mov	r6,zero
 8004930:	000f883a 	mov	r7,zero
 8004934:	d8800615 	stw	r2,24(sp)
 8004938:	800a6680 	call	800a668 <__ltdf2>
 800493c:	10027e16 	blt	r2,zero,8005338 <_dtoa_r+0xc6c>
 8004940:	d8c00617 	ldw	r3,24(sp)
 8004944:	00800584 	movi	r2,22
 8004948:	10c26c36 	bltu	r2,r3,80052fc <_dtoa_r+0xc30>
 800494c:	180490fa 	slli	r2,r3,3
 8004950:	00c20074 	movhi	r3,2049
 8004954:	18f6ee04 	addi	r3,r3,-9288
 8004958:	d9800317 	ldw	r6,12(sp)
 800495c:	1885883a 	add	r2,r3,r2
 8004960:	11000017 	ldw	r4,0(r2)
 8004964:	11400117 	ldw	r5,4(r2)
 8004968:	880f883a 	mov	r7,r17
 800496c:	800a5a00 	call	800a5a0 <__gtdf2>
 8004970:	00828f0e 	bge	zero,r2,80053b0 <_dtoa_r+0xce4>
 8004974:	d8800617 	ldw	r2,24(sp)
 8004978:	d8000d15 	stw	zero,52(sp)
 800497c:	10bfffc4 	addi	r2,r2,-1
 8004980:	d8800615 	stw	r2,24(sp)
 8004984:	ad29c83a 	sub	r20,r21,r20
 8004988:	a53fffc4 	addi	r20,r20,-1
 800498c:	a0026616 	blt	r20,zero,8005328 <_dtoa_r+0xc5c>
 8004990:	dd000715 	stw	r20,28(sp)
 8004994:	d8000815 	stw	zero,32(sp)
 8004998:	d8800617 	ldw	r2,24(sp)
 800499c:	10025a16 	blt	r2,zero,8005308 <_dtoa_r+0xc3c>
 80049a0:	d8c00717 	ldw	r3,28(sp)
 80049a4:	d8800b15 	stw	r2,44(sp)
 80049a8:	d8000a15 	stw	zero,40(sp)
 80049ac:	1887883a 	add	r3,r3,r2
 80049b0:	d8c00715 	stw	r3,28(sp)
 80049b4:	d9c00417 	ldw	r7,16(sp)
 80049b8:	00800244 	movi	r2,9
 80049bc:	11c10536 	bltu	r2,r7,8004dd4 <_dtoa_r+0x708>
 80049c0:	00800144 	movi	r2,5
 80049c4:	11c4c60e 	bge	r2,r7,8005ce0 <_dtoa_r+0x1614>
 80049c8:	39ffff04 	addi	r7,r7,-4
 80049cc:	d9c00415 	stw	r7,16(sp)
 80049d0:	0027883a 	mov	r19,zero
 80049d4:	d9c00417 	ldw	r7,16(sp)
 80049d8:	008000c4 	movi	r2,3
 80049dc:	3883a226 	beq	r7,r2,8005868 <_dtoa_r+0x119c>
 80049e0:	11c2bc16 	blt	r2,r7,80054d4 <_dtoa_r+0xe08>
 80049e4:	00800084 	movi	r2,2
 80049e8:	3880fb1e 	bne	r7,r2,8004dd8 <_dtoa_r+0x70c>
 80049ec:	d8000c15 	stw	zero,48(sp)
 80049f0:	d9002117 	ldw	r4,132(sp)
 80049f4:	0103ae0e 	bge	zero,r4,80058b0 <_dtoa_r+0x11e4>
 80049f8:	2025883a 	mov	r18,r4
 80049fc:	d9000e15 	stw	r4,56(sp)
 8004a00:	d9000915 	stw	r4,36(sp)
 8004a04:	80001115 	stw	zero,68(r16)
 8004a08:	008005c4 	movi	r2,23
 8004a0c:	1484b22e 	bgeu	r2,r18,8005cd8 <_dtoa_r+0x160c>
 8004a10:	00c00044 	movi	r3,1
 8004a14:	00800104 	movi	r2,4
 8004a18:	1085883a 	add	r2,r2,r2
 8004a1c:	11000504 	addi	r4,r2,20
 8004a20:	180b883a 	mov	r5,r3
 8004a24:	18c00044 	addi	r3,r3,1
 8004a28:	913ffb2e 	bgeu	r18,r4,8004a18 <_dtoa_r+0x34c>
 8004a2c:	81401115 	stw	r5,68(r16)
 8004a30:	8009883a 	mov	r4,r16
 8004a34:	80072200 	call	8007220 <_Balloc>
 8004a38:	102f883a 	mov	r23,r2
 8004a3c:	80801015 	stw	r2,64(r16)
 8004a40:	00800384 	movi	r2,14
 8004a44:	1480f036 	bltu	r2,r18,8004e08 <_dtoa_r+0x73c>
 8004a48:	9800ef26 	beq	r19,zero,8004e08 <_dtoa_r+0x73c>
 8004a4c:	d8800617 	ldw	r2,24(sp)
 8004a50:	00839c0e 	bge	zero,r2,80058c4 <_dtoa_r+0x11f8>
 8004a54:	d8c00617 	ldw	r3,24(sp)
 8004a58:	108003cc 	andi	r2,r2,15
 8004a5c:	100490fa 	slli	r2,r2,3
 8004a60:	182bd13a 	srai	r21,r3,4
 8004a64:	00c20074 	movhi	r3,2049
 8004a68:	18f6ee04 	addi	r3,r3,-9288
 8004a6c:	1885883a 	add	r2,r3,r2
 8004a70:	a8c0040c 	andi	r3,r21,16
 8004a74:	12800017 	ldw	r10,0(r2)
 8004a78:	15800117 	ldw	r22,4(r2)
 8004a7c:	18038726 	beq	r3,zero,800589c <_dtoa_r+0x11d0>
 8004a80:	00820074 	movhi	r2,2049
 8004a84:	10b6e404 	addi	r2,r2,-9328
 8004a88:	11800817 	ldw	r6,32(r2)
 8004a8c:	11c00917 	ldw	r7,36(r2)
 8004a90:	d9000317 	ldw	r4,12(sp)
 8004a94:	880b883a 	mov	r5,r17
 8004a98:	da801515 	stw	r10,84(sp)
 8004a9c:	800a3340 	call	800a334 <__divdf3>
 8004aa0:	da801517 	ldw	r10,84(sp)
 8004aa4:	d8801015 	stw	r2,64(sp)
 8004aa8:	1829883a 	mov	r20,r3
 8004aac:	ad4003cc 	andi	r21,r21,15
 8004ab0:	048000c4 	movi	r18,3
 8004ab4:	a8001126 	beq	r21,zero,8004afc <_dtoa_r+0x430>
 8004ab8:	04c20074 	movhi	r19,2049
 8004abc:	9cf6e404 	addi	r19,r19,-9328
 8004ac0:	5005883a 	mov	r2,r10
 8004ac4:	b007883a 	mov	r3,r22
 8004ac8:	a980004c 	andi	r6,r21,1
 8004acc:	1009883a 	mov	r4,r2
 8004ad0:	a82bd07a 	srai	r21,r21,1
 8004ad4:	180b883a 	mov	r5,r3
 8004ad8:	30000426 	beq	r6,zero,8004aec <_dtoa_r+0x420>
 8004adc:	99800017 	ldw	r6,0(r19)
 8004ae0:	99c00117 	ldw	r7,4(r19)
 8004ae4:	94800044 	addi	r18,r18,1
 8004ae8:	800a0500 	call	800a050 <__muldf3>
 8004aec:	9cc00204 	addi	r19,r19,8
 8004af0:	a83ff51e 	bne	r21,zero,8004ac8 <_dtoa_r+0x3fc>
 8004af4:	1015883a 	mov	r10,r2
 8004af8:	182d883a 	mov	r22,r3
 8004afc:	d9001017 	ldw	r4,64(sp)
 8004b00:	a00b883a 	mov	r5,r20
 8004b04:	500d883a 	mov	r6,r10
 8004b08:	b00f883a 	mov	r7,r22
 8004b0c:	800a3340 	call	800a334 <__divdf3>
 8004b10:	1027883a 	mov	r19,r2
 8004b14:	1829883a 	mov	r20,r3
 8004b18:	d8c00d17 	ldw	r3,52(sp)
 8004b1c:	18000626 	beq	r3,zero,8004b38 <_dtoa_r+0x46c>
 8004b20:	9809883a 	mov	r4,r19
 8004b24:	a00b883a 	mov	r5,r20
 8004b28:	000d883a 	mov	r6,zero
 8004b2c:	01cffc34 	movhi	r7,16368
 8004b30:	800a6680 	call	800a668 <__ltdf2>
 8004b34:	10040e16 	blt	r2,zero,8005b70 <_dtoa_r+0x14a4>
 8004b38:	9009883a 	mov	r4,r18
 8004b3c:	800a6c40 	call	800a6c4 <__floatsidf>
 8004b40:	1009883a 	mov	r4,r2
 8004b44:	180b883a 	mov	r5,r3
 8004b48:	980d883a 	mov	r6,r19
 8004b4c:	a00f883a 	mov	r7,r20
 8004b50:	800a0500 	call	800a050 <__muldf3>
 8004b54:	1009883a 	mov	r4,r2
 8004b58:	180b883a 	mov	r5,r3
 8004b5c:	000d883a 	mov	r6,zero
 8004b60:	01d00734 	movhi	r7,16412
 8004b64:	8009f9c0 	call	8009f9c <__adddf3>
 8004b68:	057f3034 	movhi	r21,64704
 8004b6c:	1d6b883a 	add	r21,r3,r21
 8004b70:	d8c00917 	ldw	r3,36(sp)
 8004b74:	1025883a 	mov	r18,r2
 8004b78:	18031f26 	beq	r3,zero,80057f8 <_dtoa_r+0x112c>
 8004b7c:	d8800617 	ldw	r2,24(sp)
 8004b80:	dac00917 	ldw	r11,36(sp)
 8004b84:	d8801315 	stw	r2,76(sp)
 8004b88:	d8c00c17 	ldw	r3,48(sp)
 8004b8c:	18039026 	beq	r3,zero,80059d0 <_dtoa_r+0x1304>
 8004b90:	58bfffc4 	addi	r2,r11,-1
 8004b94:	100490fa 	slli	r2,r2,3
 8004b98:	00c20074 	movhi	r3,2049
 8004b9c:	18f6ee04 	addi	r3,r3,-9288
 8004ba0:	0009883a 	mov	r4,zero
 8004ba4:	1885883a 	add	r2,r3,r2
 8004ba8:	11800017 	ldw	r6,0(r2)
 8004bac:	11c00117 	ldw	r7,4(r2)
 8004bb0:	014ff834 	movhi	r5,16352
 8004bb4:	dac01615 	stw	r11,88(sp)
 8004bb8:	800a3340 	call	800a334 <__divdf3>
 8004bbc:	900d883a 	mov	r6,r18
 8004bc0:	a80f883a 	mov	r7,r21
 8004bc4:	1009883a 	mov	r4,r2
 8004bc8:	180b883a 	mov	r5,r3
 8004bcc:	8009ff00 	call	8009ff0 <__subdf3>
 8004bd0:	a00b883a 	mov	r5,r20
 8004bd4:	9809883a 	mov	r4,r19
 8004bd8:	182b883a 	mov	r21,r3
 8004bdc:	d8801015 	stw	r2,64(sp)
 8004be0:	800a7980 	call	800a798 <__fixdfsi>
 8004be4:	1009883a 	mov	r4,r2
 8004be8:	d8801515 	stw	r2,84(sp)
 8004bec:	800a6c40 	call	800a6c4 <__floatsidf>
 8004bf0:	9809883a 	mov	r4,r19
 8004bf4:	a00b883a 	mov	r5,r20
 8004bf8:	100d883a 	mov	r6,r2
 8004bfc:	180f883a 	mov	r7,r3
 8004c00:	8009ff00 	call	8009ff0 <__subdf3>
 8004c04:	da401517 	ldw	r9,84(sp)
 8004c08:	d9001017 	ldw	r4,64(sp)
 8004c0c:	a80b883a 	mov	r5,r21
 8004c10:	4d000c04 	addi	r20,r9,48
 8004c14:	bd000005 	stb	r20,0(r23)
 8004c18:	100d883a 	mov	r6,r2
 8004c1c:	180f883a 	mov	r7,r3
 8004c20:	bd800044 	addi	r22,r23,1
 8004c24:	1025883a 	mov	r18,r2
 8004c28:	1827883a 	mov	r19,r3
 8004c2c:	800a5a00 	call	800a5a0 <__gtdf2>
 8004c30:	00842216 	blt	zero,r2,8005cbc <_dtoa_r+0x15f0>
 8004c34:	0009883a 	mov	r4,zero
 8004c38:	014ffc34 	movhi	r5,16368
 8004c3c:	900d883a 	mov	r6,r18
 8004c40:	980f883a 	mov	r7,r19
 8004c44:	8009ff00 	call	8009ff0 <__subdf3>
 8004c48:	d9001017 	ldw	r4,64(sp)
 8004c4c:	a80b883a 	mov	r5,r21
 8004c50:	100d883a 	mov	r6,r2
 8004c54:	180f883a 	mov	r7,r3
 8004c58:	800a5a00 	call	800a5a0 <__gtdf2>
 8004c5c:	dac01617 	ldw	r11,88(sp)
 8004c60:	00841316 	blt	zero,r2,8005cb0 <_dtoa_r+0x15e4>
 8004c64:	00800044 	movi	r2,1
 8004c68:	12c0670e 	bge	r2,r11,8004e08 <_dtoa_r+0x73c>
 8004c6c:	bad7883a 	add	r11,r23,r11
 8004c70:	df001115 	stw	fp,68(sp)
 8004c74:	dc401215 	stw	r17,72(sp)
 8004c78:	5839883a 	mov	fp,r11
 8004c7c:	dc401017 	ldw	r17,64(sp)
 8004c80:	00000806 	br	8004ca4 <_dtoa_r+0x5d8>
 8004c84:	8009ff00 	call	8009ff0 <__subdf3>
 8004c88:	1009883a 	mov	r4,r2
 8004c8c:	180b883a 	mov	r5,r3
 8004c90:	880d883a 	mov	r6,r17
 8004c94:	a80f883a 	mov	r7,r21
 8004c98:	800a6680 	call	800a668 <__ltdf2>
 8004c9c:	1003ee16 	blt	r2,zero,8005c58 <_dtoa_r+0x158c>
 8004ca0:	b703f126 	beq	r22,fp,8005c68 <_dtoa_r+0x159c>
 8004ca4:	8809883a 	mov	r4,r17
 8004ca8:	a80b883a 	mov	r5,r21
 8004cac:	000d883a 	mov	r6,zero
 8004cb0:	01d00934 	movhi	r7,16420
 8004cb4:	800a0500 	call	800a050 <__muldf3>
 8004cb8:	000d883a 	mov	r6,zero
 8004cbc:	01d00934 	movhi	r7,16420
 8004cc0:	9009883a 	mov	r4,r18
 8004cc4:	980b883a 	mov	r5,r19
 8004cc8:	1023883a 	mov	r17,r2
 8004ccc:	182b883a 	mov	r21,r3
 8004cd0:	800a0500 	call	800a050 <__muldf3>
 8004cd4:	180b883a 	mov	r5,r3
 8004cd8:	1009883a 	mov	r4,r2
 8004cdc:	1825883a 	mov	r18,r3
 8004ce0:	1027883a 	mov	r19,r2
 8004ce4:	800a7980 	call	800a798 <__fixdfsi>
 8004ce8:	1009883a 	mov	r4,r2
 8004cec:	1029883a 	mov	r20,r2
 8004cf0:	800a6c40 	call	800a6c4 <__floatsidf>
 8004cf4:	9809883a 	mov	r4,r19
 8004cf8:	900b883a 	mov	r5,r18
 8004cfc:	100d883a 	mov	r6,r2
 8004d00:	180f883a 	mov	r7,r3
 8004d04:	8009ff00 	call	8009ff0 <__subdf3>
 8004d08:	a5000c04 	addi	r20,r20,48
 8004d0c:	b5000005 	stb	r20,0(r22)
 8004d10:	1009883a 	mov	r4,r2
 8004d14:	180b883a 	mov	r5,r3
 8004d18:	880d883a 	mov	r6,r17
 8004d1c:	a80f883a 	mov	r7,r21
 8004d20:	1025883a 	mov	r18,r2
 8004d24:	1827883a 	mov	r19,r3
 8004d28:	800a6680 	call	800a668 <__ltdf2>
 8004d2c:	b5800044 	addi	r22,r22,1
 8004d30:	0009883a 	mov	r4,zero
 8004d34:	014ffc34 	movhi	r5,16368
 8004d38:	900d883a 	mov	r6,r18
 8004d3c:	980f883a 	mov	r7,r19
 8004d40:	103fd00e 	bge	r2,zero,8004c84 <_dtoa_r+0x5b8>
 8004d44:	d9001317 	ldw	r4,76(sp)
 8004d48:	df001117 	ldw	fp,68(sp)
 8004d4c:	d9000615 	stw	r4,24(sp)
 8004d50:	8009883a 	mov	r4,r16
 8004d54:	e00b883a 	mov	r5,fp
 8004d58:	80072c80 	call	80072c8 <_Bfree>
 8004d5c:	d9c00617 	ldw	r7,24(sp)
 8004d60:	d8c02217 	ldw	r3,136(sp)
 8004d64:	d9002417 	ldw	r4,144(sp)
 8004d68:	b0000005 	stb	zero,0(r22)
 8004d6c:	38800044 	addi	r2,r7,1
 8004d70:	18800015 	stw	r2,0(r3)
 8004d74:	203e8426 	beq	r4,zero,8004788 <_dtoa_r+0xbc>
 8004d78:	25800015 	stw	r22,0(r4)
 8004d7c:	003e8206 	br	8004788 <_dtoa_r+0xbc>
 8004d80:	00800434 	movhi	r2,16
 8004d84:	10bfffc4 	addi	r2,r2,-1
 8004d88:	90a4703a 	and	r18,r18,r2
 8004d8c:	903e901e 	bne	r18,zero,80047d0 <_dtoa_r+0x104>
 8004d90:	05c20074 	movhi	r23,2049
 8004d94:	bdf6c504 	addi	r23,r23,-9452
 8004d98:	003e8f06 	br	80047d8 <_dtoa_r+0x10c>
 8004d9c:	b8800204 	addi	r2,r23,8
 8004da0:	003e9206 	br	80047ec <_dtoa_r+0x120>
 8004da4:	01400434 	movhi	r5,16
 8004da8:	297fffc4 	addi	r5,r5,-1
 8004dac:	894a703a 	and	r5,r17,r5
 8004db0:	d9000317 	ldw	r4,12(sp)
 8004db4:	294ffc34 	orhi	r5,r5,16368
 8004db8:	a53f0044 	addi	r20,r20,-1023
 8004dbc:	dd400217 	ldw	r21,8(sp)
 8004dc0:	d8000f15 	stw	zero,60(sp)
 8004dc4:	003eb106 	br	800488c <_dtoa_r+0x1c0>
 8004dc8:	05c20074 	movhi	r23,2049
 8004dcc:	bdf6bc04 	addi	r23,r23,-9488
 8004dd0:	003e6d06 	br	8004788 <_dtoa_r+0xbc>
 8004dd4:	d8000415 	stw	zero,16(sp)
 8004dd8:	80001115 	stw	zero,68(r16)
 8004ddc:	8009883a 	mov	r4,r16
 8004de0:	000b883a 	mov	r5,zero
 8004de4:	80072200 	call	8007220 <_Balloc>
 8004de8:	01ffffc4 	movi	r7,-1
 8004dec:	102f883a 	mov	r23,r2
 8004df0:	80801015 	stw	r2,64(r16)
 8004df4:	00800044 	movi	r2,1
 8004df8:	d9c00915 	stw	r7,36(sp)
 8004dfc:	d8002115 	stw	zero,132(sp)
 8004e00:	d9c00e15 	stw	r7,56(sp)
 8004e04:	d8800c15 	stw	r2,48(sp)
 8004e08:	d8800117 	ldw	r2,4(sp)
 8004e0c:	10008b16 	blt	r2,zero,800503c <_dtoa_r+0x970>
 8004e10:	d9000617 	ldw	r4,24(sp)
 8004e14:	00c00384 	movi	r3,14
 8004e18:	19008816 	blt	r3,r4,800503c <_dtoa_r+0x970>
 8004e1c:	200490fa 	slli	r2,r4,3
 8004e20:	d9c02117 	ldw	r7,132(sp)
 8004e24:	00c20074 	movhi	r3,2049
 8004e28:	18f6ee04 	addi	r3,r3,-9288
 8004e2c:	1885883a 	add	r2,r3,r2
 8004e30:	14800017 	ldw	r18,0(r2)
 8004e34:	14c00117 	ldw	r19,4(r2)
 8004e38:	3801c916 	blt	r7,zero,8005560 <_dtoa_r+0xe94>
 8004e3c:	d9000317 	ldw	r4,12(sp)
 8004e40:	900d883a 	mov	r6,r18
 8004e44:	980f883a 	mov	r7,r19
 8004e48:	880b883a 	mov	r5,r17
 8004e4c:	800a3340 	call	800a334 <__divdf3>
 8004e50:	180b883a 	mov	r5,r3
 8004e54:	1009883a 	mov	r4,r2
 8004e58:	800a7980 	call	800a798 <__fixdfsi>
 8004e5c:	1009883a 	mov	r4,r2
 8004e60:	102b883a 	mov	r21,r2
 8004e64:	800a6c40 	call	800a6c4 <__floatsidf>
 8004e68:	1009883a 	mov	r4,r2
 8004e6c:	180b883a 	mov	r5,r3
 8004e70:	900d883a 	mov	r6,r18
 8004e74:	980f883a 	mov	r7,r19
 8004e78:	800a0500 	call	800a050 <__muldf3>
 8004e7c:	d9000317 	ldw	r4,12(sp)
 8004e80:	880b883a 	mov	r5,r17
 8004e84:	100d883a 	mov	r6,r2
 8004e88:	180f883a 	mov	r7,r3
 8004e8c:	8009ff00 	call	8009ff0 <__subdf3>
 8004e90:	d9c00917 	ldw	r7,36(sp)
 8004e94:	1009883a 	mov	r4,r2
 8004e98:	a8800c04 	addi	r2,r21,48
 8004e9c:	b8800005 	stb	r2,0(r23)
 8004ea0:	01800044 	movi	r6,1
 8004ea4:	180b883a 	mov	r5,r3
 8004ea8:	2005883a 	mov	r2,r4
 8004eac:	bd800044 	addi	r22,r23,1
 8004eb0:	39803726 	beq	r7,r6,8004f90 <_dtoa_r+0x8c4>
 8004eb4:	000d883a 	mov	r6,zero
 8004eb8:	01d00934 	movhi	r7,16420
 8004ebc:	800a0500 	call	800a050 <__muldf3>
 8004ec0:	1009883a 	mov	r4,r2
 8004ec4:	180b883a 	mov	r5,r3
 8004ec8:	000d883a 	mov	r6,zero
 8004ecc:	000f883a 	mov	r7,zero
 8004ed0:	1029883a 	mov	r20,r2
 8004ed4:	1823883a 	mov	r17,r3
 8004ed8:	800a4e80 	call	800a4e8 <__eqdf2>
 8004edc:	103f9c26 	beq	r2,zero,8004d50 <_dtoa_r+0x684>
 8004ee0:	dd400917 	ldw	r21,36(sp)
 8004ee4:	dc000415 	stw	r16,16(sp)
 8004ee8:	00000906 	br	8004f10 <_dtoa_r+0x844>
 8004eec:	800a0500 	call	800a050 <__muldf3>
 8004ef0:	1009883a 	mov	r4,r2
 8004ef4:	180b883a 	mov	r5,r3
 8004ef8:	000d883a 	mov	r6,zero
 8004efc:	000f883a 	mov	r7,zero
 8004f00:	1029883a 	mov	r20,r2
 8004f04:	1823883a 	mov	r17,r3
 8004f08:	800a4e80 	call	800a4e8 <__eqdf2>
 8004f0c:	10022926 	beq	r2,zero,80057b4 <_dtoa_r+0x10e8>
 8004f10:	900d883a 	mov	r6,r18
 8004f14:	980f883a 	mov	r7,r19
 8004f18:	a009883a 	mov	r4,r20
 8004f1c:	880b883a 	mov	r5,r17
 8004f20:	800a3340 	call	800a334 <__divdf3>
 8004f24:	180b883a 	mov	r5,r3
 8004f28:	1009883a 	mov	r4,r2
 8004f2c:	800a7980 	call	800a798 <__fixdfsi>
 8004f30:	1009883a 	mov	r4,r2
 8004f34:	1021883a 	mov	r16,r2
 8004f38:	800a6c40 	call	800a6c4 <__floatsidf>
 8004f3c:	1009883a 	mov	r4,r2
 8004f40:	180b883a 	mov	r5,r3
 8004f44:	900d883a 	mov	r6,r18
 8004f48:	980f883a 	mov	r7,r19
 8004f4c:	800a0500 	call	800a050 <__muldf3>
 8004f50:	a009883a 	mov	r4,r20
 8004f54:	880b883a 	mov	r5,r17
 8004f58:	100d883a 	mov	r6,r2
 8004f5c:	180f883a 	mov	r7,r3
 8004f60:	8009ff00 	call	8009ff0 <__subdf3>
 8004f64:	82400c04 	addi	r9,r16,48
 8004f68:	b2400005 	stb	r9,0(r22)
 8004f6c:	b5800044 	addi	r22,r22,1
 8004f70:	b5d3c83a 	sub	r9,r22,r23
 8004f74:	000d883a 	mov	r6,zero
 8004f78:	01d00934 	movhi	r7,16420
 8004f7c:	1009883a 	mov	r4,r2
 8004f80:	180b883a 	mov	r5,r3
 8004f84:	aa7fd91e 	bne	r21,r9,8004eec <_dtoa_r+0x820>
 8004f88:	802b883a 	mov	r21,r16
 8004f8c:	dc000417 	ldw	r16,16(sp)
 8004f90:	1009883a 	mov	r4,r2
 8004f94:	180b883a 	mov	r5,r3
 8004f98:	100d883a 	mov	r6,r2
 8004f9c:	180f883a 	mov	r7,r3
 8004fa0:	8009f9c0 	call	8009f9c <__adddf3>
 8004fa4:	9009883a 	mov	r4,r18
 8004fa8:	980b883a 	mov	r5,r19
 8004fac:	100d883a 	mov	r6,r2
 8004fb0:	180f883a 	mov	r7,r3
 8004fb4:	1023883a 	mov	r17,r2
 8004fb8:	1829883a 	mov	r20,r3
 8004fbc:	800a6680 	call	800a668 <__ltdf2>
 8004fc0:	10000816 	blt	r2,zero,8004fe4 <_dtoa_r+0x918>
 8004fc4:	9009883a 	mov	r4,r18
 8004fc8:	980b883a 	mov	r5,r19
 8004fcc:	880d883a 	mov	r6,r17
 8004fd0:	a00f883a 	mov	r7,r20
 8004fd4:	800a5440 	call	800a544 <__nedf2>
 8004fd8:	103f5d1e 	bne	r2,zero,8004d50 <_dtoa_r+0x684>
 8004fdc:	ad40004c 	andi	r21,r21,1
 8004fe0:	a83f5b26 	beq	r21,zero,8004d50 <_dtoa_r+0x684>
 8004fe4:	b53fffc3 	ldbu	r20,-1(r22)
 8004fe8:	b0ffff84 	addi	r3,r22,-2
 8004fec:	01400e44 	movi	r5,57
 8004ff0:	00000306 	br	8005000 <_dtoa_r+0x934>
 8004ff4:	1d000003 	ldbu	r20,0(r3)
 8004ff8:	102d883a 	mov	r22,r2
 8004ffc:	18ffffc4 	addi	r3,r3,-1
 8005000:	a1003fcc 	andi	r4,r20,255
 8005004:	2100201c 	xori	r4,r4,128
 8005008:	213fe004 	addi	r4,r4,-128
 800500c:	b0bfffc4 	addi	r2,r22,-1
 8005010:	2142ca1e 	bne	r4,r5,8005b3c <_dtoa_r+0x1470>
 8005014:	b8bff71e 	bne	r23,r2,8004ff4 <_dtoa_r+0x928>
 8005018:	d8800617 	ldw	r2,24(sp)
 800501c:	05000c44 	movi	r20,49
 8005020:	10800044 	addi	r2,r2,1
 8005024:	d8800615 	stw	r2,24(sp)
 8005028:	00800c04 	movi	r2,48
 800502c:	b8800005 	stb	r2,0(r23)
 8005030:	b805883a 	mov	r2,r23
 8005034:	15000005 	stb	r20,0(r2)
 8005038:	003f4506 	br	8004d50 <_dtoa_r+0x684>
 800503c:	d9c00c17 	ldw	r7,48(sp)
 8005040:	3800c926 	beq	r7,zero,8005368 <_dtoa_r+0xc9c>
 8005044:	d9c00417 	ldw	r7,16(sp)
 8005048:	00c00044 	movi	r3,1
 800504c:	19c16c0e 	bge	r3,r7,8005600 <_dtoa_r+0xf34>
 8005050:	d9000917 	ldw	r4,36(sp)
 8005054:	d9c00a17 	ldw	r7,40(sp)
 8005058:	24ffffc4 	addi	r19,r4,-1
 800505c:	3cc20716 	blt	r7,r19,800587c <_dtoa_r+0x11b0>
 8005060:	3ce7c83a 	sub	r19,r7,r19
 8005064:	d9c00917 	ldw	r7,36(sp)
 8005068:	3802ae16 	blt	r7,zero,8005b24 <_dtoa_r+0x1458>
 800506c:	dc800817 	ldw	r18,32(sp)
 8005070:	d8800917 	ldw	r2,36(sp)
 8005074:	d8c00817 	ldw	r3,32(sp)
 8005078:	d9c00717 	ldw	r7,28(sp)
 800507c:	8009883a 	mov	r4,r16
 8005080:	1887883a 	add	r3,r3,r2
 8005084:	388f883a 	add	r7,r7,r2
 8005088:	01400044 	movi	r5,1
 800508c:	d8c00815 	stw	r3,32(sp)
 8005090:	d9c00715 	stw	r7,28(sp)
 8005094:	80076500 	call	8007650 <__i2b>
 8005098:	102b883a 	mov	r21,r2
 800509c:	90000a26 	beq	r18,zero,80050c8 <_dtoa_r+0x9fc>
 80050a0:	d8800717 	ldw	r2,28(sp)
 80050a4:	0080080e 	bge	zero,r2,80050c8 <_dtoa_r+0x9fc>
 80050a8:	90812b16 	blt	r18,r2,8005558 <_dtoa_r+0xe8c>
 80050ac:	d8c00817 	ldw	r3,32(sp)
 80050b0:	d9000717 	ldw	r4,28(sp)
 80050b4:	90a5c83a 	sub	r18,r18,r2
 80050b8:	1887c83a 	sub	r3,r3,r2
 80050bc:	2089c83a 	sub	r4,r4,r2
 80050c0:	d8c00815 	stw	r3,32(sp)
 80050c4:	d9000715 	stw	r4,28(sp)
 80050c8:	d9c00a17 	ldw	r7,40(sp)
 80050cc:	01c0140e 	bge	zero,r7,8005120 <_dtoa_r+0xa54>
 80050d0:	d8800c17 	ldw	r2,48(sp)
 80050d4:	1001de26 	beq	r2,zero,8005850 <_dtoa_r+0x1184>
 80050d8:	04c00e0e 	bge	zero,r19,8005114 <_dtoa_r+0xa48>
 80050dc:	a80b883a 	mov	r5,r21
 80050e0:	8009883a 	mov	r4,r16
 80050e4:	980d883a 	mov	r6,r19
 80050e8:	80078e40 	call	80078e4 <__pow5mult>
 80050ec:	e00d883a 	mov	r6,fp
 80050f0:	8009883a 	mov	r4,r16
 80050f4:	100b883a 	mov	r5,r2
 80050f8:	102b883a 	mov	r21,r2
 80050fc:	800768c0 	call	800768c <__multiply>
 8005100:	1029883a 	mov	r20,r2
 8005104:	e00b883a 	mov	r5,fp
 8005108:	8009883a 	mov	r4,r16
 800510c:	80072c80 	call	80072c8 <_Bfree>
 8005110:	a039883a 	mov	fp,r20
 8005114:	d8c00a17 	ldw	r3,40(sp)
 8005118:	1ccdc83a 	sub	r6,r3,r19
 800511c:	3001291e 	bne	r6,zero,80055c4 <_dtoa_r+0xef8>
 8005120:	8009883a 	mov	r4,r16
 8005124:	01400044 	movi	r5,1
 8005128:	80076500 	call	8007650 <__i2b>
 800512c:	d9000b17 	ldw	r4,44(sp)
 8005130:	1029883a 	mov	r20,r2
 8005134:	0100050e 	bge	zero,r4,800514c <_dtoa_r+0xa80>
 8005138:	d9800b17 	ldw	r6,44(sp)
 800513c:	8009883a 	mov	r4,r16
 8005140:	100b883a 	mov	r5,r2
 8005144:	80078e40 	call	80078e4 <__pow5mult>
 8005148:	1029883a 	mov	r20,r2
 800514c:	d9c00417 	ldw	r7,16(sp)
 8005150:	00800044 	movi	r2,1
 8005154:	11c0f00e 	bge	r2,r7,8005518 <_dtoa_r+0xe4c>
 8005158:	0023883a 	mov	r17,zero
 800515c:	d8800b17 	ldw	r2,44(sp)
 8005160:	1001741e 	bne	r2,zero,8005734 <_dtoa_r+0x1068>
 8005164:	00800044 	movi	r2,1
 8005168:	d8c00717 	ldw	r3,28(sp)
 800516c:	10c5883a 	add	r2,r2,r3
 8005170:	108007cc 	andi	r2,r2,31
 8005174:	10008026 	beq	r2,zero,8005378 <_dtoa_r+0xcac>
 8005178:	01000804 	movi	r4,32
 800517c:	2089c83a 	sub	r4,r4,r2
 8005180:	00c00104 	movi	r3,4
 8005184:	1902d00e 	bge	r3,r4,8005cc8 <_dtoa_r+0x15fc>
 8005188:	d9000817 	ldw	r4,32(sp)
 800518c:	d9c00717 	ldw	r7,28(sp)
 8005190:	00c00704 	movi	r3,28
 8005194:	1885c83a 	sub	r2,r3,r2
 8005198:	2089883a 	add	r4,r4,r2
 800519c:	388f883a 	add	r7,r7,r2
 80051a0:	d9000815 	stw	r4,32(sp)
 80051a4:	90a5883a 	add	r18,r18,r2
 80051a8:	d9c00715 	stw	r7,28(sp)
 80051ac:	d9c00817 	ldw	r7,32(sp)
 80051b0:	01c0050e 	bge	zero,r7,80051c8 <_dtoa_r+0xafc>
 80051b4:	e00b883a 	mov	r5,fp
 80051b8:	8009883a 	mov	r4,r16
 80051bc:	380d883a 	mov	r6,r7
 80051c0:	8007a100 	call	8007a10 <__lshift>
 80051c4:	1039883a 	mov	fp,r2
 80051c8:	d8800717 	ldw	r2,28(sp)
 80051cc:	0080050e 	bge	zero,r2,80051e4 <_dtoa_r+0xb18>
 80051d0:	a00b883a 	mov	r5,r20
 80051d4:	8009883a 	mov	r4,r16
 80051d8:	100d883a 	mov	r6,r2
 80051dc:	8007a100 	call	8007a10 <__lshift>
 80051e0:	1029883a 	mov	r20,r2
 80051e4:	d8c00d17 	ldw	r3,52(sp)
 80051e8:	1801401e 	bne	r3,zero,80056ec <_dtoa_r+0x1020>
 80051ec:	d8800917 	ldw	r2,36(sp)
 80051f0:	00815a0e 	bge	zero,r2,800575c <_dtoa_r+0x1090>
 80051f4:	d8c00c17 	ldw	r3,48(sp)
 80051f8:	18006f1e 	bne	r3,zero,80053b8 <_dtoa_r+0xcec>
 80051fc:	b823883a 	mov	r17,r23
 8005200:	dc800917 	ldw	r18,36(sp)
 8005204:	00000206 	br	8005210 <_dtoa_r+0xb44>
 8005208:	80072f00 	call	80072f0 <__multadd>
 800520c:	1039883a 	mov	fp,r2
 8005210:	e009883a 	mov	r4,fp
 8005214:	a00b883a 	mov	r5,r20
 8005218:	80044900 	call	8004490 <quorem>
 800521c:	10800c04 	addi	r2,r2,48
 8005220:	88800005 	stb	r2,0(r17)
 8005224:	8c400044 	addi	r17,r17,1
 8005228:	8dc7c83a 	sub	r3,r17,r23
 800522c:	8009883a 	mov	r4,r16
 8005230:	e00b883a 	mov	r5,fp
 8005234:	01800284 	movi	r6,10
 8005238:	000f883a 	mov	r7,zero
 800523c:	1cbff216 	blt	r3,r18,8005208 <_dtoa_r+0xb3c>
 8005240:	dd800917 	ldw	r22,36(sp)
 8005244:	1007883a 	mov	r3,r2
 8005248:	05823a0e 	bge	zero,r22,8005b34 <_dtoa_r+0x1468>
 800524c:	bdad883a 	add	r22,r23,r22
 8005250:	0023883a 	mov	r17,zero
 8005254:	e00b883a 	mov	r5,fp
 8005258:	01800044 	movi	r6,1
 800525c:	8009883a 	mov	r4,r16
 8005260:	d8c01515 	stw	r3,84(sp)
 8005264:	8007a100 	call	8007a10 <__lshift>
 8005268:	1009883a 	mov	r4,r2
 800526c:	a00b883a 	mov	r5,r20
 8005270:	1039883a 	mov	fp,r2
 8005274:	8007b6c0 	call	8007b6c <__mcmp>
 8005278:	d8c01517 	ldw	r3,84(sp)
 800527c:	0080d60e 	bge	zero,r2,80055d8 <_dtoa_r+0xf0c>
 8005280:	b13fffc3 	ldbu	r4,-1(r22)
 8005284:	b0ffff84 	addi	r3,r22,-2
 8005288:	01800e44 	movi	r6,57
 800528c:	00000306 	br	800529c <_dtoa_r+0xbd0>
 8005290:	19000003 	ldbu	r4,0(r3)
 8005294:	102d883a 	mov	r22,r2
 8005298:	18ffffc4 	addi	r3,r3,-1
 800529c:	21403fcc 	andi	r5,r4,255
 80052a0:	2940201c 	xori	r5,r5,128
 80052a4:	297fe004 	addi	r5,r5,-128
 80052a8:	b0bfffc4 	addi	r2,r22,-1
 80052ac:	2981a71e 	bne	r5,r6,800594c <_dtoa_r+0x1280>
 80052b0:	b8bff71e 	bne	r23,r2,8005290 <_dtoa_r+0xbc4>
 80052b4:	d8800617 	ldw	r2,24(sp)
 80052b8:	10800044 	addi	r2,r2,1
 80052bc:	d8800615 	stw	r2,24(sp)
 80052c0:	00800c44 	movi	r2,49
 80052c4:	b8800005 	stb	r2,0(r23)
 80052c8:	8009883a 	mov	r4,r16
 80052cc:	a00b883a 	mov	r5,r20
 80052d0:	80072c80 	call	80072c8 <_Bfree>
 80052d4:	a83e9e26 	beq	r21,zero,8004d50 <_dtoa_r+0x684>
 80052d8:	88000426 	beq	r17,zero,80052ec <_dtoa_r+0xc20>
 80052dc:	8d400326 	beq	r17,r21,80052ec <_dtoa_r+0xc20>
 80052e0:	8009883a 	mov	r4,r16
 80052e4:	880b883a 	mov	r5,r17
 80052e8:	80072c80 	call	80072c8 <_Bfree>
 80052ec:	8009883a 	mov	r4,r16
 80052f0:	a80b883a 	mov	r5,r21
 80052f4:	80072c80 	call	80072c8 <_Bfree>
 80052f8:	003e9506 	br	8004d50 <_dtoa_r+0x684>
 80052fc:	00c00044 	movi	r3,1
 8005300:	d8c00d15 	stw	r3,52(sp)
 8005304:	003d9f06 	br	8004984 <_dtoa_r+0x2b8>
 8005308:	d9000817 	ldw	r4,32(sp)
 800530c:	d8800617 	ldw	r2,24(sp)
 8005310:	d8000b15 	stw	zero,44(sp)
 8005314:	2089c83a 	sub	r4,r4,r2
 8005318:	0087c83a 	sub	r3,zero,r2
 800531c:	d9000815 	stw	r4,32(sp)
 8005320:	d8c00a15 	stw	r3,40(sp)
 8005324:	003da306 	br	80049b4 <_dtoa_r+0x2e8>
 8005328:	0529c83a 	sub	r20,zero,r20
 800532c:	dd000815 	stw	r20,32(sp)
 8005330:	d8000715 	stw	zero,28(sp)
 8005334:	003d9806 	br	8004998 <_dtoa_r+0x2cc>
 8005338:	d9000617 	ldw	r4,24(sp)
 800533c:	800a6c40 	call	800a6c4 <__floatsidf>
 8005340:	1009883a 	mov	r4,r2
 8005344:	180b883a 	mov	r5,r3
 8005348:	980d883a 	mov	r6,r19
 800534c:	900f883a 	mov	r7,r18
 8005350:	800a4e80 	call	800a4e8 <__eqdf2>
 8005354:	103d7a26 	beq	r2,zero,8004940 <_dtoa_r+0x274>
 8005358:	d8800617 	ldw	r2,24(sp)
 800535c:	10bfffc4 	addi	r2,r2,-1
 8005360:	d8800615 	stw	r2,24(sp)
 8005364:	003d7606 	br	8004940 <_dtoa_r+0x274>
 8005368:	dcc00a17 	ldw	r19,40(sp)
 800536c:	dc800817 	ldw	r18,32(sp)
 8005370:	002b883a 	mov	r21,zero
 8005374:	003f4906 	br	800509c <_dtoa_r+0x9d0>
 8005378:	00800704 	movi	r2,28
 800537c:	d8c00817 	ldw	r3,32(sp)
 8005380:	d9000717 	ldw	r4,28(sp)
 8005384:	90a5883a 	add	r18,r18,r2
 8005388:	1887883a 	add	r3,r3,r2
 800538c:	2089883a 	add	r4,r4,r2
 8005390:	d8c00815 	stw	r3,32(sp)
 8005394:	d9000715 	stw	r4,28(sp)
 8005398:	003f8406 	br	80051ac <_dtoa_r+0xae0>
 800539c:	d9c00317 	ldw	r7,12(sp)
 80053a0:	013efb84 	movi	r4,-1042
 80053a4:	2509c83a 	sub	r4,r4,r20
 80053a8:	3908983a 	sll	r4,r7,r4
 80053ac:	003d3006 	br	8004870 <_dtoa_r+0x1a4>
 80053b0:	d8000d15 	stw	zero,52(sp)
 80053b4:	003d7306 	br	8004984 <_dtoa_r+0x2b8>
 80053b8:	0480050e 	bge	zero,r18,80053d0 <_dtoa_r+0xd04>
 80053bc:	a80b883a 	mov	r5,r21
 80053c0:	8009883a 	mov	r4,r16
 80053c4:	900d883a 	mov	r6,r18
 80053c8:	8007a100 	call	8007a10 <__lshift>
 80053cc:	102b883a 	mov	r21,r2
 80053d0:	8801611e 	bne	r17,zero,8005958 <_dtoa_r+0x128c>
 80053d4:	a827883a 	mov	r19,r21
 80053d8:	d8c00317 	ldw	r3,12(sp)
 80053dc:	d9000917 	ldw	r4,36(sp)
 80053e0:	b8bfffc4 	addi	r2,r23,-1
 80053e4:	18c0004c 	andi	r3,r3,1
 80053e8:	1105883a 	add	r2,r2,r4
 80053ec:	b825883a 	mov	r18,r23
 80053f0:	d8800515 	stw	r2,20(sp)
 80053f4:	a823883a 	mov	r17,r21
 80053f8:	d8c00315 	stw	r3,12(sp)
 80053fc:	ddc00715 	stw	r23,28(sp)
 8005400:	e009883a 	mov	r4,fp
 8005404:	a00b883a 	mov	r5,r20
 8005408:	80044900 	call	8004490 <quorem>
 800540c:	e009883a 	mov	r4,fp
 8005410:	880b883a 	mov	r5,r17
 8005414:	102d883a 	mov	r22,r2
 8005418:	8007b6c0 	call	8007b6c <__mcmp>
 800541c:	980d883a 	mov	r6,r19
 8005420:	8009883a 	mov	r4,r16
 8005424:	a00b883a 	mov	r5,r20
 8005428:	102b883a 	mov	r21,r2
 800542c:	8007bc40 	call	8007bc4 <__mdiff>
 8005430:	100d883a 	mov	r6,r2
 8005434:	10800317 	ldw	r2,12(r2)
 8005438:	b5c00c04 	addi	r23,r22,48
 800543c:	10008c26 	beq	r2,zero,8005670 <_dtoa_r+0xfa4>
 8005440:	8009883a 	mov	r4,r16
 8005444:	300b883a 	mov	r5,r6
 8005448:	80072c80 	call	80072c8 <_Bfree>
 800544c:	00800044 	movi	r2,1
 8005450:	a8007116 	blt	r21,zero,8005618 <_dtoa_r+0xf4c>
 8005454:	a800041e 	bne	r21,zero,8005468 <_dtoa_r+0xd9c>
 8005458:	d9c00417 	ldw	r7,16(sp)
 800545c:	3800021e 	bne	r7,zero,8005468 <_dtoa_r+0xd9c>
 8005460:	d8c00317 	ldw	r3,12(sp)
 8005464:	18006c26 	beq	r3,zero,8005618 <_dtoa_r+0xf4c>
 8005468:	00814c16 	blt	zero,r2,800599c <_dtoa_r+0x12d0>
 800546c:	d8c00517 	ldw	r3,20(sp)
 8005470:	95400044 	addi	r21,r18,1
 8005474:	95c00005 	stb	r23,0(r18)
 8005478:	a82d883a 	mov	r22,r21
 800547c:	90c14d26 	beq	r18,r3,80059b4 <_dtoa_r+0x12e8>
 8005480:	e00b883a 	mov	r5,fp
 8005484:	8009883a 	mov	r4,r16
 8005488:	01800284 	movi	r6,10
 800548c:	000f883a 	mov	r7,zero
 8005490:	80072f00 	call	80072f0 <__multadd>
 8005494:	1039883a 	mov	fp,r2
 8005498:	8cc08b26 	beq	r17,r19,80056c8 <_dtoa_r+0xffc>
 800549c:	880b883a 	mov	r5,r17
 80054a0:	01800284 	movi	r6,10
 80054a4:	000f883a 	mov	r7,zero
 80054a8:	8009883a 	mov	r4,r16
 80054ac:	80072f00 	call	80072f0 <__multadd>
 80054b0:	980b883a 	mov	r5,r19
 80054b4:	8009883a 	mov	r4,r16
 80054b8:	01800284 	movi	r6,10
 80054bc:	000f883a 	mov	r7,zero
 80054c0:	1023883a 	mov	r17,r2
 80054c4:	80072f00 	call	80072f0 <__multadd>
 80054c8:	1027883a 	mov	r19,r2
 80054cc:	a825883a 	mov	r18,r21
 80054d0:	003fcb06 	br	8005400 <_dtoa_r+0xd34>
 80054d4:	d9c00417 	ldw	r7,16(sp)
 80054d8:	00800104 	movi	r2,4
 80054dc:	3880e426 	beq	r7,r2,8005870 <_dtoa_r+0x11a4>
 80054e0:	00800144 	movi	r2,5
 80054e4:	38be3c1e 	bne	r7,r2,8004dd8 <_dtoa_r+0x70c>
 80054e8:	00c00044 	movi	r3,1
 80054ec:	d8c00c15 	stw	r3,48(sp)
 80054f0:	d9c02117 	ldw	r7,132(sp)
 80054f4:	d8800617 	ldw	r2,24(sp)
 80054f8:	388f883a 	add	r7,r7,r2
 80054fc:	3c800044 	addi	r18,r7,1
 8005500:	d9c00e15 	stw	r7,56(sp)
 8005504:	dc800915 	stw	r18,36(sp)
 8005508:	04bd3e16 	blt	zero,r18,8004a04 <_dtoa_r+0x338>
 800550c:	80001115 	stw	zero,68(r16)
 8005510:	000b883a 	mov	r5,zero
 8005514:	003d4606 	br	8004a30 <_dtoa_r+0x364>
 8005518:	d8c00317 	ldw	r3,12(sp)
 800551c:	183f0e1e 	bne	r3,zero,8005158 <_dtoa_r+0xa8c>
 8005520:	00c00434 	movhi	r3,16
 8005524:	18ffffc4 	addi	r3,r3,-1
 8005528:	88c6703a 	and	r3,r17,r3
 800552c:	183f0a1e 	bne	r3,zero,8005158 <_dtoa_r+0xa8c>
 8005530:	8c5ffc2c 	andhi	r17,r17,32752
 8005534:	883f0826 	beq	r17,zero,8005158 <_dtoa_r+0xa8c>
 8005538:	d9000817 	ldw	r4,32(sp)
 800553c:	d9c00717 	ldw	r7,28(sp)
 8005540:	1023883a 	mov	r17,r2
 8005544:	2089883a 	add	r4,r4,r2
 8005548:	388f883a 	add	r7,r7,r2
 800554c:	d9000815 	stw	r4,32(sp)
 8005550:	d9c00715 	stw	r7,28(sp)
 8005554:	003f0106 	br	800515c <_dtoa_r+0xa90>
 8005558:	9005883a 	mov	r2,r18
 800555c:	003ed306 	br	80050ac <_dtoa_r+0x9e0>
 8005560:	d8800917 	ldw	r2,36(sp)
 8005564:	00be3516 	blt	zero,r2,8004e3c <_dtoa_r+0x770>
 8005568:	1000b61e 	bne	r2,zero,8005844 <_dtoa_r+0x1178>
 800556c:	9009883a 	mov	r4,r18
 8005570:	980b883a 	mov	r5,r19
 8005574:	000d883a 	mov	r6,zero
 8005578:	01d00534 	movhi	r7,16404
 800557c:	800a0500 	call	800a050 <__muldf3>
 8005580:	d9800317 	ldw	r6,12(sp)
 8005584:	1009883a 	mov	r4,r2
 8005588:	180b883a 	mov	r5,r3
 800558c:	880f883a 	mov	r7,r17
 8005590:	800a6040 	call	800a604 <__gedf2>
 8005594:	0029883a 	mov	r20,zero
 8005598:	002b883a 	mov	r21,zero
 800559c:	10007e16 	blt	r2,zero,8005798 <_dtoa_r+0x10cc>
 80055a0:	d8802117 	ldw	r2,132(sp)
 80055a4:	b82d883a 	mov	r22,r23
 80055a8:	0084303a 	nor	r2,zero,r2
 80055ac:	d8800615 	stw	r2,24(sp)
 80055b0:	8009883a 	mov	r4,r16
 80055b4:	a00b883a 	mov	r5,r20
 80055b8:	80072c80 	call	80072c8 <_Bfree>
 80055bc:	a83f4b1e 	bne	r21,zero,80052ec <_dtoa_r+0xc20>
 80055c0:	003de306 	br	8004d50 <_dtoa_r+0x684>
 80055c4:	e00b883a 	mov	r5,fp
 80055c8:	8009883a 	mov	r4,r16
 80055cc:	80078e40 	call	80078e4 <__pow5mult>
 80055d0:	1039883a 	mov	fp,r2
 80055d4:	003ed206 	br	8005120 <_dtoa_r+0xa54>
 80055d8:	1000021e 	bne	r2,zero,80055e4 <_dtoa_r+0xf18>
 80055dc:	18c0004c 	andi	r3,r3,1
 80055e0:	183f271e 	bne	r3,zero,8005280 <_dtoa_r+0xbb4>
 80055e4:	01000c04 	movi	r4,48
 80055e8:	00000106 	br	80055f0 <_dtoa_r+0xf24>
 80055ec:	102d883a 	mov	r22,r2
 80055f0:	b0bfffc4 	addi	r2,r22,-1
 80055f4:	10c00007 	ldb	r3,0(r2)
 80055f8:	193ffc26 	beq	r3,r4,80055ec <_dtoa_r+0xf20>
 80055fc:	003f3206 	br	80052c8 <_dtoa_r+0xbfc>
 8005600:	d8c00f17 	ldw	r3,60(sp)
 8005604:	18015026 	beq	r3,zero,8005b48 <_dtoa_r+0x147c>
 8005608:	10810cc4 	addi	r2,r2,1075
 800560c:	dcc00a17 	ldw	r19,40(sp)
 8005610:	dc800817 	ldw	r18,32(sp)
 8005614:	003e9706 	br	8005074 <_dtoa_r+0x9a8>
 8005618:	b807883a 	mov	r3,r23
 800561c:	182b883a 	mov	r21,r3
 8005620:	ddc00717 	ldw	r23,28(sp)
 8005624:	00800e0e 	bge	zero,r2,8005660 <_dtoa_r+0xf94>
 8005628:	e00b883a 	mov	r5,fp
 800562c:	01800044 	movi	r6,1
 8005630:	8009883a 	mov	r4,r16
 8005634:	d8c01515 	stw	r3,84(sp)
 8005638:	8007a100 	call	8007a10 <__lshift>
 800563c:	1009883a 	mov	r4,r2
 8005640:	a00b883a 	mov	r5,r20
 8005644:	1039883a 	mov	fp,r2
 8005648:	8007b6c0 	call	8007b6c <__mcmp>
 800564c:	d8c01517 	ldw	r3,84(sp)
 8005650:	0081880e 	bge	zero,r2,8005c74 <_dtoa_r+0x15a8>
 8005654:	00800e44 	movi	r2,57
 8005658:	b0c00c44 	addi	r3,r22,49
 800565c:	a8816326 	beq	r21,r2,8005bec <_dtoa_r+0x1520>
 8005660:	90c00005 	stb	r3,0(r18)
 8005664:	95800044 	addi	r22,r18,1
 8005668:	982b883a 	mov	r21,r19
 800566c:	003f1606 	br	80052c8 <_dtoa_r+0xbfc>
 8005670:	300b883a 	mov	r5,r6
 8005674:	e009883a 	mov	r4,fp
 8005678:	d9801515 	stw	r6,84(sp)
 800567c:	8007b6c0 	call	8007b6c <__mcmp>
 8005680:	d9801517 	ldw	r6,84(sp)
 8005684:	8009883a 	mov	r4,r16
 8005688:	d8801515 	stw	r2,84(sp)
 800568c:	300b883a 	mov	r5,r6
 8005690:	80072c80 	call	80072c8 <_Bfree>
 8005694:	d8801517 	ldw	r2,84(sp)
 8005698:	103f6d1e 	bne	r2,zero,8005450 <_dtoa_r+0xd84>
 800569c:	d9c00417 	ldw	r7,16(sp)
 80056a0:	383f6b1e 	bne	r7,zero,8005450 <_dtoa_r+0xd84>
 80056a4:	d8c00317 	ldw	r3,12(sp)
 80056a8:	183f691e 	bne	r3,zero,8005450 <_dtoa_r+0xd84>
 80056ac:	b807883a 	mov	r3,r23
 80056b0:	00800e44 	movi	r2,57
 80056b4:	ddc00717 	ldw	r23,28(sp)
 80056b8:	18814c26 	beq	r3,r2,8005bec <_dtoa_r+0x1520>
 80056bc:	057fe80e 	bge	zero,r21,8005660 <_dtoa_r+0xf94>
 80056c0:	b0c00c44 	addi	r3,r22,49
 80056c4:	003fe606 	br	8005660 <_dtoa_r+0xf94>
 80056c8:	880b883a 	mov	r5,r17
 80056cc:	8009883a 	mov	r4,r16
 80056d0:	01800284 	movi	r6,10
 80056d4:	000f883a 	mov	r7,zero
 80056d8:	80072f00 	call	80072f0 <__multadd>
 80056dc:	1023883a 	mov	r17,r2
 80056e0:	1027883a 	mov	r19,r2
 80056e4:	a825883a 	mov	r18,r21
 80056e8:	003f4506 	br	8005400 <_dtoa_r+0xd34>
 80056ec:	e009883a 	mov	r4,fp
 80056f0:	a00b883a 	mov	r5,r20
 80056f4:	8007b6c0 	call	8007b6c <__mcmp>
 80056f8:	103ebc0e 	bge	r2,zero,80051ec <_dtoa_r+0xb20>
 80056fc:	e00b883a 	mov	r5,fp
 8005700:	8009883a 	mov	r4,r16
 8005704:	01800284 	movi	r6,10
 8005708:	000f883a 	mov	r7,zero
 800570c:	80072f00 	call	80072f0 <__multadd>
 8005710:	1039883a 	mov	fp,r2
 8005714:	d8800617 	ldw	r2,24(sp)
 8005718:	d8c00c17 	ldw	r3,48(sp)
 800571c:	10bfffc4 	addi	r2,r2,-1
 8005720:	d8800615 	stw	r2,24(sp)
 8005724:	1801571e 	bne	r3,zero,8005c84 <_dtoa_r+0x15b8>
 8005728:	d9c00e17 	ldw	r7,56(sp)
 800572c:	d9c00915 	stw	r7,36(sp)
 8005730:	003eae06 	br	80051ec <_dtoa_r+0xb20>
 8005734:	a0800417 	ldw	r2,16(r20)
 8005738:	10800104 	addi	r2,r2,4
 800573c:	1085883a 	add	r2,r2,r2
 8005740:	1085883a 	add	r2,r2,r2
 8005744:	a085883a 	add	r2,r20,r2
 8005748:	11000017 	ldw	r4,0(r2)
 800574c:	80075380 	call	8007538 <__hi0bits>
 8005750:	00c00804 	movi	r3,32
 8005754:	1885c83a 	sub	r2,r3,r2
 8005758:	003e8306 	br	8005168 <_dtoa_r+0xa9c>
 800575c:	d9c00417 	ldw	r7,16(sp)
 8005760:	00800084 	movi	r2,2
 8005764:	11fea30e 	bge	r2,r7,80051f4 <_dtoa_r+0xb28>
 8005768:	d8800917 	ldw	r2,36(sp)
 800576c:	103f8c1e 	bne	r2,zero,80055a0 <_dtoa_r+0xed4>
 8005770:	a00b883a 	mov	r5,r20
 8005774:	8009883a 	mov	r4,r16
 8005778:	01800144 	movi	r6,5
 800577c:	000f883a 	mov	r7,zero
 8005780:	80072f00 	call	80072f0 <__multadd>
 8005784:	e009883a 	mov	r4,fp
 8005788:	100b883a 	mov	r5,r2
 800578c:	1029883a 	mov	r20,r2
 8005790:	8007b6c0 	call	8007b6c <__mcmp>
 8005794:	00bf820e 	bge	zero,r2,80055a0 <_dtoa_r+0xed4>
 8005798:	00800c44 	movi	r2,49
 800579c:	b8800005 	stb	r2,0(r23)
 80057a0:	d8800617 	ldw	r2,24(sp)
 80057a4:	bd800044 	addi	r22,r23,1
 80057a8:	10800044 	addi	r2,r2,1
 80057ac:	d8800615 	stw	r2,24(sp)
 80057b0:	003f7f06 	br	80055b0 <_dtoa_r+0xee4>
 80057b4:	dc000417 	ldw	r16,16(sp)
 80057b8:	003d6506 	br	8004d50 <_dtoa_r+0x684>
 80057bc:	9009883a 	mov	r4,r18
 80057c0:	800a6c40 	call	800a6c4 <__floatsidf>
 80057c4:	1009883a 	mov	r4,r2
 80057c8:	180b883a 	mov	r5,r3
 80057cc:	980d883a 	mov	r6,r19
 80057d0:	a00f883a 	mov	r7,r20
 80057d4:	800a0500 	call	800a050 <__muldf3>
 80057d8:	1009883a 	mov	r4,r2
 80057dc:	180b883a 	mov	r5,r3
 80057e0:	000d883a 	mov	r6,zero
 80057e4:	01d00734 	movhi	r7,16412
 80057e8:	8009f9c0 	call	8009f9c <__adddf3>
 80057ec:	057f3034 	movhi	r21,64704
 80057f0:	1025883a 	mov	r18,r2
 80057f4:	1d6b883a 	add	r21,r3,r21
 80057f8:	9809883a 	mov	r4,r19
 80057fc:	a00b883a 	mov	r5,r20
 8005800:	000d883a 	mov	r6,zero
 8005804:	01d00534 	movhi	r7,16404
 8005808:	8009ff00 	call	8009ff0 <__subdf3>
 800580c:	1009883a 	mov	r4,r2
 8005810:	180b883a 	mov	r5,r3
 8005814:	900d883a 	mov	r6,r18
 8005818:	a80f883a 	mov	r7,r21
 800581c:	1027883a 	mov	r19,r2
 8005820:	1829883a 	mov	r20,r3
 8005824:	800a5a00 	call	800a5a0 <__gtdf2>
 8005828:	00806616 	blt	zero,r2,80059c4 <_dtoa_r+0x12f8>
 800582c:	a9e0003c 	xorhi	r7,r21,32768
 8005830:	9809883a 	mov	r4,r19
 8005834:	a00b883a 	mov	r5,r20
 8005838:	900d883a 	mov	r6,r18
 800583c:	800a6680 	call	800a668 <__ltdf2>
 8005840:	103d710e 	bge	r2,zero,8004e08 <_dtoa_r+0x73c>
 8005844:	0029883a 	mov	r20,zero
 8005848:	002b883a 	mov	r21,zero
 800584c:	003f5406 	br	80055a0 <_dtoa_r+0xed4>
 8005850:	d9800a17 	ldw	r6,40(sp)
 8005854:	e00b883a 	mov	r5,fp
 8005858:	8009883a 	mov	r4,r16
 800585c:	80078e40 	call	80078e4 <__pow5mult>
 8005860:	1039883a 	mov	fp,r2
 8005864:	003e2e06 	br	8005120 <_dtoa_r+0xa54>
 8005868:	d8000c15 	stw	zero,48(sp)
 800586c:	003f2006 	br	80054f0 <_dtoa_r+0xe24>
 8005870:	00800044 	movi	r2,1
 8005874:	d8800c15 	stw	r2,48(sp)
 8005878:	003c5d06 	br	80049f0 <_dtoa_r+0x324>
 800587c:	d8c00a17 	ldw	r3,40(sp)
 8005880:	d9000b17 	ldw	r4,44(sp)
 8005884:	dcc00a15 	stw	r19,40(sp)
 8005888:	98c5c83a 	sub	r2,r19,r3
 800588c:	2089883a 	add	r4,r4,r2
 8005890:	d9000b15 	stw	r4,44(sp)
 8005894:	0027883a 	mov	r19,zero
 8005898:	003df206 	br	8005064 <_dtoa_r+0x998>
 800589c:	d9000317 	ldw	r4,12(sp)
 80058a0:	8829883a 	mov	r20,r17
 80058a4:	04800084 	movi	r18,2
 80058a8:	d9001015 	stw	r4,64(sp)
 80058ac:	003c8106 	br	8004ab4 <_dtoa_r+0x3e8>
 80058b0:	04800044 	movi	r18,1
 80058b4:	dc800e15 	stw	r18,56(sp)
 80058b8:	dc800915 	stw	r18,36(sp)
 80058bc:	dc802115 	stw	r18,132(sp)
 80058c0:	003f1206 	br	800550c <_dtoa_r+0xe40>
 80058c4:	d8800617 	ldw	r2,24(sp)
 80058c8:	00abc83a 	sub	r21,zero,r2
 80058cc:	a800a426 	beq	r21,zero,8005b60 <_dtoa_r+0x1494>
 80058d0:	a88003cc 	andi	r2,r21,15
 80058d4:	100490fa 	slli	r2,r2,3
 80058d8:	00c20074 	movhi	r3,2049
 80058dc:	18f6ee04 	addi	r3,r3,-9288
 80058e0:	d9000317 	ldw	r4,12(sp)
 80058e4:	1885883a 	add	r2,r3,r2
 80058e8:	11800017 	ldw	r6,0(r2)
 80058ec:	11c00117 	ldw	r7,4(r2)
 80058f0:	a82bd13a 	srai	r21,r21,4
 80058f4:	880b883a 	mov	r5,r17
 80058f8:	800a0500 	call	800a050 <__muldf3>
 80058fc:	1027883a 	mov	r19,r2
 8005900:	1829883a 	mov	r20,r3
 8005904:	a800e826 	beq	r21,zero,8005ca8 <_dtoa_r+0x15dc>
 8005908:	05820074 	movhi	r22,2049
 800590c:	b5b6e404 	addi	r22,r22,-9328
 8005910:	04800084 	movi	r18,2
 8005914:	a980004c 	andi	r6,r21,1
 8005918:	1009883a 	mov	r4,r2
 800591c:	a82bd07a 	srai	r21,r21,1
 8005920:	180b883a 	mov	r5,r3
 8005924:	30000426 	beq	r6,zero,8005938 <_dtoa_r+0x126c>
 8005928:	b1800017 	ldw	r6,0(r22)
 800592c:	b1c00117 	ldw	r7,4(r22)
 8005930:	94800044 	addi	r18,r18,1
 8005934:	800a0500 	call	800a050 <__muldf3>
 8005938:	b5800204 	addi	r22,r22,8
 800593c:	a83ff51e 	bne	r21,zero,8005914 <_dtoa_r+0x1248>
 8005940:	1027883a 	mov	r19,r2
 8005944:	1829883a 	mov	r20,r3
 8005948:	003c7306 	br	8004b18 <_dtoa_r+0x44c>
 800594c:	21000044 	addi	r4,r4,1
 8005950:	11000005 	stb	r4,0(r2)
 8005954:	003e5c06 	br	80052c8 <_dtoa_r+0xbfc>
 8005958:	a9400117 	ldw	r5,4(r21)
 800595c:	8009883a 	mov	r4,r16
 8005960:	80072200 	call	8007220 <_Balloc>
 8005964:	a9800417 	ldw	r6,16(r21)
 8005968:	11000304 	addi	r4,r2,12
 800596c:	a9400304 	addi	r5,r21,12
 8005970:	31800084 	addi	r6,r6,2
 8005974:	318d883a 	add	r6,r6,r6
 8005978:	318d883a 	add	r6,r6,r6
 800597c:	1023883a 	mov	r17,r2
 8005980:	80021e00 	call	80021e0 <memcpy>
 8005984:	8009883a 	mov	r4,r16
 8005988:	880b883a 	mov	r5,r17
 800598c:	01800044 	movi	r6,1
 8005990:	8007a100 	call	8007a10 <__lshift>
 8005994:	1027883a 	mov	r19,r2
 8005998:	003e8f06 	br	80053d8 <_dtoa_r+0xd0c>
 800599c:	b807883a 	mov	r3,r23
 80059a0:	00800e44 	movi	r2,57
 80059a4:	ddc00717 	ldw	r23,28(sp)
 80059a8:	18809026 	beq	r3,r2,8005bec <_dtoa_r+0x1520>
 80059ac:	18c00044 	addi	r3,r3,1
 80059b0:	003f2b06 	br	8005660 <_dtoa_r+0xf94>
 80059b4:	b807883a 	mov	r3,r23
 80059b8:	982b883a 	mov	r21,r19
 80059bc:	ddc00717 	ldw	r23,28(sp)
 80059c0:	003e2406 	br	8005254 <_dtoa_r+0xb88>
 80059c4:	0029883a 	mov	r20,zero
 80059c8:	002b883a 	mov	r21,zero
 80059cc:	003f7206 	br	8005798 <_dtoa_r+0x10cc>
 80059d0:	593fffc4 	addi	r4,r11,-1
 80059d4:	200490fa 	slli	r2,r4,3
 80059d8:	00c20074 	movhi	r3,2049
 80059dc:	18f6ee04 	addi	r3,r3,-9288
 80059e0:	d9001015 	stw	r4,64(sp)
 80059e4:	1885883a 	add	r2,r3,r2
 80059e8:	11000017 	ldw	r4,0(r2)
 80059ec:	11400117 	ldw	r5,4(r2)
 80059f0:	900d883a 	mov	r6,r18
 80059f4:	a80f883a 	mov	r7,r21
 80059f8:	dac01615 	stw	r11,88(sp)
 80059fc:	800a0500 	call	800a050 <__muldf3>
 8005a00:	a00b883a 	mov	r5,r20
 8005a04:	9809883a 	mov	r4,r19
 8005a08:	d8c01215 	stw	r3,72(sp)
 8005a0c:	d8801115 	stw	r2,68(sp)
 8005a10:	800a7980 	call	800a798 <__fixdfsi>
 8005a14:	1009883a 	mov	r4,r2
 8005a18:	1025883a 	mov	r18,r2
 8005a1c:	800a6c40 	call	800a6c4 <__floatsidf>
 8005a20:	9809883a 	mov	r4,r19
 8005a24:	a00b883a 	mov	r5,r20
 8005a28:	100d883a 	mov	r6,r2
 8005a2c:	180f883a 	mov	r7,r3
 8005a30:	94800c04 	addi	r18,r18,48
 8005a34:	8009ff00 	call	8009ff0 <__subdf3>
 8005a38:	bc800005 	stb	r18,0(r23)
 8005a3c:	dac01617 	ldw	r11,88(sp)
 8005a40:	102b883a 	mov	r21,r2
 8005a44:	00800044 	movi	r2,1
 8005a48:	bd800044 	addi	r22,r23,1
 8005a4c:	1815883a 	mov	r10,r3
 8005a50:	58802226 	beq	r11,r2,8005adc <_dtoa_r+0x1410>
 8005a54:	bad7883a 	add	r11,r23,r11
 8005a58:	dc001415 	stw	r16,80(sp)
 8005a5c:	a805883a 	mov	r2,r21
 8005a60:	b027883a 	mov	r19,r22
 8005a64:	5821883a 	mov	r16,r11
 8005a68:	882b883a 	mov	r21,r17
 8005a6c:	000d883a 	mov	r6,zero
 8005a70:	01d00934 	movhi	r7,16420
 8005a74:	1009883a 	mov	r4,r2
 8005a78:	180b883a 	mov	r5,r3
 8005a7c:	800a0500 	call	800a050 <__muldf3>
 8005a80:	180b883a 	mov	r5,r3
 8005a84:	1009883a 	mov	r4,r2
 8005a88:	1829883a 	mov	r20,r3
 8005a8c:	1023883a 	mov	r17,r2
 8005a90:	800a7980 	call	800a798 <__fixdfsi>
 8005a94:	1009883a 	mov	r4,r2
 8005a98:	1025883a 	mov	r18,r2
 8005a9c:	800a6c40 	call	800a6c4 <__floatsidf>
 8005aa0:	8809883a 	mov	r4,r17
 8005aa4:	a00b883a 	mov	r5,r20
 8005aa8:	100d883a 	mov	r6,r2
 8005aac:	180f883a 	mov	r7,r3
 8005ab0:	94800c04 	addi	r18,r18,48
 8005ab4:	8009ff00 	call	8009ff0 <__subdf3>
 8005ab8:	9cc00044 	addi	r19,r19,1
 8005abc:	9cbfffc5 	stb	r18,-1(r19)
 8005ac0:	9c3fea1e 	bne	r19,r16,8005a6c <_dtoa_r+0x13a0>
 8005ac4:	1815883a 	mov	r10,r3
 8005ac8:	d8c01017 	ldw	r3,64(sp)
 8005acc:	dc001417 	ldw	r16,80(sp)
 8005ad0:	a823883a 	mov	r17,r21
 8005ad4:	b0ed883a 	add	r22,r22,r3
 8005ad8:	102b883a 	mov	r21,r2
 8005adc:	d9001117 	ldw	r4,68(sp)
 8005ae0:	d9401217 	ldw	r5,72(sp)
 8005ae4:	000d883a 	mov	r6,zero
 8005ae8:	01cff834 	movhi	r7,16352
 8005aec:	da801515 	stw	r10,84(sp)
 8005af0:	8009f9c0 	call	8009f9c <__adddf3>
 8005af4:	da801517 	ldw	r10,84(sp)
 8005af8:	1009883a 	mov	r4,r2
 8005afc:	180b883a 	mov	r5,r3
 8005b00:	500f883a 	mov	r7,r10
 8005b04:	a80d883a 	mov	r6,r21
 8005b08:	800a6680 	call	800a668 <__ltdf2>
 8005b0c:	da801517 	ldw	r10,84(sp)
 8005b10:	10003b0e 	bge	r2,zero,8005c00 <_dtoa_r+0x1534>
 8005b14:	d9c01317 	ldw	r7,76(sp)
 8005b18:	b53fffc3 	ldbu	r20,-1(r22)
 8005b1c:	d9c00615 	stw	r7,24(sp)
 8005b20:	003d3106 	br	8004fe8 <_dtoa_r+0x91c>
 8005b24:	d8800817 	ldw	r2,32(sp)
 8005b28:	11e5c83a 	sub	r18,r2,r7
 8005b2c:	0005883a 	mov	r2,zero
 8005b30:	003d5006 	br	8005074 <_dtoa_r+0x9a8>
 8005b34:	05800044 	movi	r22,1
 8005b38:	003dc406 	br	800524c <_dtoa_r+0xb80>
 8005b3c:	a5000044 	addi	r20,r20,1
 8005b40:	15000005 	stb	r20,0(r2)
 8005b44:	003c8206 	br	8004d50 <_dtoa_r+0x684>
 8005b48:	d8800217 	ldw	r2,8(sp)
 8005b4c:	00c00d84 	movi	r3,54
 8005b50:	dcc00a17 	ldw	r19,40(sp)
 8005b54:	1885c83a 	sub	r2,r3,r2
 8005b58:	dc800817 	ldw	r18,32(sp)
 8005b5c:	003d4506 	br	8005074 <_dtoa_r+0x9a8>
 8005b60:	dcc00317 	ldw	r19,12(sp)
 8005b64:	8829883a 	mov	r20,r17
 8005b68:	04800084 	movi	r18,2
 8005b6c:	003bea06 	br	8004b18 <_dtoa_r+0x44c>
 8005b70:	d9000917 	ldw	r4,36(sp)
 8005b74:	203f1126 	beq	r4,zero,80057bc <_dtoa_r+0x10f0>
 8005b78:	d9c00e17 	ldw	r7,56(sp)
 8005b7c:	01fca20e 	bge	zero,r7,8004e08 <_dtoa_r+0x73c>
 8005b80:	a00b883a 	mov	r5,r20
 8005b84:	9809883a 	mov	r4,r19
 8005b88:	000d883a 	mov	r6,zero
 8005b8c:	01d00934 	movhi	r7,16420
 8005b90:	800a0500 	call	800a050 <__muldf3>
 8005b94:	91000044 	addi	r4,r18,1
 8005b98:	1027883a 	mov	r19,r2
 8005b9c:	1829883a 	mov	r20,r3
 8005ba0:	800a6c40 	call	800a6c4 <__floatsidf>
 8005ba4:	9809883a 	mov	r4,r19
 8005ba8:	a00b883a 	mov	r5,r20
 8005bac:	100d883a 	mov	r6,r2
 8005bb0:	180f883a 	mov	r7,r3
 8005bb4:	800a0500 	call	800a050 <__muldf3>
 8005bb8:	1009883a 	mov	r4,r2
 8005bbc:	180b883a 	mov	r5,r3
 8005bc0:	000d883a 	mov	r6,zero
 8005bc4:	01d00734 	movhi	r7,16412
 8005bc8:	8009f9c0 	call	8009f9c <__adddf3>
 8005bcc:	1025883a 	mov	r18,r2
 8005bd0:	d8800617 	ldw	r2,24(sp)
 8005bd4:	057f3034 	movhi	r21,64704
 8005bd8:	1d6b883a 	add	r21,r3,r21
 8005bdc:	10bfffc4 	addi	r2,r2,-1
 8005be0:	d8801315 	stw	r2,76(sp)
 8005be4:	dac00e17 	ldw	r11,56(sp)
 8005be8:	003be706 	br	8004b88 <_dtoa_r+0x4bc>
 8005bec:	01000e44 	movi	r4,57
 8005bf0:	91000005 	stb	r4,0(r18)
 8005bf4:	95800044 	addi	r22,r18,1
 8005bf8:	982b883a 	mov	r21,r19
 8005bfc:	003da106 	br	8005284 <_dtoa_r+0xbb8>
 8005c00:	d9801117 	ldw	r6,68(sp)
 8005c04:	d9c01217 	ldw	r7,72(sp)
 8005c08:	0009883a 	mov	r4,zero
 8005c0c:	014ff834 	movhi	r5,16352
 8005c10:	da801515 	stw	r10,84(sp)
 8005c14:	8009ff00 	call	8009ff0 <__subdf3>
 8005c18:	da801517 	ldw	r10,84(sp)
 8005c1c:	1009883a 	mov	r4,r2
 8005c20:	180b883a 	mov	r5,r3
 8005c24:	a80d883a 	mov	r6,r21
 8005c28:	500f883a 	mov	r7,r10
 8005c2c:	800a5a00 	call	800a5a0 <__gtdf2>
 8005c30:	00bc750e 	bge	zero,r2,8004e08 <_dtoa_r+0x73c>
 8005c34:	01000c04 	movi	r4,48
 8005c38:	00000106 	br	8005c40 <_dtoa_r+0x1574>
 8005c3c:	102d883a 	mov	r22,r2
 8005c40:	b0bfffc4 	addi	r2,r22,-1
 8005c44:	10c00007 	ldb	r3,0(r2)
 8005c48:	193ffc26 	beq	r3,r4,8005c3c <_dtoa_r+0x1570>
 8005c4c:	d8801317 	ldw	r2,76(sp)
 8005c50:	d8800615 	stw	r2,24(sp)
 8005c54:	003c3e06 	br	8004d50 <_dtoa_r+0x684>
 8005c58:	d9001317 	ldw	r4,76(sp)
 8005c5c:	df001117 	ldw	fp,68(sp)
 8005c60:	d9000615 	stw	r4,24(sp)
 8005c64:	003ce006 	br	8004fe8 <_dtoa_r+0x91c>
 8005c68:	df001117 	ldw	fp,68(sp)
 8005c6c:	dc401217 	ldw	r17,72(sp)
 8005c70:	003c6506 	br	8004e08 <_dtoa_r+0x73c>
 8005c74:	103e7a1e 	bne	r2,zero,8005660 <_dtoa_r+0xf94>
 8005c78:	1880004c 	andi	r2,r3,1
 8005c7c:	103e7826 	beq	r2,zero,8005660 <_dtoa_r+0xf94>
 8005c80:	003e7406 	br	8005654 <_dtoa_r+0xf88>
 8005c84:	8009883a 	mov	r4,r16
 8005c88:	a80b883a 	mov	r5,r21
 8005c8c:	01800284 	movi	r6,10
 8005c90:	000f883a 	mov	r7,zero
 8005c94:	80072f00 	call	80072f0 <__multadd>
 8005c98:	d9000e17 	ldw	r4,56(sp)
 8005c9c:	102b883a 	mov	r21,r2
 8005ca0:	d9000915 	stw	r4,36(sp)
 8005ca4:	003d5106 	br	80051ec <_dtoa_r+0xb20>
 8005ca8:	04800084 	movi	r18,2
 8005cac:	003b9a06 	br	8004b18 <_dtoa_r+0x44c>
 8005cb0:	d8c01317 	ldw	r3,76(sp)
 8005cb4:	d8c00615 	stw	r3,24(sp)
 8005cb8:	003ccb06 	br	8004fe8 <_dtoa_r+0x91c>
 8005cbc:	d8c01317 	ldw	r3,76(sp)
 8005cc0:	d8c00615 	stw	r3,24(sp)
 8005cc4:	003c2206 	br	8004d50 <_dtoa_r+0x684>
 8005cc8:	20fd3826 	beq	r4,r3,80051ac <_dtoa_r+0xae0>
 8005ccc:	00c00f04 	movi	r3,60
 8005cd0:	1885c83a 	sub	r2,r3,r2
 8005cd4:	003da906 	br	800537c <_dtoa_r+0xcb0>
 8005cd8:	000b883a 	mov	r5,zero
 8005cdc:	003b5406 	br	8004a30 <_dtoa_r+0x364>
 8005ce0:	04c00044 	movi	r19,1
 8005ce4:	003b3b06 	br	80049d4 <_dtoa_r+0x308>

08005ce8 <_fflush_r>:
 8005ce8:	defffb04 	addi	sp,sp,-20
 8005cec:	dcc00315 	stw	r19,12(sp)
 8005cf0:	dc400115 	stw	r17,4(sp)
 8005cf4:	dfc00415 	stw	ra,16(sp)
 8005cf8:	dc800215 	stw	r18,8(sp)
 8005cfc:	dc000015 	stw	r16,0(sp)
 8005d00:	2027883a 	mov	r19,r4
 8005d04:	2823883a 	mov	r17,r5
 8005d08:	20000226 	beq	r4,zero,8005d14 <_fflush_r+0x2c>
 8005d0c:	20800e17 	ldw	r2,56(r4)
 8005d10:	10005726 	beq	r2,zero,8005e70 <_fflush_r+0x188>
 8005d14:	8880030b 	ldhu	r2,12(r17)
 8005d18:	10c0020c 	andi	r3,r2,8
 8005d1c:	18ffffcc 	andi	r3,r3,65535
 8005d20:	18e0001c 	xori	r3,r3,32768
 8005d24:	18e00004 	addi	r3,r3,-32768
 8005d28:	1800311e 	bne	r3,zero,8005df0 <_fflush_r+0x108>
 8005d2c:	89000117 	ldw	r4,4(r17)
 8005d30:	10c20014 	ori	r3,r2,2048
 8005d34:	88c0030d 	sth	r3,12(r17)
 8005d38:	180b883a 	mov	r5,r3
 8005d3c:	0100520e 	bge	zero,r4,8005e88 <_fflush_r+0x1a0>
 8005d40:	88c00a17 	ldw	r3,40(r17)
 8005d44:	18002226 	beq	r3,zero,8005dd0 <_fflush_r+0xe8>
 8005d48:	1084000c 	andi	r2,r2,4096
 8005d4c:	10bfffcc 	andi	r2,r2,65535
 8005d50:	10a0001c 	xori	r2,r2,32768
 8005d54:	10a00004 	addi	r2,r2,-32768
 8005d58:	10004e26 	beq	r2,zero,8005e94 <_fflush_r+0x1ac>
 8005d5c:	8c001417 	ldw	r16,80(r17)
 8005d60:	2940010c 	andi	r5,r5,4
 8005d64:	297fffcc 	andi	r5,r5,65535
 8005d68:	2960001c 	xori	r5,r5,32768
 8005d6c:	29600004 	addi	r5,r5,-32768
 8005d70:	28000626 	beq	r5,zero,8005d8c <_fflush_r+0xa4>
 8005d74:	89000117 	ldw	r4,4(r17)
 8005d78:	88800c17 	ldw	r2,48(r17)
 8005d7c:	8121c83a 	sub	r16,r16,r4
 8005d80:	10000226 	beq	r2,zero,8005d8c <_fflush_r+0xa4>
 8005d84:	88800f17 	ldw	r2,60(r17)
 8005d88:	80a1c83a 	sub	r16,r16,r2
 8005d8c:	89400717 	ldw	r5,28(r17)
 8005d90:	9809883a 	mov	r4,r19
 8005d94:	800d883a 	mov	r6,r16
 8005d98:	000f883a 	mov	r7,zero
 8005d9c:	183ee83a 	callr	r3
 8005da0:	8080281e 	bne	r16,r2,8005e44 <_fflush_r+0x15c>
 8005da4:	8880030b 	ldhu	r2,12(r17)
 8005da8:	88c00417 	ldw	r3,16(r17)
 8005dac:	88000115 	stw	zero,4(r17)
 8005db0:	113dffcc 	andi	r4,r2,63487
 8005db4:	1084000c 	andi	r2,r2,4096
 8005db8:	10bfffcc 	andi	r2,r2,65535
 8005dbc:	10a0001c 	xori	r2,r2,32768
 8005dc0:	8900030d 	sth	r4,12(r17)
 8005dc4:	88c00015 	stw	r3,0(r17)
 8005dc8:	10a00004 	addi	r2,r2,-32768
 8005dcc:	10002c1e 	bne	r2,zero,8005e80 <_fflush_r+0x198>
 8005dd0:	0005883a 	mov	r2,zero
 8005dd4:	dfc00417 	ldw	ra,16(sp)
 8005dd8:	dcc00317 	ldw	r19,12(sp)
 8005ddc:	dc800217 	ldw	r18,8(sp)
 8005de0:	dc400117 	ldw	r17,4(sp)
 8005de4:	dc000017 	ldw	r16,0(sp)
 8005de8:	dec00504 	addi	sp,sp,20
 8005dec:	f800283a 	ret
 8005df0:	8c800417 	ldw	r18,16(r17)
 8005df4:	903ff626 	beq	r18,zero,8005dd0 <_fflush_r+0xe8>
 8005df8:	8c000017 	ldw	r16,0(r17)
 8005dfc:	108000cc 	andi	r2,r2,3
 8005e00:	8c800015 	stw	r18,0(r17)
 8005e04:	84a1c83a 	sub	r16,r16,r18
 8005e08:	10001b1e 	bne	r2,zero,8005e78 <_fflush_r+0x190>
 8005e0c:	88800517 	ldw	r2,20(r17)
 8005e10:	88800215 	stw	r2,8(r17)
 8005e14:	04000316 	blt	zero,r16,8005e24 <_fflush_r+0x13c>
 8005e18:	003fed06 	br	8005dd0 <_fflush_r+0xe8>
 8005e1c:	90a5883a 	add	r18,r18,r2
 8005e20:	043feb0e 	bge	zero,r16,8005dd0 <_fflush_r+0xe8>
 8005e24:	88800917 	ldw	r2,36(r17)
 8005e28:	89400717 	ldw	r5,28(r17)
 8005e2c:	800f883a 	mov	r7,r16
 8005e30:	900d883a 	mov	r6,r18
 8005e34:	9809883a 	mov	r4,r19
 8005e38:	103ee83a 	callr	r2
 8005e3c:	80a1c83a 	sub	r16,r16,r2
 8005e40:	00bff616 	blt	zero,r2,8005e1c <_fflush_r+0x134>
 8005e44:	88c0030b 	ldhu	r3,12(r17)
 8005e48:	00bfffc4 	movi	r2,-1
 8005e4c:	18c01014 	ori	r3,r3,64
 8005e50:	88c0030d 	sth	r3,12(r17)
 8005e54:	dfc00417 	ldw	ra,16(sp)
 8005e58:	dcc00317 	ldw	r19,12(sp)
 8005e5c:	dc800217 	ldw	r18,8(sp)
 8005e60:	dc400117 	ldw	r17,4(sp)
 8005e64:	dc000017 	ldw	r16,0(sp)
 8005e68:	dec00504 	addi	sp,sp,20
 8005e6c:	f800283a 	ret
 8005e70:	8005fa40 	call	8005fa4 <__sinit>
 8005e74:	003fa706 	br	8005d14 <_fflush_r+0x2c>
 8005e78:	0005883a 	mov	r2,zero
 8005e7c:	003fe406 	br	8005e10 <_fflush_r+0x128>
 8005e80:	8c001415 	stw	r16,80(r17)
 8005e84:	003fd206 	br	8005dd0 <_fflush_r+0xe8>
 8005e88:	88c00f17 	ldw	r3,60(r17)
 8005e8c:	00ffac16 	blt	zero,r3,8005d40 <_fflush_r+0x58>
 8005e90:	003fcf06 	br	8005dd0 <_fflush_r+0xe8>
 8005e94:	89400717 	ldw	r5,28(r17)
 8005e98:	9809883a 	mov	r4,r19
 8005e9c:	000d883a 	mov	r6,zero
 8005ea0:	01c00044 	movi	r7,1
 8005ea4:	183ee83a 	callr	r3
 8005ea8:	1021883a 	mov	r16,r2
 8005eac:	00bfffc4 	movi	r2,-1
 8005eb0:	80800326 	beq	r16,r2,8005ec0 <_fflush_r+0x1d8>
 8005eb4:	8940030b 	ldhu	r5,12(r17)
 8005eb8:	88c00a17 	ldw	r3,40(r17)
 8005ebc:	003fa806 	br	8005d60 <_fflush_r+0x78>
 8005ec0:	98c00017 	ldw	r3,0(r19)
 8005ec4:	00800744 	movi	r2,29
 8005ec8:	18bfde1e 	bne	r3,r2,8005e44 <_fflush_r+0x15c>
 8005ecc:	003fc006 	br	8005dd0 <_fflush_r+0xe8>

08005ed0 <fflush>:
 8005ed0:	200b883a 	mov	r5,r4
 8005ed4:	20000426 	beq	r4,zero,8005ee8 <fflush+0x18>
 8005ed8:	00820074 	movhi	r2,2049
 8005edc:	10ba6f04 	addi	r2,r2,-5700
 8005ee0:	11000017 	ldw	r4,0(r2)
 8005ee4:	8005ce81 	jmpi	8005ce8 <_fflush_r>
 8005ee8:	00820074 	movhi	r2,2049
 8005eec:	10ba6e04 	addi	r2,r2,-5704
 8005ef0:	11000017 	ldw	r4,0(r2)
 8005ef4:	01420034 	movhi	r5,2048
 8005ef8:	29573a04 	addi	r5,r5,23784
 8005efc:	8006b841 	jmpi	8006b84 <_fwalk_reent>

08005f00 <__fp_lock>:
 8005f00:	0005883a 	mov	r2,zero
 8005f04:	f800283a 	ret

08005f08 <__fp_unlock>:
 8005f08:	0005883a 	mov	r2,zero
 8005f0c:	f800283a 	ret

08005f10 <_cleanup_r>:
 8005f10:	01420074 	movhi	r5,2049
 8005f14:	29638604 	addi	r5,r5,-29160
 8005f18:	8006adc1 	jmpi	8006adc <_fwalk>

08005f1c <__sfmoreglue>:
 8005f1c:	defffc04 	addi	sp,sp,-16
 8005f20:	dc800215 	stw	r18,8(sp)
 8005f24:	2825883a 	mov	r18,r5
 8005f28:	dc000015 	stw	r16,0(sp)
 8005f2c:	01401704 	movi	r5,92
 8005f30:	2021883a 	mov	r16,r4
 8005f34:	9009883a 	mov	r4,r18
 8005f38:	dfc00315 	stw	ra,12(sp)
 8005f3c:	dc400115 	stw	r17,4(sp)
 8005f40:	8001a0c0 	call	8001a0c <__mulsi3>
 8005f44:	8009883a 	mov	r4,r16
 8005f48:	11400304 	addi	r5,r2,12
 8005f4c:	1023883a 	mov	r17,r2
 8005f50:	8001a5c0 	call	8001a5c <_malloc_r>
 8005f54:	1021883a 	mov	r16,r2
 8005f58:	10000726 	beq	r2,zero,8005f78 <__sfmoreglue+0x5c>
 8005f5c:	11000304 	addi	r4,r2,12
 8005f60:	10000015 	stw	zero,0(r2)
 8005f64:	14800115 	stw	r18,4(r2)
 8005f68:	11000215 	stw	r4,8(r2)
 8005f6c:	000b883a 	mov	r5,zero
 8005f70:	880d883a 	mov	r6,r17
 8005f74:	80071440 	call	8007144 <memset>
 8005f78:	8005883a 	mov	r2,r16
 8005f7c:	dfc00317 	ldw	ra,12(sp)
 8005f80:	dc800217 	ldw	r18,8(sp)
 8005f84:	dc400117 	ldw	r17,4(sp)
 8005f88:	dc000017 	ldw	r16,0(sp)
 8005f8c:	dec00404 	addi	sp,sp,16
 8005f90:	f800283a 	ret

08005f94 <_cleanup>:
 8005f94:	00820074 	movhi	r2,2049
 8005f98:	10ba6e04 	addi	r2,r2,-5704
 8005f9c:	11000017 	ldw	r4,0(r2)
 8005fa0:	8005f101 	jmpi	8005f10 <_cleanup_r>

08005fa4 <__sinit>:
 8005fa4:	20800e17 	ldw	r2,56(r4)
 8005fa8:	1000401e 	bne	r2,zero,80060ac <__sinit+0x108>
 8005fac:	21400117 	ldw	r5,4(r4)
 8005fb0:	01820034 	movhi	r6,2048
 8005fb4:	3197c404 	addi	r6,r6,24336
 8005fb8:	20c00217 	ldw	r3,8(r4)
 8005fbc:	21800f15 	stw	r6,60(r4)
 8005fc0:	2080bb04 	addi	r2,r4,748
 8005fc4:	02400044 	movi	r9,1
 8005fc8:	018000c4 	movi	r6,3
 8005fcc:	2180b915 	stw	r6,740(r4)
 8005fd0:	2080ba15 	stw	r2,744(r4)
 8005fd4:	22400e15 	stw	r9,56(r4)
 8005fd8:	20800317 	ldw	r2,12(r4)
 8005fdc:	2000b815 	stw	zero,736(r4)
 8005fe0:	02020074 	movhi	r8,2049
 8005fe4:	42223404 	addi	r8,r8,-30512
 8005fe8:	01c20074 	movhi	r7,2049
 8005fec:	39e24904 	addi	r7,r7,-30428
 8005ff0:	01820074 	movhi	r6,2049
 8005ff4:	31a26b04 	addi	r6,r6,-30292
 8005ff8:	01020074 	movhi	r4,2049
 8005ffc:	21228204 	addi	r4,r4,-30200
 8006000:	02800104 	movi	r10,4
 8006004:	28000015 	stw	zero,0(r5)
 8006008:	28000115 	stw	zero,4(r5)
 800600c:	28000215 	stw	zero,8(r5)
 8006010:	2a80030d 	sth	r10,12(r5)
 8006014:	2800038d 	sth	zero,14(r5)
 8006018:	28000415 	stw	zero,16(r5)
 800601c:	28000515 	stw	zero,20(r5)
 8006020:	28000615 	stw	zero,24(r5)
 8006024:	29400715 	stw	r5,28(r5)
 8006028:	2a000815 	stw	r8,32(r5)
 800602c:	29c00915 	stw	r7,36(r5)
 8006030:	29800a15 	stw	r6,40(r5)
 8006034:	29000b15 	stw	r4,44(r5)
 8006038:	01400284 	movi	r5,10
 800603c:	18000015 	stw	zero,0(r3)
 8006040:	18000115 	stw	zero,4(r3)
 8006044:	18000215 	stw	zero,8(r3)
 8006048:	1940030d 	sth	r5,12(r3)
 800604c:	1a40038d 	sth	r9,14(r3)
 8006050:	18000415 	stw	zero,16(r3)
 8006054:	18000515 	stw	zero,20(r3)
 8006058:	18000615 	stw	zero,24(r3)
 800605c:	18c00715 	stw	r3,28(r3)
 8006060:	1a000815 	stw	r8,32(r3)
 8006064:	19c00915 	stw	r7,36(r3)
 8006068:	19800a15 	stw	r6,40(r3)
 800606c:	19000b15 	stw	r4,44(r3)
 8006070:	00c00484 	movi	r3,18
 8006074:	10c0030d 	sth	r3,12(r2)
 8006078:	00c00084 	movi	r3,2
 800607c:	10000015 	stw	zero,0(r2)
 8006080:	10000115 	stw	zero,4(r2)
 8006084:	10000215 	stw	zero,8(r2)
 8006088:	10c0038d 	sth	r3,14(r2)
 800608c:	10000415 	stw	zero,16(r2)
 8006090:	10000515 	stw	zero,20(r2)
 8006094:	10000615 	stw	zero,24(r2)
 8006098:	10800715 	stw	r2,28(r2)
 800609c:	12000815 	stw	r8,32(r2)
 80060a0:	11c00915 	stw	r7,36(r2)
 80060a4:	11800a15 	stw	r6,40(r2)
 80060a8:	11000b15 	stw	r4,44(r2)
 80060ac:	f800283a 	ret

080060b0 <__sfp>:
 80060b0:	defffc04 	addi	sp,sp,-16
 80060b4:	00820074 	movhi	r2,2049
 80060b8:	10ba6e04 	addi	r2,r2,-5704
 80060bc:	dc400115 	stw	r17,4(sp)
 80060c0:	14400017 	ldw	r17,0(r2)
 80060c4:	dc800215 	stw	r18,8(sp)
 80060c8:	dfc00315 	stw	ra,12(sp)
 80060cc:	88800e17 	ldw	r2,56(r17)
 80060d0:	dc000015 	stw	r16,0(sp)
 80060d4:	2025883a 	mov	r18,r4
 80060d8:	10002826 	beq	r2,zero,800617c <__sfp+0xcc>
 80060dc:	8c40b804 	addi	r17,r17,736
 80060e0:	043fffc4 	movi	r16,-1
 80060e4:	89400117 	ldw	r5,4(r17)
 80060e8:	88800217 	ldw	r2,8(r17)
 80060ec:	297fffc4 	addi	r5,r5,-1
 80060f0:	28000a16 	blt	r5,zero,800611c <__sfp+0x6c>
 80060f4:	10c0030f 	ldh	r3,12(r2)
 80060f8:	18000c26 	beq	r3,zero,800612c <__sfp+0x7c>
 80060fc:	10c01a04 	addi	r3,r2,104
 8006100:	00000206 	br	800610c <__sfp+0x5c>
 8006104:	19bfe90f 	ldh	r6,-92(r3)
 8006108:	30000826 	beq	r6,zero,800612c <__sfp+0x7c>
 800610c:	297fffc4 	addi	r5,r5,-1
 8006110:	18bffd04 	addi	r2,r3,-12
 8006114:	18c01704 	addi	r3,r3,92
 8006118:	2c3ffa1e 	bne	r5,r16,8006104 <__sfp+0x54>
 800611c:	88800017 	ldw	r2,0(r17)
 8006120:	10001926 	beq	r2,zero,8006188 <__sfp+0xd8>
 8006124:	1023883a 	mov	r17,r2
 8006128:	003fee06 	br	80060e4 <__sfp+0x34>
 800612c:	00ffffc4 	movi	r3,-1
 8006130:	10c0038d 	sth	r3,14(r2)
 8006134:	00c00044 	movi	r3,1
 8006138:	10c0030d 	sth	r3,12(r2)
 800613c:	10000015 	stw	zero,0(r2)
 8006140:	10000215 	stw	zero,8(r2)
 8006144:	10000115 	stw	zero,4(r2)
 8006148:	10000415 	stw	zero,16(r2)
 800614c:	10000515 	stw	zero,20(r2)
 8006150:	10000615 	stw	zero,24(r2)
 8006154:	10000c15 	stw	zero,48(r2)
 8006158:	10000d15 	stw	zero,52(r2)
 800615c:	10001115 	stw	zero,68(r2)
 8006160:	10001215 	stw	zero,72(r2)
 8006164:	dfc00317 	ldw	ra,12(sp)
 8006168:	dc800217 	ldw	r18,8(sp)
 800616c:	dc400117 	ldw	r17,4(sp)
 8006170:	dc000017 	ldw	r16,0(sp)
 8006174:	dec00404 	addi	sp,sp,16
 8006178:	f800283a 	ret
 800617c:	8809883a 	mov	r4,r17
 8006180:	8005fa40 	call	8005fa4 <__sinit>
 8006184:	003fd506 	br	80060dc <__sfp+0x2c>
 8006188:	9009883a 	mov	r4,r18
 800618c:	01400104 	movi	r5,4
 8006190:	8005f1c0 	call	8005f1c <__sfmoreglue>
 8006194:	88800015 	stw	r2,0(r17)
 8006198:	103fe21e 	bne	r2,zero,8006124 <__sfp+0x74>
 800619c:	00800304 	movi	r2,12
 80061a0:	90800015 	stw	r2,0(r18)
 80061a4:	0005883a 	mov	r2,zero
 80061a8:	003fee06 	br	8006164 <__sfp+0xb4>

080061ac <__sfp_lock_acquire>:
 80061ac:	f800283a 	ret

080061b0 <__sfp_lock_release>:
 80061b0:	f800283a 	ret

080061b4 <__sinit_lock_acquire>:
 80061b4:	f800283a 	ret

080061b8 <__sinit_lock_release>:
 80061b8:	f800283a 	ret

080061bc <__fp_lock_all>:
 80061bc:	00820074 	movhi	r2,2049
 80061c0:	10ba6f04 	addi	r2,r2,-5700
 80061c4:	11000017 	ldw	r4,0(r2)
 80061c8:	01420034 	movhi	r5,2048
 80061cc:	2957c004 	addi	r5,r5,24320
 80061d0:	8006adc1 	jmpi	8006adc <_fwalk>

080061d4 <__fp_unlock_all>:
 80061d4:	00820074 	movhi	r2,2049
 80061d8:	10ba6f04 	addi	r2,r2,-5700
 80061dc:	11000017 	ldw	r4,0(r2)
 80061e0:	01420034 	movhi	r5,2048
 80061e4:	2957c204 	addi	r5,r5,24328
 80061e8:	8006adc1 	jmpi	8006adc <_fwalk>

080061ec <_malloc_trim_r>:
 80061ec:	defffb04 	addi	sp,sp,-20
 80061f0:	dcc00315 	stw	r19,12(sp)
 80061f4:	dc800215 	stw	r18,8(sp)
 80061f8:	dc400115 	stw	r17,4(sp)
 80061fc:	dc000015 	stw	r16,0(sp)
 8006200:	2827883a 	mov	r19,r5
 8006204:	dfc00415 	stw	ra,16(sp)
 8006208:	04420074 	movhi	r17,2049
 800620c:	8c77bf04 	addi	r17,r17,-8452
 8006210:	2021883a 	mov	r16,r4
 8006214:	800b68c0 	call	800b68c <__malloc_lock>
 8006218:	88800217 	ldw	r2,8(r17)
 800621c:	14800117 	ldw	r18,4(r2)
 8006220:	00bfff04 	movi	r2,-4
 8006224:	90a4703a 	and	r18,r18,r2
 8006228:	9083fbc4 	addi	r2,r18,4079
 800622c:	14e7c83a 	sub	r19,r2,r19
 8006230:	9826d33a 	srli	r19,r19,12
 8006234:	0083ffc4 	movi	r2,4095
 8006238:	9cffffc4 	addi	r19,r19,-1
 800623c:	9826933a 	slli	r19,r19,12
 8006240:	14c0060e 	bge	r2,r19,800625c <_malloc_trim_r+0x70>
 8006244:	8009883a 	mov	r4,r16
 8006248:	000b883a 	mov	r5,zero
 800624c:	80023200 	call	8002320 <_sbrk_r>
 8006250:	88c00217 	ldw	r3,8(r17)
 8006254:	1c87883a 	add	r3,r3,r18
 8006258:	10c00a26 	beq	r2,r3,8006284 <_malloc_trim_r+0x98>
 800625c:	8009883a 	mov	r4,r16
 8006260:	800b6ac0 	call	800b6ac <__malloc_unlock>
 8006264:	0005883a 	mov	r2,zero
 8006268:	dfc00417 	ldw	ra,16(sp)
 800626c:	dcc00317 	ldw	r19,12(sp)
 8006270:	dc800217 	ldw	r18,8(sp)
 8006274:	dc400117 	ldw	r17,4(sp)
 8006278:	dc000017 	ldw	r16,0(sp)
 800627c:	dec00504 	addi	sp,sp,20
 8006280:	f800283a 	ret
 8006284:	8009883a 	mov	r4,r16
 8006288:	04cbc83a 	sub	r5,zero,r19
 800628c:	80023200 	call	8002320 <_sbrk_r>
 8006290:	00ffffc4 	movi	r3,-1
 8006294:	10c01326 	beq	r2,r3,80062e4 <_malloc_trim_r+0xf8>
 8006298:	00820074 	movhi	r2,2049
 800629c:	10bd7a04 	addi	r2,r2,-2584
 80062a0:	11000017 	ldw	r4,0(r2)
 80062a4:	88c00217 	ldw	r3,8(r17)
 80062a8:	94e5c83a 	sub	r18,r18,r19
 80062ac:	94800054 	ori	r18,r18,1
 80062b0:	24e7c83a 	sub	r19,r4,r19
 80062b4:	1c800115 	stw	r18,4(r3)
 80062b8:	8009883a 	mov	r4,r16
 80062bc:	14c00015 	stw	r19,0(r2)
 80062c0:	800b6ac0 	call	800b6ac <__malloc_unlock>
 80062c4:	00800044 	movi	r2,1
 80062c8:	dfc00417 	ldw	ra,16(sp)
 80062cc:	dcc00317 	ldw	r19,12(sp)
 80062d0:	dc800217 	ldw	r18,8(sp)
 80062d4:	dc400117 	ldw	r17,4(sp)
 80062d8:	dc000017 	ldw	r16,0(sp)
 80062dc:	dec00504 	addi	sp,sp,20
 80062e0:	f800283a 	ret
 80062e4:	8009883a 	mov	r4,r16
 80062e8:	000b883a 	mov	r5,zero
 80062ec:	80023200 	call	8002320 <_sbrk_r>
 80062f0:	88c00217 	ldw	r3,8(r17)
 80062f4:	014003c4 	movi	r5,15
 80062f8:	10c9c83a 	sub	r4,r2,r3
 80062fc:	293fd70e 	bge	r5,r4,800625c <_malloc_trim_r+0x70>
 8006300:	01420074 	movhi	r5,2049
 8006304:	297a6c04 	addi	r5,r5,-5712
 8006308:	29400017 	ldw	r5,0(r5)
 800630c:	21000054 	ori	r4,r4,1
 8006310:	19000115 	stw	r4,4(r3)
 8006314:	1145c83a 	sub	r2,r2,r5
 8006318:	01420074 	movhi	r5,2049
 800631c:	297d7a04 	addi	r5,r5,-2584
 8006320:	28800015 	stw	r2,0(r5)
 8006324:	003fcd06 	br	800625c <_malloc_trim_r+0x70>

08006328 <_free_r>:
 8006328:	defffd04 	addi	sp,sp,-12
 800632c:	dc400115 	stw	r17,4(sp)
 8006330:	dc000015 	stw	r16,0(sp)
 8006334:	dfc00215 	stw	ra,8(sp)
 8006338:	2821883a 	mov	r16,r5
 800633c:	2023883a 	mov	r17,r4
 8006340:	28004b26 	beq	r5,zero,8006470 <_free_r+0x148>
 8006344:	800b68c0 	call	800b68c <__malloc_lock>
 8006348:	823fff17 	ldw	r8,-4(r16)
 800634c:	00bfff84 	movi	r2,-2
 8006350:	81bffe04 	addi	r6,r16,-8
 8006354:	4084703a 	and	r2,r8,r2
 8006358:	3087883a 	add	r3,r6,r2
 800635c:	01420074 	movhi	r5,2049
 8006360:	2977bf04 	addi	r5,r5,-8452
 8006364:	1a400117 	ldw	r9,4(r3)
 8006368:	29000217 	ldw	r4,8(r5)
 800636c:	01ffff04 	movi	r7,-4
 8006370:	49ce703a 	and	r7,r9,r7
 8006374:	20c06526 	beq	r4,r3,800650c <_free_r+0x1e4>
 8006378:	19c00115 	stw	r7,4(r3)
 800637c:	4200004c 	andi	r8,r8,1
 8006380:	40003026 	beq	r8,zero,8006444 <_free_r+0x11c>
 8006384:	0009883a 	mov	r4,zero
 8006388:	19d1883a 	add	r8,r3,r7
 800638c:	42000117 	ldw	r8,4(r8)
 8006390:	4200004c 	andi	r8,r8,1
 8006394:	4000061e 	bne	r8,zero,80063b0 <_free_r+0x88>
 8006398:	11c5883a 	add	r2,r2,r7
 800639c:	19c00217 	ldw	r7,8(r3)
 80063a0:	20004e26 	beq	r4,zero,80064dc <_free_r+0x1b4>
 80063a4:	18c00317 	ldw	r3,12(r3)
 80063a8:	38c00315 	stw	r3,12(r7)
 80063ac:	19c00215 	stw	r7,8(r3)
 80063b0:	11c00054 	ori	r7,r2,1
 80063b4:	3087883a 	add	r3,r6,r2
 80063b8:	31c00115 	stw	r7,4(r6)
 80063bc:	18800015 	stw	r2,0(r3)
 80063c0:	20001a1e 	bne	r4,zero,800642c <_free_r+0x104>
 80063c4:	00c07fc4 	movi	r3,511
 80063c8:	18802e2e 	bgeu	r3,r2,8006484 <_free_r+0x15c>
 80063cc:	1006d27a 	srli	r3,r2,9
 80063d0:	01000104 	movi	r4,4
 80063d4:	20c06636 	bltu	r4,r3,8006570 <_free_r+0x248>
 80063d8:	1008d1ba 	srli	r4,r2,6
 80063dc:	21000e04 	addi	r4,r4,56
 80063e0:	210f883a 	add	r7,r4,r4
 80063e4:	39cf883a 	add	r7,r7,r7
 80063e8:	39cf883a 	add	r7,r7,r7
 80063ec:	29cf883a 	add	r7,r5,r7
 80063f0:	38c00217 	ldw	r3,8(r7)
 80063f4:	01420074 	movhi	r5,2049
 80063f8:	2977bf04 	addi	r5,r5,-8452
 80063fc:	19c06126 	beq	r3,r7,8006584 <_free_r+0x25c>
 8006400:	013fff04 	movi	r4,-4
 8006404:	19400117 	ldw	r5,4(r3)
 8006408:	290a703a 	and	r5,r5,r4
 800640c:	1140022e 	bgeu	r2,r5,8006418 <_free_r+0xf0>
 8006410:	18c00217 	ldw	r3,8(r3)
 8006414:	38fffb1e 	bne	r7,r3,8006404 <_free_r+0xdc>
 8006418:	18800317 	ldw	r2,12(r3)
 800641c:	30800315 	stw	r2,12(r6)
 8006420:	30c00215 	stw	r3,8(r6)
 8006424:	11800215 	stw	r6,8(r2)
 8006428:	19800315 	stw	r6,12(r3)
 800642c:	8809883a 	mov	r4,r17
 8006430:	dfc00217 	ldw	ra,8(sp)
 8006434:	dc400117 	ldw	r17,4(sp)
 8006438:	dc000017 	ldw	r16,0(sp)
 800643c:	dec00304 	addi	sp,sp,12
 8006440:	800b6ac1 	jmpi	800b6ac <__malloc_unlock>
 8006444:	813ffe17 	ldw	r4,-8(r16)
 8006448:	2a400204 	addi	r9,r5,8
 800644c:	310dc83a 	sub	r6,r6,r4
 8006450:	32000217 	ldw	r8,8(r6)
 8006454:	1105883a 	add	r2,r2,r4
 8006458:	42404326 	beq	r8,r9,8006568 <_free_r+0x240>
 800645c:	32400317 	ldw	r9,12(r6)
 8006460:	0009883a 	mov	r4,zero
 8006464:	42400315 	stw	r9,12(r8)
 8006468:	4a000215 	stw	r8,8(r9)
 800646c:	003fc606 	br	8006388 <_free_r+0x60>
 8006470:	dfc00217 	ldw	ra,8(sp)
 8006474:	dc400117 	ldw	r17,4(sp)
 8006478:	dc000017 	ldw	r16,0(sp)
 800647c:	dec00304 	addi	sp,sp,12
 8006480:	f800283a 	ret
 8006484:	1004d0fa 	srli	r2,r2,3
 8006488:	02000044 	movi	r8,1
 800648c:	29c00117 	ldw	r7,4(r5)
 8006490:	1087883a 	add	r3,r2,r2
 8006494:	18c7883a 	add	r3,r3,r3
 8006498:	1005d0ba 	srai	r2,r2,2
 800649c:	18c7883a 	add	r3,r3,r3
 80064a0:	28c7883a 	add	r3,r5,r3
 80064a4:	19000217 	ldw	r4,8(r3)
 80064a8:	4084983a 	sll	r2,r8,r2
 80064ac:	30c00315 	stw	r3,12(r6)
 80064b0:	31000215 	stw	r4,8(r6)
 80064b4:	11c4b03a 	or	r2,r2,r7
 80064b8:	21800315 	stw	r6,12(r4)
 80064bc:	8809883a 	mov	r4,r17
 80064c0:	28800115 	stw	r2,4(r5)
 80064c4:	19800215 	stw	r6,8(r3)
 80064c8:	dfc00217 	ldw	ra,8(sp)
 80064cc:	dc400117 	ldw	r17,4(sp)
 80064d0:	dc000017 	ldw	r16,0(sp)
 80064d4:	dec00304 	addi	sp,sp,12
 80064d8:	800b6ac1 	jmpi	800b6ac <__malloc_unlock>
 80064dc:	02020074 	movhi	r8,2049
 80064e0:	4237c104 	addi	r8,r8,-8444
 80064e4:	3a3faf1e 	bne	r7,r8,80063a4 <_free_r+0x7c>
 80064e8:	29800515 	stw	r6,20(r5)
 80064ec:	29800415 	stw	r6,16(r5)
 80064f0:	11000054 	ori	r4,r2,1
 80064f4:	3087883a 	add	r3,r6,r2
 80064f8:	31c00315 	stw	r7,12(r6)
 80064fc:	31c00215 	stw	r7,8(r6)
 8006500:	31000115 	stw	r4,4(r6)
 8006504:	18800015 	stw	r2,0(r3)
 8006508:	003fc806 	br	800642c <_free_r+0x104>
 800650c:	4200004c 	andi	r8,r8,1
 8006510:	3885883a 	add	r2,r7,r2
 8006514:	4000071e 	bne	r8,zero,8006534 <_free_r+0x20c>
 8006518:	81fffe17 	ldw	r7,-8(r16)
 800651c:	31cdc83a 	sub	r6,r6,r7
 8006520:	30c00317 	ldw	r3,12(r6)
 8006524:	31000217 	ldw	r4,8(r6)
 8006528:	11c5883a 	add	r2,r2,r7
 800652c:	20c00315 	stw	r3,12(r4)
 8006530:	19000215 	stw	r4,8(r3)
 8006534:	00c20074 	movhi	r3,2049
 8006538:	18fa6d04 	addi	r3,r3,-5708
 800653c:	18c00017 	ldw	r3,0(r3)
 8006540:	11000054 	ori	r4,r2,1
 8006544:	31000115 	stw	r4,4(r6)
 8006548:	29800215 	stw	r6,8(r5)
 800654c:	10ffb736 	bltu	r2,r3,800642c <_free_r+0x104>
 8006550:	00820074 	movhi	r2,2049
 8006554:	10bd7204 	addi	r2,r2,-2616
 8006558:	11400017 	ldw	r5,0(r2)
 800655c:	8809883a 	mov	r4,r17
 8006560:	80061ec0 	call	80061ec <_malloc_trim_r>
 8006564:	003fb106 	br	800642c <_free_r+0x104>
 8006568:	01000044 	movi	r4,1
 800656c:	003f8606 	br	8006388 <_free_r+0x60>
 8006570:	01000504 	movi	r4,20
 8006574:	20c00b36 	bltu	r4,r3,80065a4 <_free_r+0x27c>
 8006578:	190016c4 	addi	r4,r3,91
 800657c:	210f883a 	add	r7,r4,r4
 8006580:	003f9806 	br	80063e4 <_free_r+0xbc>
 8006584:	2009d0ba 	srai	r4,r4,2
 8006588:	00800044 	movi	r2,1
 800658c:	29c00117 	ldw	r7,4(r5)
 8006590:	1108983a 	sll	r4,r2,r4
 8006594:	1805883a 	mov	r2,r3
 8006598:	21c8b03a 	or	r4,r4,r7
 800659c:	29000115 	stw	r4,4(r5)
 80065a0:	003f9e06 	br	800641c <_free_r+0xf4>
 80065a4:	01001504 	movi	r4,84
 80065a8:	20c00436 	bltu	r4,r3,80065bc <_free_r+0x294>
 80065ac:	1008d33a 	srli	r4,r2,12
 80065b0:	21001b84 	addi	r4,r4,110
 80065b4:	210f883a 	add	r7,r4,r4
 80065b8:	003f8a06 	br	80063e4 <_free_r+0xbc>
 80065bc:	01005504 	movi	r4,340
 80065c0:	20c00436 	bltu	r4,r3,80065d4 <_free_r+0x2ac>
 80065c4:	1008d3fa 	srli	r4,r2,15
 80065c8:	21001dc4 	addi	r4,r4,119
 80065cc:	210f883a 	add	r7,r4,r4
 80065d0:	003f8406 	br	80063e4 <_free_r+0xbc>
 80065d4:	01015504 	movi	r4,1364
 80065d8:	20c00436 	bltu	r4,r3,80065ec <_free_r+0x2c4>
 80065dc:	1008d4ba 	srli	r4,r2,18
 80065e0:	21001f04 	addi	r4,r4,124
 80065e4:	210f883a 	add	r7,r4,r4
 80065e8:	003f7e06 	br	80063e4 <_free_r+0xbc>
 80065ec:	01c03f04 	movi	r7,252
 80065f0:	01001f84 	movi	r4,126
 80065f4:	003f7b06 	br	80063e4 <_free_r+0xbc>

080065f8 <__sfvwrite_r>:
 80065f8:	30800217 	ldw	r2,8(r6)
 80065fc:	defff504 	addi	sp,sp,-44
 8006600:	dd400615 	stw	r21,24(sp)
 8006604:	dd000515 	stw	r20,20(sp)
 8006608:	dc000115 	stw	r16,4(sp)
 800660c:	dfc00a15 	stw	ra,40(sp)
 8006610:	df000915 	stw	fp,36(sp)
 8006614:	ddc00815 	stw	r23,32(sp)
 8006618:	dd800715 	stw	r22,28(sp)
 800661c:	dcc00415 	stw	r19,16(sp)
 8006620:	dc800315 	stw	r18,12(sp)
 8006624:	dc400215 	stw	r17,8(sp)
 8006628:	3029883a 	mov	r20,r6
 800662c:	202b883a 	mov	r21,r4
 8006630:	2821883a 	mov	r16,r5
 8006634:	10002126 	beq	r2,zero,80066bc <__sfvwrite_r+0xc4>
 8006638:	2880030b 	ldhu	r2,12(r5)
 800663c:	10c0020c 	andi	r3,r2,8
 8006640:	18ffffcc 	andi	r3,r3,65535
 8006644:	18e0001c 	xori	r3,r3,32768
 8006648:	18e00004 	addi	r3,r3,-32768
 800664c:	18002826 	beq	r3,zero,80066f0 <__sfvwrite_r+0xf8>
 8006650:	28c00417 	ldw	r3,16(r5)
 8006654:	18002626 	beq	r3,zero,80066f0 <__sfvwrite_r+0xf8>
 8006658:	10c0008c 	andi	r3,r2,2
 800665c:	18ffffcc 	andi	r3,r3,65535
 8006660:	18e0001c 	xori	r3,r3,32768
 8006664:	18e00004 	addi	r3,r3,-32768
 8006668:	a4400017 	ldw	r17,0(r20)
 800666c:	18002b26 	beq	r3,zero,800671c <__sfvwrite_r+0x124>
 8006670:	0027883a 	mov	r19,zero
 8006674:	0025883a 	mov	r18,zero
 8006678:	05810004 	movi	r22,1024
 800667c:	980d883a 	mov	r6,r19
 8006680:	a809883a 	mov	r4,r21
 8006684:	90004f26 	beq	r18,zero,80067c4 <__sfvwrite_r+0x1cc>
 8006688:	900f883a 	mov	r7,r18
 800668c:	81400717 	ldw	r5,28(r16)
 8006690:	b480012e 	bgeu	r22,r18,8006698 <__sfvwrite_r+0xa0>
 8006694:	01c10004 	movi	r7,1024
 8006698:	80800917 	ldw	r2,36(r16)
 800669c:	103ee83a 	callr	r2
 80066a0:	0080540e 	bge	zero,r2,80067f4 <__sfvwrite_r+0x1fc>
 80066a4:	a0c00217 	ldw	r3,8(r20)
 80066a8:	98a7883a 	add	r19,r19,r2
 80066ac:	90a5c83a 	sub	r18,r18,r2
 80066b0:	1885c83a 	sub	r2,r3,r2
 80066b4:	a0800215 	stw	r2,8(r20)
 80066b8:	103ff01e 	bne	r2,zero,800667c <__sfvwrite_r+0x84>
 80066bc:	0005883a 	mov	r2,zero
 80066c0:	dfc00a17 	ldw	ra,40(sp)
 80066c4:	df000917 	ldw	fp,36(sp)
 80066c8:	ddc00817 	ldw	r23,32(sp)
 80066cc:	dd800717 	ldw	r22,28(sp)
 80066d0:	dd400617 	ldw	r21,24(sp)
 80066d4:	dd000517 	ldw	r20,20(sp)
 80066d8:	dcc00417 	ldw	r19,16(sp)
 80066dc:	dc800317 	ldw	r18,12(sp)
 80066e0:	dc400217 	ldw	r17,8(sp)
 80066e4:	dc000117 	ldw	r16,4(sp)
 80066e8:	dec00b04 	addi	sp,sp,44
 80066ec:	f800283a 	ret
 80066f0:	a809883a 	mov	r4,r21
 80066f4:	800b883a 	mov	r5,r16
 80066f8:	800431c0 	call	800431c <__swsetup_r>
 80066fc:	1000f01e 	bne	r2,zero,8006ac0 <__sfvwrite_r+0x4c8>
 8006700:	8080030b 	ldhu	r2,12(r16)
 8006704:	a4400017 	ldw	r17,0(r20)
 8006708:	10c0008c 	andi	r3,r2,2
 800670c:	18ffffcc 	andi	r3,r3,65535
 8006710:	18e0001c 	xori	r3,r3,32768
 8006714:	18e00004 	addi	r3,r3,-32768
 8006718:	183fd51e 	bne	r3,zero,8006670 <__sfvwrite_r+0x78>
 800671c:	10c0004c 	andi	r3,r2,1
 8006720:	002d883a 	mov	r22,zero
 8006724:	1800381e 	bne	r3,zero,8006808 <__sfvwrite_r+0x210>
 8006728:	0025883a 	mov	r18,zero
 800672c:	90002126 	beq	r18,zero,80067b4 <__sfvwrite_r+0x1bc>
 8006730:	10c0800c 	andi	r3,r2,512
 8006734:	18ffffcc 	andi	r3,r3,65535
 8006738:	18e0001c 	xori	r3,r3,32768
 800673c:	18e00004 	addi	r3,r3,-32768
 8006740:	84c00217 	ldw	r19,8(r16)
 8006744:	18006b26 	beq	r3,zero,80068f4 <__sfvwrite_r+0x2fc>
 8006748:	980f883a 	mov	r7,r19
 800674c:	94c08636 	bltu	r18,r19,8006968 <__sfvwrite_r+0x370>
 8006750:	10c1200c 	andi	r3,r2,1152
 8006754:	18009f1e 	bne	r3,zero,80069d4 <__sfvwrite_r+0x3dc>
 8006758:	81000017 	ldw	r4,0(r16)
 800675c:	982f883a 	mov	r23,r19
 8006760:	9039883a 	mov	fp,r18
 8006764:	9027883a 	mov	r19,r18
 8006768:	380d883a 	mov	r6,r7
 800676c:	b00b883a 	mov	r5,r22
 8006770:	d9c00015 	stw	r7,0(sp)
 8006774:	8006fb80 	call	8006fb8 <memmove>
 8006778:	d9c00017 	ldw	r7,0(sp)
 800677c:	81000217 	ldw	r4,8(r16)
 8006780:	80800017 	ldw	r2,0(r16)
 8006784:	25efc83a 	sub	r23,r4,r23
 8006788:	11cf883a 	add	r7,r2,r7
 800678c:	85c00215 	stw	r23,8(r16)
 8006790:	81c00015 	stw	r7,0(r16)
 8006794:	a0800217 	ldw	r2,8(r20)
 8006798:	b72d883a 	add	r22,r22,fp
 800679c:	9725c83a 	sub	r18,r18,fp
 80067a0:	14e7c83a 	sub	r19,r2,r19
 80067a4:	a4c00215 	stw	r19,8(r20)
 80067a8:	983fc426 	beq	r19,zero,80066bc <__sfvwrite_r+0xc4>
 80067ac:	8080030b 	ldhu	r2,12(r16)
 80067b0:	903fdf1e 	bne	r18,zero,8006730 <__sfvwrite_r+0x138>
 80067b4:	8d800017 	ldw	r22,0(r17)
 80067b8:	8c800117 	ldw	r18,4(r17)
 80067bc:	8c400204 	addi	r17,r17,8
 80067c0:	003fda06 	br	800672c <__sfvwrite_r+0x134>
 80067c4:	8cc00017 	ldw	r19,0(r17)
 80067c8:	8c800117 	ldw	r18,4(r17)
 80067cc:	8c400204 	addi	r17,r17,8
 80067d0:	003faa06 	br	800667c <__sfvwrite_r+0x84>
 80067d4:	80082700 	call	8008270 <_realloc_r>
 80067d8:	102f883a 	mov	r23,r2
 80067dc:	10009f1e 	bne	r2,zero,8006a5c <__sfvwrite_r+0x464>
 80067e0:	81400417 	ldw	r5,16(r16)
 80067e4:	a809883a 	mov	r4,r21
 80067e8:	80063280 	call	8006328 <_free_r>
 80067ec:	00800304 	movi	r2,12
 80067f0:	a8800015 	stw	r2,0(r21)
 80067f4:	80c0030b 	ldhu	r3,12(r16)
 80067f8:	00bfffc4 	movi	r2,-1
 80067fc:	18c01014 	ori	r3,r3,64
 8006800:	80c0030d 	sth	r3,12(r16)
 8006804:	003fae06 	br	80066c0 <__sfvwrite_r+0xc8>
 8006808:	0007883a 	mov	r3,zero
 800680c:	0039883a 	mov	fp,zero
 8006810:	0025883a 	mov	r18,zero
 8006814:	90001e26 	beq	r18,zero,8006890 <__sfvwrite_r+0x298>
 8006818:	18006526 	beq	r3,zero,80069b0 <__sfvwrite_r+0x3b8>
 800681c:	b02f883a 	mov	r23,r22
 8006820:	9580012e 	bgeu	r18,r22,8006828 <__sfvwrite_r+0x230>
 8006824:	902f883a 	mov	r23,r18
 8006828:	81000017 	ldw	r4,0(r16)
 800682c:	80800417 	ldw	r2,16(r16)
 8006830:	84c00217 	ldw	r19,8(r16)
 8006834:	81c00517 	ldw	r7,20(r16)
 8006838:	1100022e 	bgeu	r2,r4,8006844 <__sfvwrite_r+0x24c>
 800683c:	99e7883a 	add	r19,r19,r7
 8006840:	9dc01816 	blt	r19,r23,80068a4 <__sfvwrite_r+0x2ac>
 8006844:	b9c03b16 	blt	r23,r7,8006934 <__sfvwrite_r+0x33c>
 8006848:	80800917 	ldw	r2,36(r16)
 800684c:	81400717 	ldw	r5,28(r16)
 8006850:	a809883a 	mov	r4,r21
 8006854:	d8c00015 	stw	r3,0(sp)
 8006858:	e00d883a 	mov	r6,fp
 800685c:	103ee83a 	callr	r2
 8006860:	1027883a 	mov	r19,r2
 8006864:	d8c00017 	ldw	r3,0(sp)
 8006868:	00bfe20e 	bge	zero,r2,80067f4 <__sfvwrite_r+0x1fc>
 800686c:	b4edc83a 	sub	r22,r22,r19
 8006870:	b0001a26 	beq	r22,zero,80068dc <__sfvwrite_r+0x2e4>
 8006874:	a0800217 	ldw	r2,8(r20)
 8006878:	e4f9883a 	add	fp,fp,r19
 800687c:	94e5c83a 	sub	r18,r18,r19
 8006880:	14e7c83a 	sub	r19,r2,r19
 8006884:	a4c00215 	stw	r19,8(r20)
 8006888:	983f8c26 	beq	r19,zero,80066bc <__sfvwrite_r+0xc4>
 800688c:	903fe21e 	bne	r18,zero,8006818 <__sfvwrite_r+0x220>
 8006890:	8f000017 	ldw	fp,0(r17)
 8006894:	8c800117 	ldw	r18,4(r17)
 8006898:	0007883a 	mov	r3,zero
 800689c:	8c400204 	addi	r17,r17,8
 80068a0:	003fdc06 	br	8006814 <__sfvwrite_r+0x21c>
 80068a4:	e00b883a 	mov	r5,fp
 80068a8:	980d883a 	mov	r6,r19
 80068ac:	d8c00015 	stw	r3,0(sp)
 80068b0:	8006fb80 	call	8006fb8 <memmove>
 80068b4:	80800017 	ldw	r2,0(r16)
 80068b8:	a809883a 	mov	r4,r21
 80068bc:	800b883a 	mov	r5,r16
 80068c0:	14c5883a 	add	r2,r2,r19
 80068c4:	80800015 	stw	r2,0(r16)
 80068c8:	8005ce80 	call	8005ce8 <_fflush_r>
 80068cc:	d8c00017 	ldw	r3,0(sp)
 80068d0:	103fc81e 	bne	r2,zero,80067f4 <__sfvwrite_r+0x1fc>
 80068d4:	b4edc83a 	sub	r22,r22,r19
 80068d8:	b03fe61e 	bne	r22,zero,8006874 <__sfvwrite_r+0x27c>
 80068dc:	a809883a 	mov	r4,r21
 80068e0:	800b883a 	mov	r5,r16
 80068e4:	8005ce80 	call	8005ce8 <_fflush_r>
 80068e8:	103fc21e 	bne	r2,zero,80067f4 <__sfvwrite_r+0x1fc>
 80068ec:	0007883a 	mov	r3,zero
 80068f0:	003fe006 	br	8006874 <__sfvwrite_r+0x27c>
 80068f4:	81000017 	ldw	r4,0(r16)
 80068f8:	80800417 	ldw	r2,16(r16)
 80068fc:	1100022e 	bgeu	r2,r4,8006908 <__sfvwrite_r+0x310>
 8006900:	9839883a 	mov	fp,r19
 8006904:	9c806036 	bltu	r19,r18,8006a88 <__sfvwrite_r+0x490>
 8006908:	81c00517 	ldw	r7,20(r16)
 800690c:	91c01c36 	bltu	r18,r7,8006980 <__sfvwrite_r+0x388>
 8006910:	80800917 	ldw	r2,36(r16)
 8006914:	81400717 	ldw	r5,28(r16)
 8006918:	a809883a 	mov	r4,r21
 800691c:	b00d883a 	mov	r6,r22
 8006920:	103ee83a 	callr	r2
 8006924:	1027883a 	mov	r19,r2
 8006928:	00bfb20e 	bge	zero,r2,80067f4 <__sfvwrite_r+0x1fc>
 800692c:	1039883a 	mov	fp,r2
 8006930:	003f9806 	br	8006794 <__sfvwrite_r+0x19c>
 8006934:	b80d883a 	mov	r6,r23
 8006938:	e00b883a 	mov	r5,fp
 800693c:	d8c00015 	stw	r3,0(sp)
 8006940:	8006fb80 	call	8006fb8 <memmove>
 8006944:	80800217 	ldw	r2,8(r16)
 8006948:	81000017 	ldw	r4,0(r16)
 800694c:	b827883a 	mov	r19,r23
 8006950:	15c5c83a 	sub	r2,r2,r23
 8006954:	25ef883a 	add	r23,r4,r23
 8006958:	80800215 	stw	r2,8(r16)
 800695c:	85c00015 	stw	r23,0(r16)
 8006960:	d8c00017 	ldw	r3,0(sp)
 8006964:	003fc106 	br	800686c <__sfvwrite_r+0x274>
 8006968:	81000017 	ldw	r4,0(r16)
 800696c:	902f883a 	mov	r23,r18
 8006970:	9039883a 	mov	fp,r18
 8006974:	9027883a 	mov	r19,r18
 8006978:	900f883a 	mov	r7,r18
 800697c:	003f7a06 	br	8006768 <__sfvwrite_r+0x170>
 8006980:	b00b883a 	mov	r5,r22
 8006984:	900d883a 	mov	r6,r18
 8006988:	8006fb80 	call	8006fb8 <memmove>
 800698c:	80c00217 	ldw	r3,8(r16)
 8006990:	80800017 	ldw	r2,0(r16)
 8006994:	9027883a 	mov	r19,r18
 8006998:	1c87c83a 	sub	r3,r3,r18
 800699c:	1485883a 	add	r2,r2,r18
 80069a0:	80c00215 	stw	r3,8(r16)
 80069a4:	80800015 	stw	r2,0(r16)
 80069a8:	9039883a 	mov	fp,r18
 80069ac:	003f7906 	br	8006794 <__sfvwrite_r+0x19c>
 80069b0:	e009883a 	mov	r4,fp
 80069b4:	01400284 	movi	r5,10
 80069b8:	900d883a 	mov	r6,r18
 80069bc:	8006ec00 	call	8006ec0 <memchr>
 80069c0:	10003c26 	beq	r2,zero,8006ab4 <__sfvwrite_r+0x4bc>
 80069c4:	15800044 	addi	r22,r2,1
 80069c8:	b72dc83a 	sub	r22,r22,fp
 80069cc:	00c00044 	movi	r3,1
 80069d0:	003f9206 	br	800681c <__sfvwrite_r+0x224>
 80069d4:	81000517 	ldw	r4,20(r16)
 80069d8:	81400417 	ldw	r5,16(r16)
 80069dc:	80c00017 	ldw	r3,0(r16)
 80069e0:	210d883a 	add	r6,r4,r4
 80069e4:	3109883a 	add	r4,r6,r4
 80069e8:	2026d7fa 	srli	r19,r4,31
 80069ec:	1979c83a 	sub	fp,r3,r5
 80069f0:	e1800044 	addi	r6,fp,1
 80069f4:	9909883a 	add	r4,r19,r4
 80069f8:	2027d07a 	srai	r19,r4,1
 80069fc:	3489883a 	add	r4,r6,r18
 8006a00:	980d883a 	mov	r6,r19
 8006a04:	9900022e 	bgeu	r19,r4,8006a10 <__sfvwrite_r+0x418>
 8006a08:	2027883a 	mov	r19,r4
 8006a0c:	200d883a 	mov	r6,r4
 8006a10:	1081000c 	andi	r2,r2,1024
 8006a14:	10bfffcc 	andi	r2,r2,65535
 8006a18:	10a0001c 	xori	r2,r2,32768
 8006a1c:	10a00004 	addi	r2,r2,-32768
 8006a20:	a809883a 	mov	r4,r21
 8006a24:	103f6b26 	beq	r2,zero,80067d4 <__sfvwrite_r+0x1dc>
 8006a28:	300b883a 	mov	r5,r6
 8006a2c:	8001a5c0 	call	8001a5c <_malloc_r>
 8006a30:	102f883a 	mov	r23,r2
 8006a34:	103f6d26 	beq	r2,zero,80067ec <__sfvwrite_r+0x1f4>
 8006a38:	81400417 	ldw	r5,16(r16)
 8006a3c:	1009883a 	mov	r4,r2
 8006a40:	e00d883a 	mov	r6,fp
 8006a44:	80021e00 	call	80021e0 <memcpy>
 8006a48:	8080030b 	ldhu	r2,12(r16)
 8006a4c:	00fedfc4 	movi	r3,-1153
 8006a50:	10c4703a 	and	r2,r2,r3
 8006a54:	10802014 	ori	r2,r2,128
 8006a58:	8080030d 	sth	r2,12(r16)
 8006a5c:	bf09883a 	add	r4,r23,fp
 8006a60:	9f07c83a 	sub	r3,r19,fp
 8006a64:	85c00415 	stw	r23,16(r16)
 8006a68:	84c00515 	stw	r19,20(r16)
 8006a6c:	81000015 	stw	r4,0(r16)
 8006a70:	902f883a 	mov	r23,r18
 8006a74:	80c00215 	stw	r3,8(r16)
 8006a78:	9039883a 	mov	fp,r18
 8006a7c:	9027883a 	mov	r19,r18
 8006a80:	900f883a 	mov	r7,r18
 8006a84:	003f3806 	br	8006768 <__sfvwrite_r+0x170>
 8006a88:	b00b883a 	mov	r5,r22
 8006a8c:	980d883a 	mov	r6,r19
 8006a90:	8006fb80 	call	8006fb8 <memmove>
 8006a94:	80800017 	ldw	r2,0(r16)
 8006a98:	a809883a 	mov	r4,r21
 8006a9c:	800b883a 	mov	r5,r16
 8006aa0:	14c5883a 	add	r2,r2,r19
 8006aa4:	80800015 	stw	r2,0(r16)
 8006aa8:	8005ce80 	call	8005ce8 <_fflush_r>
 8006aac:	103f3926 	beq	r2,zero,8006794 <__sfvwrite_r+0x19c>
 8006ab0:	003f5006 	br	80067f4 <__sfvwrite_r+0x1fc>
 8006ab4:	95800044 	addi	r22,r18,1
 8006ab8:	00c00044 	movi	r3,1
 8006abc:	003f5706 	br	800681c <__sfvwrite_r+0x224>
 8006ac0:	80c0030b 	ldhu	r3,12(r16)
 8006ac4:	00bfffc4 	movi	r2,-1
 8006ac8:	18c01014 	ori	r3,r3,64
 8006acc:	80c0030d 	sth	r3,12(r16)
 8006ad0:	00c00244 	movi	r3,9
 8006ad4:	a8c00015 	stw	r3,0(r21)
 8006ad8:	003ef906 	br	80066c0 <__sfvwrite_r+0xc8>

08006adc <_fwalk>:
 8006adc:	defff904 	addi	sp,sp,-28
 8006ae0:	dcc00315 	stw	r19,12(sp)
 8006ae4:	24c0b804 	addi	r19,r4,736
 8006ae8:	dd400515 	stw	r21,20(sp)
 8006aec:	dd000415 	stw	r20,16(sp)
 8006af0:	dfc00615 	stw	ra,24(sp)
 8006af4:	dc800215 	stw	r18,8(sp)
 8006af8:	dc400115 	stw	r17,4(sp)
 8006afc:	dc000015 	stw	r16,0(sp)
 8006b00:	282b883a 	mov	r21,r5
 8006b04:	0029883a 	mov	r20,zero
 8006b08:	80061ac0 	call	80061ac <__sfp_lock_acquire>
 8006b0c:	98001226 	beq	r19,zero,8006b58 <_fwalk+0x7c>
 8006b10:	04bfffc4 	movi	r18,-1
 8006b14:	9c400117 	ldw	r17,4(r19)
 8006b18:	9c000217 	ldw	r16,8(r19)
 8006b1c:	8c7fffc4 	addi	r17,r17,-1
 8006b20:	88000b16 	blt	r17,zero,8006b50 <_fwalk+0x74>
 8006b24:	84000304 	addi	r16,r16,12
 8006b28:	80c0000f 	ldh	r3,0(r16)
 8006b2c:	8c7fffc4 	addi	r17,r17,-1
 8006b30:	813ffd04 	addi	r4,r16,-12
 8006b34:	18000426 	beq	r3,zero,8006b48 <_fwalk+0x6c>
 8006b38:	80c0008f 	ldh	r3,2(r16)
 8006b3c:	1c800226 	beq	r3,r18,8006b48 <_fwalk+0x6c>
 8006b40:	a83ee83a 	callr	r21
 8006b44:	a0a8b03a 	or	r20,r20,r2
 8006b48:	84001704 	addi	r16,r16,92
 8006b4c:	8cbff61e 	bne	r17,r18,8006b28 <_fwalk+0x4c>
 8006b50:	9cc00017 	ldw	r19,0(r19)
 8006b54:	983fef1e 	bne	r19,zero,8006b14 <_fwalk+0x38>
 8006b58:	80061b00 	call	80061b0 <__sfp_lock_release>
 8006b5c:	a005883a 	mov	r2,r20
 8006b60:	dfc00617 	ldw	ra,24(sp)
 8006b64:	dd400517 	ldw	r21,20(sp)
 8006b68:	dd000417 	ldw	r20,16(sp)
 8006b6c:	dcc00317 	ldw	r19,12(sp)
 8006b70:	dc800217 	ldw	r18,8(sp)
 8006b74:	dc400117 	ldw	r17,4(sp)
 8006b78:	dc000017 	ldw	r16,0(sp)
 8006b7c:	dec00704 	addi	sp,sp,28
 8006b80:	f800283a 	ret

08006b84 <_fwalk_reent>:
 8006b84:	defff804 	addi	sp,sp,-32
 8006b88:	dcc00315 	stw	r19,12(sp)
 8006b8c:	24c0b804 	addi	r19,r4,736
 8006b90:	dd800615 	stw	r22,24(sp)
 8006b94:	dd400515 	stw	r21,20(sp)
 8006b98:	dd000415 	stw	r20,16(sp)
 8006b9c:	dfc00715 	stw	ra,28(sp)
 8006ba0:	dc800215 	stw	r18,8(sp)
 8006ba4:	dc400115 	stw	r17,4(sp)
 8006ba8:	dc000015 	stw	r16,0(sp)
 8006bac:	2029883a 	mov	r20,r4
 8006bb0:	282b883a 	mov	r21,r5
 8006bb4:	002d883a 	mov	r22,zero
 8006bb8:	80061ac0 	call	80061ac <__sfp_lock_acquire>
 8006bbc:	98001326 	beq	r19,zero,8006c0c <_fwalk_reent+0x88>
 8006bc0:	04bfffc4 	movi	r18,-1
 8006bc4:	9c400117 	ldw	r17,4(r19)
 8006bc8:	9c000217 	ldw	r16,8(r19)
 8006bcc:	8c7fffc4 	addi	r17,r17,-1
 8006bd0:	88000c16 	blt	r17,zero,8006c04 <_fwalk_reent+0x80>
 8006bd4:	84000304 	addi	r16,r16,12
 8006bd8:	80c0000f 	ldh	r3,0(r16)
 8006bdc:	8c7fffc4 	addi	r17,r17,-1
 8006be0:	817ffd04 	addi	r5,r16,-12
 8006be4:	18000526 	beq	r3,zero,8006bfc <_fwalk_reent+0x78>
 8006be8:	80c0008f 	ldh	r3,2(r16)
 8006bec:	a009883a 	mov	r4,r20
 8006bf0:	1c800226 	beq	r3,r18,8006bfc <_fwalk_reent+0x78>
 8006bf4:	a83ee83a 	callr	r21
 8006bf8:	b0acb03a 	or	r22,r22,r2
 8006bfc:	84001704 	addi	r16,r16,92
 8006c00:	8cbff51e 	bne	r17,r18,8006bd8 <_fwalk_reent+0x54>
 8006c04:	9cc00017 	ldw	r19,0(r19)
 8006c08:	983fee1e 	bne	r19,zero,8006bc4 <_fwalk_reent+0x40>
 8006c0c:	80061b00 	call	80061b0 <__sfp_lock_release>
 8006c10:	b005883a 	mov	r2,r22
 8006c14:	dfc00717 	ldw	ra,28(sp)
 8006c18:	dd800617 	ldw	r22,24(sp)
 8006c1c:	dd400517 	ldw	r21,20(sp)
 8006c20:	dd000417 	ldw	r20,16(sp)
 8006c24:	dcc00317 	ldw	r19,12(sp)
 8006c28:	dc800217 	ldw	r18,8(sp)
 8006c2c:	dc400117 	ldw	r17,4(sp)
 8006c30:	dc000017 	ldw	r16,0(sp)
 8006c34:	dec00804 	addi	sp,sp,32
 8006c38:	f800283a 	ret

08006c3c <_setlocale_r>:
 8006c3c:	defffc04 	addi	sp,sp,-16
 8006c40:	dc800215 	stw	r18,8(sp)
 8006c44:	dc400115 	stw	r17,4(sp)
 8006c48:	dc000015 	stw	r16,0(sp)
 8006c4c:	dfc00315 	stw	ra,12(sp)
 8006c50:	3021883a 	mov	r16,r6
 8006c54:	2023883a 	mov	r17,r4
 8006c58:	2825883a 	mov	r18,r5
 8006c5c:	30001626 	beq	r6,zero,8006cb8 <_setlocale_r+0x7c>
 8006c60:	3009883a 	mov	r4,r6
 8006c64:	01420074 	movhi	r5,2049
 8006c68:	2976c904 	addi	r5,r5,-9436
 8006c6c:	8008a100 	call	8008a10 <strcmp>
 8006c70:	10000a1e 	bne	r2,zero,8006c9c <_setlocale_r+0x60>
 8006c74:	8c800c15 	stw	r18,48(r17)
 8006c78:	8c000d15 	stw	r16,52(r17)
 8006c7c:	00820074 	movhi	r2,2049
 8006c80:	10b6c904 	addi	r2,r2,-9436
 8006c84:	dfc00317 	ldw	ra,12(sp)
 8006c88:	dc800217 	ldw	r18,8(sp)
 8006c8c:	dc400117 	ldw	r17,4(sp)
 8006c90:	dc000017 	ldw	r16,0(sp)
 8006c94:	dec00404 	addi	sp,sp,16
 8006c98:	f800283a 	ret
 8006c9c:	8009883a 	mov	r4,r16
 8006ca0:	01420074 	movhi	r5,2049
 8006ca4:	2976b404 	addi	r5,r5,-9520
 8006ca8:	8008a100 	call	8008a10 <strcmp>
 8006cac:	103ff126 	beq	r2,zero,8006c74 <_setlocale_r+0x38>
 8006cb0:	0005883a 	mov	r2,zero
 8006cb4:	003ff306 	br	8006c84 <_setlocale_r+0x48>
 8006cb8:	00820074 	movhi	r2,2049
 8006cbc:	10b6c904 	addi	r2,r2,-9436
 8006cc0:	dfc00317 	ldw	ra,12(sp)
 8006cc4:	dc800217 	ldw	r18,8(sp)
 8006cc8:	dc400117 	ldw	r17,4(sp)
 8006ccc:	dc000017 	ldw	r16,0(sp)
 8006cd0:	dec00404 	addi	sp,sp,16
 8006cd4:	f800283a 	ret

08006cd8 <__locale_charset>:
 8006cd8:	00820074 	movhi	r2,2049
 8006cdc:	10b6ca04 	addi	r2,r2,-9432
 8006ce0:	f800283a 	ret

08006ce4 <_localeconv_r>:
 8006ce4:	00820074 	movhi	r2,2049
 8006ce8:	10b6ce04 	addi	r2,r2,-9416
 8006cec:	f800283a 	ret

08006cf0 <setlocale>:
 8006cf0:	00c20074 	movhi	r3,2049
 8006cf4:	18fa6f04 	addi	r3,r3,-5700
 8006cf8:	2005883a 	mov	r2,r4
 8006cfc:	19000017 	ldw	r4,0(r3)
 8006d00:	280d883a 	mov	r6,r5
 8006d04:	100b883a 	mov	r5,r2
 8006d08:	8006c3c1 	jmpi	8006c3c <_setlocale_r>

08006d0c <localeconv>:
 8006d0c:	00820074 	movhi	r2,2049
 8006d10:	10b6ce04 	addi	r2,r2,-9416
 8006d14:	f800283a 	ret

08006d18 <__smakebuf_r>:
 8006d18:	2880030b 	ldhu	r2,12(r5)
 8006d1c:	deffed04 	addi	sp,sp,-76
 8006d20:	dc401015 	stw	r17,64(sp)
 8006d24:	10c0008c 	andi	r3,r2,2
 8006d28:	18ffffcc 	andi	r3,r3,65535
 8006d2c:	18e0001c 	xori	r3,r3,32768
 8006d30:	dc000f15 	stw	r16,60(sp)
 8006d34:	dfc01215 	stw	ra,72(sp)
 8006d38:	dc801115 	stw	r18,68(sp)
 8006d3c:	18e00004 	addi	r3,r3,-32768
 8006d40:	2821883a 	mov	r16,r5
 8006d44:	2023883a 	mov	r17,r4
 8006d48:	1800381e 	bne	r3,zero,8006e2c <__smakebuf_r+0x114>
 8006d4c:	2940038f 	ldh	r5,14(r5)
 8006d50:	28002d16 	blt	r5,zero,8006e08 <__smakebuf_r+0xf0>
 8006d54:	d80d883a 	mov	r6,sp
 8006d58:	8008e2c0 	call	8008e2c <_fstat_r>
 8006d5c:	10002916 	blt	r2,zero,8006e04 <__smakebuf_r+0xec>
 8006d60:	d8800117 	ldw	r2,4(sp)
 8006d64:	00e00014 	movui	r3,32768
 8006d68:	10bc000c 	andi	r2,r2,61440
 8006d6c:	10c03c26 	beq	r2,r3,8006e60 <__smakebuf_r+0x148>
 8006d70:	80c0030b 	ldhu	r3,12(r16)
 8006d74:	18c20014 	ori	r3,r3,2048
 8006d78:	80c0030d 	sth	r3,12(r16)
 8006d7c:	00c80004 	movi	r3,8192
 8006d80:	10c00c1e 	bne	r2,r3,8006db4 <__smakebuf_r+0x9c>
 8006d84:	8140038f 	ldh	r5,14(r16)
 8006d88:	8809883a 	mov	r4,r17
 8006d8c:	8008e940 	call	8008e94 <_isatty_r>
 8006d90:	10000826 	beq	r2,zero,8006db4 <__smakebuf_r+0x9c>
 8006d94:	80c0030b 	ldhu	r3,12(r16)
 8006d98:	808010c4 	addi	r2,r16,67
 8006d9c:	80800015 	stw	r2,0(r16)
 8006da0:	18c00054 	ori	r3,r3,1
 8006da4:	80800415 	stw	r2,16(r16)
 8006da8:	00800044 	movi	r2,1
 8006dac:	80c0030d 	sth	r3,12(r16)
 8006db0:	80800515 	stw	r2,20(r16)
 8006db4:	04810004 	movi	r18,1024
 8006db8:	8809883a 	mov	r4,r17
 8006dbc:	900b883a 	mov	r5,r18
 8006dc0:	8001a5c0 	call	8001a5c <_malloc_r>
 8006dc4:	10003026 	beq	r2,zero,8006e88 <__smakebuf_r+0x170>
 8006dc8:	80c0030b 	ldhu	r3,12(r16)
 8006dcc:	01020034 	movhi	r4,2048
 8006dd0:	2117c404 	addi	r4,r4,24336
 8006dd4:	89000f15 	stw	r4,60(r17)
 8006dd8:	18c02014 	ori	r3,r3,128
 8006ddc:	80c0030d 	sth	r3,12(r16)
 8006de0:	80800015 	stw	r2,0(r16)
 8006de4:	80800415 	stw	r2,16(r16)
 8006de8:	84800515 	stw	r18,20(r16)
 8006dec:	dfc01217 	ldw	ra,72(sp)
 8006df0:	dc801117 	ldw	r18,68(sp)
 8006df4:	dc401017 	ldw	r17,64(sp)
 8006df8:	dc000f17 	ldw	r16,60(sp)
 8006dfc:	dec01304 	addi	sp,sp,76
 8006e00:	f800283a 	ret
 8006e04:	8080030b 	ldhu	r2,12(r16)
 8006e08:	10c0200c 	andi	r3,r2,128
 8006e0c:	18ffffcc 	andi	r3,r3,65535
 8006e10:	18e0001c 	xori	r3,r3,32768
 8006e14:	18e00004 	addi	r3,r3,-32768
 8006e18:	18000f1e 	bne	r3,zero,8006e58 <__smakebuf_r+0x140>
 8006e1c:	04810004 	movi	r18,1024
 8006e20:	10820014 	ori	r2,r2,2048
 8006e24:	8080030d 	sth	r2,12(r16)
 8006e28:	003fe306 	br	8006db8 <__smakebuf_r+0xa0>
 8006e2c:	288010c4 	addi	r2,r5,67
 8006e30:	28800015 	stw	r2,0(r5)
 8006e34:	28800415 	stw	r2,16(r5)
 8006e38:	00800044 	movi	r2,1
 8006e3c:	28800515 	stw	r2,20(r5)
 8006e40:	dfc01217 	ldw	ra,72(sp)
 8006e44:	dc801117 	ldw	r18,68(sp)
 8006e48:	dc401017 	ldw	r17,64(sp)
 8006e4c:	dc000f17 	ldw	r16,60(sp)
 8006e50:	dec01304 	addi	sp,sp,76
 8006e54:	f800283a 	ret
 8006e58:	04801004 	movi	r18,64
 8006e5c:	003ff006 	br	8006e20 <__smakebuf_r+0x108>
 8006e60:	81000a17 	ldw	r4,40(r16)
 8006e64:	00c20074 	movhi	r3,2049
 8006e68:	18e26b04 	addi	r3,r3,-30292
 8006e6c:	20ffc01e 	bne	r4,r3,8006d70 <__smakebuf_r+0x58>
 8006e70:	8080030b 	ldhu	r2,12(r16)
 8006e74:	00c10004 	movi	r3,1024
 8006e78:	80c01315 	stw	r3,76(r16)
 8006e7c:	10c4b03a 	or	r2,r2,r3
 8006e80:	8080030d 	sth	r2,12(r16)
 8006e84:	003fcb06 	br	8006db4 <__smakebuf_r+0x9c>
 8006e88:	8080030b 	ldhu	r2,12(r16)
 8006e8c:	10c0800c 	andi	r3,r2,512
 8006e90:	18ffffcc 	andi	r3,r3,65535
 8006e94:	18e0001c 	xori	r3,r3,32768
 8006e98:	18e00004 	addi	r3,r3,-32768
 8006e9c:	183fd31e 	bne	r3,zero,8006dec <__smakebuf_r+0xd4>
 8006ea0:	10800094 	ori	r2,r2,2
 8006ea4:	80c010c4 	addi	r3,r16,67
 8006ea8:	8080030d 	sth	r2,12(r16)
 8006eac:	00800044 	movi	r2,1
 8006eb0:	80c00015 	stw	r3,0(r16)
 8006eb4:	80c00415 	stw	r3,16(r16)
 8006eb8:	80800515 	stw	r2,20(r16)
 8006ebc:	003fcb06 	br	8006dec <__smakebuf_r+0xd4>

08006ec0 <memchr>:
 8006ec0:	008000c4 	movi	r2,3
 8006ec4:	29403fcc 	andi	r5,r5,255
 8006ec8:	1180282e 	bgeu	r2,r6,8006f6c <memchr+0xac>
 8006ecc:	2086703a 	and	r3,r4,r2
 8006ed0:	1800351e 	bne	r3,zero,8006fa8 <memchr+0xe8>
 8006ed4:	2816923a 	slli	r11,r5,8
 8006ed8:	2093883a 	add	r9,r4,r2
 8006edc:	22000084 	addi	r8,r4,2
 8006ee0:	5957883a 	add	r11,r11,r5
 8006ee4:	5816923a 	slli	r11,r11,8
 8006ee8:	20c00044 	addi	r3,r4,1
 8006eec:	037fbff4 	movhi	r13,65279
 8006ef0:	6b7fbfc4 	addi	r13,r13,-257
 8006ef4:	5957883a 	add	r11,r11,r5
 8006ef8:	5816923a 	slli	r11,r11,8
 8006efc:	03202074 	movhi	r12,32897
 8006f00:	63202004 	addi	r12,r12,-32640
 8006f04:	101d883a 	mov	r14,r2
 8006f08:	5957883a 	add	r11,r11,r5
 8006f0c:	21c00017 	ldw	r7,0(r4)
 8006f10:	31bfff04 	addi	r6,r6,-4
 8006f14:	1805883a 	mov	r2,r3
 8006f18:	3acef03a 	xor	r7,r7,r11
 8006f1c:	3b55883a 	add	r10,r7,r13
 8006f20:	01ce303a 	nor	r7,zero,r7
 8006f24:	51ce703a 	and	r7,r10,r7
 8006f28:	3b0e703a 	and	r7,r7,r12
 8006f2c:	38000a26 	beq	r7,zero,8006f58 <memchr+0x98>
 8006f30:	21c00003 	ldbu	r7,0(r4)
 8006f34:	39401e26 	beq	r7,r5,8006fb0 <memchr+0xf0>
 8006f38:	19c00003 	ldbu	r7,0(r3)
 8006f3c:	39401926 	beq	r7,r5,8006fa4 <memchr+0xe4>
 8006f40:	41c00003 	ldbu	r7,0(r8)
 8006f44:	4005883a 	mov	r2,r8
 8006f48:	39401626 	beq	r7,r5,8006fa4 <memchr+0xe4>
 8006f4c:	49c00003 	ldbu	r7,0(r9)
 8006f50:	4805883a 	mov	r2,r9
 8006f54:	39401326 	beq	r7,r5,8006fa4 <memchr+0xe4>
 8006f58:	21000104 	addi	r4,r4,4
 8006f5c:	4a400104 	addi	r9,r9,4
 8006f60:	42000104 	addi	r8,r8,4
 8006f64:	18c00104 	addi	r3,r3,4
 8006f68:	71bfe836 	bltu	r14,r6,8006f0c <memchr+0x4c>
 8006f6c:	2005883a 	mov	r2,r4
 8006f70:	30000a26 	beq	r6,zero,8006f9c <memchr+0xdc>
 8006f74:	10c00003 	ldbu	r3,0(r2)
 8006f78:	19400a26 	beq	r3,r5,8006fa4 <memchr+0xe4>
 8006f7c:	10c00044 	addi	r3,r2,1
 8006f80:	118d883a 	add	r6,r2,r6
 8006f84:	00000306 	br	8006f94 <memchr+0xd4>
 8006f88:	11000003 	ldbu	r4,0(r2)
 8006f8c:	18c00044 	addi	r3,r3,1
 8006f90:	21400426 	beq	r4,r5,8006fa4 <memchr+0xe4>
 8006f94:	1805883a 	mov	r2,r3
 8006f98:	19bffb1e 	bne	r3,r6,8006f88 <memchr+0xc8>
 8006f9c:	0005883a 	mov	r2,zero
 8006fa0:	f800283a 	ret
 8006fa4:	f800283a 	ret
 8006fa8:	2005883a 	mov	r2,r4
 8006fac:	003ff106 	br	8006f74 <memchr+0xb4>
 8006fb0:	2005883a 	mov	r2,r4
 8006fb4:	f800283a 	ret

08006fb8 <memmove>:
 8006fb8:	defffb04 	addi	sp,sp,-20
 8006fbc:	dc000015 	stw	r16,0(sp)
 8006fc0:	dfc00415 	stw	ra,16(sp)
 8006fc4:	dcc00315 	stw	r19,12(sp)
 8006fc8:	dc800215 	stw	r18,8(sp)
 8006fcc:	dc400115 	stw	r17,4(sp)
 8006fd0:	2021883a 	mov	r16,r4
 8006fd4:	300f883a 	mov	r7,r6
 8006fd8:	2900122e 	bgeu	r5,r4,8007024 <memmove+0x6c>
 8006fdc:	2987883a 	add	r3,r5,r6
 8006fe0:	20c0102e 	bgeu	r4,r3,8007024 <memmove+0x6c>
 8006fe4:	218b883a 	add	r5,r4,r6
 8006fe8:	1989c83a 	sub	r4,r3,r6
 8006fec:	30000526 	beq	r6,zero,8007004 <memmove+0x4c>
 8006ff0:	18ffffc4 	addi	r3,r3,-1
 8006ff4:	18800003 	ldbu	r2,0(r3)
 8006ff8:	297fffc4 	addi	r5,r5,-1
 8006ffc:	28800005 	stb	r2,0(r5)
 8007000:	193ffb1e 	bne	r3,r4,8006ff0 <memmove+0x38>
 8007004:	8005883a 	mov	r2,r16
 8007008:	dfc00417 	ldw	ra,16(sp)
 800700c:	dcc00317 	ldw	r19,12(sp)
 8007010:	dc800217 	ldw	r18,8(sp)
 8007014:	dc400117 	ldw	r17,4(sp)
 8007018:	dc000017 	ldw	r16,0(sp)
 800701c:	dec00504 	addi	sp,sp,20
 8007020:	f800283a 	ret
 8007024:	008003c4 	movi	r2,15
 8007028:	1180422e 	bgeu	r2,r6,8007134 <memmove+0x17c>
 800702c:	2c04b03a 	or	r2,r5,r16
 8007030:	108000cc 	andi	r2,r2,3
 8007034:	10003f1e 	bne	r2,zero,8007134 <memmove+0x17c>
 8007038:	32bffc04 	addi	r10,r6,-16
 800703c:	5014d13a 	srli	r10,r10,4
 8007040:	81000404 	addi	r4,r16,16
 8007044:	8007883a 	mov	r3,r16
 8007048:	5004913a 	slli	r2,r10,4
 800704c:	280f883a 	mov	r7,r5
 8007050:	2089883a 	add	r4,r4,r2
 8007054:	38800017 	ldw	r2,0(r7)
 8007058:	18c00404 	addi	r3,r3,16
 800705c:	39c00404 	addi	r7,r7,16
 8007060:	18bffc15 	stw	r2,-16(r3)
 8007064:	38bffd17 	ldw	r2,-12(r7)
 8007068:	18bffd15 	stw	r2,-12(r3)
 800706c:	38bffe17 	ldw	r2,-8(r7)
 8007070:	18bffe15 	stw	r2,-8(r3)
 8007074:	38bfff17 	ldw	r2,-4(r7)
 8007078:	18bfff15 	stw	r2,-4(r3)
 800707c:	193ff51e 	bne	r3,r4,8007054 <memmove+0x9c>
 8007080:	52800044 	addi	r10,r10,1
 8007084:	5014913a 	slli	r10,r10,4
 8007088:	31c003cc 	andi	r7,r6,15
 800708c:	008000c4 	movi	r2,3
 8007090:	8287883a 	add	r3,r16,r10
 8007094:	2a95883a 	add	r10,r5,r10
 8007098:	11c0282e 	bgeu	r2,r7,800713c <memmove+0x184>
 800709c:	3c7fff04 	addi	r17,r7,-4
 80070a0:	8808d0ba 	srli	r4,r17,2
 80070a4:	1a400104 	addi	r9,r3,4
 80070a8:	180d883a 	mov	r6,r3
 80070ac:	2105883a 	add	r2,r4,r4
 80070b0:	1085883a 	add	r2,r2,r2
 80070b4:	4893883a 	add	r9,r9,r2
 80070b8:	5005883a 	mov	r2,r10
 80070bc:	12000017 	ldw	r8,0(r2)
 80070c0:	31800104 	addi	r6,r6,4
 80070c4:	10800104 	addi	r2,r2,4
 80070c8:	323fff15 	stw	r8,-4(r6)
 80070cc:	327ffb1e 	bne	r6,r9,80070bc <memmove+0x104>
 80070d0:	20800044 	addi	r2,r4,1
 80070d4:	1085883a 	add	r2,r2,r2
 80070d8:	1085883a 	add	r2,r2,r2
 80070dc:	017fff04 	movi	r5,-4
 80070e0:	18a5883a 	add	r18,r3,r2
 80070e4:	50a7883a 	add	r19,r10,r2
 80070e8:	8001a0c0 	call	8001a0c <__mulsi3>
 80070ec:	144f883a 	add	r7,r2,r17
 80070f0:	980b883a 	mov	r5,r19
 80070f4:	9007883a 	mov	r3,r18
 80070f8:	383fc226 	beq	r7,zero,8007004 <memmove+0x4c>
 80070fc:	19cf883a 	add	r7,r3,r7
 8007100:	29800003 	ldbu	r6,0(r5)
 8007104:	18c00044 	addi	r3,r3,1
 8007108:	29400044 	addi	r5,r5,1
 800710c:	19bfffc5 	stb	r6,-1(r3)
 8007110:	19fffb1e 	bne	r3,r7,8007100 <memmove+0x148>
 8007114:	8005883a 	mov	r2,r16
 8007118:	dfc00417 	ldw	ra,16(sp)
 800711c:	dcc00317 	ldw	r19,12(sp)
 8007120:	dc800217 	ldw	r18,8(sp)
 8007124:	dc400117 	ldw	r17,4(sp)
 8007128:	dc000017 	ldw	r16,0(sp)
 800712c:	dec00504 	addi	sp,sp,20
 8007130:	f800283a 	ret
 8007134:	8007883a 	mov	r3,r16
 8007138:	003fef06 	br	80070f8 <memmove+0x140>
 800713c:	500b883a 	mov	r5,r10
 8007140:	003fed06 	br	80070f8 <memmove+0x140>

08007144 <memset>:
 8007144:	00c000c4 	movi	r3,3
 8007148:	2005883a 	mov	r2,r4
 800714c:	29403fcc 	andi	r5,r5,255
 8007150:	19802d2e 	bgeu	r3,r6,8007208 <memset+0xc4>
 8007154:	20c6703a 	and	r3,r4,r3
 8007158:	18002e1e 	bne	r3,zero,8007214 <memset+0xd0>
 800715c:	2806923a 	slli	r3,r5,8
 8007160:	010003c4 	movi	r4,15
 8007164:	3011883a 	mov	r8,r6
 8007168:	1946b03a 	or	r3,r3,r5
 800716c:	180e943a 	slli	r7,r3,16
 8007170:	38ceb03a 	or	r7,r7,r3
 8007174:	1007883a 	mov	r3,r2
 8007178:	21800f2e 	bgeu	r4,r6,80071b8 <memset+0x74>
 800717c:	19c00015 	stw	r7,0(r3)
 8007180:	19c00115 	stw	r7,4(r3)
 8007184:	19c00215 	stw	r7,8(r3)
 8007188:	19c00315 	stw	r7,12(r3)
 800718c:	423ffc04 	addi	r8,r8,-16
 8007190:	18c00404 	addi	r3,r3,16
 8007194:	223ff936 	bltu	r4,r8,800717c <memset+0x38>
 8007198:	30fffc04 	addi	r3,r6,-16
 800719c:	1806d13a 	srli	r3,r3,4
 80071a0:	318003cc 	andi	r6,r6,15
 80071a4:	010000c4 	movi	r4,3
 80071a8:	18c00044 	addi	r3,r3,1
 80071ac:	1806913a 	slli	r3,r3,4
 80071b0:	10c7883a 	add	r3,r2,r3
 80071b4:	21800e2e 	bgeu	r4,r6,80071f0 <memset+0xac>
 80071b8:	1813883a 	mov	r9,r3
 80071bc:	3011883a 	mov	r8,r6
 80071c0:	010000c4 	movi	r4,3
 80071c4:	49c00015 	stw	r7,0(r9)
 80071c8:	423fff04 	addi	r8,r8,-4
 80071cc:	4a400104 	addi	r9,r9,4
 80071d0:	223ffc36 	bltu	r4,r8,80071c4 <memset+0x80>
 80071d4:	313fff04 	addi	r4,r6,-4
 80071d8:	2008d0ba 	srli	r4,r4,2
 80071dc:	318000cc 	andi	r6,r6,3
 80071e0:	21000044 	addi	r4,r4,1
 80071e4:	2109883a 	add	r4,r4,r4
 80071e8:	2109883a 	add	r4,r4,r4
 80071ec:	1907883a 	add	r3,r3,r4
 80071f0:	30000a26 	beq	r6,zero,800721c <memset+0xd8>
 80071f4:	198d883a 	add	r6,r3,r6
 80071f8:	19400005 	stb	r5,0(r3)
 80071fc:	18c00044 	addi	r3,r3,1
 8007200:	19bffd1e 	bne	r3,r6,80071f8 <memset+0xb4>
 8007204:	f800283a 	ret
 8007208:	2007883a 	mov	r3,r4
 800720c:	303ff91e 	bne	r6,zero,80071f4 <memset+0xb0>
 8007210:	00000206 	br	800721c <memset+0xd8>
 8007214:	2007883a 	mov	r3,r4
 8007218:	003ff606 	br	80071f4 <memset+0xb0>
 800721c:	f800283a 	ret

08007220 <_Balloc>:
 8007220:	20801317 	ldw	r2,76(r4)
 8007224:	defffc04 	addi	sp,sp,-16
 8007228:	dc400115 	stw	r17,4(sp)
 800722c:	dc000015 	stw	r16,0(sp)
 8007230:	dfc00315 	stw	ra,12(sp)
 8007234:	dc800215 	stw	r18,8(sp)
 8007238:	2023883a 	mov	r17,r4
 800723c:	2821883a 	mov	r16,r5
 8007240:	10000f26 	beq	r2,zero,8007280 <_Balloc+0x60>
 8007244:	8407883a 	add	r3,r16,r16
 8007248:	18c7883a 	add	r3,r3,r3
 800724c:	10c7883a 	add	r3,r2,r3
 8007250:	18800017 	ldw	r2,0(r3)
 8007254:	10001126 	beq	r2,zero,800729c <_Balloc+0x7c>
 8007258:	11000017 	ldw	r4,0(r2)
 800725c:	19000015 	stw	r4,0(r3)
 8007260:	10000415 	stw	zero,16(r2)
 8007264:	10000315 	stw	zero,12(r2)
 8007268:	dfc00317 	ldw	ra,12(sp)
 800726c:	dc800217 	ldw	r18,8(sp)
 8007270:	dc400117 	ldw	r17,4(sp)
 8007274:	dc000017 	ldw	r16,0(sp)
 8007278:	dec00404 	addi	sp,sp,16
 800727c:	f800283a 	ret
 8007280:	01400104 	movi	r5,4
 8007284:	01800404 	movi	r6,16
 8007288:	8008bac0 	call	8008bac <_calloc_r>
 800728c:	88801315 	stw	r2,76(r17)
 8007290:	103fec1e 	bne	r2,zero,8007244 <_Balloc+0x24>
 8007294:	0005883a 	mov	r2,zero
 8007298:	003ff306 	br	8007268 <_Balloc+0x48>
 800729c:	01400044 	movi	r5,1
 80072a0:	2c24983a 	sll	r18,r5,r16
 80072a4:	8809883a 	mov	r4,r17
 80072a8:	91800144 	addi	r6,r18,5
 80072ac:	318d883a 	add	r6,r6,r6
 80072b0:	318d883a 	add	r6,r6,r6
 80072b4:	8008bac0 	call	8008bac <_calloc_r>
 80072b8:	103ff626 	beq	r2,zero,8007294 <_Balloc+0x74>
 80072bc:	14000115 	stw	r16,4(r2)
 80072c0:	14800215 	stw	r18,8(r2)
 80072c4:	003fe606 	br	8007260 <_Balloc+0x40>

080072c8 <_Bfree>:
 80072c8:	28000826 	beq	r5,zero,80072ec <_Bfree+0x24>
 80072cc:	28c00117 	ldw	r3,4(r5)
 80072d0:	20801317 	ldw	r2,76(r4)
 80072d4:	18c7883a 	add	r3,r3,r3
 80072d8:	18c7883a 	add	r3,r3,r3
 80072dc:	10c5883a 	add	r2,r2,r3
 80072e0:	10c00017 	ldw	r3,0(r2)
 80072e4:	28c00015 	stw	r3,0(r5)
 80072e8:	11400015 	stw	r5,0(r2)
 80072ec:	f800283a 	ret

080072f0 <__multadd>:
 80072f0:	defff604 	addi	sp,sp,-40
 80072f4:	dd400515 	stw	r21,20(sp)
 80072f8:	2d400417 	ldw	r21,16(r5)
 80072fc:	df000815 	stw	fp,32(sp)
 8007300:	ddc00715 	stw	r23,28(sp)
 8007304:	dd800615 	stw	r22,24(sp)
 8007308:	dd000415 	stw	r20,16(sp)
 800730c:	dc400115 	stw	r17,4(sp)
 8007310:	dc000015 	stw	r16,0(sp)
 8007314:	dfc00915 	stw	ra,36(sp)
 8007318:	dcc00315 	stw	r19,12(sp)
 800731c:	dc800215 	stw	r18,8(sp)
 8007320:	282d883a 	mov	r22,r5
 8007324:	202f883a 	mov	r23,r4
 8007328:	3029883a 	mov	r20,r6
 800732c:	3839883a 	mov	fp,r7
 8007330:	2c000504 	addi	r16,r5,20
 8007334:	0023883a 	mov	r17,zero
 8007338:	84c00017 	ldw	r19,0(r16)
 800733c:	a00b883a 	mov	r5,r20
 8007340:	8c400044 	addi	r17,r17,1
 8007344:	993fffcc 	andi	r4,r19,65535
 8007348:	8001a0c0 	call	8001a0c <__mulsi3>
 800734c:	1725883a 	add	r18,r2,fp
 8007350:	9808d43a 	srli	r4,r19,16
 8007354:	9026d43a 	srli	r19,r18,16
 8007358:	a00b883a 	mov	r5,r20
 800735c:	8001a0c0 	call	8001a0c <__mulsi3>
 8007360:	988f883a 	add	r7,r19,r2
 8007364:	3804943a 	slli	r2,r7,16
 8007368:	94bfffcc 	andi	r18,r18,65535
 800736c:	3838d43a 	srli	fp,r7,16
 8007370:	14a5883a 	add	r18,r2,r18
 8007374:	84800015 	stw	r18,0(r16)
 8007378:	84000104 	addi	r16,r16,4
 800737c:	8d7fee16 	blt	r17,r21,8007338 <__multadd+0x48>
 8007380:	e0000926 	beq	fp,zero,80073a8 <__multadd+0xb8>
 8007384:	b0800217 	ldw	r2,8(r22)
 8007388:	a880140e 	bge	r21,r2,80073dc <__multadd+0xec>
 800738c:	a8800144 	addi	r2,r21,5
 8007390:	1085883a 	add	r2,r2,r2
 8007394:	1085883a 	add	r2,r2,r2
 8007398:	b085883a 	add	r2,r22,r2
 800739c:	ad400044 	addi	r21,r21,1
 80073a0:	17000015 	stw	fp,0(r2)
 80073a4:	b5400415 	stw	r21,16(r22)
 80073a8:	b005883a 	mov	r2,r22
 80073ac:	dfc00917 	ldw	ra,36(sp)
 80073b0:	df000817 	ldw	fp,32(sp)
 80073b4:	ddc00717 	ldw	r23,28(sp)
 80073b8:	dd800617 	ldw	r22,24(sp)
 80073bc:	dd400517 	ldw	r21,20(sp)
 80073c0:	dd000417 	ldw	r20,16(sp)
 80073c4:	dcc00317 	ldw	r19,12(sp)
 80073c8:	dc800217 	ldw	r18,8(sp)
 80073cc:	dc400117 	ldw	r17,4(sp)
 80073d0:	dc000017 	ldw	r16,0(sp)
 80073d4:	dec00a04 	addi	sp,sp,40
 80073d8:	f800283a 	ret
 80073dc:	b1400117 	ldw	r5,4(r22)
 80073e0:	b809883a 	mov	r4,r23
 80073e4:	29400044 	addi	r5,r5,1
 80073e8:	80072200 	call	8007220 <_Balloc>
 80073ec:	b1800417 	ldw	r6,16(r22)
 80073f0:	b1400304 	addi	r5,r22,12
 80073f4:	11000304 	addi	r4,r2,12
 80073f8:	31800084 	addi	r6,r6,2
 80073fc:	318d883a 	add	r6,r6,r6
 8007400:	318d883a 	add	r6,r6,r6
 8007404:	1021883a 	mov	r16,r2
 8007408:	80021e00 	call	80021e0 <memcpy>
 800740c:	b0c00117 	ldw	r3,4(r22)
 8007410:	b8801317 	ldw	r2,76(r23)
 8007414:	18c7883a 	add	r3,r3,r3
 8007418:	18c7883a 	add	r3,r3,r3
 800741c:	10c5883a 	add	r2,r2,r3
 8007420:	10c00017 	ldw	r3,0(r2)
 8007424:	b0c00015 	stw	r3,0(r22)
 8007428:	15800015 	stw	r22,0(r2)
 800742c:	802d883a 	mov	r22,r16
 8007430:	003fd606 	br	800738c <__multadd+0x9c>

08007434 <__s2b>:
 8007434:	defff904 	addi	sp,sp,-28
 8007438:	dd000415 	stw	r20,16(sp)
 800743c:	dc400115 	stw	r17,4(sp)
 8007440:	2829883a 	mov	r20,r5
 8007444:	2023883a 	mov	r17,r4
 8007448:	01400244 	movi	r5,9
 800744c:	39000204 	addi	r4,r7,8
 8007450:	dcc00315 	stw	r19,12(sp)
 8007454:	dc800215 	stw	r18,8(sp)
 8007458:	dfc00615 	stw	ra,24(sp)
 800745c:	dd400515 	stw	r21,20(sp)
 8007460:	dc000015 	stw	r16,0(sp)
 8007464:	3825883a 	mov	r18,r7
 8007468:	3027883a 	mov	r19,r6
 800746c:	800a9ec0 	call	800a9ec <__divsi3>
 8007470:	00c00044 	movi	r3,1
 8007474:	000b883a 	mov	r5,zero
 8007478:	1880030e 	bge	r3,r2,8007488 <__s2b+0x54>
 800747c:	18c7883a 	add	r3,r3,r3
 8007480:	29400044 	addi	r5,r5,1
 8007484:	18bffd16 	blt	r3,r2,800747c <__s2b+0x48>
 8007488:	8809883a 	mov	r4,r17
 800748c:	80072200 	call	8007220 <_Balloc>
 8007490:	d8c00717 	ldw	r3,28(sp)
 8007494:	10c00515 	stw	r3,20(r2)
 8007498:	00c00044 	movi	r3,1
 800749c:	10c00415 	stw	r3,16(r2)
 80074a0:	00c00244 	movi	r3,9
 80074a4:	1cc0210e 	bge	r3,r19,800752c <__s2b+0xf8>
 80074a8:	a0eb883a 	add	r21,r20,r3
 80074ac:	a821883a 	mov	r16,r21
 80074b0:	a4e9883a 	add	r20,r20,r19
 80074b4:	81c00007 	ldb	r7,0(r16)
 80074b8:	8809883a 	mov	r4,r17
 80074bc:	84000044 	addi	r16,r16,1
 80074c0:	100b883a 	mov	r5,r2
 80074c4:	01800284 	movi	r6,10
 80074c8:	39fff404 	addi	r7,r7,-48
 80074cc:	80072f00 	call	80072f0 <__multadd>
 80074d0:	853ff81e 	bne	r16,r20,80074b4 <__s2b+0x80>
 80074d4:	ace1883a 	add	r16,r21,r19
 80074d8:	843ffe04 	addi	r16,r16,-8
 80074dc:	9c800a0e 	bge	r19,r18,8007508 <__s2b+0xd4>
 80074e0:	94e5c83a 	sub	r18,r18,r19
 80074e4:	84a5883a 	add	r18,r16,r18
 80074e8:	81c00007 	ldb	r7,0(r16)
 80074ec:	8809883a 	mov	r4,r17
 80074f0:	84000044 	addi	r16,r16,1
 80074f4:	100b883a 	mov	r5,r2
 80074f8:	01800284 	movi	r6,10
 80074fc:	39fff404 	addi	r7,r7,-48
 8007500:	80072f00 	call	80072f0 <__multadd>
 8007504:	84bff81e 	bne	r16,r18,80074e8 <__s2b+0xb4>
 8007508:	dfc00617 	ldw	ra,24(sp)
 800750c:	dd400517 	ldw	r21,20(sp)
 8007510:	dd000417 	ldw	r20,16(sp)
 8007514:	dcc00317 	ldw	r19,12(sp)
 8007518:	dc800217 	ldw	r18,8(sp)
 800751c:	dc400117 	ldw	r17,4(sp)
 8007520:	dc000017 	ldw	r16,0(sp)
 8007524:	dec00704 	addi	sp,sp,28
 8007528:	f800283a 	ret
 800752c:	a4000284 	addi	r16,r20,10
 8007530:	1827883a 	mov	r19,r3
 8007534:	003fe906 	br	80074dc <__s2b+0xa8>

08007538 <__hi0bits>:
 8007538:	20bfffec 	andhi	r2,r4,65535
 800753c:	1000141e 	bne	r2,zero,8007590 <__hi0bits+0x58>
 8007540:	2008943a 	slli	r4,r4,16
 8007544:	00800404 	movi	r2,16
 8007548:	20ffc02c 	andhi	r3,r4,65280
 800754c:	1800021e 	bne	r3,zero,8007558 <__hi0bits+0x20>
 8007550:	2008923a 	slli	r4,r4,8
 8007554:	10800204 	addi	r2,r2,8
 8007558:	20fc002c 	andhi	r3,r4,61440
 800755c:	1800021e 	bne	r3,zero,8007568 <__hi0bits+0x30>
 8007560:	2008913a 	slli	r4,r4,4
 8007564:	10800104 	addi	r2,r2,4
 8007568:	20f0002c 	andhi	r3,r4,49152
 800756c:	1800031e 	bne	r3,zero,800757c <__hi0bits+0x44>
 8007570:	2109883a 	add	r4,r4,r4
 8007574:	10800084 	addi	r2,r2,2
 8007578:	2109883a 	add	r4,r4,r4
 800757c:	20000316 	blt	r4,zero,800758c <__hi0bits+0x54>
 8007580:	2110002c 	andhi	r4,r4,16384
 8007584:	2000041e 	bne	r4,zero,8007598 <__hi0bits+0x60>
 8007588:	00800804 	movi	r2,32
 800758c:	f800283a 	ret
 8007590:	0005883a 	mov	r2,zero
 8007594:	003fec06 	br	8007548 <__hi0bits+0x10>
 8007598:	10800044 	addi	r2,r2,1
 800759c:	f800283a 	ret

080075a0 <__lo0bits>:
 80075a0:	20c00017 	ldw	r3,0(r4)
 80075a4:	188001cc 	andi	r2,r3,7
 80075a8:	10000826 	beq	r2,zero,80075cc <__lo0bits+0x2c>
 80075ac:	1880004c 	andi	r2,r3,1
 80075b0:	1000211e 	bne	r2,zero,8007638 <__lo0bits+0x98>
 80075b4:	1880008c 	andi	r2,r3,2
 80075b8:	1000211e 	bne	r2,zero,8007640 <__lo0bits+0xa0>
 80075bc:	1806d0ba 	srli	r3,r3,2
 80075c0:	00800084 	movi	r2,2
 80075c4:	20c00015 	stw	r3,0(r4)
 80075c8:	f800283a 	ret
 80075cc:	18bfffcc 	andi	r2,r3,65535
 80075d0:	10001326 	beq	r2,zero,8007620 <__lo0bits+0x80>
 80075d4:	0005883a 	mov	r2,zero
 80075d8:	19403fcc 	andi	r5,r3,255
 80075dc:	2800021e 	bne	r5,zero,80075e8 <__lo0bits+0x48>
 80075e0:	1806d23a 	srli	r3,r3,8
 80075e4:	10800204 	addi	r2,r2,8
 80075e8:	194003cc 	andi	r5,r3,15
 80075ec:	2800021e 	bne	r5,zero,80075f8 <__lo0bits+0x58>
 80075f0:	1806d13a 	srli	r3,r3,4
 80075f4:	10800104 	addi	r2,r2,4
 80075f8:	194000cc 	andi	r5,r3,3
 80075fc:	2800021e 	bne	r5,zero,8007608 <__lo0bits+0x68>
 8007600:	1806d0ba 	srli	r3,r3,2
 8007604:	10800084 	addi	r2,r2,2
 8007608:	1940004c 	andi	r5,r3,1
 800760c:	2800081e 	bne	r5,zero,8007630 <__lo0bits+0x90>
 8007610:	1806d07a 	srli	r3,r3,1
 8007614:	1800051e 	bne	r3,zero,800762c <__lo0bits+0x8c>
 8007618:	00800804 	movi	r2,32
 800761c:	f800283a 	ret
 8007620:	1806d43a 	srli	r3,r3,16
 8007624:	00800404 	movi	r2,16
 8007628:	003feb06 	br	80075d8 <__lo0bits+0x38>
 800762c:	10800044 	addi	r2,r2,1
 8007630:	20c00015 	stw	r3,0(r4)
 8007634:	f800283a 	ret
 8007638:	0005883a 	mov	r2,zero
 800763c:	f800283a 	ret
 8007640:	1806d07a 	srli	r3,r3,1
 8007644:	00800044 	movi	r2,1
 8007648:	20c00015 	stw	r3,0(r4)
 800764c:	f800283a 	ret

08007650 <__i2b>:
 8007650:	defffd04 	addi	sp,sp,-12
 8007654:	dc000015 	stw	r16,0(sp)
 8007658:	04000044 	movi	r16,1
 800765c:	dc400115 	stw	r17,4(sp)
 8007660:	2823883a 	mov	r17,r5
 8007664:	800b883a 	mov	r5,r16
 8007668:	dfc00215 	stw	ra,8(sp)
 800766c:	80072200 	call	8007220 <_Balloc>
 8007670:	14400515 	stw	r17,20(r2)
 8007674:	14000415 	stw	r16,16(r2)
 8007678:	dfc00217 	ldw	ra,8(sp)
 800767c:	dc400117 	ldw	r17,4(sp)
 8007680:	dc000017 	ldw	r16,0(sp)
 8007684:	dec00304 	addi	sp,sp,12
 8007688:	f800283a 	ret

0800768c <__multiply>:
 800768c:	defff004 	addi	sp,sp,-64
 8007690:	dc800815 	stw	r18,32(sp)
 8007694:	dc400715 	stw	r17,28(sp)
 8007698:	34800417 	ldw	r18,16(r6)
 800769c:	2c400417 	ldw	r17,16(r5)
 80076a0:	ddc00d15 	stw	r23,52(sp)
 80076a4:	dc000615 	stw	r16,24(sp)
 80076a8:	dfc00f15 	stw	ra,60(sp)
 80076ac:	df000e15 	stw	fp,56(sp)
 80076b0:	dd800c15 	stw	r22,48(sp)
 80076b4:	dd400b15 	stw	r21,44(sp)
 80076b8:	dd000a15 	stw	r20,40(sp)
 80076bc:	dcc00915 	stw	r19,36(sp)
 80076c0:	2821883a 	mov	r16,r5
 80076c4:	302f883a 	mov	r23,r6
 80076c8:	8c80050e 	bge	r17,r18,80076e0 <__multiply+0x54>
 80076cc:	8807883a 	mov	r3,r17
 80076d0:	3021883a 	mov	r16,r6
 80076d4:	9023883a 	mov	r17,r18
 80076d8:	282f883a 	mov	r23,r5
 80076dc:	1825883a 	mov	r18,r3
 80076e0:	80800217 	ldw	r2,8(r16)
 80076e4:	8c87883a 	add	r3,r17,r18
 80076e8:	d8c00115 	stw	r3,4(sp)
 80076ec:	81400117 	ldw	r5,4(r16)
 80076f0:	10c0010e 	bge	r2,r3,80076f8 <__multiply+0x6c>
 80076f4:	29400044 	addi	r5,r5,1
 80076f8:	80072200 	call	8007220 <_Balloc>
 80076fc:	d8c00117 	ldw	r3,4(sp)
 8007700:	d8800515 	stw	r2,20(sp)
 8007704:	14c00504 	addi	r19,r2,20
 8007708:	1d400144 	addi	r21,r3,5
 800770c:	ad6b883a 	add	r21,r21,r21
 8007710:	ad6b883a 	add	r21,r21,r21
 8007714:	156b883a 	add	r21,r2,r21
 8007718:	dd400215 	stw	r21,8(sp)
 800771c:	9805883a 	mov	r2,r19
 8007720:	9d40042e 	bgeu	r19,r21,8007734 <__multiply+0xa8>
 8007724:	d8c00217 	ldw	r3,8(sp)
 8007728:	10000015 	stw	zero,0(r2)
 800772c:	10800104 	addi	r2,r2,4
 8007730:	10fffc36 	bltu	r2,r3,8007724 <__multiply+0x98>
 8007734:	94800144 	addi	r18,r18,5
 8007738:	94a5883a 	add	r18,r18,r18
 800773c:	94ad883a 	add	r22,r18,r18
 8007740:	8c400144 	addi	r17,r17,5
 8007744:	8c63883a 	add	r17,r17,r17
 8007748:	bdad883a 	add	r22,r23,r22
 800774c:	80c00504 	addi	r3,r16,20
 8007750:	8c63883a 	add	r17,r17,r17
 8007754:	bc800504 	addi	r18,r23,20
 8007758:	dd800315 	stw	r22,12(sp)
 800775c:	d8c00415 	stw	r3,16(sp)
 8007760:	dcc00015 	stw	r19,0(sp)
 8007764:	8463883a 	add	r17,r16,r17
 8007768:	9580412e 	bgeu	r18,r22,8007870 <__multiply+0x1e4>
 800776c:	90800017 	ldw	r2,0(r18)
 8007770:	173fffcc 	andi	fp,r2,65535
 8007774:	e0001a26 	beq	fp,zero,80077e0 <__multiply+0x154>
 8007778:	dd000017 	ldw	r20,0(sp)
 800777c:	dd800417 	ldw	r22,16(sp)
 8007780:	002b883a 	mov	r21,zero
 8007784:	b4c00017 	ldw	r19,0(r22)
 8007788:	a4000017 	ldw	r16,0(r20)
 800778c:	e00b883a 	mov	r5,fp
 8007790:	993fffcc 	andi	r4,r19,65535
 8007794:	8001a0c0 	call	8001a0c <__mulsi3>
 8007798:	9808d43a 	srli	r4,r19,16
 800779c:	817fffcc 	andi	r5,r16,65535
 80077a0:	1145883a 	add	r2,r2,r5
 80077a4:	e00b883a 	mov	r5,fp
 80077a8:	1567883a 	add	r19,r2,r21
 80077ac:	8020d43a 	srli	r16,r16,16
 80077b0:	8001a0c0 	call	8001a0c <__mulsi3>
 80077b4:	9808d43a 	srli	r4,r19,16
 80077b8:	1405883a 	add	r2,r2,r16
 80077bc:	a4c0000d 	sth	r19,0(r20)
 80077c0:	110f883a 	add	r7,r2,r4
 80077c4:	a1c0008d 	sth	r7,2(r20)
 80077c8:	b5800104 	addi	r22,r22,4
 80077cc:	382ad43a 	srli	r21,r7,16
 80077d0:	a5000104 	addi	r20,r20,4
 80077d4:	b47feb36 	bltu	r22,r17,8007784 <__multiply+0xf8>
 80077d8:	a5400015 	stw	r21,0(r20)
 80077dc:	90800017 	ldw	r2,0(r18)
 80077e0:	1038d43a 	srli	fp,r2,16
 80077e4:	e0001c26 	beq	fp,zero,8007858 <__multiply+0x1cc>
 80077e8:	d8c00017 	ldw	r3,0(sp)
 80077ec:	dd000417 	ldw	r20,16(sp)
 80077f0:	002b883a 	mov	r21,zero
 80077f4:	1d800017 	ldw	r22,0(r3)
 80077f8:	182f883a 	mov	r23,r3
 80077fc:	b021883a 	mov	r16,r22
 8007800:	a4c00017 	ldw	r19,0(r20)
 8007804:	8020d43a 	srli	r16,r16,16
 8007808:	e00b883a 	mov	r5,fp
 800780c:	993fffcc 	andi	r4,r19,65535
 8007810:	8001a0c0 	call	8001a0c <__mulsi3>
 8007814:	1405883a 	add	r2,r2,r16
 8007818:	9808d43a 	srli	r4,r19,16
 800781c:	156b883a 	add	r21,r2,r21
 8007820:	bdc00104 	addi	r23,r23,4
 8007824:	bdbfff0d 	sth	r22,-4(r23)
 8007828:	bd7fff8d 	sth	r21,-2(r23)
 800782c:	bc000017 	ldw	r16,0(r23)
 8007830:	e00b883a 	mov	r5,fp
 8007834:	8001a0c0 	call	8001a0c <__mulsi3>
 8007838:	a80ed43a 	srli	r7,r21,16
 800783c:	813fffcc 	andi	r4,r16,65535
 8007840:	2085883a 	add	r2,r4,r2
 8007844:	11ed883a 	add	r22,r2,r7
 8007848:	a5000104 	addi	r20,r20,4
 800784c:	b02ad43a 	srli	r21,r22,16
 8007850:	a47feb36 	bltu	r20,r17,8007800 <__multiply+0x174>
 8007854:	bd800015 	stw	r22,0(r23)
 8007858:	d8c00017 	ldw	r3,0(sp)
 800785c:	94800104 	addi	r18,r18,4
 8007860:	18c00104 	addi	r3,r3,4
 8007864:	d8c00015 	stw	r3,0(sp)
 8007868:	d8c00317 	ldw	r3,12(sp)
 800786c:	90ffbf36 	bltu	r18,r3,800776c <__multiply+0xe0>
 8007870:	d8c00117 	ldw	r3,4(sp)
 8007874:	00c00c0e 	bge	zero,r3,80078a8 <__multiply+0x21c>
 8007878:	d8c00217 	ldw	r3,8(sp)
 800787c:	18bfff17 	ldw	r2,-4(r3)
 8007880:	1d7fff04 	addi	r21,r3,-4
 8007884:	10000326 	beq	r2,zero,8007894 <__multiply+0x208>
 8007888:	00000706 	br	80078a8 <__multiply+0x21c>
 800788c:	a8800017 	ldw	r2,0(r21)
 8007890:	1000051e 	bne	r2,zero,80078a8 <__multiply+0x21c>
 8007894:	d8c00117 	ldw	r3,4(sp)
 8007898:	ad7fff04 	addi	r21,r21,-4
 800789c:	18ffffc4 	addi	r3,r3,-1
 80078a0:	d8c00115 	stw	r3,4(sp)
 80078a4:	183ff91e 	bne	r3,zero,800788c <__multiply+0x200>
 80078a8:	d8800517 	ldw	r2,20(sp)
 80078ac:	d8c00117 	ldw	r3,4(sp)
 80078b0:	10c00415 	stw	r3,16(r2)
 80078b4:	dfc00f17 	ldw	ra,60(sp)
 80078b8:	df000e17 	ldw	fp,56(sp)
 80078bc:	ddc00d17 	ldw	r23,52(sp)
 80078c0:	dd800c17 	ldw	r22,48(sp)
 80078c4:	dd400b17 	ldw	r21,44(sp)
 80078c8:	dd000a17 	ldw	r20,40(sp)
 80078cc:	dcc00917 	ldw	r19,36(sp)
 80078d0:	dc800817 	ldw	r18,32(sp)
 80078d4:	dc400717 	ldw	r17,28(sp)
 80078d8:	dc000617 	ldw	r16,24(sp)
 80078dc:	dec01004 	addi	sp,sp,64
 80078e0:	f800283a 	ret

080078e4 <__pow5mult>:
 80078e4:	defffb04 	addi	sp,sp,-20
 80078e8:	dcc00315 	stw	r19,12(sp)
 80078ec:	dc800215 	stw	r18,8(sp)
 80078f0:	dc000015 	stw	r16,0(sp)
 80078f4:	dfc00415 	stw	ra,16(sp)
 80078f8:	dc400115 	stw	r17,4(sp)
 80078fc:	308000cc 	andi	r2,r6,3
 8007900:	3021883a 	mov	r16,r6
 8007904:	2027883a 	mov	r19,r4
 8007908:	2825883a 	mov	r18,r5
 800790c:	10002e1e 	bne	r2,zero,80079c8 <__pow5mult+0xe4>
 8007910:	8021d0ba 	srai	r16,r16,2
 8007914:	80001a26 	beq	r16,zero,8007980 <__pow5mult+0x9c>
 8007918:	9c401217 	ldw	r17,72(r19)
 800791c:	8800061e 	bne	r17,zero,8007938 <__pow5mult+0x54>
 8007920:	00003406 	br	80079f4 <__pow5mult+0x110>
 8007924:	8021d07a 	srai	r16,r16,1
 8007928:	80001526 	beq	r16,zero,8007980 <__pow5mult+0x9c>
 800792c:	88c00017 	ldw	r3,0(r17)
 8007930:	18001b26 	beq	r3,zero,80079a0 <__pow5mult+0xbc>
 8007934:	1823883a 	mov	r17,r3
 8007938:	80c0004c 	andi	r3,r16,1
 800793c:	183ff926 	beq	r3,zero,8007924 <__pow5mult+0x40>
 8007940:	900b883a 	mov	r5,r18
 8007944:	880d883a 	mov	r6,r17
 8007948:	9809883a 	mov	r4,r19
 800794c:	800768c0 	call	800768c <__multiply>
 8007950:	90001b26 	beq	r18,zero,80079c0 <__pow5mult+0xdc>
 8007954:	91000117 	ldw	r4,4(r18)
 8007958:	98c01317 	ldw	r3,76(r19)
 800795c:	8021d07a 	srai	r16,r16,1
 8007960:	2109883a 	add	r4,r4,r4
 8007964:	2109883a 	add	r4,r4,r4
 8007968:	1907883a 	add	r3,r3,r4
 800796c:	19000017 	ldw	r4,0(r3)
 8007970:	91000015 	stw	r4,0(r18)
 8007974:	1c800015 	stw	r18,0(r3)
 8007978:	1025883a 	mov	r18,r2
 800797c:	803feb1e 	bne	r16,zero,800792c <__pow5mult+0x48>
 8007980:	9005883a 	mov	r2,r18
 8007984:	dfc00417 	ldw	ra,16(sp)
 8007988:	dcc00317 	ldw	r19,12(sp)
 800798c:	dc800217 	ldw	r18,8(sp)
 8007990:	dc400117 	ldw	r17,4(sp)
 8007994:	dc000017 	ldw	r16,0(sp)
 8007998:	dec00504 	addi	sp,sp,20
 800799c:	f800283a 	ret
 80079a0:	880b883a 	mov	r5,r17
 80079a4:	880d883a 	mov	r6,r17
 80079a8:	9809883a 	mov	r4,r19
 80079ac:	800768c0 	call	800768c <__multiply>
 80079b0:	88800015 	stw	r2,0(r17)
 80079b4:	10000015 	stw	zero,0(r2)
 80079b8:	1023883a 	mov	r17,r2
 80079bc:	003fde06 	br	8007938 <__pow5mult+0x54>
 80079c0:	1025883a 	mov	r18,r2
 80079c4:	003fd706 	br	8007924 <__pow5mult+0x40>
 80079c8:	10bfffc4 	addi	r2,r2,-1
 80079cc:	1085883a 	add	r2,r2,r2
 80079d0:	00c20074 	movhi	r3,2049
 80079d4:	18f72004 	addi	r3,r3,-9088
 80079d8:	1085883a 	add	r2,r2,r2
 80079dc:	1885883a 	add	r2,r3,r2
 80079e0:	11800017 	ldw	r6,0(r2)
 80079e4:	000f883a 	mov	r7,zero
 80079e8:	80072f00 	call	80072f0 <__multadd>
 80079ec:	1025883a 	mov	r18,r2
 80079f0:	003fc706 	br	8007910 <__pow5mult+0x2c>
 80079f4:	9809883a 	mov	r4,r19
 80079f8:	01409c44 	movi	r5,625
 80079fc:	80076500 	call	8007650 <__i2b>
 8007a00:	98801215 	stw	r2,72(r19)
 8007a04:	1023883a 	mov	r17,r2
 8007a08:	10000015 	stw	zero,0(r2)
 8007a0c:	003fca06 	br	8007938 <__pow5mult+0x54>

08007a10 <__lshift>:
 8007a10:	defff904 	addi	sp,sp,-28
 8007a14:	dd400515 	stw	r21,20(sp)
 8007a18:	dc400115 	stw	r17,4(sp)
 8007a1c:	2d400417 	ldw	r21,16(r5)
 8007a20:	3023d17a 	srai	r17,r6,5
 8007a24:	28800217 	ldw	r2,8(r5)
 8007a28:	dd000415 	stw	r20,16(sp)
 8007a2c:	8d6b883a 	add	r21,r17,r21
 8007a30:	dcc00315 	stw	r19,12(sp)
 8007a34:	dc800215 	stw	r18,8(sp)
 8007a38:	dc000015 	stw	r16,0(sp)
 8007a3c:	dfc00615 	stw	ra,24(sp)
 8007a40:	ac000044 	addi	r16,r21,1
 8007a44:	2825883a 	mov	r18,r5
 8007a48:	3029883a 	mov	r20,r6
 8007a4c:	2027883a 	mov	r19,r4
 8007a50:	29400117 	ldw	r5,4(r5)
 8007a54:	1400030e 	bge	r2,r16,8007a64 <__lshift+0x54>
 8007a58:	1085883a 	add	r2,r2,r2
 8007a5c:	29400044 	addi	r5,r5,1
 8007a60:	143ffd16 	blt	r2,r16,8007a58 <__lshift+0x48>
 8007a64:	9809883a 	mov	r4,r19
 8007a68:	80072200 	call	8007220 <_Balloc>
 8007a6c:	10c00504 	addi	r3,r2,20
 8007a70:	0440090e 	bge	zero,r17,8007a98 <__lshift+0x88>
 8007a74:	000f883a 	mov	r7,zero
 8007a78:	18000015 	stw	zero,0(r3)
 8007a7c:	39c00044 	addi	r7,r7,1
 8007a80:	18c00104 	addi	r3,r3,4
 8007a84:	3c7ffc1e 	bne	r7,r17,8007a78 <__lshift+0x68>
 8007a88:	38c00144 	addi	r3,r7,5
 8007a8c:	18c7883a 	add	r3,r3,r3
 8007a90:	18c7883a 	add	r3,r3,r3
 8007a94:	10c7883a 	add	r3,r2,r3
 8007a98:	92000417 	ldw	r8,16(r18)
 8007a9c:	a18007cc 	andi	r6,r20,31
 8007aa0:	91c00504 	addi	r7,r18,20
 8007aa4:	42000144 	addi	r8,r8,5
 8007aa8:	4211883a 	add	r8,r8,r8
 8007aac:	4211883a 	add	r8,r8,r8
 8007ab0:	9211883a 	add	r8,r18,r8
 8007ab4:	30002226 	beq	r6,zero,8007b40 <__lshift+0x130>
 8007ab8:	02800804 	movi	r10,32
 8007abc:	5195c83a 	sub	r10,r10,r6
 8007ac0:	000b883a 	mov	r5,zero
 8007ac4:	3a400017 	ldw	r9,0(r7)
 8007ac8:	18c00104 	addi	r3,r3,4
 8007acc:	39c00104 	addi	r7,r7,4
 8007ad0:	4992983a 	sll	r9,r9,r6
 8007ad4:	2a4ab03a 	or	r5,r5,r9
 8007ad8:	197fff15 	stw	r5,-4(r3)
 8007adc:	397fff17 	ldw	r5,-4(r7)
 8007ae0:	2a8ad83a 	srl	r5,r5,r10
 8007ae4:	3a3ff736 	bltu	r7,r8,8007ac4 <__lshift+0xb4>
 8007ae8:	19400015 	stw	r5,0(r3)
 8007aec:	28000126 	beq	r5,zero,8007af4 <__lshift+0xe4>
 8007af0:	ac000084 	addi	r16,r21,2
 8007af4:	91000117 	ldw	r4,4(r18)
 8007af8:	98c01317 	ldw	r3,76(r19)
 8007afc:	843fffc4 	addi	r16,r16,-1
 8007b00:	2109883a 	add	r4,r4,r4
 8007b04:	2109883a 	add	r4,r4,r4
 8007b08:	1907883a 	add	r3,r3,r4
 8007b0c:	19000017 	ldw	r4,0(r3)
 8007b10:	14000415 	stw	r16,16(r2)
 8007b14:	91000015 	stw	r4,0(r18)
 8007b18:	1c800015 	stw	r18,0(r3)
 8007b1c:	dfc00617 	ldw	ra,24(sp)
 8007b20:	dd400517 	ldw	r21,20(sp)
 8007b24:	dd000417 	ldw	r20,16(sp)
 8007b28:	dcc00317 	ldw	r19,12(sp)
 8007b2c:	dc800217 	ldw	r18,8(sp)
 8007b30:	dc400117 	ldw	r17,4(sp)
 8007b34:	dc000017 	ldw	r16,0(sp)
 8007b38:	dec00704 	addi	sp,sp,28
 8007b3c:	f800283a 	ret
 8007b40:	39400017 	ldw	r5,0(r7)
 8007b44:	18c00104 	addi	r3,r3,4
 8007b48:	39c00104 	addi	r7,r7,4
 8007b4c:	197fff15 	stw	r5,-4(r3)
 8007b50:	3a3fe82e 	bgeu	r7,r8,8007af4 <__lshift+0xe4>
 8007b54:	39400017 	ldw	r5,0(r7)
 8007b58:	18c00104 	addi	r3,r3,4
 8007b5c:	39c00104 	addi	r7,r7,4
 8007b60:	197fff15 	stw	r5,-4(r3)
 8007b64:	3a3ff636 	bltu	r7,r8,8007b40 <__lshift+0x130>
 8007b68:	003fe206 	br	8007af4 <__lshift+0xe4>

08007b6c <__mcmp>:
 8007b6c:	20800417 	ldw	r2,16(r4)
 8007b70:	28c00417 	ldw	r3,16(r5)
 8007b74:	10c5c83a 	sub	r2,r2,r3
 8007b78:	10000f1e 	bne	r2,zero,8007bb8 <__mcmp+0x4c>
 8007b7c:	18c00144 	addi	r3,r3,5
 8007b80:	18c7883a 	add	r3,r3,r3
 8007b84:	18c7883a 	add	r3,r3,r3
 8007b88:	21c00504 	addi	r7,r4,20
 8007b8c:	28cb883a 	add	r5,r5,r3
 8007b90:	20c9883a 	add	r4,r4,r3
 8007b94:	213fff04 	addi	r4,r4,-4
 8007b98:	297fff04 	addi	r5,r5,-4
 8007b9c:	21800017 	ldw	r6,0(r4)
 8007ba0:	28c00017 	ldw	r3,0(r5)
 8007ba4:	30c0021e 	bne	r6,r3,8007bb0 <__mcmp+0x44>
 8007ba8:	393ffa36 	bltu	r7,r4,8007b94 <__mcmp+0x28>
 8007bac:	f800283a 	ret
 8007bb0:	30c00236 	bltu	r6,r3,8007bbc <__mcmp+0x50>
 8007bb4:	00800044 	movi	r2,1
 8007bb8:	f800283a 	ret
 8007bbc:	00bfffc4 	movi	r2,-1
 8007bc0:	f800283a 	ret

08007bc4 <__mdiff>:
 8007bc4:	defffb04 	addi	sp,sp,-20
 8007bc8:	dc000015 	stw	r16,0(sp)
 8007bcc:	2821883a 	mov	r16,r5
 8007bd0:	dc800215 	stw	r18,8(sp)
 8007bd4:	300b883a 	mov	r5,r6
 8007bd8:	2025883a 	mov	r18,r4
 8007bdc:	8009883a 	mov	r4,r16
 8007be0:	dc400115 	stw	r17,4(sp)
 8007be4:	dfc00415 	stw	ra,16(sp)
 8007be8:	dcc00315 	stw	r19,12(sp)
 8007bec:	3023883a 	mov	r17,r6
 8007bf0:	8007b6c0 	call	8007b6c <__mcmp>
 8007bf4:	10005026 	beq	r2,zero,8007d38 <__mdiff+0x174>
 8007bf8:	10004a16 	blt	r2,zero,8007d24 <__mdiff+0x160>
 8007bfc:	0027883a 	mov	r19,zero
 8007c00:	81400117 	ldw	r5,4(r16)
 8007c04:	9009883a 	mov	r4,r18
 8007c08:	80072200 	call	8007220 <_Balloc>
 8007c0c:	82400417 	ldw	r9,16(r16)
 8007c10:	89800417 	ldw	r6,16(r17)
 8007c14:	14c00315 	stw	r19,12(r2)
 8007c18:	4b800144 	addi	r14,r9,5
 8007c1c:	31800144 	addi	r6,r6,5
 8007c20:	739d883a 	add	r14,r14,r14
 8007c24:	318d883a 	add	r6,r6,r6
 8007c28:	739d883a 	add	r14,r14,r14
 8007c2c:	318d883a 	add	r6,r6,r6
 8007c30:	81c00504 	addi	r7,r16,20
 8007c34:	839d883a 	add	r14,r16,r14
 8007c38:	8a000504 	addi	r8,r17,20
 8007c3c:	898d883a 	add	r6,r17,r6
 8007c40:	10c00504 	addi	r3,r2,20
 8007c44:	0009883a 	mov	r4,zero
 8007c48:	3b000017 	ldw	r12,0(r7)
 8007c4c:	42c00017 	ldw	r11,0(r8)
 8007c50:	42000104 	addi	r8,r8,4
 8007c54:	62bfffcc 	andi	r10,r12,65535
 8007c58:	5b7fffcc 	andi	r13,r11,65535
 8007c5c:	5109883a 	add	r4,r10,r4
 8007c60:	2355c83a 	sub	r10,r4,r13
 8007c64:	5816d43a 	srli	r11,r11,16
 8007c68:	6008d43a 	srli	r4,r12,16
 8007c6c:	501bd43a 	srai	r13,r10,16
 8007c70:	1a80000d 	sth	r10,0(r3)
 8007c74:	22c9c83a 	sub	r4,r4,r11
 8007c78:	2349883a 	add	r4,r4,r13
 8007c7c:	1900008d 	sth	r4,2(r3)
 8007c80:	39c00104 	addi	r7,r7,4
 8007c84:	2009d43a 	srai	r4,r4,16
 8007c88:	18c00104 	addi	r3,r3,4
 8007c8c:	41bfee36 	bltu	r8,r6,8007c48 <__mdiff+0x84>
 8007c90:	180b883a 	mov	r5,r3
 8007c94:	3815883a 	mov	r10,r7
 8007c98:	3b80132e 	bgeu	r7,r14,8007ce8 <__mdiff+0x124>
 8007c9c:	3a000017 	ldw	r8,0(r7)
 8007ca0:	18c00104 	addi	r3,r3,4
 8007ca4:	39c00104 	addi	r7,r7,4
 8007ca8:	41bfffcc 	andi	r6,r8,65535
 8007cac:	310d883a 	add	r6,r6,r4
 8007cb0:	3009d43a 	srai	r4,r6,16
 8007cb4:	4010d43a 	srli	r8,r8,16
 8007cb8:	19bfff0d 	sth	r6,-4(r3)
 8007cbc:	2209883a 	add	r4,r4,r8
 8007cc0:	193fff8d 	sth	r4,-2(r3)
 8007cc4:	2009d43a 	srai	r4,r4,16
 8007cc8:	3bbff436 	bltu	r7,r14,8007c9c <__mdiff+0xd8>
 8007ccc:	0286303a 	nor	r3,zero,r10
 8007cd0:	1b87883a 	add	r3,r3,r14
 8007cd4:	1806d0ba 	srli	r3,r3,2
 8007cd8:	18c00044 	addi	r3,r3,1
 8007cdc:	18c7883a 	add	r3,r3,r3
 8007ce0:	18c7883a 	add	r3,r3,r3
 8007ce4:	28c7883a 	add	r3,r5,r3
 8007ce8:	193fff17 	ldw	r4,-4(r3)
 8007cec:	18ffff04 	addi	r3,r3,-4
 8007cf0:	2000041e 	bne	r4,zero,8007d04 <__mdiff+0x140>
 8007cf4:	18ffff04 	addi	r3,r3,-4
 8007cf8:	19000017 	ldw	r4,0(r3)
 8007cfc:	4a7fffc4 	addi	r9,r9,-1
 8007d00:	203ffc26 	beq	r4,zero,8007cf4 <__mdiff+0x130>
 8007d04:	12400415 	stw	r9,16(r2)
 8007d08:	dfc00417 	ldw	ra,16(sp)
 8007d0c:	dcc00317 	ldw	r19,12(sp)
 8007d10:	dc800217 	ldw	r18,8(sp)
 8007d14:	dc400117 	ldw	r17,4(sp)
 8007d18:	dc000017 	ldw	r16,0(sp)
 8007d1c:	dec00504 	addi	sp,sp,20
 8007d20:	f800283a 	ret
 8007d24:	8005883a 	mov	r2,r16
 8007d28:	04c00044 	movi	r19,1
 8007d2c:	8821883a 	mov	r16,r17
 8007d30:	1023883a 	mov	r17,r2
 8007d34:	003fb206 	br	8007c00 <__mdiff+0x3c>
 8007d38:	9009883a 	mov	r4,r18
 8007d3c:	000b883a 	mov	r5,zero
 8007d40:	80072200 	call	8007220 <_Balloc>
 8007d44:	00c00044 	movi	r3,1
 8007d48:	10c00415 	stw	r3,16(r2)
 8007d4c:	10000515 	stw	zero,20(r2)
 8007d50:	dfc00417 	ldw	ra,16(sp)
 8007d54:	dcc00317 	ldw	r19,12(sp)
 8007d58:	dc800217 	ldw	r18,8(sp)
 8007d5c:	dc400117 	ldw	r17,4(sp)
 8007d60:	dc000017 	ldw	r16,0(sp)
 8007d64:	dec00504 	addi	sp,sp,20
 8007d68:	f800283a 	ret

08007d6c <__ulp>:
 8007d6c:	295ffc2c 	andhi	r5,r5,32752
 8007d70:	00bf3034 	movhi	r2,64704
 8007d74:	2887883a 	add	r3,r5,r2
 8007d78:	00c0020e 	bge	zero,r3,8007d84 <__ulp+0x18>
 8007d7c:	0005883a 	mov	r2,zero
 8007d80:	f800283a 	ret
 8007d84:	00c7c83a 	sub	r3,zero,r3
 8007d88:	1805d53a 	srai	r2,r3,20
 8007d8c:	00c004c4 	movi	r3,19
 8007d90:	18800a0e 	bge	r3,r2,8007dbc <__ulp+0x50>
 8007d94:	01000c84 	movi	r4,50
 8007d98:	0007883a 	mov	r3,zero
 8007d9c:	20800516 	blt	r4,r2,8007db4 <__ulp+0x48>
 8007da0:	01000cc4 	movi	r4,51
 8007da4:	2085c83a 	sub	r2,r4,r2
 8007da8:	01000044 	movi	r4,1
 8007dac:	2084983a 	sll	r2,r4,r2
 8007db0:	f800283a 	ret
 8007db4:	00800044 	movi	r2,1
 8007db8:	f800283a 	ret
 8007dbc:	00c00234 	movhi	r3,8
 8007dc0:	1887d83a 	sra	r3,r3,r2
 8007dc4:	0005883a 	mov	r2,zero
 8007dc8:	f800283a 	ret

08007dcc <__b2d>:
 8007dcc:	defffa04 	addi	sp,sp,-24
 8007dd0:	dc000015 	stw	r16,0(sp)
 8007dd4:	24000417 	ldw	r16,16(r4)
 8007dd8:	dc400115 	stw	r17,4(sp)
 8007ddc:	dcc00315 	stw	r19,12(sp)
 8007de0:	84000144 	addi	r16,r16,5
 8007de4:	8421883a 	add	r16,r16,r16
 8007de8:	8421883a 	add	r16,r16,r16
 8007dec:	2421883a 	add	r16,r4,r16
 8007df0:	847fff17 	ldw	r17,-4(r16)
 8007df4:	24c00504 	addi	r19,r4,20
 8007df8:	dd000415 	stw	r20,16(sp)
 8007dfc:	8809883a 	mov	r4,r17
 8007e00:	dc800215 	stw	r18,8(sp)
 8007e04:	2829883a 	mov	r20,r5
 8007e08:	dfc00515 	stw	ra,20(sp)
 8007e0c:	80075380 	call	8007538 <__hi0bits>
 8007e10:	00c00804 	movi	r3,32
 8007e14:	1887c83a 	sub	r3,r3,r2
 8007e18:	a0c00015 	stw	r3,0(r20)
 8007e1c:	00c00284 	movi	r3,10
 8007e20:	84bfff04 	addi	r18,r16,-4
 8007e24:	18801216 	blt	r3,r2,8007e70 <__b2d+0xa4>
 8007e28:	010002c4 	movi	r4,11
 8007e2c:	2089c83a 	sub	r4,r4,r2
 8007e30:	8906d83a 	srl	r3,r17,r4
 8007e34:	18cffc34 	orhi	r3,r3,16368
 8007e38:	9c80322e 	bgeu	r19,r18,8007f04 <__b2d+0x138>
 8007e3c:	817ffe17 	ldw	r5,-8(r16)
 8007e40:	2908d83a 	srl	r4,r5,r4
 8007e44:	10800544 	addi	r2,r2,21
 8007e48:	88a2983a 	sll	r17,r17,r2
 8007e4c:	2444b03a 	or	r2,r4,r17
 8007e50:	dfc00517 	ldw	ra,20(sp)
 8007e54:	dd000417 	ldw	r20,16(sp)
 8007e58:	dcc00317 	ldw	r19,12(sp)
 8007e5c:	dc800217 	ldw	r18,8(sp)
 8007e60:	dc400117 	ldw	r17,4(sp)
 8007e64:	dc000017 	ldw	r16,0(sp)
 8007e68:	dec00604 	addi	sp,sp,24
 8007e6c:	f800283a 	ret
 8007e70:	9c801636 	bltu	r19,r18,8007ecc <__b2d+0x100>
 8007e74:	113ffd44 	addi	r4,r2,-11
 8007e78:	000b883a 	mov	r5,zero
 8007e7c:	20001726 	beq	r4,zero,8007edc <__b2d+0x110>
 8007e80:	00c00ac4 	movi	r3,43
 8007e84:	1885c83a 	sub	r2,r3,r2
 8007e88:	8906983a 	sll	r3,r17,r4
 8007e8c:	288cd83a 	srl	r6,r5,r2
 8007e90:	18cffc34 	orhi	r3,r3,16368
 8007e94:	1986b03a 	or	r3,r3,r6
 8007e98:	9c801c2e 	bgeu	r19,r18,8007f0c <__b2d+0x140>
 8007e9c:	91bfff17 	ldw	r6,-4(r18)
 8007ea0:	3084d83a 	srl	r2,r6,r2
 8007ea4:	2908983a 	sll	r4,r5,r4
 8007ea8:	1104b03a 	or	r2,r2,r4
 8007eac:	dfc00517 	ldw	ra,20(sp)
 8007eb0:	dd000417 	ldw	r20,16(sp)
 8007eb4:	dcc00317 	ldw	r19,12(sp)
 8007eb8:	dc800217 	ldw	r18,8(sp)
 8007ebc:	dc400117 	ldw	r17,4(sp)
 8007ec0:	dc000017 	ldw	r16,0(sp)
 8007ec4:	dec00604 	addi	sp,sp,24
 8007ec8:	f800283a 	ret
 8007ecc:	113ffd44 	addi	r4,r2,-11
 8007ed0:	84bffe04 	addi	r18,r16,-8
 8007ed4:	817ffe17 	ldw	r5,-8(r16)
 8007ed8:	203fe91e 	bne	r4,zero,8007e80 <__b2d+0xb4>
 8007edc:	88cffc34 	orhi	r3,r17,16368
 8007ee0:	2805883a 	mov	r2,r5
 8007ee4:	dfc00517 	ldw	ra,20(sp)
 8007ee8:	dd000417 	ldw	r20,16(sp)
 8007eec:	dcc00317 	ldw	r19,12(sp)
 8007ef0:	dc800217 	ldw	r18,8(sp)
 8007ef4:	dc400117 	ldw	r17,4(sp)
 8007ef8:	dc000017 	ldw	r16,0(sp)
 8007efc:	dec00604 	addi	sp,sp,24
 8007f00:	f800283a 	ret
 8007f04:	0009883a 	mov	r4,zero
 8007f08:	003fce06 	br	8007e44 <__b2d+0x78>
 8007f0c:	0005883a 	mov	r2,zero
 8007f10:	003fe406 	br	8007ea4 <__b2d+0xd8>

08007f14 <__d2b>:
 8007f14:	defff804 	addi	sp,sp,-32
 8007f18:	dc400315 	stw	r17,12(sp)
 8007f1c:	3023883a 	mov	r17,r6
 8007f20:	dc800415 	stw	r18,16(sp)
 8007f24:	8824907a 	slli	r18,r17,1
 8007f28:	dcc00515 	stw	r19,20(sp)
 8007f2c:	2827883a 	mov	r19,r5
 8007f30:	9024d57a 	srli	r18,r18,21
 8007f34:	01400044 	movi	r5,1
 8007f38:	dd000615 	stw	r20,24(sp)
 8007f3c:	dc000215 	stw	r16,8(sp)
 8007f40:	dfc00715 	stw	ra,28(sp)
 8007f44:	3829883a 	mov	r20,r7
 8007f48:	80072200 	call	8007220 <_Balloc>
 8007f4c:	1021883a 	mov	r16,r2
 8007f50:	00800434 	movhi	r2,16
 8007f54:	10bfffc4 	addi	r2,r2,-1
 8007f58:	88a2703a 	and	r17,r17,r2
 8007f5c:	90000126 	beq	r18,zero,8007f64 <__d2b+0x50>
 8007f60:	8c400434 	orhi	r17,r17,16
 8007f64:	dc400015 	stw	r17,0(sp)
 8007f68:	98002226 	beq	r19,zero,8007ff4 <__d2b+0xe0>
 8007f6c:	d9000104 	addi	r4,sp,4
 8007f70:	dcc00115 	stw	r19,4(sp)
 8007f74:	80075a00 	call	80075a0 <__lo0bits>
 8007f78:	d8c00017 	ldw	r3,0(sp)
 8007f7c:	10002d1e 	bne	r2,zero,8008034 <__d2b+0x120>
 8007f80:	d9000117 	ldw	r4,4(sp)
 8007f84:	81000515 	stw	r4,20(r16)
 8007f88:	1823003a 	cmpeq	r17,r3,zero
 8007f8c:	01000084 	movi	r4,2
 8007f90:	2463c83a 	sub	r17,r4,r17
 8007f94:	80c00615 	stw	r3,24(r16)
 8007f98:	84400415 	stw	r17,16(r16)
 8007f9c:	90001d1e 	bne	r18,zero,8008014 <__d2b+0x100>
 8007fa0:	88c00104 	addi	r3,r17,4
 8007fa4:	18c7883a 	add	r3,r3,r3
 8007fa8:	18c7883a 	add	r3,r3,r3
 8007fac:	80c7883a 	add	r3,r16,r3
 8007fb0:	19000017 	ldw	r4,0(r3)
 8007fb4:	10bef384 	addi	r2,r2,-1074
 8007fb8:	a0800015 	stw	r2,0(r20)
 8007fbc:	80075380 	call	8007538 <__hi0bits>
 8007fc0:	8822917a 	slli	r17,r17,5
 8007fc4:	d8c00817 	ldw	r3,32(sp)
 8007fc8:	8885c83a 	sub	r2,r17,r2
 8007fcc:	18800015 	stw	r2,0(r3)
 8007fd0:	8005883a 	mov	r2,r16
 8007fd4:	dfc00717 	ldw	ra,28(sp)
 8007fd8:	dd000617 	ldw	r20,24(sp)
 8007fdc:	dcc00517 	ldw	r19,20(sp)
 8007fe0:	dc800417 	ldw	r18,16(sp)
 8007fe4:	dc400317 	ldw	r17,12(sp)
 8007fe8:	dc000217 	ldw	r16,8(sp)
 8007fec:	dec00804 	addi	sp,sp,32
 8007ff0:	f800283a 	ret
 8007ff4:	d809883a 	mov	r4,sp
 8007ff8:	80075a00 	call	80075a0 <__lo0bits>
 8007ffc:	d8c00017 	ldw	r3,0(sp)
 8008000:	04400044 	movi	r17,1
 8008004:	84400415 	stw	r17,16(r16)
 8008008:	80c00515 	stw	r3,20(r16)
 800800c:	10800804 	addi	r2,r2,32
 8008010:	903fe326 	beq	r18,zero,8007fa0 <__d2b+0x8c>
 8008014:	00c00d44 	movi	r3,53
 8008018:	94bef344 	addi	r18,r18,-1075
 800801c:	90a5883a 	add	r18,r18,r2
 8008020:	1885c83a 	sub	r2,r3,r2
 8008024:	d8c00817 	ldw	r3,32(sp)
 8008028:	a4800015 	stw	r18,0(r20)
 800802c:	18800015 	stw	r2,0(r3)
 8008030:	003fe706 	br	8007fd0 <__d2b+0xbc>
 8008034:	01000804 	movi	r4,32
 8008038:	2089c83a 	sub	r4,r4,r2
 800803c:	1908983a 	sll	r4,r3,r4
 8008040:	d9400117 	ldw	r5,4(sp)
 8008044:	1886d83a 	srl	r3,r3,r2
 8008048:	2148b03a 	or	r4,r4,r5
 800804c:	81000515 	stw	r4,20(r16)
 8008050:	d8c00015 	stw	r3,0(sp)
 8008054:	003fcc06 	br	8007f88 <__d2b+0x74>

08008058 <__ratio>:
 8008058:	defff904 	addi	sp,sp,-28
 800805c:	dc400315 	stw	r17,12(sp)
 8008060:	2823883a 	mov	r17,r5
 8008064:	d9400104 	addi	r5,sp,4
 8008068:	dfc00615 	stw	ra,24(sp)
 800806c:	dcc00515 	stw	r19,20(sp)
 8008070:	dc800415 	stw	r18,16(sp)
 8008074:	2027883a 	mov	r19,r4
 8008078:	dc000215 	stw	r16,8(sp)
 800807c:	8007dcc0 	call	8007dcc <__b2d>
 8008080:	8809883a 	mov	r4,r17
 8008084:	d80b883a 	mov	r5,sp
 8008088:	1025883a 	mov	r18,r2
 800808c:	1821883a 	mov	r16,r3
 8008090:	8007dcc0 	call	8007dcc <__b2d>
 8008094:	99400417 	ldw	r5,16(r19)
 8008098:	89000417 	ldw	r4,16(r17)
 800809c:	d9800117 	ldw	r6,4(sp)
 80080a0:	2909c83a 	sub	r4,r5,r4
 80080a4:	d9400017 	ldw	r5,0(sp)
 80080a8:	2008917a 	slli	r4,r4,5
 80080ac:	314bc83a 	sub	r5,r6,r5
 80080b0:	290b883a 	add	r5,r5,r4
 80080b4:	01400e0e 	bge	zero,r5,80080f0 <__ratio+0x98>
 80080b8:	280a953a 	slli	r5,r5,20
 80080bc:	2c21883a 	add	r16,r5,r16
 80080c0:	9009883a 	mov	r4,r18
 80080c4:	800b883a 	mov	r5,r16
 80080c8:	100d883a 	mov	r6,r2
 80080cc:	180f883a 	mov	r7,r3
 80080d0:	800a3340 	call	800a334 <__divdf3>
 80080d4:	dfc00617 	ldw	ra,24(sp)
 80080d8:	dcc00517 	ldw	r19,20(sp)
 80080dc:	dc800417 	ldw	r18,16(sp)
 80080e0:	dc400317 	ldw	r17,12(sp)
 80080e4:	dc000217 	ldw	r16,8(sp)
 80080e8:	dec00704 	addi	sp,sp,28
 80080ec:	f800283a 	ret
 80080f0:	280a953a 	slli	r5,r5,20
 80080f4:	1947c83a 	sub	r3,r3,r5
 80080f8:	003ff106 	br	80080c0 <__ratio+0x68>

080080fc <_mprec_log10>:
 80080fc:	defffe04 	addi	sp,sp,-8
 8008100:	dc000015 	stw	r16,0(sp)
 8008104:	dfc00115 	stw	ra,4(sp)
 8008108:	008005c4 	movi	r2,23
 800810c:	2021883a 	mov	r16,r4
 8008110:	11000d0e 	bge	r2,r4,8008148 <_mprec_log10+0x4c>
 8008114:	0005883a 	mov	r2,zero
 8008118:	00cffc34 	movhi	r3,16368
 800811c:	843fffc4 	addi	r16,r16,-1
 8008120:	1009883a 	mov	r4,r2
 8008124:	180b883a 	mov	r5,r3
 8008128:	000d883a 	mov	r6,zero
 800812c:	01d00934 	movhi	r7,16420
 8008130:	800a0500 	call	800a050 <__muldf3>
 8008134:	803ff91e 	bne	r16,zero,800811c <_mprec_log10+0x20>
 8008138:	dfc00117 	ldw	ra,4(sp)
 800813c:	dc000017 	ldw	r16,0(sp)
 8008140:	dec00204 	addi	sp,sp,8
 8008144:	f800283a 	ret
 8008148:	202090fa 	slli	r16,r4,3
 800814c:	00820074 	movhi	r2,2049
 8008150:	10b6ee04 	addi	r2,r2,-9288
 8008154:	1421883a 	add	r16,r2,r16
 8008158:	80800017 	ldw	r2,0(r16)
 800815c:	80c00117 	ldw	r3,4(r16)
 8008160:	dfc00117 	ldw	ra,4(sp)
 8008164:	dc000017 	ldw	r16,0(sp)
 8008168:	dec00204 	addi	sp,sp,8
 800816c:	f800283a 	ret

08008170 <__copybits>:
 8008170:	297fffc4 	addi	r5,r5,-1
 8008174:	31c00417 	ldw	r7,16(r6)
 8008178:	2811d17a 	srai	r8,r5,5
 800817c:	30800504 	addi	r2,r6,20
 8008180:	39c00144 	addi	r7,r7,5
 8008184:	42000044 	addi	r8,r8,1
 8008188:	39cf883a 	add	r7,r7,r7
 800818c:	4211883a 	add	r8,r8,r8
 8008190:	39cf883a 	add	r7,r7,r7
 8008194:	4211883a 	add	r8,r8,r8
 8008198:	31cf883a 	add	r7,r6,r7
 800819c:	2211883a 	add	r8,r4,r8
 80081a0:	11c00d2e 	bgeu	r2,r7,80081d8 <__copybits+0x68>
 80081a4:	2007883a 	mov	r3,r4
 80081a8:	11400017 	ldw	r5,0(r2)
 80081ac:	18c00104 	addi	r3,r3,4
 80081b0:	10800104 	addi	r2,r2,4
 80081b4:	197fff15 	stw	r5,-4(r3)
 80081b8:	11fffb36 	bltu	r2,r7,80081a8 <__copybits+0x38>
 80081bc:	3985c83a 	sub	r2,r7,r6
 80081c0:	10bffac4 	addi	r2,r2,-21
 80081c4:	1004d0ba 	srli	r2,r2,2
 80081c8:	10800044 	addi	r2,r2,1
 80081cc:	1085883a 	add	r2,r2,r2
 80081d0:	1085883a 	add	r2,r2,r2
 80081d4:	2089883a 	add	r4,r4,r2
 80081d8:	2200032e 	bgeu	r4,r8,80081e8 <__copybits+0x78>
 80081dc:	20000015 	stw	zero,0(r4)
 80081e0:	21000104 	addi	r4,r4,4
 80081e4:	223ffd36 	bltu	r4,r8,80081dc <__copybits+0x6c>
 80081e8:	f800283a 	ret

080081ec <__any_on>:
 80081ec:	21800417 	ldw	r6,16(r4)
 80081f0:	2805d17a 	srai	r2,r5,5
 80081f4:	20c00504 	addi	r3,r4,20
 80081f8:	30800f0e 	bge	r6,r2,8008238 <__any_on+0x4c>
 80081fc:	3005883a 	mov	r2,r6
 8008200:	10800144 	addi	r2,r2,5
 8008204:	1085883a 	add	r2,r2,r2
 8008208:	1085883a 	add	r2,r2,r2
 800820c:	2089883a 	add	r4,r4,r2
 8008210:	1900152e 	bgeu	r3,r4,8008268 <__any_on+0x7c>
 8008214:	20bfff17 	ldw	r2,-4(r4)
 8008218:	213fff04 	addi	r4,r4,-4
 800821c:	1000041e 	bne	r2,zero,8008230 <__any_on+0x44>
 8008220:	1900112e 	bgeu	r3,r4,8008268 <__any_on+0x7c>
 8008224:	213fff04 	addi	r4,r4,-4
 8008228:	20800017 	ldw	r2,0(r4)
 800822c:	103ffc26 	beq	r2,zero,8008220 <__any_on+0x34>
 8008230:	00800044 	movi	r2,1
 8008234:	f800283a 	ret
 8008238:	11bff10e 	bge	r2,r6,8008200 <__any_on+0x14>
 800823c:	294007cc 	andi	r5,r5,31
 8008240:	283fef26 	beq	r5,zero,8008200 <__any_on+0x14>
 8008244:	11800144 	addi	r6,r2,5
 8008248:	318d883a 	add	r6,r6,r6
 800824c:	318d883a 	add	r6,r6,r6
 8008250:	218d883a 	add	r6,r4,r6
 8008254:	31800017 	ldw	r6,0(r6)
 8008258:	314ed83a 	srl	r7,r6,r5
 800825c:	394a983a 	sll	r5,r7,r5
 8008260:	29bff31e 	bne	r5,r6,8008230 <__any_on+0x44>
 8008264:	003fe606 	br	8008200 <__any_on+0x14>
 8008268:	0005883a 	mov	r2,zero
 800826c:	f800283a 	ret

08008270 <_realloc_r>:
 8008270:	defff504 	addi	sp,sp,-44
 8008274:	dd400615 	stw	r21,24(sp)
 8008278:	dc800315 	stw	r18,12(sp)
 800827c:	dc000115 	stw	r16,4(sp)
 8008280:	dfc00a15 	stw	ra,40(sp)
 8008284:	df000915 	stw	fp,36(sp)
 8008288:	ddc00815 	stw	r23,32(sp)
 800828c:	dd800715 	stw	r22,28(sp)
 8008290:	dd000515 	stw	r20,20(sp)
 8008294:	dcc00415 	stw	r19,16(sp)
 8008298:	dc400215 	stw	r17,8(sp)
 800829c:	2821883a 	mov	r16,r5
 80082a0:	202b883a 	mov	r21,r4
 80082a4:	3025883a 	mov	r18,r6
 80082a8:	28009626 	beq	r5,zero,8008504 <_realloc_r+0x294>
 80082ac:	800b68c0 	call	800b68c <__malloc_lock>
 80082b0:	80bfff17 	ldw	r2,-4(r16)
 80082b4:	04ffff04 	movi	r19,-4
 80082b8:	90c002c4 	addi	r3,r18,11
 80082bc:	01000584 	movi	r4,22
 80082c0:	85bffe04 	addi	r22,r16,-8
 80082c4:	14e6703a 	and	r19,r2,r19
 80082c8:	20c0372e 	bgeu	r4,r3,80083a8 <_realloc_r+0x138>
 80082cc:	047ffe04 	movi	r17,-8
 80082d0:	1c62703a 	and	r17,r3,r17
 80082d4:	8807883a 	mov	r3,r17
 80082d8:	88005a16 	blt	r17,zero,8008444 <_realloc_r+0x1d4>
 80082dc:	8c805936 	bltu	r17,r18,8008444 <_realloc_r+0x1d4>
 80082e0:	98c0340e 	bge	r19,r3,80083b4 <_realloc_r+0x144>
 80082e4:	07020074 	movhi	fp,2049
 80082e8:	e737bf04 	addi	fp,fp,-8452
 80082ec:	e1400217 	ldw	r5,8(fp)
 80082f0:	b4c9883a 	add	r4,r22,r19
 80082f4:	29009026 	beq	r5,r4,8008538 <_realloc_r+0x2c8>
 80082f8:	21800117 	ldw	r6,4(r4)
 80082fc:	01ffff84 	movi	r7,-2
 8008300:	31ce703a 	and	r7,r6,r7
 8008304:	21cf883a 	add	r7,r4,r7
 8008308:	39c00117 	ldw	r7,4(r7)
 800830c:	39c0004c 	andi	r7,r7,1
 8008310:	38004326 	beq	r7,zero,8008420 <_realloc_r+0x1b0>
 8008314:	000d883a 	mov	r6,zero
 8008318:	0009883a 	mov	r4,zero
 800831c:	1080004c 	andi	r2,r2,1
 8008320:	10005a1e 	bne	r2,zero,800848c <_realloc_r+0x21c>
 8008324:	85fffe17 	ldw	r23,-8(r16)
 8008328:	00bfff04 	movi	r2,-4
 800832c:	b5efc83a 	sub	r23,r22,r23
 8008330:	b9c00117 	ldw	r7,4(r23)
 8008334:	388e703a 	and	r7,r7,r2
 8008338:	3ccf883a 	add	r7,r7,r19
 800833c:	20005226 	beq	r4,zero,8008488 <_realloc_r+0x218>
 8008340:	31e9883a 	add	r20,r6,r7
 8008344:	2140c726 	beq	r4,r5,8008664 <_realloc_r+0x3f4>
 8008348:	a0c04f16 	blt	r20,r3,8008488 <_realloc_r+0x218>
 800834c:	20800317 	ldw	r2,12(r4)
 8008350:	20c00217 	ldw	r3,8(r4)
 8008354:	99bfff04 	addi	r6,r19,-4
 8008358:	01000904 	movi	r4,36
 800835c:	18800315 	stw	r2,12(r3)
 8008360:	10c00215 	stw	r3,8(r2)
 8008364:	b8c00217 	ldw	r3,8(r23)
 8008368:	b8800317 	ldw	r2,12(r23)
 800836c:	bc800204 	addi	r18,r23,8
 8008370:	18800315 	stw	r2,12(r3)
 8008374:	10c00215 	stw	r3,8(r2)
 8008378:	2180ed36 	bltu	r4,r6,8008730 <_realloc_r+0x4c0>
 800837c:	008004c4 	movi	r2,19
 8008380:	11809b2e 	bgeu	r2,r6,80085f0 <_realloc_r+0x380>
 8008384:	80800017 	ldw	r2,0(r16)
 8008388:	b8800215 	stw	r2,8(r23)
 800838c:	80800117 	ldw	r2,4(r16)
 8008390:	b8800315 	stw	r2,12(r23)
 8008394:	008006c4 	movi	r2,27
 8008398:	1180f936 	bltu	r2,r6,8008780 <_realloc_r+0x510>
 800839c:	b8800404 	addi	r2,r23,16
 80083a0:	80c00204 	addi	r3,r16,8
 80083a4:	00009406 	br	80085f8 <_realloc_r+0x388>
 80083a8:	00c00404 	movi	r3,16
 80083ac:	1823883a 	mov	r17,r3
 80083b0:	003fca06 	br	80082dc <_realloc_r+0x6c>
 80083b4:	9829883a 	mov	r20,r19
 80083b8:	a447c83a 	sub	r3,r20,r17
 80083bc:	010003c4 	movi	r4,15
 80083c0:	1080004c 	andi	r2,r2,1
 80083c4:	20c02336 	bltu	r4,r3,8008454 <_realloc_r+0x1e4>
 80083c8:	1504b03a 	or	r2,r2,r20
 80083cc:	b0800115 	stw	r2,4(r22)
 80083d0:	b52d883a 	add	r22,r22,r20
 80083d4:	b0800117 	ldw	r2,4(r22)
 80083d8:	10800054 	ori	r2,r2,1
 80083dc:	b0800115 	stw	r2,4(r22)
 80083e0:	a809883a 	mov	r4,r21
 80083e4:	800b6ac0 	call	800b6ac <__malloc_unlock>
 80083e8:	8025883a 	mov	r18,r16
 80083ec:	9005883a 	mov	r2,r18
 80083f0:	dfc00a17 	ldw	ra,40(sp)
 80083f4:	df000917 	ldw	fp,36(sp)
 80083f8:	ddc00817 	ldw	r23,32(sp)
 80083fc:	dd800717 	ldw	r22,28(sp)
 8008400:	dd400617 	ldw	r21,24(sp)
 8008404:	dd000517 	ldw	r20,20(sp)
 8008408:	dcc00417 	ldw	r19,16(sp)
 800840c:	dc800317 	ldw	r18,12(sp)
 8008410:	dc400217 	ldw	r17,8(sp)
 8008414:	dc000117 	ldw	r16,4(sp)
 8008418:	dec00b04 	addi	sp,sp,44
 800841c:	f800283a 	ret
 8008420:	01ffff04 	movi	r7,-4
 8008424:	31cc703a 	and	r6,r6,r7
 8008428:	34e9883a 	add	r20,r6,r19
 800842c:	a0ffbb16 	blt	r20,r3,800831c <_realloc_r+0xac>
 8008430:	20c00317 	ldw	r3,12(r4)
 8008434:	21000217 	ldw	r4,8(r4)
 8008438:	20c00315 	stw	r3,12(r4)
 800843c:	19000215 	stw	r4,8(r3)
 8008440:	003fdd06 	br	80083b8 <_realloc_r+0x148>
 8008444:	00800304 	movi	r2,12
 8008448:	a8800015 	stw	r2,0(r21)
 800844c:	0025883a 	mov	r18,zero
 8008450:	003fe606 	br	80083ec <_realloc_r+0x17c>
 8008454:	1444b03a 	or	r2,r2,r17
 8008458:	b0800115 	stw	r2,4(r22)
 800845c:	b44b883a 	add	r5,r22,r17
 8008460:	18800054 	ori	r2,r3,1
 8008464:	28800115 	stw	r2,4(r5)
 8008468:	28c7883a 	add	r3,r5,r3
 800846c:	18800117 	ldw	r2,4(r3)
 8008470:	a809883a 	mov	r4,r21
 8008474:	29400204 	addi	r5,r5,8
 8008478:	10800054 	ori	r2,r2,1
 800847c:	18800115 	stw	r2,4(r3)
 8008480:	80063280 	call	8006328 <_free_r>
 8008484:	003fd606 	br	80083e0 <_realloc_r+0x170>
 8008488:	38c0330e 	bge	r7,r3,8008558 <_realloc_r+0x2e8>
 800848c:	900b883a 	mov	r5,r18
 8008490:	a809883a 	mov	r4,r21
 8008494:	8001a5c0 	call	8001a5c <_malloc_r>
 8008498:	1025883a 	mov	r18,r2
 800849c:	10001626 	beq	r2,zero,80084f8 <_realloc_r+0x288>
 80084a0:	80bfff17 	ldw	r2,-4(r16)
 80084a4:	00ffff84 	movi	r3,-2
 80084a8:	913ffe04 	addi	r4,r18,-8
 80084ac:	10c6703a 	and	r3,r2,r3
 80084b0:	b0c7883a 	add	r3,r22,r3
 80084b4:	20c09926 	beq	r4,r3,800871c <_realloc_r+0x4ac>
 80084b8:	99bfff04 	addi	r6,r19,-4
 80084bc:	00800904 	movi	r2,36
 80084c0:	11806436 	bltu	r2,r6,8008654 <_realloc_r+0x3e4>
 80084c4:	00c004c4 	movi	r3,19
 80084c8:	19804036 	bltu	r3,r6,80085cc <_realloc_r+0x35c>
 80084cc:	9005883a 	mov	r2,r18
 80084d0:	8007883a 	mov	r3,r16
 80084d4:	19000017 	ldw	r4,0(r3)
 80084d8:	11000015 	stw	r4,0(r2)
 80084dc:	19000117 	ldw	r4,4(r3)
 80084e0:	11000115 	stw	r4,4(r2)
 80084e4:	18c00217 	ldw	r3,8(r3)
 80084e8:	10c00215 	stw	r3,8(r2)
 80084ec:	a809883a 	mov	r4,r21
 80084f0:	800b883a 	mov	r5,r16
 80084f4:	80063280 	call	8006328 <_free_r>
 80084f8:	a809883a 	mov	r4,r21
 80084fc:	800b6ac0 	call	800b6ac <__malloc_unlock>
 8008500:	003fba06 	br	80083ec <_realloc_r+0x17c>
 8008504:	300b883a 	mov	r5,r6
 8008508:	dfc00a17 	ldw	ra,40(sp)
 800850c:	df000917 	ldw	fp,36(sp)
 8008510:	ddc00817 	ldw	r23,32(sp)
 8008514:	dd800717 	ldw	r22,28(sp)
 8008518:	dd400617 	ldw	r21,24(sp)
 800851c:	dd000517 	ldw	r20,20(sp)
 8008520:	dcc00417 	ldw	r19,16(sp)
 8008524:	dc800317 	ldw	r18,12(sp)
 8008528:	dc400217 	ldw	r17,8(sp)
 800852c:	dc000117 	ldw	r16,4(sp)
 8008530:	dec00b04 	addi	sp,sp,44
 8008534:	8001a5c1 	jmpi	8001a5c <_malloc_r>
 8008538:	29800117 	ldw	r6,4(r5)
 800853c:	013fff04 	movi	r4,-4
 8008540:	89c00404 	addi	r7,r17,16
 8008544:	310c703a 	and	r6,r6,r4
 8008548:	34c9883a 	add	r4,r6,r19
 800854c:	21c0340e 	bge	r4,r7,8008620 <_realloc_r+0x3b0>
 8008550:	2809883a 	mov	r4,r5
 8008554:	003f7106 	br	800831c <_realloc_r+0xac>
 8008558:	b8800317 	ldw	r2,12(r23)
 800855c:	b8c00217 	ldw	r3,8(r23)
 8008560:	99bfff04 	addi	r6,r19,-4
 8008564:	01000904 	movi	r4,36
 8008568:	18800315 	stw	r2,12(r3)
 800856c:	10c00215 	stw	r3,8(r2)
 8008570:	bc800204 	addi	r18,r23,8
 8008574:	21807836 	bltu	r4,r6,8008758 <_realloc_r+0x4e8>
 8008578:	008004c4 	movi	r2,19
 800857c:	1180732e 	bgeu	r2,r6,800874c <_realloc_r+0x4dc>
 8008580:	80800017 	ldw	r2,0(r16)
 8008584:	b8800215 	stw	r2,8(r23)
 8008588:	80800117 	ldw	r2,4(r16)
 800858c:	b8800315 	stw	r2,12(r23)
 8008590:	008006c4 	movi	r2,27
 8008594:	11808936 	bltu	r2,r6,80087bc <_realloc_r+0x54c>
 8008598:	b8800404 	addi	r2,r23,16
 800859c:	80c00204 	addi	r3,r16,8
 80085a0:	19000017 	ldw	r4,0(r3)
 80085a4:	9021883a 	mov	r16,r18
 80085a8:	3829883a 	mov	r20,r7
 80085ac:	11000015 	stw	r4,0(r2)
 80085b0:	19000117 	ldw	r4,4(r3)
 80085b4:	b82d883a 	mov	r22,r23
 80085b8:	11000115 	stw	r4,4(r2)
 80085bc:	18c00217 	ldw	r3,8(r3)
 80085c0:	10c00215 	stw	r3,8(r2)
 80085c4:	b8800117 	ldw	r2,4(r23)
 80085c8:	003f7b06 	br	80083b8 <_realloc_r+0x148>
 80085cc:	80c00017 	ldw	r3,0(r16)
 80085d0:	90c00015 	stw	r3,0(r18)
 80085d4:	80c00117 	ldw	r3,4(r16)
 80085d8:	90c00115 	stw	r3,4(r18)
 80085dc:	00c006c4 	movi	r3,27
 80085e0:	19804636 	bltu	r3,r6,80086fc <_realloc_r+0x48c>
 80085e4:	90800204 	addi	r2,r18,8
 80085e8:	80c00204 	addi	r3,r16,8
 80085ec:	003fb906 	br	80084d4 <_realloc_r+0x264>
 80085f0:	9005883a 	mov	r2,r18
 80085f4:	8007883a 	mov	r3,r16
 80085f8:	19000017 	ldw	r4,0(r3)
 80085fc:	9021883a 	mov	r16,r18
 8008600:	b82d883a 	mov	r22,r23
 8008604:	11000015 	stw	r4,0(r2)
 8008608:	19000117 	ldw	r4,4(r3)
 800860c:	11000115 	stw	r4,4(r2)
 8008610:	18c00217 	ldw	r3,8(r3)
 8008614:	10c00215 	stw	r3,8(r2)
 8008618:	b8800117 	ldw	r2,4(r23)
 800861c:	003f6606 	br	80083b8 <_realloc_r+0x148>
 8008620:	2445c83a 	sub	r2,r4,r17
 8008624:	b46d883a 	add	r22,r22,r17
 8008628:	10800054 	ori	r2,r2,1
 800862c:	b0800115 	stw	r2,4(r22)
 8008630:	80bfff17 	ldw	r2,-4(r16)
 8008634:	a809883a 	mov	r4,r21
 8008638:	e5800215 	stw	r22,8(fp)
 800863c:	1080004c 	andi	r2,r2,1
 8008640:	88a2b03a 	or	r17,r17,r2
 8008644:	847fff15 	stw	r17,-4(r16)
 8008648:	800b6ac0 	call	800b6ac <__malloc_unlock>
 800864c:	8025883a 	mov	r18,r16
 8008650:	003f6606 	br	80083ec <_realloc_r+0x17c>
 8008654:	9009883a 	mov	r4,r18
 8008658:	800b883a 	mov	r5,r16
 800865c:	8006fb80 	call	8006fb8 <memmove>
 8008660:	003fa206 	br	80084ec <_realloc_r+0x27c>
 8008664:	88800404 	addi	r2,r17,16
 8008668:	a0bf8716 	blt	r20,r2,8008488 <_realloc_r+0x218>
 800866c:	b8800317 	ldw	r2,12(r23)
 8008670:	b8c00217 	ldw	r3,8(r23)
 8008674:	99bfff04 	addi	r6,r19,-4
 8008678:	01000904 	movi	r4,36
 800867c:	18800315 	stw	r2,12(r3)
 8008680:	10c00215 	stw	r3,8(r2)
 8008684:	bc800204 	addi	r18,r23,8
 8008688:	21806536 	bltu	r4,r6,8008820 <_realloc_r+0x5b0>
 800868c:	008004c4 	movi	r2,19
 8008690:	1180592e 	bgeu	r2,r6,80087f8 <_realloc_r+0x588>
 8008694:	80800017 	ldw	r2,0(r16)
 8008698:	b8800215 	stw	r2,8(r23)
 800869c:	80800117 	ldw	r2,4(r16)
 80086a0:	b8800315 	stw	r2,12(r23)
 80086a4:	008006c4 	movi	r2,27
 80086a8:	11806136 	bltu	r2,r6,8008830 <_realloc_r+0x5c0>
 80086ac:	b8800404 	addi	r2,r23,16
 80086b0:	80c00204 	addi	r3,r16,8
 80086b4:	19000017 	ldw	r4,0(r3)
 80086b8:	11000015 	stw	r4,0(r2)
 80086bc:	19000117 	ldw	r4,4(r3)
 80086c0:	11000115 	stw	r4,4(r2)
 80086c4:	18c00217 	ldw	r3,8(r3)
 80086c8:	10c00215 	stw	r3,8(r2)
 80086cc:	a447c83a 	sub	r3,r20,r17
 80086d0:	bc45883a 	add	r2,r23,r17
 80086d4:	18c00054 	ori	r3,r3,1
 80086d8:	10c00115 	stw	r3,4(r2)
 80086dc:	b8c00117 	ldw	r3,4(r23)
 80086e0:	e0800215 	stw	r2,8(fp)
 80086e4:	a809883a 	mov	r4,r21
 80086e8:	1880004c 	andi	r2,r3,1
 80086ec:	88a2b03a 	or	r17,r17,r2
 80086f0:	bc400115 	stw	r17,4(r23)
 80086f4:	800b6ac0 	call	800b6ac <__malloc_unlock>
 80086f8:	003f3c06 	br	80083ec <_realloc_r+0x17c>
 80086fc:	80c00217 	ldw	r3,8(r16)
 8008700:	90c00215 	stw	r3,8(r18)
 8008704:	80c00317 	ldw	r3,12(r16)
 8008708:	90c00315 	stw	r3,12(r18)
 800870c:	30802426 	beq	r6,r2,80087a0 <_realloc_r+0x530>
 8008710:	90800404 	addi	r2,r18,16
 8008714:	80c00404 	addi	r3,r16,16
 8008718:	003f6e06 	br	80084d4 <_realloc_r+0x264>
 800871c:	953fff17 	ldw	r20,-4(r18)
 8008720:	00ffff04 	movi	r3,-4
 8008724:	a0e8703a 	and	r20,r20,r3
 8008728:	a4e9883a 	add	r20,r20,r19
 800872c:	003f2206 	br	80083b8 <_realloc_r+0x148>
 8008730:	800b883a 	mov	r5,r16
 8008734:	9009883a 	mov	r4,r18
 8008738:	8006fb80 	call	8006fb8 <memmove>
 800873c:	9021883a 	mov	r16,r18
 8008740:	b8800117 	ldw	r2,4(r23)
 8008744:	b82d883a 	mov	r22,r23
 8008748:	003f1b06 	br	80083b8 <_realloc_r+0x148>
 800874c:	9005883a 	mov	r2,r18
 8008750:	8007883a 	mov	r3,r16
 8008754:	003f9206 	br	80085a0 <_realloc_r+0x330>
 8008758:	800b883a 	mov	r5,r16
 800875c:	9009883a 	mov	r4,r18
 8008760:	d9c00015 	stw	r7,0(sp)
 8008764:	8006fb80 	call	8006fb8 <memmove>
 8008768:	d9c00017 	ldw	r7,0(sp)
 800876c:	9021883a 	mov	r16,r18
 8008770:	b8800117 	ldw	r2,4(r23)
 8008774:	3829883a 	mov	r20,r7
 8008778:	b82d883a 	mov	r22,r23
 800877c:	003f0e06 	br	80083b8 <_realloc_r+0x148>
 8008780:	80800217 	ldw	r2,8(r16)
 8008784:	b8800415 	stw	r2,16(r23)
 8008788:	80800317 	ldw	r2,12(r16)
 800878c:	b8800515 	stw	r2,20(r23)
 8008790:	31001226 	beq	r6,r4,80087dc <_realloc_r+0x56c>
 8008794:	b8800604 	addi	r2,r23,24
 8008798:	80c00404 	addi	r3,r16,16
 800879c:	003f9606 	br	80085f8 <_realloc_r+0x388>
 80087a0:	81000417 	ldw	r4,16(r16)
 80087a4:	90800604 	addi	r2,r18,24
 80087a8:	80c00604 	addi	r3,r16,24
 80087ac:	91000415 	stw	r4,16(r18)
 80087b0:	81000517 	ldw	r4,20(r16)
 80087b4:	91000515 	stw	r4,20(r18)
 80087b8:	003f4606 	br	80084d4 <_realloc_r+0x264>
 80087bc:	80800217 	ldw	r2,8(r16)
 80087c0:	b8800415 	stw	r2,16(r23)
 80087c4:	80800317 	ldw	r2,12(r16)
 80087c8:	b8800515 	stw	r2,20(r23)
 80087cc:	31000d26 	beq	r6,r4,8008804 <_realloc_r+0x594>
 80087d0:	b8800604 	addi	r2,r23,24
 80087d4:	80c00404 	addi	r3,r16,16
 80087d8:	003f7106 	br	80085a0 <_realloc_r+0x330>
 80087dc:	81000417 	ldw	r4,16(r16)
 80087e0:	b8800804 	addi	r2,r23,32
 80087e4:	80c00604 	addi	r3,r16,24
 80087e8:	b9000615 	stw	r4,24(r23)
 80087ec:	81000517 	ldw	r4,20(r16)
 80087f0:	b9000715 	stw	r4,28(r23)
 80087f4:	003f8006 	br	80085f8 <_realloc_r+0x388>
 80087f8:	9005883a 	mov	r2,r18
 80087fc:	8007883a 	mov	r3,r16
 8008800:	003fac06 	br	80086b4 <_realloc_r+0x444>
 8008804:	81000417 	ldw	r4,16(r16)
 8008808:	b8800804 	addi	r2,r23,32
 800880c:	80c00604 	addi	r3,r16,24
 8008810:	b9000615 	stw	r4,24(r23)
 8008814:	81000517 	ldw	r4,20(r16)
 8008818:	b9000715 	stw	r4,28(r23)
 800881c:	003f6006 	br	80085a0 <_realloc_r+0x330>
 8008820:	9009883a 	mov	r4,r18
 8008824:	800b883a 	mov	r5,r16
 8008828:	8006fb80 	call	8006fb8 <memmove>
 800882c:	003fa706 	br	80086cc <_realloc_r+0x45c>
 8008830:	80800217 	ldw	r2,8(r16)
 8008834:	b8800415 	stw	r2,16(r23)
 8008838:	80800317 	ldw	r2,12(r16)
 800883c:	b8800515 	stw	r2,20(r23)
 8008840:	31000326 	beq	r6,r4,8008850 <_realloc_r+0x5e0>
 8008844:	b8800604 	addi	r2,r23,24
 8008848:	80c00404 	addi	r3,r16,16
 800884c:	003f9906 	br	80086b4 <_realloc_r+0x444>
 8008850:	81000417 	ldw	r4,16(r16)
 8008854:	b8800804 	addi	r2,r23,32
 8008858:	80c00604 	addi	r3,r16,24
 800885c:	b9000615 	stw	r4,24(r23)
 8008860:	81000517 	ldw	r4,20(r16)
 8008864:	b9000715 	stw	r4,28(r23)
 8008868:	003f9206 	br	80086b4 <_realloc_r+0x444>

0800886c <__isinfd>:
 800886c:	0105c83a 	sub	r2,zero,r4
 8008870:	1108b03a 	or	r4,r2,r4
 8008874:	2004d7fa 	srli	r2,r4,31
 8008878:	00e00034 	movhi	r3,32768
 800887c:	18ffffc4 	addi	r3,r3,-1
 8008880:	28ca703a 	and	r5,r5,r3
 8008884:	1144b03a 	or	r2,r2,r5
 8008888:	00dffc34 	movhi	r3,32752
 800888c:	1885c83a 	sub	r2,r3,r2
 8008890:	0087c83a 	sub	r3,zero,r2
 8008894:	1884b03a 	or	r2,r3,r2
 8008898:	1005d7fa 	srai	r2,r2,31
 800889c:	10800044 	addi	r2,r2,1
 80088a0:	f800283a 	ret

080088a4 <__isnand>:
 80088a4:	0105c83a 	sub	r2,zero,r4
 80088a8:	1108b03a 	or	r4,r2,r4
 80088ac:	2004d7fa 	srli	r2,r4,31
 80088b0:	00e00034 	movhi	r3,32768
 80088b4:	18ffffc4 	addi	r3,r3,-1
 80088b8:	28ca703a 	and	r5,r5,r3
 80088bc:	1144b03a 	or	r2,r2,r5
 80088c0:	00dffc34 	movhi	r3,32752
 80088c4:	1885c83a 	sub	r2,r3,r2
 80088c8:	1004d7fa 	srli	r2,r2,31
 80088cc:	f800283a 	ret

080088d0 <__sread>:
 80088d0:	defffe04 	addi	sp,sp,-8
 80088d4:	dc000015 	stw	r16,0(sp)
 80088d8:	2821883a 	mov	r16,r5
 80088dc:	2940038f 	ldh	r5,14(r5)
 80088e0:	dfc00115 	stw	ra,4(sp)
 80088e4:	8008f640 	call	8008f64 <_read_r>
 80088e8:	10000716 	blt	r2,zero,8008908 <__sread+0x38>
 80088ec:	80c01417 	ldw	r3,80(r16)
 80088f0:	1887883a 	add	r3,r3,r2
 80088f4:	80c01415 	stw	r3,80(r16)
 80088f8:	dfc00117 	ldw	ra,4(sp)
 80088fc:	dc000017 	ldw	r16,0(sp)
 8008900:	dec00204 	addi	sp,sp,8
 8008904:	f800283a 	ret
 8008908:	80c0030b 	ldhu	r3,12(r16)
 800890c:	18fbffcc 	andi	r3,r3,61439
 8008910:	80c0030d 	sth	r3,12(r16)
 8008914:	dfc00117 	ldw	ra,4(sp)
 8008918:	dc000017 	ldw	r16,0(sp)
 800891c:	dec00204 	addi	sp,sp,8
 8008920:	f800283a 	ret

08008924 <__swrite>:
 8008924:	2880030b 	ldhu	r2,12(r5)
 8008928:	defffb04 	addi	sp,sp,-20
 800892c:	dcc00315 	stw	r19,12(sp)
 8008930:	10c0400c 	andi	r3,r2,256
 8008934:	18ffffcc 	andi	r3,r3,65535
 8008938:	18e0001c 	xori	r3,r3,32768
 800893c:	dc800215 	stw	r18,8(sp)
 8008940:	dc400115 	stw	r17,4(sp)
 8008944:	dc000015 	stw	r16,0(sp)
 8008948:	dfc00415 	stw	ra,16(sp)
 800894c:	18e00004 	addi	r3,r3,-32768
 8008950:	2821883a 	mov	r16,r5
 8008954:	2027883a 	mov	r19,r4
 8008958:	3025883a 	mov	r18,r6
 800895c:	3823883a 	mov	r17,r7
 8008960:	18000526 	beq	r3,zero,8008978 <__swrite+0x54>
 8008964:	2940038f 	ldh	r5,14(r5)
 8008968:	000d883a 	mov	r6,zero
 800896c:	01c00084 	movi	r7,2
 8008970:	8008ef80 	call	8008ef8 <_lseek_r>
 8008974:	8080030b 	ldhu	r2,12(r16)
 8008978:	8140038f 	ldh	r5,14(r16)
 800897c:	10bbffcc 	andi	r2,r2,61439
 8008980:	9809883a 	mov	r4,r19
 8008984:	900d883a 	mov	r6,r18
 8008988:	880f883a 	mov	r7,r17
 800898c:	8080030d 	sth	r2,12(r16)
 8008990:	dfc00417 	ldw	ra,16(sp)
 8008994:	dcc00317 	ldw	r19,12(sp)
 8008998:	dc800217 	ldw	r18,8(sp)
 800899c:	dc400117 	ldw	r17,4(sp)
 80089a0:	dc000017 	ldw	r16,0(sp)
 80089a4:	dec00504 	addi	sp,sp,20
 80089a8:	8008b401 	jmpi	8008b40 <_write_r>

080089ac <__sseek>:
 80089ac:	defffe04 	addi	sp,sp,-8
 80089b0:	dc000015 	stw	r16,0(sp)
 80089b4:	2821883a 	mov	r16,r5
 80089b8:	2940038f 	ldh	r5,14(r5)
 80089bc:	dfc00115 	stw	ra,4(sp)
 80089c0:	8008ef80 	call	8008ef8 <_lseek_r>
 80089c4:	00ffffc4 	movi	r3,-1
 80089c8:	10c00826 	beq	r2,r3,80089ec <__sseek+0x40>
 80089cc:	80c0030b 	ldhu	r3,12(r16)
 80089d0:	80801415 	stw	r2,80(r16)
 80089d4:	18c40014 	ori	r3,r3,4096
 80089d8:	80c0030d 	sth	r3,12(r16)
 80089dc:	dfc00117 	ldw	ra,4(sp)
 80089e0:	dc000017 	ldw	r16,0(sp)
 80089e4:	dec00204 	addi	sp,sp,8
 80089e8:	f800283a 	ret
 80089ec:	80c0030b 	ldhu	r3,12(r16)
 80089f0:	18fbffcc 	andi	r3,r3,61439
 80089f4:	80c0030d 	sth	r3,12(r16)
 80089f8:	dfc00117 	ldw	ra,4(sp)
 80089fc:	dc000017 	ldw	r16,0(sp)
 8008a00:	dec00204 	addi	sp,sp,8
 8008a04:	f800283a 	ret

08008a08 <__sclose>:
 8008a08:	2940038f 	ldh	r5,14(r5)
 8008a0c:	8008c781 	jmpi	8008c78 <_close_r>

08008a10 <strcmp>:
 8008a10:	2904b03a 	or	r2,r5,r4
 8008a14:	108000cc 	andi	r2,r2,3
 8008a18:	1000171e 	bne	r2,zero,8008a78 <strcmp+0x68>
 8008a1c:	20800017 	ldw	r2,0(r4)
 8008a20:	28c00017 	ldw	r3,0(r5)
 8008a24:	10c0141e 	bne	r2,r3,8008a78 <strcmp+0x68>
 8008a28:	027fbff4 	movhi	r9,65279
 8008a2c:	4a7fbfc4 	addi	r9,r9,-257
 8008a30:	1247883a 	add	r3,r2,r9
 8008a34:	0084303a 	nor	r2,zero,r2
 8008a38:	1884703a 	and	r2,r3,r2
 8008a3c:	02202074 	movhi	r8,32897
 8008a40:	42202004 	addi	r8,r8,-32640
 8008a44:	1204703a 	and	r2,r2,r8
 8008a48:	10000226 	beq	r2,zero,8008a54 <strcmp+0x44>
 8008a4c:	00001706 	br	8008aac <strcmp+0x9c>
 8008a50:	3000161e 	bne	r6,zero,8008aac <strcmp+0x9c>
 8008a54:	21000104 	addi	r4,r4,4
 8008a58:	20800017 	ldw	r2,0(r4)
 8008a5c:	29400104 	addi	r5,r5,4
 8008a60:	28c00017 	ldw	r3,0(r5)
 8008a64:	124f883a 	add	r7,r2,r9
 8008a68:	008c303a 	nor	r6,zero,r2
 8008a6c:	398c703a 	and	r6,r7,r6
 8008a70:	320c703a 	and	r6,r6,r8
 8008a74:	10fff626 	beq	r2,r3,8008a50 <strcmp+0x40>
 8008a78:	20800007 	ldb	r2,0(r4)
 8008a7c:	1000051e 	bne	r2,zero,8008a94 <strcmp+0x84>
 8008a80:	00000606 	br	8008a9c <strcmp+0x8c>
 8008a84:	21000044 	addi	r4,r4,1
 8008a88:	20800007 	ldb	r2,0(r4)
 8008a8c:	29400044 	addi	r5,r5,1
 8008a90:	10000226 	beq	r2,zero,8008a9c <strcmp+0x8c>
 8008a94:	28c00007 	ldb	r3,0(r5)
 8008a98:	10fffa26 	beq	r2,r3,8008a84 <strcmp+0x74>
 8008a9c:	20c00003 	ldbu	r3,0(r4)
 8008aa0:	28800003 	ldbu	r2,0(r5)
 8008aa4:	1885c83a 	sub	r2,r3,r2
 8008aa8:	f800283a 	ret
 8008aac:	0005883a 	mov	r2,zero
 8008ab0:	f800283a 	ret

08008ab4 <strlen>:
 8008ab4:	208000cc 	andi	r2,r4,3
 8008ab8:	10001f1e 	bne	r2,zero,8008b38 <strlen+0x84>
 8008abc:	20800017 	ldw	r2,0(r4)
 8008ac0:	01ffbff4 	movhi	r7,65279
 8008ac4:	39ffbfc4 	addi	r7,r7,-257
 8008ac8:	01a02074 	movhi	r6,32897
 8008acc:	31a02004 	addi	r6,r6,-32640
 8008ad0:	11c7883a 	add	r3,r2,r7
 8008ad4:	0084303a 	nor	r2,zero,r2
 8008ad8:	1886703a 	and	r3,r3,r2
 8008adc:	1986703a 	and	r3,r3,r6
 8008ae0:	2005883a 	mov	r2,r4
 8008ae4:	1800101e 	bne	r3,zero,8008b28 <strlen+0x74>
 8008ae8:	10800104 	addi	r2,r2,4
 8008aec:	10c00017 	ldw	r3,0(r2)
 8008af0:	19cb883a 	add	r5,r3,r7
 8008af4:	00c6303a 	nor	r3,zero,r3
 8008af8:	28c6703a 	and	r3,r5,r3
 8008afc:	1986703a 	and	r3,r3,r6
 8008b00:	1800091e 	bne	r3,zero,8008b28 <strlen+0x74>
 8008b04:	10800104 	addi	r2,r2,4
 8008b08:	10c00017 	ldw	r3,0(r2)
 8008b0c:	19cb883a 	add	r5,r3,r7
 8008b10:	00c6303a 	nor	r3,zero,r3
 8008b14:	28c6703a 	and	r3,r5,r3
 8008b18:	1986703a 	and	r3,r3,r6
 8008b1c:	183ff226 	beq	r3,zero,8008ae8 <strlen+0x34>
 8008b20:	00000106 	br	8008b28 <strlen+0x74>
 8008b24:	10800044 	addi	r2,r2,1
 8008b28:	10c00007 	ldb	r3,0(r2)
 8008b2c:	183ffd1e 	bne	r3,zero,8008b24 <strlen+0x70>
 8008b30:	1105c83a 	sub	r2,r2,r4
 8008b34:	f800283a 	ret
 8008b38:	2005883a 	mov	r2,r4
 8008b3c:	003ffa06 	br	8008b28 <strlen+0x74>

08008b40 <_write_r>:
 8008b40:	defffd04 	addi	sp,sp,-12
 8008b44:	dc400115 	stw	r17,4(sp)
 8008b48:	dc000015 	stw	r16,0(sp)
 8008b4c:	2023883a 	mov	r17,r4
 8008b50:	04020074 	movhi	r16,2049
 8008b54:	843d7304 	addi	r16,r16,-2612
 8008b58:	2809883a 	mov	r4,r5
 8008b5c:	300b883a 	mov	r5,r6
 8008b60:	380d883a 	mov	r6,r7
 8008b64:	dfc00215 	stw	ra,8(sp)
 8008b68:	80000015 	stw	zero,0(r16)
 8008b6c:	800b9900 	call	800b990 <write>
 8008b70:	00ffffc4 	movi	r3,-1
 8008b74:	10c00526 	beq	r2,r3,8008b8c <_write_r+0x4c>
 8008b78:	dfc00217 	ldw	ra,8(sp)
 8008b7c:	dc400117 	ldw	r17,4(sp)
 8008b80:	dc000017 	ldw	r16,0(sp)
 8008b84:	dec00304 	addi	sp,sp,12
 8008b88:	f800283a 	ret
 8008b8c:	80c00017 	ldw	r3,0(r16)
 8008b90:	183ff926 	beq	r3,zero,8008b78 <_write_r+0x38>
 8008b94:	88c00015 	stw	r3,0(r17)
 8008b98:	dfc00217 	ldw	ra,8(sp)
 8008b9c:	dc400117 	ldw	r17,4(sp)
 8008ba0:	dc000017 	ldw	r16,0(sp)
 8008ba4:	dec00304 	addi	sp,sp,12
 8008ba8:	f800283a 	ret

08008bac <_calloc_r>:
 8008bac:	defffe04 	addi	sp,sp,-8
 8008bb0:	dc000015 	stw	r16,0(sp)
 8008bb4:	2021883a 	mov	r16,r4
 8008bb8:	3009883a 	mov	r4,r6
 8008bbc:	dfc00115 	stw	ra,4(sp)
 8008bc0:	8001a0c0 	call	8001a0c <__mulsi3>
 8008bc4:	8009883a 	mov	r4,r16
 8008bc8:	100b883a 	mov	r5,r2
 8008bcc:	8001a5c0 	call	8001a5c <_malloc_r>
 8008bd0:	1021883a 	mov	r16,r2
 8008bd4:	10000c26 	beq	r2,zero,8008c08 <_calloc_r+0x5c>
 8008bd8:	11bfff17 	ldw	r6,-4(r2)
 8008bdc:	00ffff04 	movi	r3,-4
 8008be0:	00800904 	movi	r2,36
 8008be4:	30cc703a 	and	r6,r6,r3
 8008be8:	30cd883a 	add	r6,r6,r3
 8008bec:	11801436 	bltu	r2,r6,8008c40 <_calloc_r+0x94>
 8008bf0:	00c004c4 	movi	r3,19
 8008bf4:	19800936 	bltu	r3,r6,8008c1c <_calloc_r+0x70>
 8008bf8:	8005883a 	mov	r2,r16
 8008bfc:	10000015 	stw	zero,0(r2)
 8008c00:	10000115 	stw	zero,4(r2)
 8008c04:	10000215 	stw	zero,8(r2)
 8008c08:	8005883a 	mov	r2,r16
 8008c0c:	dfc00117 	ldw	ra,4(sp)
 8008c10:	dc000017 	ldw	r16,0(sp)
 8008c14:	dec00204 	addi	sp,sp,8
 8008c18:	f800283a 	ret
 8008c1c:	80000015 	stw	zero,0(r16)
 8008c20:	80000115 	stw	zero,4(r16)
 8008c24:	00c006c4 	movi	r3,27
 8008c28:	19800d2e 	bgeu	r3,r6,8008c60 <_calloc_r+0xb4>
 8008c2c:	80000215 	stw	zero,8(r16)
 8008c30:	80000315 	stw	zero,12(r16)
 8008c34:	30800c26 	beq	r6,r2,8008c68 <_calloc_r+0xbc>
 8008c38:	80800404 	addi	r2,r16,16
 8008c3c:	003fef06 	br	8008bfc <_calloc_r+0x50>
 8008c40:	8009883a 	mov	r4,r16
 8008c44:	000b883a 	mov	r5,zero
 8008c48:	80071440 	call	8007144 <memset>
 8008c4c:	8005883a 	mov	r2,r16
 8008c50:	dfc00117 	ldw	ra,4(sp)
 8008c54:	dc000017 	ldw	r16,0(sp)
 8008c58:	dec00204 	addi	sp,sp,8
 8008c5c:	f800283a 	ret
 8008c60:	80800204 	addi	r2,r16,8
 8008c64:	003fe506 	br	8008bfc <_calloc_r+0x50>
 8008c68:	80000415 	stw	zero,16(r16)
 8008c6c:	80000515 	stw	zero,20(r16)
 8008c70:	80800604 	addi	r2,r16,24
 8008c74:	003fe106 	br	8008bfc <_calloc_r+0x50>

08008c78 <_close_r>:
 8008c78:	defffd04 	addi	sp,sp,-12
 8008c7c:	dc400115 	stw	r17,4(sp)
 8008c80:	dc000015 	stw	r16,0(sp)
 8008c84:	2023883a 	mov	r17,r4
 8008c88:	04020074 	movhi	r16,2049
 8008c8c:	843d7304 	addi	r16,r16,-2612
 8008c90:	2809883a 	mov	r4,r5
 8008c94:	dfc00215 	stw	ra,8(sp)
 8008c98:	80000015 	stw	zero,0(r16)
 8008c9c:	800b1340 	call	800b134 <close>
 8008ca0:	00ffffc4 	movi	r3,-1
 8008ca4:	10c00526 	beq	r2,r3,8008cbc <_close_r+0x44>
 8008ca8:	dfc00217 	ldw	ra,8(sp)
 8008cac:	dc400117 	ldw	r17,4(sp)
 8008cb0:	dc000017 	ldw	r16,0(sp)
 8008cb4:	dec00304 	addi	sp,sp,12
 8008cb8:	f800283a 	ret
 8008cbc:	80c00017 	ldw	r3,0(r16)
 8008cc0:	183ff926 	beq	r3,zero,8008ca8 <_close_r+0x30>
 8008cc4:	88c00015 	stw	r3,0(r17)
 8008cc8:	dfc00217 	ldw	ra,8(sp)
 8008ccc:	dc400117 	ldw	r17,4(sp)
 8008cd0:	dc000017 	ldw	r16,0(sp)
 8008cd4:	dec00304 	addi	sp,sp,12
 8008cd8:	f800283a 	ret

08008cdc <_fclose_r>:
 8008cdc:	defffc04 	addi	sp,sp,-16
 8008ce0:	dc400115 	stw	r17,4(sp)
 8008ce4:	dc000015 	stw	r16,0(sp)
 8008ce8:	dfc00315 	stw	ra,12(sp)
 8008cec:	dc800215 	stw	r18,8(sp)
 8008cf0:	2821883a 	mov	r16,r5
 8008cf4:	2023883a 	mov	r17,r4
 8008cf8:	28003426 	beq	r5,zero,8008dcc <_fclose_r+0xf0>
 8008cfc:	80061ac0 	call	80061ac <__sfp_lock_acquire>
 8008d00:	88000226 	beq	r17,zero,8008d0c <_fclose_r+0x30>
 8008d04:	88800e17 	ldw	r2,56(r17)
 8008d08:	10003826 	beq	r2,zero,8008dec <_fclose_r+0x110>
 8008d0c:	8080030f 	ldh	r2,12(r16)
 8008d10:	10002526 	beq	r2,zero,8008da8 <_fclose_r+0xcc>
 8008d14:	8809883a 	mov	r4,r17
 8008d18:	800b883a 	mov	r5,r16
 8008d1c:	8005ce80 	call	8005ce8 <_fflush_r>
 8008d20:	1025883a 	mov	r18,r2
 8008d24:	80800b17 	ldw	r2,44(r16)
 8008d28:	10000426 	beq	r2,zero,8008d3c <_fclose_r+0x60>
 8008d2c:	81400717 	ldw	r5,28(r16)
 8008d30:	8809883a 	mov	r4,r17
 8008d34:	103ee83a 	callr	r2
 8008d38:	10003516 	blt	r2,zero,8008e10 <_fclose_r+0x134>
 8008d3c:	8080030b 	ldhu	r2,12(r16)
 8008d40:	1080200c 	andi	r2,r2,128
 8008d44:	10bfffcc 	andi	r2,r2,65535
 8008d48:	10a0001c 	xori	r2,r2,32768
 8008d4c:	10a00004 	addi	r2,r2,-32768
 8008d50:	10002b1e 	bne	r2,zero,8008e00 <_fclose_r+0x124>
 8008d54:	81400c17 	ldw	r5,48(r16)
 8008d58:	28000526 	beq	r5,zero,8008d70 <_fclose_r+0x94>
 8008d5c:	80801004 	addi	r2,r16,64
 8008d60:	28800226 	beq	r5,r2,8008d6c <_fclose_r+0x90>
 8008d64:	8809883a 	mov	r4,r17
 8008d68:	80063280 	call	8006328 <_free_r>
 8008d6c:	80000c15 	stw	zero,48(r16)
 8008d70:	81401117 	ldw	r5,68(r16)
 8008d74:	28000326 	beq	r5,zero,8008d84 <_fclose_r+0xa8>
 8008d78:	8809883a 	mov	r4,r17
 8008d7c:	80063280 	call	8006328 <_free_r>
 8008d80:	80001115 	stw	zero,68(r16)
 8008d84:	8000030d 	sth	zero,12(r16)
 8008d88:	80061b00 	call	80061b0 <__sfp_lock_release>
 8008d8c:	9005883a 	mov	r2,r18
 8008d90:	dfc00317 	ldw	ra,12(sp)
 8008d94:	dc800217 	ldw	r18,8(sp)
 8008d98:	dc400117 	ldw	r17,4(sp)
 8008d9c:	dc000017 	ldw	r16,0(sp)
 8008da0:	dec00404 	addi	sp,sp,16
 8008da4:	f800283a 	ret
 8008da8:	80061b00 	call	80061b0 <__sfp_lock_release>
 8008dac:	0025883a 	mov	r18,zero
 8008db0:	9005883a 	mov	r2,r18
 8008db4:	dfc00317 	ldw	ra,12(sp)
 8008db8:	dc800217 	ldw	r18,8(sp)
 8008dbc:	dc400117 	ldw	r17,4(sp)
 8008dc0:	dc000017 	ldw	r16,0(sp)
 8008dc4:	dec00404 	addi	sp,sp,16
 8008dc8:	f800283a 	ret
 8008dcc:	0025883a 	mov	r18,zero
 8008dd0:	9005883a 	mov	r2,r18
 8008dd4:	dfc00317 	ldw	ra,12(sp)
 8008dd8:	dc800217 	ldw	r18,8(sp)
 8008ddc:	dc400117 	ldw	r17,4(sp)
 8008de0:	dc000017 	ldw	r16,0(sp)
 8008de4:	dec00404 	addi	sp,sp,16
 8008de8:	f800283a 	ret
 8008dec:	8809883a 	mov	r4,r17
 8008df0:	8005fa40 	call	8005fa4 <__sinit>
 8008df4:	8080030f 	ldh	r2,12(r16)
 8008df8:	103fc61e 	bne	r2,zero,8008d14 <_fclose_r+0x38>
 8008dfc:	003fea06 	br	8008da8 <_fclose_r+0xcc>
 8008e00:	81400417 	ldw	r5,16(r16)
 8008e04:	8809883a 	mov	r4,r17
 8008e08:	80063280 	call	8006328 <_free_r>
 8008e0c:	003fd106 	br	8008d54 <_fclose_r+0x78>
 8008e10:	04bfffc4 	movi	r18,-1
 8008e14:	003fc906 	br	8008d3c <_fclose_r+0x60>

08008e18 <fclose>:
 8008e18:	00820074 	movhi	r2,2049
 8008e1c:	10ba6f04 	addi	r2,r2,-5700
 8008e20:	200b883a 	mov	r5,r4
 8008e24:	11000017 	ldw	r4,0(r2)
 8008e28:	8008cdc1 	jmpi	8008cdc <_fclose_r>

08008e2c <_fstat_r>:
 8008e2c:	defffd04 	addi	sp,sp,-12
 8008e30:	dc400115 	stw	r17,4(sp)
 8008e34:	dc000015 	stw	r16,0(sp)
 8008e38:	2023883a 	mov	r17,r4
 8008e3c:	04020074 	movhi	r16,2049
 8008e40:	843d7304 	addi	r16,r16,-2612
 8008e44:	2809883a 	mov	r4,r5
 8008e48:	300b883a 	mov	r5,r6
 8008e4c:	dfc00215 	stw	ra,8(sp)
 8008e50:	80000015 	stw	zero,0(r16)
 8008e54:	800b27c0 	call	800b27c <fstat>
 8008e58:	00ffffc4 	movi	r3,-1
 8008e5c:	10c00526 	beq	r2,r3,8008e74 <_fstat_r+0x48>
 8008e60:	dfc00217 	ldw	ra,8(sp)
 8008e64:	dc400117 	ldw	r17,4(sp)
 8008e68:	dc000017 	ldw	r16,0(sp)
 8008e6c:	dec00304 	addi	sp,sp,12
 8008e70:	f800283a 	ret
 8008e74:	80c00017 	ldw	r3,0(r16)
 8008e78:	183ff926 	beq	r3,zero,8008e60 <_fstat_r+0x34>
 8008e7c:	88c00015 	stw	r3,0(r17)
 8008e80:	dfc00217 	ldw	ra,8(sp)
 8008e84:	dc400117 	ldw	r17,4(sp)
 8008e88:	dc000017 	ldw	r16,0(sp)
 8008e8c:	dec00304 	addi	sp,sp,12
 8008e90:	f800283a 	ret

08008e94 <_isatty_r>:
 8008e94:	defffd04 	addi	sp,sp,-12
 8008e98:	dc400115 	stw	r17,4(sp)
 8008e9c:	dc000015 	stw	r16,0(sp)
 8008ea0:	2023883a 	mov	r17,r4
 8008ea4:	04020074 	movhi	r16,2049
 8008ea8:	843d7304 	addi	r16,r16,-2612
 8008eac:	2809883a 	mov	r4,r5
 8008eb0:	dfc00215 	stw	ra,8(sp)
 8008eb4:	80000015 	stw	zero,0(r16)
 8008eb8:	800b37c0 	call	800b37c <isatty>
 8008ebc:	00ffffc4 	movi	r3,-1
 8008ec0:	10c00526 	beq	r2,r3,8008ed8 <_isatty_r+0x44>
 8008ec4:	dfc00217 	ldw	ra,8(sp)
 8008ec8:	dc400117 	ldw	r17,4(sp)
 8008ecc:	dc000017 	ldw	r16,0(sp)
 8008ed0:	dec00304 	addi	sp,sp,12
 8008ed4:	f800283a 	ret
 8008ed8:	80c00017 	ldw	r3,0(r16)
 8008edc:	183ff926 	beq	r3,zero,8008ec4 <_isatty_r+0x30>
 8008ee0:	88c00015 	stw	r3,0(r17)
 8008ee4:	dfc00217 	ldw	ra,8(sp)
 8008ee8:	dc400117 	ldw	r17,4(sp)
 8008eec:	dc000017 	ldw	r16,0(sp)
 8008ef0:	dec00304 	addi	sp,sp,12
 8008ef4:	f800283a 	ret

08008ef8 <_lseek_r>:
 8008ef8:	defffd04 	addi	sp,sp,-12
 8008efc:	dc400115 	stw	r17,4(sp)
 8008f00:	dc000015 	stw	r16,0(sp)
 8008f04:	2023883a 	mov	r17,r4
 8008f08:	04020074 	movhi	r16,2049
 8008f0c:	843d7304 	addi	r16,r16,-2612
 8008f10:	2809883a 	mov	r4,r5
 8008f14:	300b883a 	mov	r5,r6
 8008f18:	380d883a 	mov	r6,r7
 8008f1c:	dfc00215 	stw	ra,8(sp)
 8008f20:	80000015 	stw	zero,0(r16)
 8008f24:	800b55c0 	call	800b55c <lseek>
 8008f28:	00ffffc4 	movi	r3,-1
 8008f2c:	10c00526 	beq	r2,r3,8008f44 <_lseek_r+0x4c>
 8008f30:	dfc00217 	ldw	ra,8(sp)
 8008f34:	dc400117 	ldw	r17,4(sp)
 8008f38:	dc000017 	ldw	r16,0(sp)
 8008f3c:	dec00304 	addi	sp,sp,12
 8008f40:	f800283a 	ret
 8008f44:	80c00017 	ldw	r3,0(r16)
 8008f48:	183ff926 	beq	r3,zero,8008f30 <_lseek_r+0x38>
 8008f4c:	88c00015 	stw	r3,0(r17)
 8008f50:	dfc00217 	ldw	ra,8(sp)
 8008f54:	dc400117 	ldw	r17,4(sp)
 8008f58:	dc000017 	ldw	r16,0(sp)
 8008f5c:	dec00304 	addi	sp,sp,12
 8008f60:	f800283a 	ret

08008f64 <_read_r>:
 8008f64:	defffd04 	addi	sp,sp,-12
 8008f68:	dc400115 	stw	r17,4(sp)
 8008f6c:	dc000015 	stw	r16,0(sp)
 8008f70:	2023883a 	mov	r17,r4
 8008f74:	04020074 	movhi	r16,2049
 8008f78:	843d7304 	addi	r16,r16,-2612
 8008f7c:	2809883a 	mov	r4,r5
 8008f80:	300b883a 	mov	r5,r6
 8008f84:	380d883a 	mov	r6,r7
 8008f88:	dfc00215 	stw	ra,8(sp)
 8008f8c:	80000015 	stw	zero,0(r16)
 8008f90:	800b71c0 	call	800b71c <read>
 8008f94:	00ffffc4 	movi	r3,-1
 8008f98:	10c00526 	beq	r2,r3,8008fb0 <_read_r+0x4c>
 8008f9c:	dfc00217 	ldw	ra,8(sp)
 8008fa0:	dc400117 	ldw	r17,4(sp)
 8008fa4:	dc000017 	ldw	r16,0(sp)
 8008fa8:	dec00304 	addi	sp,sp,12
 8008fac:	f800283a 	ret
 8008fb0:	80c00017 	ldw	r3,0(r16)
 8008fb4:	183ff926 	beq	r3,zero,8008f9c <_read_r+0x38>
 8008fb8:	88c00015 	stw	r3,0(r17)
 8008fbc:	dfc00217 	ldw	ra,8(sp)
 8008fc0:	dc400117 	ldw	r17,4(sp)
 8008fc4:	dc000017 	ldw	r16,0(sp)
 8008fc8:	dec00304 	addi	sp,sp,12
 8008fcc:	f800283a 	ret

08008fd0 <__udivdi3>:
 8008fd0:	defff504 	addi	sp,sp,-44
 8008fd4:	dd000515 	stw	r20,20(sp)
 8008fd8:	dcc00415 	stw	r19,16(sp)
 8008fdc:	dc800315 	stw	r18,12(sp)
 8008fe0:	dc400215 	stw	r17,8(sp)
 8008fe4:	dc000115 	stw	r16,4(sp)
 8008fe8:	dfc00a15 	stw	ra,40(sp)
 8008fec:	df000915 	stw	fp,36(sp)
 8008ff0:	ddc00815 	stw	r23,32(sp)
 8008ff4:	dd800715 	stw	r22,28(sp)
 8008ff8:	dd400615 	stw	r21,24(sp)
 8008ffc:	2025883a 	mov	r18,r4
 8009000:	2823883a 	mov	r17,r5
 8009004:	3021883a 	mov	r16,r6
 8009008:	2027883a 	mov	r19,r4
 800900c:	2829883a 	mov	r20,r5
 8009010:	3800451e 	bne	r7,zero,8009128 <__udivdi3+0x158>
 8009014:	2980652e 	bgeu	r5,r6,80091ac <__udivdi3+0x1dc>
 8009018:	00bfffd4 	movui	r2,65535
 800901c:	1180b436 	bltu	r2,r6,80092f0 <__udivdi3+0x320>
 8009020:	00803fc4 	movi	r2,255
 8009024:	11816636 	bltu	r2,r6,80095c0 <__udivdi3+0x5f0>
 8009028:	0005883a 	mov	r2,zero
 800902c:	0007883a 	mov	r3,zero
 8009030:	3084d83a 	srl	r2,r6,r2
 8009034:	01020074 	movhi	r4,2049
 8009038:	21372804 	addi	r4,r4,-9056
 800903c:	2085883a 	add	r2,r4,r2
 8009040:	10800003 	ldbu	r2,0(r2)
 8009044:	10c7883a 	add	r3,r2,r3
 8009048:	00800804 	movi	r2,32
 800904c:	10c5c83a 	sub	r2,r2,r3
 8009050:	10000526 	beq	r2,zero,8009068 <__udivdi3+0x98>
 8009054:	88a2983a 	sll	r17,r17,r2
 8009058:	90c6d83a 	srl	r3,r18,r3
 800905c:	30a0983a 	sll	r16,r6,r2
 8009060:	90a6983a 	sll	r19,r18,r2
 8009064:	88e8b03a 	or	r20,r17,r3
 8009068:	8022d43a 	srli	r17,r16,16
 800906c:	a009883a 	mov	r4,r20
 8009070:	857fffcc 	andi	r21,r16,65535
 8009074:	880b883a 	mov	r5,r17
 8009078:	800aaa00 	call	800aaa0 <__umodsi3>
 800907c:	a009883a 	mov	r4,r20
 8009080:	880b883a 	mov	r5,r17
 8009084:	102d883a 	mov	r22,r2
 8009088:	800aa980 	call	800aa98 <__udivsi3>
 800908c:	1009883a 	mov	r4,r2
 8009090:	a80b883a 	mov	r5,r21
 8009094:	1025883a 	mov	r18,r2
 8009098:	8001a0c0 	call	8001a0c <__mulsi3>
 800909c:	1009883a 	mov	r4,r2
 80090a0:	b006943a 	slli	r3,r22,16
 80090a4:	9804d43a 	srli	r2,r19,16
 80090a8:	1886b03a 	or	r3,r3,r2
 80090ac:	1900052e 	bgeu	r3,r4,80090c4 <__udivdi3+0xf4>
 80090b0:	1c07883a 	add	r3,r3,r16
 80090b4:	90bfffc4 	addi	r2,r18,-1
 80090b8:	1c000136 	bltu	r3,r16,80090c0 <__udivdi3+0xf0>
 80090bc:	19015536 	bltu	r3,r4,8009614 <__udivdi3+0x644>
 80090c0:	1025883a 	mov	r18,r2
 80090c4:	1929c83a 	sub	r20,r3,r4
 80090c8:	880b883a 	mov	r5,r17
 80090cc:	a009883a 	mov	r4,r20
 80090d0:	800aaa00 	call	800aaa0 <__umodsi3>
 80090d4:	102d883a 	mov	r22,r2
 80090d8:	880b883a 	mov	r5,r17
 80090dc:	a009883a 	mov	r4,r20
 80090e0:	b02c943a 	slli	r22,r22,16
 80090e4:	800aa980 	call	800aa98 <__udivsi3>
 80090e8:	1009883a 	mov	r4,r2
 80090ec:	a80b883a 	mov	r5,r21
 80090f0:	9cffffcc 	andi	r19,r19,65535
 80090f4:	1023883a 	mov	r17,r2
 80090f8:	b4e6b03a 	or	r19,r22,r19
 80090fc:	8001a0c0 	call	8001a0c <__mulsi3>
 8009100:	9880052e 	bgeu	r19,r2,8009118 <__udivdi3+0x148>
 8009104:	9c27883a 	add	r19,r19,r16
 8009108:	88ffffc4 	addi	r3,r17,-1
 800910c:	9c011436 	bltu	r19,r16,8009560 <__udivdi3+0x590>
 8009110:	9881132e 	bgeu	r19,r2,8009560 <__udivdi3+0x590>
 8009114:	8c7fff84 	addi	r17,r17,-2
 8009118:	9004943a 	slli	r2,r18,16
 800911c:	0007883a 	mov	r3,zero
 8009120:	8884b03a 	or	r2,r17,r2
 8009124:	00001506 	br	800917c <__udivdi3+0x1ac>
 8009128:	29c06a36 	bltu	r5,r7,80092d4 <__udivdi3+0x304>
 800912c:	00bfffd4 	movui	r2,65535
 8009130:	11c06a2e 	bgeu	r2,r7,80092dc <__udivdi3+0x30c>
 8009134:	00804034 	movhi	r2,256
 8009138:	10bfffc4 	addi	r2,r2,-1
 800913c:	11c11436 	bltu	r2,r7,8009590 <__udivdi3+0x5c0>
 8009140:	00c00404 	movi	r3,16
 8009144:	180b883a 	mov	r5,r3
 8009148:	38c6d83a 	srl	r3,r7,r3
 800914c:	01020074 	movhi	r4,2049
 8009150:	21372804 	addi	r4,r4,-9056
 8009154:	04000804 	movi	r16,32
 8009158:	20c7883a 	add	r3,r4,r3
 800915c:	18800003 	ldbu	r2,0(r3)
 8009160:	1145883a 	add	r2,r2,r5
 8009164:	80a1c83a 	sub	r16,r16,r2
 8009168:	80006e1e 	bne	r16,zero,8009324 <__udivdi3+0x354>
 800916c:	0007883a 	mov	r3,zero
 8009170:	3c406a36 	bltu	r7,r17,800931c <__udivdi3+0x34c>
 8009174:	9180692e 	bgeu	r18,r6,800931c <__udivdi3+0x34c>
 8009178:	0005883a 	mov	r2,zero
 800917c:	dfc00a17 	ldw	ra,40(sp)
 8009180:	df000917 	ldw	fp,36(sp)
 8009184:	ddc00817 	ldw	r23,32(sp)
 8009188:	dd800717 	ldw	r22,28(sp)
 800918c:	dd400617 	ldw	r21,24(sp)
 8009190:	dd000517 	ldw	r20,20(sp)
 8009194:	dcc00417 	ldw	r19,16(sp)
 8009198:	dc800317 	ldw	r18,12(sp)
 800919c:	dc400217 	ldw	r17,8(sp)
 80091a0:	dc000117 	ldw	r16,4(sp)
 80091a4:	dec00b04 	addi	sp,sp,44
 80091a8:	f800283a 	ret
 80091ac:	3000041e 	bne	r6,zero,80091c0 <__udivdi3+0x1f0>
 80091b0:	01000044 	movi	r4,1
 80091b4:	000b883a 	mov	r5,zero
 80091b8:	800aa980 	call	800aa98 <__udivsi3>
 80091bc:	1021883a 	mov	r16,r2
 80091c0:	00bfffd4 	movui	r2,65535
 80091c4:	1400502e 	bgeu	r2,r16,8009308 <__udivdi3+0x338>
 80091c8:	00804034 	movhi	r2,256
 80091cc:	10bfffc4 	addi	r2,r2,-1
 80091d0:	1400f536 	bltu	r2,r16,80095a8 <__udivdi3+0x5d8>
 80091d4:	00800404 	movi	r2,16
 80091d8:	1007883a 	mov	r3,r2
 80091dc:	8084d83a 	srl	r2,r16,r2
 80091e0:	01020074 	movhi	r4,2049
 80091e4:	21372804 	addi	r4,r4,-9056
 80091e8:	2085883a 	add	r2,r4,r2
 80091ec:	10800003 	ldbu	r2,0(r2)
 80091f0:	10c7883a 	add	r3,r2,r3
 80091f4:	00800804 	movi	r2,32
 80091f8:	10c5c83a 	sub	r2,r2,r3
 80091fc:	1000a01e 	bne	r2,zero,8009480 <__udivdi3+0x4b0>
 8009200:	8028d43a 	srli	r20,r16,16
 8009204:	8c23c83a 	sub	r17,r17,r16
 8009208:	857fffcc 	andi	r21,r16,65535
 800920c:	00c00044 	movi	r3,1
 8009210:	8809883a 	mov	r4,r17
 8009214:	a00b883a 	mov	r5,r20
 8009218:	d8c00015 	stw	r3,0(sp)
 800921c:	800aaa00 	call	800aaa0 <__umodsi3>
 8009220:	8809883a 	mov	r4,r17
 8009224:	a00b883a 	mov	r5,r20
 8009228:	102d883a 	mov	r22,r2
 800922c:	800aa980 	call	800aa98 <__udivsi3>
 8009230:	1009883a 	mov	r4,r2
 8009234:	a80b883a 	mov	r5,r21
 8009238:	1025883a 	mov	r18,r2
 800923c:	8001a0c0 	call	8001a0c <__mulsi3>
 8009240:	1009883a 	mov	r4,r2
 8009244:	b00c943a 	slli	r6,r22,16
 8009248:	9804d43a 	srli	r2,r19,16
 800924c:	d8c00017 	ldw	r3,0(sp)
 8009250:	308cb03a 	or	r6,r6,r2
 8009254:	3100052e 	bgeu	r6,r4,800926c <__udivdi3+0x29c>
 8009258:	340d883a 	add	r6,r6,r16
 800925c:	90bfffc4 	addi	r2,r18,-1
 8009260:	34000136 	bltu	r6,r16,8009268 <__udivdi3+0x298>
 8009264:	3100e836 	bltu	r6,r4,8009608 <__udivdi3+0x638>
 8009268:	1025883a 	mov	r18,r2
 800926c:	3123c83a 	sub	r17,r6,r4
 8009270:	8809883a 	mov	r4,r17
 8009274:	a00b883a 	mov	r5,r20
 8009278:	d8c00015 	stw	r3,0(sp)
 800927c:	800aaa00 	call	800aaa0 <__umodsi3>
 8009280:	102d883a 	mov	r22,r2
 8009284:	8809883a 	mov	r4,r17
 8009288:	a00b883a 	mov	r5,r20
 800928c:	b02c943a 	slli	r22,r22,16
 8009290:	800aa980 	call	800aa98 <__udivsi3>
 8009294:	1009883a 	mov	r4,r2
 8009298:	a80b883a 	mov	r5,r21
 800929c:	9cffffcc 	andi	r19,r19,65535
 80092a0:	1023883a 	mov	r17,r2
 80092a4:	b4e6b03a 	or	r19,r22,r19
 80092a8:	8001a0c0 	call	8001a0c <__mulsi3>
 80092ac:	d8c00017 	ldw	r3,0(sp)
 80092b0:	9880052e 	bgeu	r19,r2,80092c8 <__udivdi3+0x2f8>
 80092b4:	9c27883a 	add	r19,r19,r16
 80092b8:	893fffc4 	addi	r4,r17,-1
 80092bc:	9c00aa36 	bltu	r19,r16,8009568 <__udivdi3+0x598>
 80092c0:	9880a92e 	bgeu	r19,r2,8009568 <__udivdi3+0x598>
 80092c4:	8c7fff84 	addi	r17,r17,-2
 80092c8:	9004943a 	slli	r2,r18,16
 80092cc:	8884b03a 	or	r2,r17,r2
 80092d0:	003faa06 	br	800917c <__udivdi3+0x1ac>
 80092d4:	0007883a 	mov	r3,zero
 80092d8:	003fa706 	br	8009178 <__udivdi3+0x1a8>
 80092dc:	00803fc4 	movi	r2,255
 80092e0:	11c0ae36 	bltu	r2,r7,800959c <__udivdi3+0x5cc>
 80092e4:	0007883a 	mov	r3,zero
 80092e8:	000b883a 	mov	r5,zero
 80092ec:	003f9606 	br	8009148 <__udivdi3+0x178>
 80092f0:	00804034 	movhi	r2,256
 80092f4:	10bfffc4 	addi	r2,r2,-1
 80092f8:	1180ae36 	bltu	r2,r6,80095b4 <__udivdi3+0x5e4>
 80092fc:	00800404 	movi	r2,16
 8009300:	1007883a 	mov	r3,r2
 8009304:	003f4a06 	br	8009030 <__udivdi3+0x60>
 8009308:	00803fc4 	movi	r2,255
 800930c:	1400af36 	bltu	r2,r16,80095cc <__udivdi3+0x5fc>
 8009310:	0005883a 	mov	r2,zero
 8009314:	0007883a 	mov	r3,zero
 8009318:	003fb006 	br	80091dc <__udivdi3+0x20c>
 800931c:	00800044 	movi	r2,1
 8009320:	003f9606 	br	800917c <__udivdi3+0x1ac>
 8009324:	3c0e983a 	sll	r7,r7,r16
 8009328:	3086d83a 	srl	r3,r6,r2
 800932c:	88aed83a 	srl	r23,r17,r2
 8009330:	9084d83a 	srl	r2,r18,r2
 8009334:	38e6b03a 	or	r19,r7,r3
 8009338:	9828d43a 	srli	r20,r19,16
 800933c:	8c22983a 	sll	r17,r17,r16
 8009340:	b809883a 	mov	r4,r23
 8009344:	a00b883a 	mov	r5,r20
 8009348:	342a983a 	sll	r21,r6,r16
 800934c:	88a2b03a 	or	r17,r17,r2
 8009350:	800aaa00 	call	800aaa0 <__umodsi3>
 8009354:	b809883a 	mov	r4,r23
 8009358:	a00b883a 	mov	r5,r20
 800935c:	1039883a 	mov	fp,r2
 8009360:	9dbfffcc 	andi	r22,r19,65535
 8009364:	800aa980 	call	800aa98 <__udivsi3>
 8009368:	1009883a 	mov	r4,r2
 800936c:	b00b883a 	mov	r5,r22
 8009370:	102f883a 	mov	r23,r2
 8009374:	8001a0c0 	call	8001a0c <__mulsi3>
 8009378:	1009883a 	mov	r4,r2
 800937c:	e00e943a 	slli	r7,fp,16
 8009380:	8804d43a 	srli	r2,r17,16
 8009384:	388eb03a 	or	r7,r7,r2
 8009388:	3900042e 	bgeu	r7,r4,800939c <__udivdi3+0x3cc>
 800938c:	3ccf883a 	add	r7,r7,r19
 8009390:	b8bfffc4 	addi	r2,r23,-1
 8009394:	3cc0942e 	bgeu	r7,r19,80095e8 <__udivdi3+0x618>
 8009398:	102f883a 	mov	r23,r2
 800939c:	3939c83a 	sub	fp,r7,r4
 80093a0:	a00b883a 	mov	r5,r20
 80093a4:	e009883a 	mov	r4,fp
 80093a8:	800aaa00 	call	800aaa0 <__umodsi3>
 80093ac:	a00b883a 	mov	r5,r20
 80093b0:	e009883a 	mov	r4,fp
 80093b4:	d8800015 	stw	r2,0(sp)
 80093b8:	800aa980 	call	800aa98 <__udivsi3>
 80093bc:	1009883a 	mov	r4,r2
 80093c0:	b00b883a 	mov	r5,r22
 80093c4:	1029883a 	mov	r20,r2
 80093c8:	8001a0c0 	call	8001a0c <__mulsi3>
 80093cc:	d8c00017 	ldw	r3,0(sp)
 80093d0:	8c7fffcc 	andi	r17,r17,65535
 80093d4:	1806943a 	slli	r3,r3,16
 80093d8:	1c46b03a 	or	r3,r3,r17
 80093dc:	1880042e 	bgeu	r3,r2,80093f0 <__udivdi3+0x420>
 80093e0:	1cc7883a 	add	r3,r3,r19
 80093e4:	a13fffc4 	addi	r4,r20,-1
 80093e8:	1cc07b2e 	bgeu	r3,r19,80095d8 <__udivdi3+0x608>
 80093ec:	2029883a 	mov	r20,r4
 80093f0:	b82e943a 	slli	r23,r23,16
 80093f4:	a822d43a 	srli	r17,r21,16
 80093f8:	ad7fffcc 	andi	r21,r21,65535
 80093fc:	a5e8b03a 	or	r20,r20,r23
 8009400:	a5bfffcc 	andi	r22,r20,65535
 8009404:	b009883a 	mov	r4,r22
 8009408:	a80b883a 	mov	r5,r21
 800940c:	18afc83a 	sub	r23,r3,r2
 8009410:	a026d43a 	srli	r19,r20,16
 8009414:	8001a0c0 	call	8001a0c <__mulsi3>
 8009418:	b009883a 	mov	r4,r22
 800941c:	880b883a 	mov	r5,r17
 8009420:	1039883a 	mov	fp,r2
 8009424:	8001a0c0 	call	8001a0c <__mulsi3>
 8009428:	a80b883a 	mov	r5,r21
 800942c:	9809883a 	mov	r4,r19
 8009430:	102d883a 	mov	r22,r2
 8009434:	8001a0c0 	call	8001a0c <__mulsi3>
 8009438:	9809883a 	mov	r4,r19
 800943c:	880b883a 	mov	r5,r17
 8009440:	102b883a 	mov	r21,r2
 8009444:	8001a0c0 	call	8001a0c <__mulsi3>
 8009448:	100b883a 	mov	r5,r2
 800944c:	e004d43a 	srli	r2,fp,16
 8009450:	ad89883a 	add	r4,r21,r22
 8009454:	2089883a 	add	r4,r4,r2
 8009458:	2540022e 	bgeu	r4,r21,8009464 <__udivdi3+0x494>
 800945c:	00800074 	movhi	r2,1
 8009460:	288b883a 	add	r5,r5,r2
 8009464:	2004d43a 	srli	r2,r4,16
 8009468:	288b883a 	add	r5,r5,r2
 800946c:	b9404536 	bltu	r23,r5,8009584 <__udivdi3+0x5b4>
 8009470:	b9403f26 	beq	r23,r5,8009570 <__udivdi3+0x5a0>
 8009474:	a005883a 	mov	r2,r20
 8009478:	0007883a 	mov	r3,zero
 800947c:	003f3f06 	br	800917c <__udivdi3+0x1ac>
 8009480:	80a0983a 	sll	r16,r16,r2
 8009484:	88eed83a 	srl	r23,r17,r3
 8009488:	90c6d83a 	srl	r3,r18,r3
 800948c:	8028d43a 	srli	r20,r16,16
 8009490:	88a2983a 	sll	r17,r17,r2
 8009494:	b809883a 	mov	r4,r23
 8009498:	a00b883a 	mov	r5,r20
 800949c:	88ecb03a 	or	r22,r17,r3
 80094a0:	90a6983a 	sll	r19,r18,r2
 80094a4:	800aaa00 	call	800aaa0 <__umodsi3>
 80094a8:	b809883a 	mov	r4,r23
 80094ac:	a00b883a 	mov	r5,r20
 80094b0:	1023883a 	mov	r17,r2
 80094b4:	857fffcc 	andi	r21,r16,65535
 80094b8:	800aa980 	call	800aa98 <__udivsi3>
 80094bc:	1009883a 	mov	r4,r2
 80094c0:	a80b883a 	mov	r5,r21
 80094c4:	102f883a 	mov	r23,r2
 80094c8:	8001a0c0 	call	8001a0c <__mulsi3>
 80094cc:	1009883a 	mov	r4,r2
 80094d0:	880a943a 	slli	r5,r17,16
 80094d4:	b004d43a 	srli	r2,r22,16
 80094d8:	288ab03a 	or	r5,r5,r2
 80094dc:	2900062e 	bgeu	r5,r4,80094f8 <__udivdi3+0x528>
 80094e0:	2c0b883a 	add	r5,r5,r16
 80094e4:	b8bfffc4 	addi	r2,r23,-1
 80094e8:	2c004536 	bltu	r5,r16,8009600 <__udivdi3+0x630>
 80094ec:	2900442e 	bgeu	r5,r4,8009600 <__udivdi3+0x630>
 80094f0:	bdffff84 	addi	r23,r23,-2
 80094f4:	2c0b883a 	add	r5,r5,r16
 80094f8:	2925c83a 	sub	r18,r5,r4
 80094fc:	9009883a 	mov	r4,r18
 8009500:	a00b883a 	mov	r5,r20
 8009504:	800aaa00 	call	800aaa0 <__umodsi3>
 8009508:	1023883a 	mov	r17,r2
 800950c:	9009883a 	mov	r4,r18
 8009510:	a00b883a 	mov	r5,r20
 8009514:	8822943a 	slli	r17,r17,16
 8009518:	800aa980 	call	800aa98 <__udivsi3>
 800951c:	1009883a 	mov	r4,r2
 8009520:	a80b883a 	mov	r5,r21
 8009524:	b5bfffcc 	andi	r22,r22,65535
 8009528:	1025883a 	mov	r18,r2
 800952c:	8da2b03a 	or	r17,r17,r22
 8009530:	8001a0c0 	call	8001a0c <__mulsi3>
 8009534:	8880062e 	bgeu	r17,r2,8009550 <__udivdi3+0x580>
 8009538:	8c23883a 	add	r17,r17,r16
 800953c:	90ffffc4 	addi	r3,r18,-1
 8009540:	8c002d36 	bltu	r17,r16,80095f8 <__udivdi3+0x628>
 8009544:	88802c2e 	bgeu	r17,r2,80095f8 <__udivdi3+0x628>
 8009548:	94bfff84 	addi	r18,r18,-2
 800954c:	8c23883a 	add	r17,r17,r16
 8009550:	b806943a 	slli	r3,r23,16
 8009554:	88a3c83a 	sub	r17,r17,r2
 8009558:	90c6b03a 	or	r3,r18,r3
 800955c:	003f2c06 	br	8009210 <__udivdi3+0x240>
 8009560:	1823883a 	mov	r17,r3
 8009564:	003eec06 	br	8009118 <__udivdi3+0x148>
 8009568:	2023883a 	mov	r17,r4
 800956c:	003f5606 	br	80092c8 <__udivdi3+0x2f8>
 8009570:	2008943a 	slli	r4,r4,16
 8009574:	9420983a 	sll	r16,r18,r16
 8009578:	e73fffcc 	andi	fp,fp,65535
 800957c:	2709883a 	add	r4,r4,fp
 8009580:	813fbc2e 	bgeu	r16,r4,8009474 <__udivdi3+0x4a4>
 8009584:	a0bfffc4 	addi	r2,r20,-1
 8009588:	0007883a 	mov	r3,zero
 800958c:	003efb06 	br	800917c <__udivdi3+0x1ac>
 8009590:	00c00604 	movi	r3,24
 8009594:	180b883a 	mov	r5,r3
 8009598:	003eeb06 	br	8009148 <__udivdi3+0x178>
 800959c:	00c00204 	movi	r3,8
 80095a0:	180b883a 	mov	r5,r3
 80095a4:	003ee806 	br	8009148 <__udivdi3+0x178>
 80095a8:	00800604 	movi	r2,24
 80095ac:	1007883a 	mov	r3,r2
 80095b0:	003f0a06 	br	80091dc <__udivdi3+0x20c>
 80095b4:	00800604 	movi	r2,24
 80095b8:	1007883a 	mov	r3,r2
 80095bc:	003e9c06 	br	8009030 <__udivdi3+0x60>
 80095c0:	00800204 	movi	r2,8
 80095c4:	1007883a 	mov	r3,r2
 80095c8:	003e9906 	br	8009030 <__udivdi3+0x60>
 80095cc:	00800204 	movi	r2,8
 80095d0:	1007883a 	mov	r3,r2
 80095d4:	003f0106 	br	80091dc <__udivdi3+0x20c>
 80095d8:	18bf842e 	bgeu	r3,r2,80093ec <__udivdi3+0x41c>
 80095dc:	a53fff84 	addi	r20,r20,-2
 80095e0:	1cc7883a 	add	r3,r3,r19
 80095e4:	003f8206 	br	80093f0 <__udivdi3+0x420>
 80095e8:	393f6b2e 	bgeu	r7,r4,8009398 <__udivdi3+0x3c8>
 80095ec:	bdffff84 	addi	r23,r23,-2
 80095f0:	3ccf883a 	add	r7,r7,r19
 80095f4:	003f6906 	br	800939c <__udivdi3+0x3cc>
 80095f8:	1825883a 	mov	r18,r3
 80095fc:	003fd406 	br	8009550 <__udivdi3+0x580>
 8009600:	102f883a 	mov	r23,r2
 8009604:	003fbc06 	br	80094f8 <__udivdi3+0x528>
 8009608:	94bfff84 	addi	r18,r18,-2
 800960c:	340d883a 	add	r6,r6,r16
 8009610:	003f1606 	br	800926c <__udivdi3+0x29c>
 8009614:	94bfff84 	addi	r18,r18,-2
 8009618:	1c07883a 	add	r3,r3,r16
 800961c:	003ea906 	br	80090c4 <__udivdi3+0xf4>

08009620 <__umoddi3>:
 8009620:	defff304 	addi	sp,sp,-52
 8009624:	dd000715 	stw	r20,28(sp)
 8009628:	dcc00615 	stw	r19,24(sp)
 800962c:	dc800515 	stw	r18,20(sp)
 8009630:	dc400415 	stw	r17,16(sp)
 8009634:	dc000315 	stw	r16,12(sp)
 8009638:	dfc00c15 	stw	ra,48(sp)
 800963c:	df000b15 	stw	fp,44(sp)
 8009640:	ddc00a15 	stw	r23,40(sp)
 8009644:	dd800915 	stw	r22,36(sp)
 8009648:	dd400815 	stw	r21,32(sp)
 800964c:	2025883a 	mov	r18,r4
 8009650:	2823883a 	mov	r17,r5
 8009654:	3021883a 	mov	r16,r6
 8009658:	2027883a 	mov	r19,r4
 800965c:	2829883a 	mov	r20,r5
 8009660:	38003a1e 	bne	r7,zero,800974c <__umoddi3+0x12c>
 8009664:	2980522e 	bgeu	r5,r6,80097b0 <__umoddi3+0x190>
 8009668:	00bfffd4 	movui	r2,65535
 800966c:	1180a436 	bltu	r2,r6,8009900 <__umoddi3+0x2e0>
 8009670:	00803fc4 	movi	r2,255
 8009674:	11816036 	bltu	r2,r6,8009bf8 <__umoddi3+0x5d8>
 8009678:	0005883a 	mov	r2,zero
 800967c:	0009883a 	mov	r4,zero
 8009680:	3084d83a 	srl	r2,r6,r2
 8009684:	00c20074 	movhi	r3,2049
 8009688:	18f72804 	addi	r3,r3,-9056
 800968c:	05400804 	movi	r21,32
 8009690:	1885883a 	add	r2,r3,r2
 8009694:	10800003 	ldbu	r2,0(r2)
 8009698:	1109883a 	add	r4,r2,r4
 800969c:	a92bc83a 	sub	r21,r21,r4
 80096a0:	a8010e26 	beq	r21,zero,8009adc <__umoddi3+0x4bc>
 80096a4:	8d62983a 	sll	r17,r17,r21
 80096a8:	9108d83a 	srl	r4,r18,r4
 80096ac:	3560983a 	sll	r16,r6,r21
 80096b0:	9566983a 	sll	r19,r18,r21
 80096b4:	8928b03a 	or	r20,r17,r4
 80096b8:	8022d43a 	srli	r17,r16,16
 80096bc:	a009883a 	mov	r4,r20
 80096c0:	84bfffcc 	andi	r18,r16,65535
 80096c4:	880b883a 	mov	r5,r17
 80096c8:	800aaa00 	call	800aaa0 <__umodsi3>
 80096cc:	a009883a 	mov	r4,r20
 80096d0:	880b883a 	mov	r5,r17
 80096d4:	102d883a 	mov	r22,r2
 80096d8:	800aa980 	call	800aa98 <__udivsi3>
 80096dc:	1009883a 	mov	r4,r2
 80096e0:	900b883a 	mov	r5,r18
 80096e4:	8001a0c0 	call	8001a0c <__mulsi3>
 80096e8:	1009883a 	mov	r4,r2
 80096ec:	b006943a 	slli	r3,r22,16
 80096f0:	9804d43a 	srli	r2,r19,16
 80096f4:	1886b03a 	or	r3,r3,r2
 80096f8:	1900042e 	bgeu	r3,r4,800970c <__umoddi3+0xec>
 80096fc:	1c07883a 	add	r3,r3,r16
 8009700:	1c000236 	bltu	r3,r16,800970c <__umoddi3+0xec>
 8009704:	1900012e 	bgeu	r3,r4,800970c <__umoddi3+0xec>
 8009708:	1c07883a 	add	r3,r3,r16
 800970c:	1929c83a 	sub	r20,r3,r4
 8009710:	a009883a 	mov	r4,r20
 8009714:	880b883a 	mov	r5,r17
 8009718:	800aaa00 	call	800aaa0 <__umodsi3>
 800971c:	102d883a 	mov	r22,r2
 8009720:	a009883a 	mov	r4,r20
 8009724:	880b883a 	mov	r5,r17
 8009728:	b02c943a 	slli	r22,r22,16
 800972c:	800aa980 	call	800aa98 <__udivsi3>
 8009730:	1009883a 	mov	r4,r2
 8009734:	900b883a 	mov	r5,r18
 8009738:	9cffffcc 	andi	r19,r19,65535
 800973c:	8001a0c0 	call	8001a0c <__mulsi3>
 8009740:	b4e6b03a 	or	r19,r22,r19
 8009744:	9880572e 	bgeu	r19,r2,80098a4 <__umoddi3+0x284>
 8009748:	00005206 	br	8009894 <__umoddi3+0x274>
 800974c:	29c05936 	bltu	r5,r7,80098b4 <__umoddi3+0x294>
 8009750:	00bfffd4 	movui	r2,65535
 8009754:	11c0652e 	bgeu	r2,r7,80098ec <__umoddi3+0x2cc>
 8009758:	00804034 	movhi	r2,256
 800975c:	10bfffc4 	addi	r2,r2,-1
 8009760:	11c11936 	bltu	r2,r7,8009bc8 <__umoddi3+0x5a8>
 8009764:	00c00404 	movi	r3,16
 8009768:	1827883a 	mov	r19,r3
 800976c:	38c6d83a 	srl	r3,r7,r3
 8009770:	01020074 	movhi	r4,2049
 8009774:	21372804 	addi	r4,r4,-9056
 8009778:	04000804 	movi	r16,32
 800977c:	20c7883a 	add	r3,r4,r3
 8009780:	18800003 	ldbu	r2,0(r3)
 8009784:	14e7883a 	add	r19,r2,r19
 8009788:	84e1c83a 	sub	r16,r16,r19
 800978c:	8000671e 	bne	r16,zero,800992c <__umoddi3+0x30c>
 8009790:	3c400136 	bltu	r7,r17,8009798 <__umoddi3+0x178>
 8009794:	91812536 	bltu	r18,r6,8009c2c <__umoddi3+0x60c>
 8009798:	9185c83a 	sub	r2,r18,r6
 800979c:	89e3c83a 	sub	r17,r17,r7
 80097a0:	90a5803a 	cmpltu	r18,r18,r2
 80097a4:	8ca9c83a 	sub	r20,r17,r18
 80097a8:	a007883a 	mov	r3,r20
 80097ac:	00004306 	br	80098bc <__umoddi3+0x29c>
 80097b0:	3000041e 	bne	r6,zero,80097c4 <__umoddi3+0x1a4>
 80097b4:	01000044 	movi	r4,1
 80097b8:	000b883a 	mov	r5,zero
 80097bc:	800aa980 	call	800aa98 <__udivsi3>
 80097c0:	1021883a 	mov	r16,r2
 80097c4:	00bfffd4 	movui	r2,65535
 80097c8:	1400532e 	bgeu	r2,r16,8009918 <__umoddi3+0x2f8>
 80097cc:	00804034 	movhi	r2,256
 80097d0:	10bfffc4 	addi	r2,r2,-1
 80097d4:	14010536 	bltu	r2,r16,8009bec <__umoddi3+0x5cc>
 80097d8:	00800404 	movi	r2,16
 80097dc:	1007883a 	mov	r3,r2
 80097e0:	8084d83a 	srl	r2,r16,r2
 80097e4:	01020074 	movhi	r4,2049
 80097e8:	21372804 	addi	r4,r4,-9056
 80097ec:	05400804 	movi	r21,32
 80097f0:	2085883a 	add	r2,r4,r2
 80097f4:	10800003 	ldbu	r2,0(r2)
 80097f8:	10c7883a 	add	r3,r2,r3
 80097fc:	a8ebc83a 	sub	r21,r21,r3
 8009800:	a800b81e 	bne	r21,zero,8009ae4 <__umoddi3+0x4c4>
 8009804:	8028d43a 	srli	r20,r16,16
 8009808:	8c23c83a 	sub	r17,r17,r16
 800980c:	85bfffcc 	andi	r22,r16,65535
 8009810:	8809883a 	mov	r4,r17
 8009814:	a00b883a 	mov	r5,r20
 8009818:	800aaa00 	call	800aaa0 <__umodsi3>
 800981c:	8809883a 	mov	r4,r17
 8009820:	a00b883a 	mov	r5,r20
 8009824:	1025883a 	mov	r18,r2
 8009828:	800aa980 	call	800aa98 <__udivsi3>
 800982c:	1009883a 	mov	r4,r2
 8009830:	b00b883a 	mov	r5,r22
 8009834:	8001a0c0 	call	8001a0c <__mulsi3>
 8009838:	1009883a 	mov	r4,r2
 800983c:	9006943a 	slli	r3,r18,16
 8009840:	9804d43a 	srli	r2,r19,16
 8009844:	1886b03a 	or	r3,r3,r2
 8009848:	1900032e 	bgeu	r3,r4,8009858 <__umoddi3+0x238>
 800984c:	1c07883a 	add	r3,r3,r16
 8009850:	1c000136 	bltu	r3,r16,8009858 <__umoddi3+0x238>
 8009854:	1900f336 	bltu	r3,r4,8009c24 <__umoddi3+0x604>
 8009858:	1923c83a 	sub	r17,r3,r4
 800985c:	8809883a 	mov	r4,r17
 8009860:	a00b883a 	mov	r5,r20
 8009864:	800aaa00 	call	800aaa0 <__umodsi3>
 8009868:	102f883a 	mov	r23,r2
 800986c:	8809883a 	mov	r4,r17
 8009870:	a00b883a 	mov	r5,r20
 8009874:	b82e943a 	slli	r23,r23,16
 8009878:	800aa980 	call	800aa98 <__udivsi3>
 800987c:	1009883a 	mov	r4,r2
 8009880:	b00b883a 	mov	r5,r22
 8009884:	9cffffcc 	andi	r19,r19,65535
 8009888:	8001a0c0 	call	8001a0c <__mulsi3>
 800988c:	bce6b03a 	or	r19,r23,r19
 8009890:	9880042e 	bgeu	r19,r2,80098a4 <__umoddi3+0x284>
 8009894:	9c27883a 	add	r19,r19,r16
 8009898:	9c000236 	bltu	r19,r16,80098a4 <__umoddi3+0x284>
 800989c:	9880012e 	bgeu	r19,r2,80098a4 <__umoddi3+0x284>
 80098a0:	9c27883a 	add	r19,r19,r16
 80098a4:	9885c83a 	sub	r2,r19,r2
 80098a8:	1544d83a 	srl	r2,r2,r21
 80098ac:	0007883a 	mov	r3,zero
 80098b0:	00000206 	br	80098bc <__umoddi3+0x29c>
 80098b4:	2005883a 	mov	r2,r4
 80098b8:	2807883a 	mov	r3,r5
 80098bc:	dfc00c17 	ldw	ra,48(sp)
 80098c0:	df000b17 	ldw	fp,44(sp)
 80098c4:	ddc00a17 	ldw	r23,40(sp)
 80098c8:	dd800917 	ldw	r22,36(sp)
 80098cc:	dd400817 	ldw	r21,32(sp)
 80098d0:	dd000717 	ldw	r20,28(sp)
 80098d4:	dcc00617 	ldw	r19,24(sp)
 80098d8:	dc800517 	ldw	r18,20(sp)
 80098dc:	dc400417 	ldw	r17,16(sp)
 80098e0:	dc000317 	ldw	r16,12(sp)
 80098e4:	dec00d04 	addi	sp,sp,52
 80098e8:	f800283a 	ret
 80098ec:	00803fc4 	movi	r2,255
 80098f0:	11c0b236 	bltu	r2,r7,8009bbc <__umoddi3+0x59c>
 80098f4:	0007883a 	mov	r3,zero
 80098f8:	0027883a 	mov	r19,zero
 80098fc:	003f9b06 	br	800976c <__umoddi3+0x14c>
 8009900:	00804034 	movhi	r2,256
 8009904:	10bfffc4 	addi	r2,r2,-1
 8009908:	1180b236 	bltu	r2,r6,8009bd4 <__umoddi3+0x5b4>
 800990c:	00800404 	movi	r2,16
 8009910:	1009883a 	mov	r4,r2
 8009914:	003f5a06 	br	8009680 <__umoddi3+0x60>
 8009918:	00803fc4 	movi	r2,255
 800991c:	1400b036 	bltu	r2,r16,8009be0 <__umoddi3+0x5c0>
 8009920:	0005883a 	mov	r2,zero
 8009924:	0007883a 	mov	r3,zero
 8009928:	003fad06 	br	80097e0 <__umoddi3+0x1c0>
 800992c:	34c4d83a 	srl	r2,r6,r19
 8009930:	3c0e983a 	sll	r7,r7,r16
 8009934:	8cf8d83a 	srl	fp,r17,r19
 8009938:	8c22983a 	sll	r17,r17,r16
 800993c:	38a8b03a 	or	r20,r7,r2
 8009940:	a02ad43a 	srli	r21,r20,16
 8009944:	94c4d83a 	srl	r2,r18,r19
 8009948:	e009883a 	mov	r4,fp
 800994c:	a80b883a 	mov	r5,r21
 8009950:	342c983a 	sll	r22,r6,r16
 8009954:	88a2b03a 	or	r17,r17,r2
 8009958:	800aaa00 	call	800aaa0 <__umodsi3>
 800995c:	e009883a 	mov	r4,fp
 8009960:	a80b883a 	mov	r5,r21
 8009964:	a5ffffcc 	andi	r23,r20,65535
 8009968:	d8800215 	stw	r2,8(sp)
 800996c:	800aa980 	call	800aa98 <__udivsi3>
 8009970:	1009883a 	mov	r4,r2
 8009974:	b80b883a 	mov	r5,r23
 8009978:	1039883a 	mov	fp,r2
 800997c:	8001a0c0 	call	8001a0c <__mulsi3>
 8009980:	d8c00217 	ldw	r3,8(sp)
 8009984:	1009883a 	mov	r4,r2
 8009988:	8804d43a 	srli	r2,r17,16
 800998c:	1806943a 	slli	r3,r3,16
 8009990:	9424983a 	sll	r18,r18,r16
 8009994:	1886b03a 	or	r3,r3,r2
 8009998:	1900042e 	bgeu	r3,r4,80099ac <__umoddi3+0x38c>
 800999c:	1d07883a 	add	r3,r3,r20
 80099a0:	e0bfffc4 	addi	r2,fp,-1
 80099a4:	1d009b2e 	bgeu	r3,r20,8009c14 <__umoddi3+0x5f4>
 80099a8:	1039883a 	mov	fp,r2
 80099ac:	1907c83a 	sub	r3,r3,r4
 80099b0:	1809883a 	mov	r4,r3
 80099b4:	a80b883a 	mov	r5,r21
 80099b8:	d8c00215 	stw	r3,8(sp)
 80099bc:	800aaa00 	call	800aaa0 <__umodsi3>
 80099c0:	d8c00217 	ldw	r3,8(sp)
 80099c4:	a80b883a 	mov	r5,r21
 80099c8:	d8800015 	stw	r2,0(sp)
 80099cc:	1809883a 	mov	r4,r3
 80099d0:	800aa980 	call	800aa98 <__udivsi3>
 80099d4:	1009883a 	mov	r4,r2
 80099d8:	b80b883a 	mov	r5,r23
 80099dc:	102b883a 	mov	r21,r2
 80099e0:	8001a0c0 	call	8001a0c <__mulsi3>
 80099e4:	d9c00017 	ldw	r7,0(sp)
 80099e8:	8c7fffcc 	andi	r17,r17,65535
 80099ec:	380e943a 	slli	r7,r7,16
 80099f0:	3c4eb03a 	or	r7,r7,r17
 80099f4:	3880042e 	bgeu	r7,r2,8009a08 <__umoddi3+0x3e8>
 80099f8:	3d0f883a 	add	r7,r7,r20
 80099fc:	a8ffffc4 	addi	r3,r21,-1
 8009a00:	3d00802e 	bgeu	r7,r20,8009c04 <__umoddi3+0x5e4>
 8009a04:	182b883a 	mov	r21,r3
 8009a08:	e038943a 	slli	fp,fp,16
 8009a0c:	b010d43a 	srli	r8,r22,16
 8009a10:	b1bfffcc 	andi	r6,r22,65535
 8009a14:	af2ab03a 	or	r21,r21,fp
 8009a18:	a82ed43a 	srli	r23,r21,16
 8009a1c:	ad7fffcc 	andi	r21,r21,65535
 8009a20:	300b883a 	mov	r5,r6
 8009a24:	a809883a 	mov	r4,r21
 8009a28:	38a3c83a 	sub	r17,r7,r2
 8009a2c:	d9800115 	stw	r6,4(sp)
 8009a30:	da000015 	stw	r8,0(sp)
 8009a34:	8001a0c0 	call	8001a0c <__mulsi3>
 8009a38:	da000017 	ldw	r8,0(sp)
 8009a3c:	a809883a 	mov	r4,r21
 8009a40:	1039883a 	mov	fp,r2
 8009a44:	400b883a 	mov	r5,r8
 8009a48:	da000215 	stw	r8,8(sp)
 8009a4c:	8001a0c0 	call	8001a0c <__mulsi3>
 8009a50:	d9800117 	ldw	r6,4(sp)
 8009a54:	b809883a 	mov	r4,r23
 8009a58:	d8800015 	stw	r2,0(sp)
 8009a5c:	300b883a 	mov	r5,r6
 8009a60:	8001a0c0 	call	8001a0c <__mulsi3>
 8009a64:	d8c00217 	ldw	r3,8(sp)
 8009a68:	b809883a 	mov	r4,r23
 8009a6c:	102b883a 	mov	r21,r2
 8009a70:	180b883a 	mov	r5,r3
 8009a74:	8001a0c0 	call	8001a0c <__mulsi3>
 8009a78:	d9c00017 	ldw	r7,0(sp)
 8009a7c:	1007883a 	mov	r3,r2
 8009a80:	e004d43a 	srli	r2,fp,16
 8009a84:	a9c9883a 	add	r4,r21,r7
 8009a88:	2089883a 	add	r4,r4,r2
 8009a8c:	2540022e 	bgeu	r4,r21,8009a98 <__umoddi3+0x478>
 8009a90:	00800074 	movhi	r2,1
 8009a94:	1887883a 	add	r3,r3,r2
 8009a98:	2004d43a 	srli	r2,r4,16
 8009a9c:	2008943a 	slli	r4,r4,16
 8009aa0:	e73fffcc 	andi	fp,fp,65535
 8009aa4:	1887883a 	add	r3,r3,r2
 8009aa8:	2709883a 	add	r4,r4,fp
 8009aac:	88c03d36 	bltu	r17,r3,8009ba4 <__umoddi3+0x584>
 8009ab0:	88c06126 	beq	r17,r3,8009c38 <__umoddi3+0x618>
 8009ab4:	88c7c83a 	sub	r3,r17,r3
 8009ab8:	202d883a 	mov	r22,r4
 8009abc:	95adc83a 	sub	r22,r18,r22
 8009ac0:	95a5803a 	cmpltu	r18,r18,r22
 8009ac4:	1c87c83a 	sub	r3,r3,r18
 8009ac8:	1cc4983a 	sll	r2,r3,r19
 8009acc:	b42cd83a 	srl	r22,r22,r16
 8009ad0:	1c06d83a 	srl	r3,r3,r16
 8009ad4:	1584b03a 	or	r2,r2,r22
 8009ad8:	003f7806 	br	80098bc <__umoddi3+0x29c>
 8009adc:	002b883a 	mov	r21,zero
 8009ae0:	003ef506 	br	80096b8 <__umoddi3+0x98>
 8009ae4:	8560983a 	sll	r16,r16,r21
 8009ae8:	88e6d83a 	srl	r19,r17,r3
 8009aec:	90c6d83a 	srl	r3,r18,r3
 8009af0:	8028d43a 	srli	r20,r16,16
 8009af4:	8d62983a 	sll	r17,r17,r21
 8009af8:	9809883a 	mov	r4,r19
 8009afc:	a00b883a 	mov	r5,r20
 8009b00:	88eeb03a 	or	r23,r17,r3
 8009b04:	800aaa00 	call	800aaa0 <__umodsi3>
 8009b08:	9809883a 	mov	r4,r19
 8009b0c:	a00b883a 	mov	r5,r20
 8009b10:	1023883a 	mov	r17,r2
 8009b14:	85bfffcc 	andi	r22,r16,65535
 8009b18:	800aa980 	call	800aa98 <__udivsi3>
 8009b1c:	1009883a 	mov	r4,r2
 8009b20:	b00b883a 	mov	r5,r22
 8009b24:	8001a0c0 	call	8001a0c <__mulsi3>
 8009b28:	1007883a 	mov	r3,r2
 8009b2c:	8808943a 	slli	r4,r17,16
 8009b30:	b804d43a 	srli	r2,r23,16
 8009b34:	9566983a 	sll	r19,r18,r21
 8009b38:	2088b03a 	or	r4,r4,r2
 8009b3c:	20c0042e 	bgeu	r4,r3,8009b50 <__umoddi3+0x530>
 8009b40:	2409883a 	add	r4,r4,r16
 8009b44:	24000236 	bltu	r4,r16,8009b50 <__umoddi3+0x530>
 8009b48:	20c0012e 	bgeu	r4,r3,8009b50 <__umoddi3+0x530>
 8009b4c:	2409883a 	add	r4,r4,r16
 8009b50:	20e5c83a 	sub	r18,r4,r3
 8009b54:	9009883a 	mov	r4,r18
 8009b58:	a00b883a 	mov	r5,r20
 8009b5c:	800aaa00 	call	800aaa0 <__umodsi3>
 8009b60:	1023883a 	mov	r17,r2
 8009b64:	9009883a 	mov	r4,r18
 8009b68:	a00b883a 	mov	r5,r20
 8009b6c:	8822943a 	slli	r17,r17,16
 8009b70:	800aa980 	call	800aa98 <__udivsi3>
 8009b74:	1009883a 	mov	r4,r2
 8009b78:	b00b883a 	mov	r5,r22
 8009b7c:	bdffffcc 	andi	r23,r23,65535
 8009b80:	8001a0c0 	call	8001a0c <__mulsi3>
 8009b84:	8de2b03a 	or	r17,r17,r23
 8009b88:	8880042e 	bgeu	r17,r2,8009b9c <__umoddi3+0x57c>
 8009b8c:	8c23883a 	add	r17,r17,r16
 8009b90:	8c000236 	bltu	r17,r16,8009b9c <__umoddi3+0x57c>
 8009b94:	8880012e 	bgeu	r17,r2,8009b9c <__umoddi3+0x57c>
 8009b98:	8c23883a 	add	r17,r17,r16
 8009b9c:	88a3c83a 	sub	r17,r17,r2
 8009ba0:	003f1b06 	br	8009810 <__umoddi3+0x1f0>
 8009ba4:	25adc83a 	sub	r22,r4,r22
 8009ba8:	1d07c83a 	sub	r3,r3,r20
 8009bac:	2589803a 	cmpltu	r4,r4,r22
 8009bb0:	1907c83a 	sub	r3,r3,r4
 8009bb4:	88c7c83a 	sub	r3,r17,r3
 8009bb8:	003fc006 	br	8009abc <__umoddi3+0x49c>
 8009bbc:	00c00204 	movi	r3,8
 8009bc0:	1827883a 	mov	r19,r3
 8009bc4:	003ee906 	br	800976c <__umoddi3+0x14c>
 8009bc8:	00c00604 	movi	r3,24
 8009bcc:	1827883a 	mov	r19,r3
 8009bd0:	003ee606 	br	800976c <__umoddi3+0x14c>
 8009bd4:	00800604 	movi	r2,24
 8009bd8:	1009883a 	mov	r4,r2
 8009bdc:	003ea806 	br	8009680 <__umoddi3+0x60>
 8009be0:	00800204 	movi	r2,8
 8009be4:	1007883a 	mov	r3,r2
 8009be8:	003efd06 	br	80097e0 <__umoddi3+0x1c0>
 8009bec:	00800604 	movi	r2,24
 8009bf0:	1007883a 	mov	r3,r2
 8009bf4:	003efa06 	br	80097e0 <__umoddi3+0x1c0>
 8009bf8:	00800204 	movi	r2,8
 8009bfc:	1009883a 	mov	r4,r2
 8009c00:	003e9f06 	br	8009680 <__umoddi3+0x60>
 8009c04:	38bf7f2e 	bgeu	r7,r2,8009a04 <__umoddi3+0x3e4>
 8009c08:	ad7fff84 	addi	r21,r21,-2
 8009c0c:	3d0f883a 	add	r7,r7,r20
 8009c10:	003f7d06 	br	8009a08 <__umoddi3+0x3e8>
 8009c14:	193f642e 	bgeu	r3,r4,80099a8 <__umoddi3+0x388>
 8009c18:	e73fff84 	addi	fp,fp,-2
 8009c1c:	1d07883a 	add	r3,r3,r20
 8009c20:	003f6206 	br	80099ac <__umoddi3+0x38c>
 8009c24:	1c07883a 	add	r3,r3,r16
 8009c28:	003f0b06 	br	8009858 <__umoddi3+0x238>
 8009c2c:	9005883a 	mov	r2,r18
 8009c30:	a007883a 	mov	r3,r20
 8009c34:	003f2106 	br	80098bc <__umoddi3+0x29c>
 8009c38:	913fda36 	bltu	r18,r4,8009ba4 <__umoddi3+0x584>
 8009c3c:	202d883a 	mov	r22,r4
 8009c40:	0007883a 	mov	r3,zero
 8009c44:	003f9d06 	br	8009abc <__umoddi3+0x49c>

08009c48 <_fpadd_parts>:
 8009c48:	2005883a 	mov	r2,r4
 8009c4c:	21000017 	ldw	r4,0(r4)
 8009c50:	01c00044 	movi	r7,1
 8009c54:	3900622e 	bgeu	r7,r4,8009de0 <_fpadd_parts+0x198>
 8009c58:	28c00017 	ldw	r3,0(r5)
 8009c5c:	38c05f2e 	bgeu	r7,r3,8009ddc <_fpadd_parts+0x194>
 8009c60:	01c00104 	movi	r7,4
 8009c64:	21c0c626 	beq	r4,r7,8009f80 <_fpadd_parts+0x338>
 8009c68:	19c05c26 	beq	r3,r7,8009ddc <_fpadd_parts+0x194>
 8009c6c:	01c00084 	movi	r7,2
 8009c70:	19c06b26 	beq	r3,r7,8009e20 <_fpadd_parts+0x1d8>
 8009c74:	21c05926 	beq	r4,r7,8009ddc <_fpadd_parts+0x194>
 8009c78:	11c00217 	ldw	r7,8(r2)
 8009c7c:	2ac00217 	ldw	r11,8(r5)
 8009c80:	13000317 	ldw	r12,12(r2)
 8009c84:	13400417 	ldw	r13,16(r2)
 8009c88:	3ac9c83a 	sub	r4,r7,r11
 8009c8c:	2a000317 	ldw	r8,12(r5)
 8009c90:	2a400417 	ldw	r9,16(r5)
 8009c94:	2015883a 	mov	r10,r4
 8009c98:	20007516 	blt	r4,zero,8009e70 <_fpadd_parts+0x228>
 8009c9c:	00c00fc4 	movi	r3,63
 8009ca0:	1a805016 	blt	r3,r10,8009de4 <_fpadd_parts+0x19c>
 8009ca4:	0100870e 	bge	zero,r4,8009ec4 <_fpadd_parts+0x27c>
 8009ca8:	50fff804 	addi	r3,r10,-32
 8009cac:	18009916 	blt	r3,zero,8009f14 <_fpadd_parts+0x2cc>
 8009cb0:	48d6d83a 	srl	r11,r9,r3
 8009cb4:	001d883a 	mov	r14,zero
 8009cb8:	18009e16 	blt	r3,zero,8009f34 <_fpadd_parts+0x2ec>
 8009cbc:	01000044 	movi	r4,1
 8009cc0:	20c6983a 	sll	r3,r4,r3
 8009cc4:	0015883a 	mov	r10,zero
 8009cc8:	513fffc4 	addi	r4,r10,-1
 8009ccc:	2295403a 	cmpgeu	r10,r4,r10
 8009cd0:	1a87c83a 	sub	r3,r3,r10
 8009cd4:	1a52703a 	and	r9,r3,r9
 8009cd8:	2210703a 	and	r8,r4,r8
 8009cdc:	4250b03a 	or	r8,r8,r9
 8009ce0:	4010c03a 	cmpne	r8,r8,zero
 8009ce4:	42d0b03a 	or	r8,r8,r11
 8009ce8:	7013883a 	mov	r9,r14
 8009cec:	11000117 	ldw	r4,4(r2)
 8009cf0:	28800117 	ldw	r2,4(r5)
 8009cf4:	20804126 	beq	r4,r2,8009dfc <_fpadd_parts+0x1b4>
 8009cf8:	20006326 	beq	r4,zero,8009e88 <_fpadd_parts+0x240>
 8009cfc:	4305c83a 	sub	r2,r8,r12
 8009d00:	4091803a 	cmpltu	r8,r8,r2
 8009d04:	4b47c83a 	sub	r3,r9,r13
 8009d08:	1a07c83a 	sub	r3,r3,r8
 8009d0c:	18006316 	blt	r3,zero,8009e9c <_fpadd_parts+0x254>
 8009d10:	30000115 	stw	zero,4(r6)
 8009d14:	31c00215 	stw	r7,8(r6)
 8009d18:	30800315 	stw	r2,12(r6)
 8009d1c:	30c00415 	stw	r3,16(r6)
 8009d20:	11ffffc4 	addi	r7,r2,-1
 8009d24:	388b403a 	cmpgeu	r5,r7,r2
 8009d28:	194bc83a 	sub	r5,r3,r5
 8009d2c:	01040034 	movhi	r4,4096
 8009d30:	213fffc4 	addi	r4,r4,-1
 8009d34:	21401736 	bltu	r4,r5,8009d94 <_fpadd_parts+0x14c>
 8009d38:	29008226 	beq	r5,r4,8009f44 <_fpadd_parts+0x2fc>
 8009d3c:	31400217 	ldw	r5,8(r6)
 8009d40:	02840034 	movhi	r10,4096
 8009d44:	52bfffc4 	addi	r10,r10,-1
 8009d48:	033fff84 	movi	r12,-2
 8009d4c:	297fffc4 	addi	r5,r5,-1
 8009d50:	00000106 	br	8009d58 <_fpadd_parts+0x110>
 8009d54:	3a804a26 	beq	r7,r10,8009e80 <_fpadd_parts+0x238>
 8009d58:	1089883a 	add	r4,r2,r2
 8009d5c:	2091803a 	cmpltu	r8,r4,r2
 8009d60:	18c7883a 	add	r3,r3,r3
 8009d64:	227fffc4 	addi	r9,r4,-1
 8009d68:	40d1883a 	add	r8,r8,r3
 8009d6c:	490f403a 	cmpgeu	r7,r9,r4
 8009d70:	41cfc83a 	sub	r7,r8,r7
 8009d74:	2817883a 	mov	r11,r5
 8009d78:	2005883a 	mov	r2,r4
 8009d7c:	4007883a 	mov	r3,r8
 8009d80:	297fffc4 	addi	r5,r5,-1
 8009d84:	51fff32e 	bgeu	r10,r7,8009d54 <_fpadd_parts+0x10c>
 8009d88:	31000315 	stw	r4,12(r6)
 8009d8c:	32000415 	stw	r8,16(r6)
 8009d90:	32c00215 	stw	r11,8(r6)
 8009d94:	010000c4 	movi	r4,3
 8009d98:	31000015 	stw	r4,0(r6)
 8009d9c:	01080034 	movhi	r4,8192
 8009da0:	213fffc4 	addi	r4,r4,-1
 8009da4:	20c00b2e 	bgeu	r4,r3,8009dd4 <_fpadd_parts+0x18c>
 8009da8:	180e97fa 	slli	r7,r3,31
 8009dac:	1008d07a 	srli	r4,r2,1
 8009db0:	31400217 	ldw	r5,8(r6)
 8009db4:	1806d07a 	srli	r3,r3,1
 8009db8:	1080004c 	andi	r2,r2,1
 8009dbc:	3908b03a 	or	r4,r7,r4
 8009dc0:	1108b03a 	or	r4,r2,r4
 8009dc4:	29400044 	addi	r5,r5,1
 8009dc8:	31000315 	stw	r4,12(r6)
 8009dcc:	30c00415 	stw	r3,16(r6)
 8009dd0:	31400215 	stw	r5,8(r6)
 8009dd4:	3005883a 	mov	r2,r6
 8009dd8:	f800283a 	ret
 8009ddc:	2805883a 	mov	r2,r5
 8009de0:	f800283a 	ret
 8009de4:	59c01e0e 	bge	r11,r7,8009e60 <_fpadd_parts+0x218>
 8009de8:	11000117 	ldw	r4,4(r2)
 8009dec:	28800117 	ldw	r2,4(r5)
 8009df0:	0011883a 	mov	r8,zero
 8009df4:	0013883a 	mov	r9,zero
 8009df8:	20bfbf1e 	bne	r4,r2,8009cf8 <_fpadd_parts+0xb0>
 8009dfc:	4305883a 	add	r2,r8,r12
 8009e00:	1207803a 	cmpltu	r3,r2,r8
 8009e04:	4b53883a 	add	r9,r9,r13
 8009e08:	1a47883a 	add	r3,r3,r9
 8009e0c:	31000115 	stw	r4,4(r6)
 8009e10:	31c00215 	stw	r7,8(r6)
 8009e14:	30800315 	stw	r2,12(r6)
 8009e18:	30c00415 	stw	r3,16(r6)
 8009e1c:	003fdd06 	br	8009d94 <_fpadd_parts+0x14c>
 8009e20:	20ffef1e 	bne	r4,r3,8009de0 <_fpadd_parts+0x198>
 8009e24:	31000015 	stw	r4,0(r6)
 8009e28:	10c00117 	ldw	r3,4(r2)
 8009e2c:	30c00115 	stw	r3,4(r6)
 8009e30:	10c00217 	ldw	r3,8(r2)
 8009e34:	11000117 	ldw	r4,4(r2)
 8009e38:	29400117 	ldw	r5,4(r5)
 8009e3c:	30c00215 	stw	r3,8(r6)
 8009e40:	10c00317 	ldw	r3,12(r2)
 8009e44:	2908703a 	and	r4,r5,r4
 8009e48:	30c00315 	stw	r3,12(r6)
 8009e4c:	10c00417 	ldw	r3,16(r2)
 8009e50:	31000115 	stw	r4,4(r6)
 8009e54:	3005883a 	mov	r2,r6
 8009e58:	30c00415 	stw	r3,16(r6)
 8009e5c:	f800283a 	ret
 8009e60:	580f883a 	mov	r7,r11
 8009e64:	0019883a 	mov	r12,zero
 8009e68:	001b883a 	mov	r13,zero
 8009e6c:	003f9f06 	br	8009cec <_fpadd_parts+0xa4>
 8009e70:	0115c83a 	sub	r10,zero,r4
 8009e74:	00c00fc4 	movi	r3,63
 8009e78:	1abfda16 	blt	r3,r10,8009de4 <_fpadd_parts+0x19c>
 8009e7c:	003f8906 	br	8009ca4 <_fpadd_parts+0x5c>
 8009e80:	627fb52e 	bgeu	r12,r9,8009d58 <_fpadd_parts+0x110>
 8009e84:	003fc006 	br	8009d88 <_fpadd_parts+0x140>
 8009e88:	6205c83a 	sub	r2,r12,r8
 8009e8c:	6099803a 	cmpltu	r12,r12,r2
 8009e90:	6a47c83a 	sub	r3,r13,r9
 8009e94:	1b07c83a 	sub	r3,r3,r12
 8009e98:	183f9d0e 	bge	r3,zero,8009d10 <_fpadd_parts+0xc8>
 8009e9c:	0085c83a 	sub	r2,zero,r2
 8009ea0:	1008c03a 	cmpne	r4,r2,zero
 8009ea4:	00c7c83a 	sub	r3,zero,r3
 8009ea8:	1907c83a 	sub	r3,r3,r4
 8009eac:	01000044 	movi	r4,1
 8009eb0:	31000115 	stw	r4,4(r6)
 8009eb4:	31c00215 	stw	r7,8(r6)
 8009eb8:	30800315 	stw	r2,12(r6)
 8009ebc:	30c00415 	stw	r3,16(r6)
 8009ec0:	003f9706 	br	8009d20 <_fpadd_parts+0xd8>
 8009ec4:	203f8926 	beq	r4,zero,8009cec <_fpadd_parts+0xa4>
 8009ec8:	50fff804 	addi	r3,r10,-32
 8009ecc:	3a8f883a 	add	r7,r7,r10
 8009ed0:	18002316 	blt	r3,zero,8009f60 <_fpadd_parts+0x318>
 8009ed4:	68d6d83a 	srl	r11,r13,r3
 8009ed8:	001d883a 	mov	r14,zero
 8009edc:	18001c16 	blt	r3,zero,8009f50 <_fpadd_parts+0x308>
 8009ee0:	01000044 	movi	r4,1
 8009ee4:	20c6983a 	sll	r3,r4,r3
 8009ee8:	0015883a 	mov	r10,zero
 8009eec:	513fffc4 	addi	r4,r10,-1
 8009ef0:	2295403a 	cmpgeu	r10,r4,r10
 8009ef4:	1a87c83a 	sub	r3,r3,r10
 8009ef8:	1b5a703a 	and	r13,r3,r13
 8009efc:	2318703a 	and	r12,r4,r12
 8009f00:	6358b03a 	or	r12,r12,r13
 8009f04:	6018c03a 	cmpne	r12,r12,zero
 8009f08:	62d8b03a 	or	r12,r12,r11
 8009f0c:	701b883a 	mov	r13,r14
 8009f10:	003f7606 	br	8009cec <_fpadd_parts+0xa4>
 8009f14:	4808907a 	slli	r4,r9,1
 8009f18:	02c007c4 	movi	r11,31
 8009f1c:	5a97c83a 	sub	r11,r11,r10
 8009f20:	22c8983a 	sll	r4,r4,r11
 8009f24:	4296d83a 	srl	r11,r8,r10
 8009f28:	4a9cd83a 	srl	r14,r9,r10
 8009f2c:	22d6b03a 	or	r11,r4,r11
 8009f30:	003f6106 	br	8009cb8 <_fpadd_parts+0x70>
 8009f34:	00c00044 	movi	r3,1
 8009f38:	1a94983a 	sll	r10,r3,r10
 8009f3c:	0007883a 	mov	r3,zero
 8009f40:	003f6106 	br	8009cc8 <_fpadd_parts+0x80>
 8009f44:	013fff84 	movi	r4,-2
 8009f48:	21ff7c2e 	bgeu	r4,r7,8009d3c <_fpadd_parts+0xf4>
 8009f4c:	003f9106 	br	8009d94 <_fpadd_parts+0x14c>
 8009f50:	00c00044 	movi	r3,1
 8009f54:	1a94983a 	sll	r10,r3,r10
 8009f58:	0007883a 	mov	r3,zero
 8009f5c:	003fe306 	br	8009eec <_fpadd_parts+0x2a4>
 8009f60:	6816907a 	slli	r11,r13,1
 8009f64:	010007c4 	movi	r4,31
 8009f68:	2289c83a 	sub	r4,r4,r10
 8009f6c:	5908983a 	sll	r4,r11,r4
 8009f70:	6296d83a 	srl	r11,r12,r10
 8009f74:	6a9cd83a 	srl	r14,r13,r10
 8009f78:	22d6b03a 	or	r11,r4,r11
 8009f7c:	003fd706 	br	8009edc <_fpadd_parts+0x294>
 8009f80:	193f971e 	bne	r3,r4,8009de0 <_fpadd_parts+0x198>
 8009f84:	11000117 	ldw	r4,4(r2)
 8009f88:	28c00117 	ldw	r3,4(r5)
 8009f8c:	20ff9426 	beq	r4,r3,8009de0 <_fpadd_parts+0x198>
 8009f90:	00820074 	movhi	r2,2049
 8009f94:	10b72304 	addi	r2,r2,-9076
 8009f98:	f800283a 	ret

08009f9c <__adddf3>:
 8009f9c:	deffec04 	addi	sp,sp,-80
 8009fa0:	d9001115 	stw	r4,68(sp)
 8009fa4:	d9401215 	stw	r5,72(sp)
 8009fa8:	d9001104 	addi	r4,sp,68
 8009fac:	d9400a04 	addi	r5,sp,40
 8009fb0:	dfc01315 	stw	ra,76(sp)
 8009fb4:	d9c01015 	stw	r7,64(sp)
 8009fb8:	d9800f15 	stw	r6,60(sp)
 8009fbc:	800ae880 	call	800ae88 <__unpack_d>
 8009fc0:	d9000f04 	addi	r4,sp,60
 8009fc4:	d9400504 	addi	r5,sp,20
 8009fc8:	800ae880 	call	800ae88 <__unpack_d>
 8009fcc:	d9000a04 	addi	r4,sp,40
 8009fd0:	d9400504 	addi	r5,sp,20
 8009fd4:	d80d883a 	mov	r6,sp
 8009fd8:	8009c480 	call	8009c48 <_fpadd_parts>
 8009fdc:	1009883a 	mov	r4,r2
 8009fe0:	800ac640 	call	800ac64 <__pack_d>
 8009fe4:	dfc01317 	ldw	ra,76(sp)
 8009fe8:	dec01404 	addi	sp,sp,80
 8009fec:	f800283a 	ret

08009ff0 <__subdf3>:
 8009ff0:	deffec04 	addi	sp,sp,-80
 8009ff4:	d9001115 	stw	r4,68(sp)
 8009ff8:	d9401215 	stw	r5,72(sp)
 8009ffc:	d9001104 	addi	r4,sp,68
 800a000:	d9400a04 	addi	r5,sp,40
 800a004:	dfc01315 	stw	ra,76(sp)
 800a008:	d9c01015 	stw	r7,64(sp)
 800a00c:	d9800f15 	stw	r6,60(sp)
 800a010:	800ae880 	call	800ae88 <__unpack_d>
 800a014:	d9000f04 	addi	r4,sp,60
 800a018:	d9400504 	addi	r5,sp,20
 800a01c:	800ae880 	call	800ae88 <__unpack_d>
 800a020:	d8800617 	ldw	r2,24(sp)
 800a024:	d9000a04 	addi	r4,sp,40
 800a028:	d9400504 	addi	r5,sp,20
 800a02c:	d80d883a 	mov	r6,sp
 800a030:	1080005c 	xori	r2,r2,1
 800a034:	d8800615 	stw	r2,24(sp)
 800a038:	8009c480 	call	8009c48 <_fpadd_parts>
 800a03c:	1009883a 	mov	r4,r2
 800a040:	800ac640 	call	800ac64 <__pack_d>
 800a044:	dfc01317 	ldw	ra,76(sp)
 800a048:	dec01404 	addi	sp,sp,80
 800a04c:	f800283a 	ret

0800a050 <__muldf3>:
 800a050:	deffe404 	addi	sp,sp,-112
 800a054:	d9001115 	stw	r4,68(sp)
 800a058:	d9401215 	stw	r5,72(sp)
 800a05c:	d9001104 	addi	r4,sp,68
 800a060:	d9400a04 	addi	r5,sp,40
 800a064:	dfc01b15 	stw	ra,108(sp)
 800a068:	d9800f15 	stw	r6,60(sp)
 800a06c:	d9c01015 	stw	r7,64(sp)
 800a070:	ddc01a15 	stw	r23,104(sp)
 800a074:	dd801915 	stw	r22,100(sp)
 800a078:	dd401815 	stw	r21,96(sp)
 800a07c:	dd001715 	stw	r20,92(sp)
 800a080:	dcc01615 	stw	r19,88(sp)
 800a084:	dc801515 	stw	r18,84(sp)
 800a088:	dc401415 	stw	r17,80(sp)
 800a08c:	dc001315 	stw	r16,76(sp)
 800a090:	800ae880 	call	800ae88 <__unpack_d>
 800a094:	d9000f04 	addi	r4,sp,60
 800a098:	d9400504 	addi	r5,sp,20
 800a09c:	800ae880 	call	800ae88 <__unpack_d>
 800a0a0:	d8c00a17 	ldw	r3,40(sp)
 800a0a4:	00800044 	movi	r2,1
 800a0a8:	10c01136 	bltu	r2,r3,800a0f0 <__muldf3+0xa0>
 800a0ac:	d8c00b17 	ldw	r3,44(sp)
 800a0b0:	d8800617 	ldw	r2,24(sp)
 800a0b4:	d9000a04 	addi	r4,sp,40
 800a0b8:	1884c03a 	cmpne	r2,r3,r2
 800a0bc:	d8800b15 	stw	r2,44(sp)
 800a0c0:	800ac640 	call	800ac64 <__pack_d>
 800a0c4:	dfc01b17 	ldw	ra,108(sp)
 800a0c8:	ddc01a17 	ldw	r23,104(sp)
 800a0cc:	dd801917 	ldw	r22,100(sp)
 800a0d0:	dd401817 	ldw	r21,96(sp)
 800a0d4:	dd001717 	ldw	r20,92(sp)
 800a0d8:	dcc01617 	ldw	r19,88(sp)
 800a0dc:	dc801517 	ldw	r18,84(sp)
 800a0e0:	dc401417 	ldw	r17,80(sp)
 800a0e4:	dc001317 	ldw	r16,76(sp)
 800a0e8:	dec01c04 	addi	sp,sp,112
 800a0ec:	f800283a 	ret
 800a0f0:	d9000517 	ldw	r4,20(sp)
 800a0f4:	11000636 	bltu	r2,r4,800a110 <__muldf3+0xc0>
 800a0f8:	d8800617 	ldw	r2,24(sp)
 800a0fc:	d8c00b17 	ldw	r3,44(sp)
 800a100:	d9000504 	addi	r4,sp,20
 800a104:	1884c03a 	cmpne	r2,r3,r2
 800a108:	d8800615 	stw	r2,24(sp)
 800a10c:	003fec06 	br	800a0c0 <__muldf3+0x70>
 800a110:	00800104 	movi	r2,4
 800a114:	1880051e 	bne	r3,r2,800a12c <__muldf3+0xdc>
 800a118:	00800084 	movi	r2,2
 800a11c:	20bfe31e 	bne	r4,r2,800a0ac <__muldf3+0x5c>
 800a120:	01020074 	movhi	r4,2049
 800a124:	21372304 	addi	r4,r4,-9076
 800a128:	003fe506 	br	800a0c0 <__muldf3+0x70>
 800a12c:	2080031e 	bne	r4,r2,800a13c <__muldf3+0xec>
 800a130:	00800084 	movi	r2,2
 800a134:	18bffa26 	beq	r3,r2,800a120 <__muldf3+0xd0>
 800a138:	003fef06 	br	800a0f8 <__muldf3+0xa8>
 800a13c:	00800084 	movi	r2,2
 800a140:	18bfda26 	beq	r3,r2,800a0ac <__muldf3+0x5c>
 800a144:	20bfec26 	beq	r4,r2,800a0f8 <__muldf3+0xa8>
 800a148:	dc000d17 	ldw	r16,52(sp)
 800a14c:	dd000817 	ldw	r20,32(sp)
 800a150:	dc800917 	ldw	r18,36(sp)
 800a154:	8009883a 	mov	r4,r16
 800a158:	000b883a 	mov	r5,zero
 800a15c:	a00d883a 	mov	r6,r20
 800a160:	000f883a 	mov	r7,zero
 800a164:	800aaa80 	call	800aaa8 <__muldi3>
 800a168:	dc400e17 	ldw	r17,56(sp)
 800a16c:	9009883a 	mov	r4,r18
 800a170:	800d883a 	mov	r6,r16
 800a174:	000b883a 	mov	r5,zero
 800a178:	000f883a 	mov	r7,zero
 800a17c:	102f883a 	mov	r23,r2
 800a180:	1827883a 	mov	r19,r3
 800a184:	800aaa80 	call	800aaa8 <__muldi3>
 800a188:	900d883a 	mov	r6,r18
 800a18c:	8809883a 	mov	r4,r17
 800a190:	000b883a 	mov	r5,zero
 800a194:	000f883a 	mov	r7,zero
 800a198:	102b883a 	mov	r21,r2
 800a19c:	1821883a 	mov	r16,r3
 800a1a0:	800aaa80 	call	800aaa8 <__muldi3>
 800a1a4:	8809883a 	mov	r4,r17
 800a1a8:	000b883a 	mov	r5,zero
 800a1ac:	a00d883a 	mov	r6,r20
 800a1b0:	000f883a 	mov	r7,zero
 800a1b4:	102d883a 	mov	r22,r2
 800a1b8:	1825883a 	mov	r18,r3
 800a1bc:	800aaa80 	call	800aaa8 <__muldi3>
 800a1c0:	154b883a 	add	r5,r2,r21
 800a1c4:	2889803a 	cmpltu	r4,r5,r2
 800a1c8:	1c07883a 	add	r3,r3,r16
 800a1cc:	20c9883a 	add	r4,r4,r3
 800a1d0:	24004b36 	bltu	r4,r16,800a300 <__muldf3+0x2b0>
 800a1d4:	8100011e 	bne	r16,r4,800a1dc <__muldf3+0x18c>
 800a1d8:	2d404936 	bltu	r5,r21,800a300 <__muldf3+0x2b0>
 800a1dc:	0011883a 	mov	r8,zero
 800a1e0:	0007883a 	mov	r3,zero
 800a1e4:	2ccb883a 	add	r5,r5,r19
 800a1e8:	b80d883a 	mov	r6,r23
 800a1ec:	2cc0012e 	bgeu	r5,r19,800a1f4 <__muldf3+0x1a4>
 800a1f0:	02000044 	movi	r8,1
 800a1f4:	258f883a 	add	r7,r4,r22
 800a1f8:	3909803a 	cmpltu	r4,r7,r4
 800a1fc:	da400c17 	ldw	r9,48(sp)
 800a200:	2489883a 	add	r4,r4,r18
 800a204:	d8800717 	ldw	r2,28(sp)
 800a208:	20c9883a 	add	r4,r4,r3
 800a20c:	da800b17 	ldw	r10,44(sp)
 800a210:	d8c00617 	ldw	r3,24(sp)
 800a214:	3a11883a 	add	r8,r7,r8
 800a218:	4885883a 	add	r2,r9,r2
 800a21c:	50c6c03a 	cmpne	r3,r10,r3
 800a220:	41cf803a 	cmpltu	r7,r8,r7
 800a224:	12400104 	addi	r9,r2,4
 800a228:	d8c00115 	stw	r3,4(sp)
 800a22c:	3909883a 	add	r4,r7,r4
 800a230:	da400215 	stw	r9,8(sp)
 800a234:	03480034 	movhi	r13,8192
 800a238:	6b7fffc4 	addi	r13,r13,-1
 800a23c:	4007883a 	mov	r3,r8
 800a240:	6900102e 	bgeu	r13,r4,800a284 <__muldf3+0x234>
 800a244:	10800144 	addi	r2,r2,5
 800a248:	180ed07a 	srli	r7,r3,1
 800a24c:	18c0004c 	andi	r3,r3,1
 800a250:	201097fa 	slli	r8,r4,31
 800a254:	281697fa 	slli	r11,r5,31
 800a258:	2008d07a 	srli	r4,r4,1
 800a25c:	3014d07a 	srli	r10,r6,1
 800a260:	2812d07a 	srli	r9,r5,1
 800a264:	1019883a 	mov	r12,r2
 800a268:	18000226 	beq	r3,zero,800a274 <__muldf3+0x224>
 800a26c:	5a8cb03a 	or	r6,r11,r10
 800a270:	49600034 	orhi	r5,r9,32768
 800a274:	41c6b03a 	or	r3,r8,r7
 800a278:	10800044 	addi	r2,r2,1
 800a27c:	693ff236 	bltu	r13,r4,800a248 <__muldf3+0x1f8>
 800a280:	db000215 	stw	r12,8(sp)
 800a284:	03440034 	movhi	r13,4096
 800a288:	6b7fffc4 	addi	r13,r13,-1
 800a28c:	69001336 	bltu	r13,r4,800a2dc <__muldf3+0x28c>
 800a290:	d8800217 	ldw	r2,8(sp)
 800a294:	10bfffc4 	addi	r2,r2,-1
 800a298:	18d3883a 	add	r9,r3,r3
 800a29c:	48c7803a 	cmpltu	r3,r9,r3
 800a2a0:	2109883a 	add	r4,r4,r4
 800a2a4:	190f883a 	add	r7,r3,r4
 800a2a8:	3191883a 	add	r8,r6,r6
 800a2ac:	4197803a 	cmpltu	r11,r8,r6
 800a2b0:	2955883a 	add	r10,r5,r5
 800a2b4:	1019883a 	mov	r12,r2
 800a2b8:	4807883a 	mov	r3,r9
 800a2bc:	3809883a 	mov	r4,r7
 800a2c0:	2800010e 	bge	r5,zero,800a2c8 <__muldf3+0x278>
 800a2c4:	48c00054 	ori	r3,r9,1
 800a2c8:	400d883a 	mov	r6,r8
 800a2cc:	5a8b883a 	add	r5,r11,r10
 800a2d0:	10bfffc4 	addi	r2,r2,-1
 800a2d4:	69fff02e 	bgeu	r13,r7,800a298 <__muldf3+0x248>
 800a2d8:	db000215 	stw	r12,8(sp)
 800a2dc:	18803fcc 	andi	r2,r3,255
 800a2e0:	01c02004 	movi	r7,128
 800a2e4:	11c00926 	beq	r2,r7,800a30c <__muldf3+0x2bc>
 800a2e8:	008000c4 	movi	r2,3
 800a2ec:	d9000415 	stw	r4,16(sp)
 800a2f0:	d8c00315 	stw	r3,12(sp)
 800a2f4:	d8800015 	stw	r2,0(sp)
 800a2f8:	d809883a 	mov	r4,sp
 800a2fc:	003f7006 	br	800a0c0 <__muldf3+0x70>
 800a300:	0011883a 	mov	r8,zero
 800a304:	00c00044 	movi	r3,1
 800a308:	003fb606 	br	800a1e4 <__muldf3+0x194>
 800a30c:	19c0400c 	andi	r7,r3,256
 800a310:	383ff51e 	bne	r7,zero,800a2e8 <__muldf3+0x298>
 800a314:	314ab03a 	or	r5,r6,r5
 800a318:	283ff326 	beq	r5,zero,800a2e8 <__muldf3+0x298>
 800a31c:	1885883a 	add	r2,r3,r2
 800a320:	10cb803a 	cmpltu	r5,r2,r3
 800a324:	00ffc004 	movi	r3,-256
 800a328:	10c6703a 	and	r3,r2,r3
 800a32c:	2909883a 	add	r4,r5,r4
 800a330:	003fed06 	br	800a2e8 <__muldf3+0x298>

0800a334 <__divdf3>:
 800a334:	defff104 	addi	sp,sp,-60
 800a338:	d9000c15 	stw	r4,48(sp)
 800a33c:	d9400d15 	stw	r5,52(sp)
 800a340:	d9000c04 	addi	r4,sp,48
 800a344:	d9400504 	addi	r5,sp,20
 800a348:	dfc00e15 	stw	ra,56(sp)
 800a34c:	d9800a15 	stw	r6,40(sp)
 800a350:	d9c00b15 	stw	r7,44(sp)
 800a354:	800ae880 	call	800ae88 <__unpack_d>
 800a358:	d9000a04 	addi	r4,sp,40
 800a35c:	d80b883a 	mov	r5,sp
 800a360:	800ae880 	call	800ae88 <__unpack_d>
 800a364:	d8c00517 	ldw	r3,20(sp)
 800a368:	00800044 	movi	r2,1
 800a36c:	10c00536 	bltu	r2,r3,800a384 <__divdf3+0x50>
 800a370:	d9000504 	addi	r4,sp,20
 800a374:	800ac640 	call	800ac64 <__pack_d>
 800a378:	dfc00e17 	ldw	ra,56(sp)
 800a37c:	dec00f04 	addi	sp,sp,60
 800a380:	f800283a 	ret
 800a384:	d9000017 	ldw	r4,0(sp)
 800a388:	11000536 	bltu	r2,r4,800a3a0 <__divdf3+0x6c>
 800a38c:	d809883a 	mov	r4,sp
 800a390:	800ac640 	call	800ac64 <__pack_d>
 800a394:	dfc00e17 	ldw	ra,56(sp)
 800a398:	dec00f04 	addi	sp,sp,60
 800a39c:	f800283a 	ret
 800a3a0:	d9800617 	ldw	r6,24(sp)
 800a3a4:	d9400117 	ldw	r5,4(sp)
 800a3a8:	00800104 	movi	r2,4
 800a3ac:	314af03a 	xor	r5,r6,r5
 800a3b0:	d9400615 	stw	r5,24(sp)
 800a3b4:	18800226 	beq	r3,r2,800a3c0 <__divdf3+0x8c>
 800a3b8:	01400084 	movi	r5,2
 800a3bc:	1940041e 	bne	r3,r5,800a3d0 <__divdf3+0x9c>
 800a3c0:	193feb1e 	bne	r3,r4,800a370 <__divdf3+0x3c>
 800a3c4:	01020074 	movhi	r4,2049
 800a3c8:	21372304 	addi	r4,r4,-9076
 800a3cc:	003fe906 	br	800a374 <__divdf3+0x40>
 800a3d0:	20803326 	beq	r4,r2,800a4a0 <__divdf3+0x16c>
 800a3d4:	21403726 	beq	r4,r5,800a4b4 <__divdf3+0x180>
 800a3d8:	d8800217 	ldw	r2,8(sp)
 800a3dc:	d9000717 	ldw	r4,28(sp)
 800a3e0:	d8c00917 	ldw	r3,36(sp)
 800a3e4:	da000417 	ldw	r8,16(sp)
 800a3e8:	2089c83a 	sub	r4,r4,r2
 800a3ec:	d9000715 	stw	r4,28(sp)
 800a3f0:	d8800817 	ldw	r2,32(sp)
 800a3f4:	dbc00317 	ldw	r15,12(sp)
 800a3f8:	1a000236 	bltu	r3,r8,800a404 <__divdf3+0xd0>
 800a3fc:	40c0081e 	bne	r8,r3,800a420 <__divdf3+0xec>
 800a400:	13c0072e 	bgeu	r2,r15,800a420 <__divdf3+0xec>
 800a404:	108b883a 	add	r5,r2,r2
 800a408:	288d803a 	cmpltu	r6,r5,r2
 800a40c:	18c7883a 	add	r3,r3,r3
 800a410:	213fffc4 	addi	r4,r4,-1
 800a414:	2805883a 	mov	r2,r5
 800a418:	30c7883a 	add	r3,r6,r3
 800a41c:	d9000715 	stw	r4,28(sp)
 800a420:	01400f44 	movi	r5,61
 800a424:	000f883a 	mov	r7,zero
 800a428:	01040034 	movhi	r4,4096
 800a42c:	0019883a 	mov	r12,zero
 800a430:	001b883a 	mov	r13,zero
 800a434:	201697fa 	slli	r11,r4,31
 800a438:	3814d07a 	srli	r10,r7,1
 800a43c:	297fffc4 	addi	r5,r5,-1
 800a440:	1a000936 	bltu	r3,r8,800a468 <__divdf3+0x134>
 800a444:	13cdc83a 	sub	r6,r2,r15
 800a448:	1193803a 	cmpltu	r9,r2,r6
 800a44c:	1a1dc83a 	sub	r14,r3,r8
 800a450:	40c0011e 	bne	r8,r3,800a458 <__divdf3+0x124>
 800a454:	13c00436 	bltu	r2,r15,800a468 <__divdf3+0x134>
 800a458:	3005883a 	mov	r2,r6
 800a45c:	7247c83a 	sub	r3,r14,r9
 800a460:	61d8b03a 	or	r12,r12,r7
 800a464:	691ab03a 	or	r13,r13,r4
 800a468:	108d883a 	add	r6,r2,r2
 800a46c:	3093803a 	cmpltu	r9,r6,r2
 800a470:	18c7883a 	add	r3,r3,r3
 800a474:	5a8eb03a 	or	r7,r11,r10
 800a478:	2008d07a 	srli	r4,r4,1
 800a47c:	3005883a 	mov	r2,r6
 800a480:	48c7883a 	add	r3,r9,r3
 800a484:	283feb1e 	bne	r5,zero,800a434 <__divdf3+0x100>
 800a488:	61003fcc 	andi	r4,r12,255
 800a48c:	01402004 	movi	r5,128
 800a490:	21400b26 	beq	r4,r5,800a4c0 <__divdf3+0x18c>
 800a494:	db000815 	stw	r12,32(sp)
 800a498:	db400915 	stw	r13,36(sp)
 800a49c:	003fb406 	br	800a370 <__divdf3+0x3c>
 800a4a0:	d8000815 	stw	zero,32(sp)
 800a4a4:	d8000915 	stw	zero,36(sp)
 800a4a8:	d8000715 	stw	zero,28(sp)
 800a4ac:	d9000504 	addi	r4,sp,20
 800a4b0:	003fb006 	br	800a374 <__divdf3+0x40>
 800a4b4:	d8800515 	stw	r2,20(sp)
 800a4b8:	d9000504 	addi	r4,sp,20
 800a4bc:	003fad06 	br	800a374 <__divdf3+0x40>
 800a4c0:	6140400c 	andi	r5,r12,256
 800a4c4:	283ff31e 	bne	r5,zero,800a494 <__divdf3+0x160>
 800a4c8:	30c4b03a 	or	r2,r6,r3
 800a4cc:	103ff126 	beq	r2,zero,800a494 <__divdf3+0x160>
 800a4d0:	6109883a 	add	r4,r12,r4
 800a4d4:	2305803a 	cmpltu	r2,r4,r12
 800a4d8:	033fc004 	movi	r12,-256
 800a4dc:	2318703a 	and	r12,r4,r12
 800a4e0:	135b883a 	add	r13,r2,r13
 800a4e4:	003feb06 	br	800a494 <__divdf3+0x160>

0800a4e8 <__eqdf2>:
 800a4e8:	defff104 	addi	sp,sp,-60
 800a4ec:	d9000c15 	stw	r4,48(sp)
 800a4f0:	d9400d15 	stw	r5,52(sp)
 800a4f4:	d9000c04 	addi	r4,sp,48
 800a4f8:	d9400504 	addi	r5,sp,20
 800a4fc:	dfc00e15 	stw	ra,56(sp)
 800a500:	d9800a15 	stw	r6,40(sp)
 800a504:	d9c00b15 	stw	r7,44(sp)
 800a508:	800ae880 	call	800ae88 <__unpack_d>
 800a50c:	d9000a04 	addi	r4,sp,40
 800a510:	d80b883a 	mov	r5,sp
 800a514:	800ae880 	call	800ae88 <__unpack_d>
 800a518:	d8c00517 	ldw	r3,20(sp)
 800a51c:	00800044 	movi	r2,1
 800a520:	10c0052e 	bgeu	r2,r3,800a538 <__eqdf2+0x50>
 800a524:	d8c00017 	ldw	r3,0(sp)
 800a528:	10c0032e 	bgeu	r2,r3,800a538 <__eqdf2+0x50>
 800a52c:	d9000504 	addi	r4,sp,20
 800a530:	d80b883a 	mov	r5,sp
 800a534:	800af8c0 	call	800af8c <__fpcmp_parts_d>
 800a538:	dfc00e17 	ldw	ra,56(sp)
 800a53c:	dec00f04 	addi	sp,sp,60
 800a540:	f800283a 	ret

0800a544 <__nedf2>:
 800a544:	defff104 	addi	sp,sp,-60
 800a548:	d9000c15 	stw	r4,48(sp)
 800a54c:	d9400d15 	stw	r5,52(sp)
 800a550:	d9000c04 	addi	r4,sp,48
 800a554:	d9400504 	addi	r5,sp,20
 800a558:	dfc00e15 	stw	ra,56(sp)
 800a55c:	d9800a15 	stw	r6,40(sp)
 800a560:	d9c00b15 	stw	r7,44(sp)
 800a564:	800ae880 	call	800ae88 <__unpack_d>
 800a568:	d9000a04 	addi	r4,sp,40
 800a56c:	d80b883a 	mov	r5,sp
 800a570:	800ae880 	call	800ae88 <__unpack_d>
 800a574:	d8c00517 	ldw	r3,20(sp)
 800a578:	00800044 	movi	r2,1
 800a57c:	10c0052e 	bgeu	r2,r3,800a594 <__nedf2+0x50>
 800a580:	d8c00017 	ldw	r3,0(sp)
 800a584:	10c0032e 	bgeu	r2,r3,800a594 <__nedf2+0x50>
 800a588:	d9000504 	addi	r4,sp,20
 800a58c:	d80b883a 	mov	r5,sp
 800a590:	800af8c0 	call	800af8c <__fpcmp_parts_d>
 800a594:	dfc00e17 	ldw	ra,56(sp)
 800a598:	dec00f04 	addi	sp,sp,60
 800a59c:	f800283a 	ret

0800a5a0 <__gtdf2>:
 800a5a0:	defff104 	addi	sp,sp,-60
 800a5a4:	d9000c15 	stw	r4,48(sp)
 800a5a8:	d9400d15 	stw	r5,52(sp)
 800a5ac:	d9000c04 	addi	r4,sp,48
 800a5b0:	d9400504 	addi	r5,sp,20
 800a5b4:	dfc00e15 	stw	ra,56(sp)
 800a5b8:	d9800a15 	stw	r6,40(sp)
 800a5bc:	d9c00b15 	stw	r7,44(sp)
 800a5c0:	800ae880 	call	800ae88 <__unpack_d>
 800a5c4:	d9000a04 	addi	r4,sp,40
 800a5c8:	d80b883a 	mov	r5,sp
 800a5cc:	800ae880 	call	800ae88 <__unpack_d>
 800a5d0:	d8c00517 	ldw	r3,20(sp)
 800a5d4:	00800044 	movi	r2,1
 800a5d8:	10c0082e 	bgeu	r2,r3,800a5fc <__gtdf2+0x5c>
 800a5dc:	d8c00017 	ldw	r3,0(sp)
 800a5e0:	10c0062e 	bgeu	r2,r3,800a5fc <__gtdf2+0x5c>
 800a5e4:	d9000504 	addi	r4,sp,20
 800a5e8:	d80b883a 	mov	r5,sp
 800a5ec:	800af8c0 	call	800af8c <__fpcmp_parts_d>
 800a5f0:	dfc00e17 	ldw	ra,56(sp)
 800a5f4:	dec00f04 	addi	sp,sp,60
 800a5f8:	f800283a 	ret
 800a5fc:	00bfffc4 	movi	r2,-1
 800a600:	003ffb06 	br	800a5f0 <__gtdf2+0x50>

0800a604 <__gedf2>:
 800a604:	defff104 	addi	sp,sp,-60
 800a608:	d9000c15 	stw	r4,48(sp)
 800a60c:	d9400d15 	stw	r5,52(sp)
 800a610:	d9000c04 	addi	r4,sp,48
 800a614:	d9400504 	addi	r5,sp,20
 800a618:	dfc00e15 	stw	ra,56(sp)
 800a61c:	d9800a15 	stw	r6,40(sp)
 800a620:	d9c00b15 	stw	r7,44(sp)
 800a624:	800ae880 	call	800ae88 <__unpack_d>
 800a628:	d9000a04 	addi	r4,sp,40
 800a62c:	d80b883a 	mov	r5,sp
 800a630:	800ae880 	call	800ae88 <__unpack_d>
 800a634:	d8c00517 	ldw	r3,20(sp)
 800a638:	00800044 	movi	r2,1
 800a63c:	10c0082e 	bgeu	r2,r3,800a660 <__gedf2+0x5c>
 800a640:	d8c00017 	ldw	r3,0(sp)
 800a644:	10c0062e 	bgeu	r2,r3,800a660 <__gedf2+0x5c>
 800a648:	d9000504 	addi	r4,sp,20
 800a64c:	d80b883a 	mov	r5,sp
 800a650:	800af8c0 	call	800af8c <__fpcmp_parts_d>
 800a654:	dfc00e17 	ldw	ra,56(sp)
 800a658:	dec00f04 	addi	sp,sp,60
 800a65c:	f800283a 	ret
 800a660:	00bfffc4 	movi	r2,-1
 800a664:	003ffb06 	br	800a654 <__gedf2+0x50>

0800a668 <__ltdf2>:
 800a668:	defff104 	addi	sp,sp,-60
 800a66c:	d9000c15 	stw	r4,48(sp)
 800a670:	d9400d15 	stw	r5,52(sp)
 800a674:	d9000c04 	addi	r4,sp,48
 800a678:	d9400504 	addi	r5,sp,20
 800a67c:	dfc00e15 	stw	ra,56(sp)
 800a680:	d9800a15 	stw	r6,40(sp)
 800a684:	d9c00b15 	stw	r7,44(sp)
 800a688:	800ae880 	call	800ae88 <__unpack_d>
 800a68c:	d9000a04 	addi	r4,sp,40
 800a690:	d80b883a 	mov	r5,sp
 800a694:	800ae880 	call	800ae88 <__unpack_d>
 800a698:	d8c00517 	ldw	r3,20(sp)
 800a69c:	00800044 	movi	r2,1
 800a6a0:	10c0052e 	bgeu	r2,r3,800a6b8 <__ltdf2+0x50>
 800a6a4:	d8c00017 	ldw	r3,0(sp)
 800a6a8:	10c0032e 	bgeu	r2,r3,800a6b8 <__ltdf2+0x50>
 800a6ac:	d9000504 	addi	r4,sp,20
 800a6b0:	d80b883a 	mov	r5,sp
 800a6b4:	800af8c0 	call	800af8c <__fpcmp_parts_d>
 800a6b8:	dfc00e17 	ldw	ra,56(sp)
 800a6bc:	dec00f04 	addi	sp,sp,60
 800a6c0:	f800283a 	ret

0800a6c4 <__floatsidf>:
 800a6c4:	2004d7fa 	srli	r2,r4,31
 800a6c8:	defff904 	addi	sp,sp,-28
 800a6cc:	00c000c4 	movi	r3,3
 800a6d0:	dfc00615 	stw	ra,24(sp)
 800a6d4:	dc000515 	stw	r16,20(sp)
 800a6d8:	d8c00015 	stw	r3,0(sp)
 800a6dc:	d8800115 	stw	r2,4(sp)
 800a6e0:	2000081e 	bne	r4,zero,800a704 <__floatsidf+0x40>
 800a6e4:	00800084 	movi	r2,2
 800a6e8:	d8800015 	stw	r2,0(sp)
 800a6ec:	d809883a 	mov	r4,sp
 800a6f0:	800ac640 	call	800ac64 <__pack_d>
 800a6f4:	dfc00617 	ldw	ra,24(sp)
 800a6f8:	dc000517 	ldw	r16,20(sp)
 800a6fc:	dec00704 	addi	sp,sp,28
 800a700:	f800283a 	ret
 800a704:	00c00f04 	movi	r3,60
 800a708:	d8c00215 	stw	r3,8(sp)
 800a70c:	10000f1e 	bne	r2,zero,800a74c <__floatsidf+0x88>
 800a710:	2021883a 	mov	r16,r4
 800a714:	8009883a 	mov	r4,r16
 800a718:	800abb80 	call	800abb8 <__clzsi2>
 800a71c:	11000744 	addi	r4,r2,29
 800a720:	0100110e 	bge	zero,r4,800a768 <__floatsidf+0xa4>
 800a724:	10ffff44 	addi	r3,r2,-3
 800a728:	18001216 	blt	r3,zero,800a774 <__floatsidf+0xb0>
 800a72c:	80c6983a 	sll	r3,r16,r3
 800a730:	0009883a 	mov	r4,zero
 800a734:	014007c4 	movi	r5,31
 800a738:	2885c83a 	sub	r2,r5,r2
 800a73c:	d9000315 	stw	r4,12(sp)
 800a740:	d8c00415 	stw	r3,16(sp)
 800a744:	d8800215 	stw	r2,8(sp)
 800a748:	003fe806 	br	800a6ec <__floatsidf+0x28>
 800a74c:	00a00034 	movhi	r2,32768
 800a750:	20800e26 	beq	r4,r2,800a78c <__floatsidf+0xc8>
 800a754:	0121c83a 	sub	r16,zero,r4
 800a758:	8009883a 	mov	r4,r16
 800a75c:	800abb80 	call	800abb8 <__clzsi2>
 800a760:	11000744 	addi	r4,r2,29
 800a764:	013fef16 	blt	zero,r4,800a724 <__floatsidf+0x60>
 800a768:	dc000315 	stw	r16,12(sp)
 800a76c:	d8000415 	stw	zero,16(sp)
 800a770:	003fde06 	br	800a6ec <__floatsidf+0x28>
 800a774:	800ad07a 	srli	r5,r16,1
 800a778:	00c007c4 	movi	r3,31
 800a77c:	1907c83a 	sub	r3,r3,r4
 800a780:	28c6d83a 	srl	r3,r5,r3
 800a784:	8108983a 	sll	r4,r16,r4
 800a788:	003fea06 	br	800a734 <__floatsidf+0x70>
 800a78c:	0005883a 	mov	r2,zero
 800a790:	00f07834 	movhi	r3,49632
 800a794:	003fd706 	br	800a6f4 <__floatsidf+0x30>

0800a798 <__fixdfsi>:
 800a798:	defff804 	addi	sp,sp,-32
 800a79c:	d9000515 	stw	r4,20(sp)
 800a7a0:	d9400615 	stw	r5,24(sp)
 800a7a4:	d9000504 	addi	r4,sp,20
 800a7a8:	d80b883a 	mov	r5,sp
 800a7ac:	dfc00715 	stw	ra,28(sp)
 800a7b0:	800ae880 	call	800ae88 <__unpack_d>
 800a7b4:	d8800017 	ldw	r2,0(sp)
 800a7b8:	00c00084 	movi	r3,2
 800a7bc:	10c01c26 	beq	r2,r3,800a830 <__fixdfsi+0x98>
 800a7c0:	00c00044 	movi	r3,1
 800a7c4:	18801a2e 	bgeu	r3,r2,800a830 <__fixdfsi+0x98>
 800a7c8:	00c00104 	movi	r3,4
 800a7cc:	10c01126 	beq	r2,r3,800a814 <__fixdfsi+0x7c>
 800a7d0:	d8800217 	ldw	r2,8(sp)
 800a7d4:	10001616 	blt	r2,zero,800a830 <__fixdfsi+0x98>
 800a7d8:	00c00784 	movi	r3,30
 800a7dc:	18800d16 	blt	r3,r2,800a814 <__fixdfsi+0x7c>
 800a7e0:	00c00f04 	movi	r3,60
 800a7e4:	1885c83a 	sub	r2,r3,r2
 800a7e8:	10fff804 	addi	r3,r2,-32
 800a7ec:	d9400317 	ldw	r5,12(sp)
 800a7f0:	d9000417 	ldw	r4,16(sp)
 800a7f4:	18001216 	blt	r3,zero,800a840 <__fixdfsi+0xa8>
 800a7f8:	20c4d83a 	srl	r2,r4,r3
 800a7fc:	d8c00117 	ldw	r3,4(sp)
 800a800:	18000826 	beq	r3,zero,800a824 <__fixdfsi+0x8c>
 800a804:	0085c83a 	sub	r2,zero,r2
 800a808:	dfc00717 	ldw	ra,28(sp)
 800a80c:	dec00804 	addi	sp,sp,32
 800a810:	f800283a 	ret
 800a814:	d8800117 	ldw	r2,4(sp)
 800a818:	00e00034 	movhi	r3,32768
 800a81c:	1005003a 	cmpeq	r2,r2,zero
 800a820:	1885c83a 	sub	r2,r3,r2
 800a824:	dfc00717 	ldw	ra,28(sp)
 800a828:	dec00804 	addi	sp,sp,32
 800a82c:	f800283a 	ret
 800a830:	0005883a 	mov	r2,zero
 800a834:	dfc00717 	ldw	ra,28(sp)
 800a838:	dec00804 	addi	sp,sp,32
 800a83c:	f800283a 	ret
 800a840:	2008907a 	slli	r4,r4,1
 800a844:	018007c4 	movi	r6,31
 800a848:	308dc83a 	sub	r6,r6,r2
 800a84c:	2188983a 	sll	r4,r4,r6
 800a850:	2884d83a 	srl	r2,r5,r2
 800a854:	2084b03a 	or	r2,r4,r2
 800a858:	003fe806 	br	800a7fc <__fixdfsi+0x64>

0800a85c <__floatunsidf>:
 800a85c:	defff904 	addi	sp,sp,-28
 800a860:	dc000515 	stw	r16,20(sp)
 800a864:	dfc00615 	stw	ra,24(sp)
 800a868:	d8000115 	stw	zero,4(sp)
 800a86c:	2021883a 	mov	r16,r4
 800a870:	20001726 	beq	r4,zero,800a8d0 <__floatunsidf+0x74>
 800a874:	008000c4 	movi	r2,3
 800a878:	d8800015 	stw	r2,0(sp)
 800a87c:	00800f04 	movi	r2,60
 800a880:	d8800215 	stw	r2,8(sp)
 800a884:	800abb80 	call	800abb8 <__clzsi2>
 800a888:	10c00744 	addi	r3,r2,29
 800a88c:	18001816 	blt	r3,zero,800a8f0 <__floatunsidf+0x94>
 800a890:	18002d26 	beq	r3,zero,800a948 <__floatunsidf+0xec>
 800a894:	113fff44 	addi	r4,r2,-3
 800a898:	20002e16 	blt	r4,zero,800a954 <__floatunsidf+0xf8>
 800a89c:	8108983a 	sll	r4,r16,r4
 800a8a0:	0021883a 	mov	r16,zero
 800a8a4:	014007c4 	movi	r5,31
 800a8a8:	2885c83a 	sub	r2,r5,r2
 800a8ac:	dc000315 	stw	r16,12(sp)
 800a8b0:	d9000415 	stw	r4,16(sp)
 800a8b4:	d8800215 	stw	r2,8(sp)
 800a8b8:	d809883a 	mov	r4,sp
 800a8bc:	800ac640 	call	800ac64 <__pack_d>
 800a8c0:	dfc00617 	ldw	ra,24(sp)
 800a8c4:	dc000517 	ldw	r16,20(sp)
 800a8c8:	dec00704 	addi	sp,sp,28
 800a8cc:	f800283a 	ret
 800a8d0:	00800084 	movi	r2,2
 800a8d4:	d809883a 	mov	r4,sp
 800a8d8:	d8800015 	stw	r2,0(sp)
 800a8dc:	800ac640 	call	800ac64 <__pack_d>
 800a8e0:	dfc00617 	ldw	ra,24(sp)
 800a8e4:	dc000517 	ldw	r16,20(sp)
 800a8e8:	dec00704 	addi	sp,sp,28
 800a8ec:	f800283a 	ret
 800a8f0:	00c7c83a 	sub	r3,zero,r3
 800a8f4:	193ff804 	addi	r4,r3,-32
 800a8f8:	20001c16 	blt	r4,zero,800a96c <__floatunsidf+0x110>
 800a8fc:	000b883a 	mov	r5,zero
 800a900:	2009d7fa 	srai	r4,r4,31
 800a904:	80c6d83a 	srl	r3,r16,r3
 800a908:	297fffc4 	addi	r5,r5,-1
 800a90c:	2c20703a 	and	r16,r5,r16
 800a910:	8020c03a 	cmpne	r16,r16,zero
 800a914:	1906703a 	and	r3,r3,r4
 800a918:	010007c4 	movi	r4,31
 800a91c:	80c6b03a 	or	r3,r16,r3
 800a920:	2085c83a 	sub	r2,r4,r2
 800a924:	d809883a 	mov	r4,sp
 800a928:	d8c00315 	stw	r3,12(sp)
 800a92c:	d8000415 	stw	zero,16(sp)
 800a930:	d8800215 	stw	r2,8(sp)
 800a934:	800ac640 	call	800ac64 <__pack_d>
 800a938:	dfc00617 	ldw	ra,24(sp)
 800a93c:	dc000517 	ldw	r16,20(sp)
 800a940:	dec00704 	addi	sp,sp,28
 800a944:	f800283a 	ret
 800a948:	dc000315 	stw	r16,12(sp)
 800a94c:	d8000415 	stw	zero,16(sp)
 800a950:	003fd906 	br	800a8b8 <__floatunsidf+0x5c>
 800a954:	800ad07a 	srli	r5,r16,1
 800a958:	010007c4 	movi	r4,31
 800a95c:	20c9c83a 	sub	r4,r4,r3
 800a960:	2908d83a 	srl	r4,r5,r4
 800a964:	80e0983a 	sll	r16,r16,r3
 800a968:	003fce06 	br	800a8a4 <__floatunsidf+0x48>
 800a96c:	01400044 	movi	r5,1
 800a970:	28ca983a 	sll	r5,r5,r3
 800a974:	003fe206 	br	800a900 <__floatunsidf+0xa4>

0800a978 <udivmodsi4>:
 800a978:	2005883a 	mov	r2,r4
 800a97c:	2900182e 	bgeu	r5,r4,800a9e0 <udivmodsi4+0x68>
 800a980:	28001716 	blt	r5,zero,800a9e0 <udivmodsi4+0x68>
 800a984:	01000804 	movi	r4,32
 800a988:	00c00044 	movi	r3,1
 800a98c:	00000206 	br	800a998 <udivmodsi4+0x20>
 800a990:	20001126 	beq	r4,zero,800a9d8 <udivmodsi4+0x60>
 800a994:	28000516 	blt	r5,zero,800a9ac <udivmodsi4+0x34>
 800a998:	294b883a 	add	r5,r5,r5
 800a99c:	213fffc4 	addi	r4,r4,-1
 800a9a0:	18c7883a 	add	r3,r3,r3
 800a9a4:	28bffa36 	bltu	r5,r2,800a990 <udivmodsi4+0x18>
 800a9a8:	18000b26 	beq	r3,zero,800a9d8 <udivmodsi4+0x60>
 800a9ac:	0009883a 	mov	r4,zero
 800a9b0:	11400236 	bltu	r2,r5,800a9bc <udivmodsi4+0x44>
 800a9b4:	1145c83a 	sub	r2,r2,r5
 800a9b8:	20c8b03a 	or	r4,r4,r3
 800a9bc:	1806d07a 	srli	r3,r3,1
 800a9c0:	280ad07a 	srli	r5,r5,1
 800a9c4:	183ffa1e 	bne	r3,zero,800a9b0 <udivmodsi4+0x38>
 800a9c8:	3000021e 	bne	r6,zero,800a9d4 <udivmodsi4+0x5c>
 800a9cc:	2005883a 	mov	r2,r4
 800a9d0:	f800283a 	ret
 800a9d4:	f800283a 	ret
 800a9d8:	0009883a 	mov	r4,zero
 800a9dc:	003ffa06 	br	800a9c8 <udivmodsi4+0x50>
 800a9e0:	00c00044 	movi	r3,1
 800a9e4:	0009883a 	mov	r4,zero
 800a9e8:	003ff106 	br	800a9b0 <udivmodsi4+0x38>

0800a9ec <__divsi3>:
 800a9ec:	defffe04 	addi	sp,sp,-8
 800a9f0:	dfc00115 	stw	ra,4(sp)
 800a9f4:	dc000015 	stw	r16,0(sp)
 800a9f8:	20000a16 	blt	r4,zero,800aa24 <__divsi3+0x38>
 800a9fc:	0021883a 	mov	r16,zero
 800aa00:	28000b16 	blt	r5,zero,800aa30 <__divsi3+0x44>
 800aa04:	000d883a 	mov	r6,zero
 800aa08:	800a9780 	call	800a978 <udivmodsi4>
 800aa0c:	80000126 	beq	r16,zero,800aa14 <__divsi3+0x28>
 800aa10:	0085c83a 	sub	r2,zero,r2
 800aa14:	dfc00117 	ldw	ra,4(sp)
 800aa18:	dc000017 	ldw	r16,0(sp)
 800aa1c:	dec00204 	addi	sp,sp,8
 800aa20:	f800283a 	ret
 800aa24:	0109c83a 	sub	r4,zero,r4
 800aa28:	04000044 	movi	r16,1
 800aa2c:	283ff50e 	bge	r5,zero,800aa04 <__divsi3+0x18>
 800aa30:	014bc83a 	sub	r5,zero,r5
 800aa34:	8400005c 	xori	r16,r16,1
 800aa38:	003ff206 	br	800aa04 <__divsi3+0x18>

0800aa3c <__modsi3>:
 800aa3c:	deffff04 	addi	sp,sp,-4
 800aa40:	dfc00015 	stw	ra,0(sp)
 800aa44:	20000516 	blt	r4,zero,800aa5c <__modsi3+0x20>
 800aa48:	28000c16 	blt	r5,zero,800aa7c <__modsi3+0x40>
 800aa4c:	01800044 	movi	r6,1
 800aa50:	dfc00017 	ldw	ra,0(sp)
 800aa54:	dec00104 	addi	sp,sp,4
 800aa58:	800a9781 	jmpi	800a978 <udivmodsi4>
 800aa5c:	0109c83a 	sub	r4,zero,r4
 800aa60:	28000b16 	blt	r5,zero,800aa90 <__modsi3+0x54>
 800aa64:	01800044 	movi	r6,1
 800aa68:	800a9780 	call	800a978 <udivmodsi4>
 800aa6c:	0085c83a 	sub	r2,zero,r2
 800aa70:	dfc00017 	ldw	ra,0(sp)
 800aa74:	dec00104 	addi	sp,sp,4
 800aa78:	f800283a 	ret
 800aa7c:	014bc83a 	sub	r5,zero,r5
 800aa80:	01800044 	movi	r6,1
 800aa84:	dfc00017 	ldw	ra,0(sp)
 800aa88:	dec00104 	addi	sp,sp,4
 800aa8c:	800a9781 	jmpi	800a978 <udivmodsi4>
 800aa90:	014bc83a 	sub	r5,zero,r5
 800aa94:	003ff306 	br	800aa64 <__modsi3+0x28>

0800aa98 <__udivsi3>:
 800aa98:	000d883a 	mov	r6,zero
 800aa9c:	800a9781 	jmpi	800a978 <udivmodsi4>

0800aaa0 <__umodsi3>:
 800aaa0:	01800044 	movi	r6,1
 800aaa4:	800a9781 	jmpi	800a978 <udivmodsi4>

0800aaa8 <__muldi3>:
 800aaa8:	defff604 	addi	sp,sp,-40
 800aaac:	dd400515 	stw	r21,20(sp)
 800aab0:	dd000415 	stw	r20,16(sp)
 800aab4:	257fffcc 	andi	r21,r4,65535
 800aab8:	353fffcc 	andi	r20,r6,65535
 800aabc:	dcc00315 	stw	r19,12(sp)
 800aac0:	3026d43a 	srli	r19,r6,16
 800aac4:	dd800615 	stw	r22,24(sp)
 800aac8:	dc800215 	stw	r18,8(sp)
 800aacc:	dc400115 	stw	r17,4(sp)
 800aad0:	2024d43a 	srli	r18,r4,16
 800aad4:	2023883a 	mov	r17,r4
 800aad8:	282d883a 	mov	r22,r5
 800aadc:	a009883a 	mov	r4,r20
 800aae0:	a80b883a 	mov	r5,r21
 800aae4:	dfc00915 	stw	ra,36(sp)
 800aae8:	df000815 	stw	fp,32(sp)
 800aaec:	ddc00715 	stw	r23,28(sp)
 800aaf0:	3839883a 	mov	fp,r7
 800aaf4:	dc000015 	stw	r16,0(sp)
 800aaf8:	3021883a 	mov	r16,r6
 800aafc:	8001a0c0 	call	8001a0c <__mulsi3>
 800ab00:	a80b883a 	mov	r5,r21
 800ab04:	9809883a 	mov	r4,r19
 800ab08:	102f883a 	mov	r23,r2
 800ab0c:	8001a0c0 	call	8001a0c <__mulsi3>
 800ab10:	a009883a 	mov	r4,r20
 800ab14:	900b883a 	mov	r5,r18
 800ab18:	102b883a 	mov	r21,r2
 800ab1c:	8001a0c0 	call	8001a0c <__mulsi3>
 800ab20:	9809883a 	mov	r4,r19
 800ab24:	900b883a 	mov	r5,r18
 800ab28:	1029883a 	mov	r20,r2
 800ab2c:	8001a0c0 	call	8001a0c <__mulsi3>
 800ab30:	1007883a 	mov	r3,r2
 800ab34:	b804d43a 	srli	r2,r23,16
 800ab38:	a549883a 	add	r4,r20,r21
 800ab3c:	2089883a 	add	r4,r4,r2
 800ab40:	2500022e 	bgeu	r4,r20,800ab4c <__muldi3+0xa4>
 800ab44:	00800074 	movhi	r2,1
 800ab48:	1887883a 	add	r3,r3,r2
 800ab4c:	200cd43a 	srli	r6,r4,16
 800ab50:	2004943a 	slli	r2,r4,16
 800ab54:	e00b883a 	mov	r5,fp
 800ab58:	8809883a 	mov	r4,r17
 800ab5c:	bdffffcc 	andi	r23,r23,65535
 800ab60:	19a3883a 	add	r17,r3,r6
 800ab64:	15ef883a 	add	r23,r2,r23
 800ab68:	8001a0c0 	call	8001a0c <__mulsi3>
 800ab6c:	8009883a 	mov	r4,r16
 800ab70:	b00b883a 	mov	r5,r22
 800ab74:	1025883a 	mov	r18,r2
 800ab78:	8001a0c0 	call	8001a0c <__mulsi3>
 800ab7c:	9085883a 	add	r2,r18,r2
 800ab80:	1447883a 	add	r3,r2,r17
 800ab84:	b805883a 	mov	r2,r23
 800ab88:	dfc00917 	ldw	ra,36(sp)
 800ab8c:	df000817 	ldw	fp,32(sp)
 800ab90:	ddc00717 	ldw	r23,28(sp)
 800ab94:	dd800617 	ldw	r22,24(sp)
 800ab98:	dd400517 	ldw	r21,20(sp)
 800ab9c:	dd000417 	ldw	r20,16(sp)
 800aba0:	dcc00317 	ldw	r19,12(sp)
 800aba4:	dc800217 	ldw	r18,8(sp)
 800aba8:	dc400117 	ldw	r17,4(sp)
 800abac:	dc000017 	ldw	r16,0(sp)
 800abb0:	dec00a04 	addi	sp,sp,40
 800abb4:	f800283a 	ret

0800abb8 <__clzsi2>:
 800abb8:	00bfffd4 	movui	r2,65535
 800abbc:	11000b36 	bltu	r2,r4,800abec <__clzsi2+0x34>
 800abc0:	00803fc4 	movi	r2,255
 800abc4:	11001e2e 	bgeu	r2,r4,800ac40 <__clzsi2+0x88>
 800abc8:	00c00204 	movi	r3,8
 800abcc:	20c8d83a 	srl	r4,r4,r3
 800abd0:	00c20074 	movhi	r3,2049
 800abd4:	18f72804 	addi	r3,r3,-9056
 800abd8:	00800604 	movi	r2,24
 800abdc:	1909883a 	add	r4,r3,r4
 800abe0:	20c00003 	ldbu	r3,0(r4)
 800abe4:	10c5c83a 	sub	r2,r2,r3
 800abe8:	f800283a 	ret
 800abec:	00804034 	movhi	r2,256
 800abf0:	10bfffc4 	addi	r2,r2,-1
 800abf4:	11000936 	bltu	r2,r4,800ac1c <__clzsi2+0x64>
 800abf8:	00800404 	movi	r2,16
 800abfc:	1007883a 	mov	r3,r2
 800ac00:	20c8d83a 	srl	r4,r4,r3
 800ac04:	00c20074 	movhi	r3,2049
 800ac08:	18f72804 	addi	r3,r3,-9056
 800ac0c:	1909883a 	add	r4,r3,r4
 800ac10:	20c00003 	ldbu	r3,0(r4)
 800ac14:	10c5c83a 	sub	r2,r2,r3
 800ac18:	f800283a 	ret
 800ac1c:	00c00604 	movi	r3,24
 800ac20:	20c8d83a 	srl	r4,r4,r3
 800ac24:	00c20074 	movhi	r3,2049
 800ac28:	18f72804 	addi	r3,r3,-9056
 800ac2c:	00800204 	movi	r2,8
 800ac30:	1909883a 	add	r4,r3,r4
 800ac34:	20c00003 	ldbu	r3,0(r4)
 800ac38:	10c5c83a 	sub	r2,r2,r3
 800ac3c:	f800283a 	ret
 800ac40:	0007883a 	mov	r3,zero
 800ac44:	20c8d83a 	srl	r4,r4,r3
 800ac48:	00c20074 	movhi	r3,2049
 800ac4c:	18f72804 	addi	r3,r3,-9056
 800ac50:	00800804 	movi	r2,32
 800ac54:	1909883a 	add	r4,r3,r4
 800ac58:	20c00003 	ldbu	r3,0(r4)
 800ac5c:	10c5c83a 	sub	r2,r2,r3
 800ac60:	f800283a 	ret

0800ac64 <__pack_d>:
 800ac64:	20800017 	ldw	r2,0(r4)
 800ac68:	defff804 	addi	sp,sp,-32
 800ac6c:	dcc00315 	stw	r19,12(sp)
 800ac70:	dc800215 	stw	r18,8(sp)
 800ac74:	dfc00715 	stw	ra,28(sp)
 800ac78:	dd800615 	stw	r22,24(sp)
 800ac7c:	dd400515 	stw	r21,20(sp)
 800ac80:	dd000415 	stw	r20,16(sp)
 800ac84:	dc400115 	stw	r17,4(sp)
 800ac88:	dc000015 	stw	r16,0(sp)
 800ac8c:	04800044 	movi	r18,1
 800ac90:	24400317 	ldw	r17,12(r4)
 800ac94:	24000417 	ldw	r16,16(r4)
 800ac98:	24c00117 	ldw	r19,4(r4)
 800ac9c:	9080422e 	bgeu	r18,r2,800ada8 <__pack_d+0x144>
 800aca0:	00c00104 	movi	r3,4
 800aca4:	10c03c26 	beq	r2,r3,800ad98 <__pack_d+0x134>
 800aca8:	00c00084 	movi	r3,2
 800acac:	10c01926 	beq	r2,r3,800ad14 <__pack_d+0xb0>
 800acb0:	8c04b03a 	or	r2,r17,r16
 800acb4:	10001726 	beq	r2,zero,800ad14 <__pack_d+0xb0>
 800acb8:	21000217 	ldw	r4,8(r4)
 800acbc:	00bf0084 	movi	r2,-1022
 800acc0:	20804016 	blt	r4,r2,800adc4 <__pack_d+0x160>
 800acc4:	0080ffc4 	movi	r2,1023
 800acc8:	11003316 	blt	r2,r4,800ad98 <__pack_d+0x134>
 800accc:	88803fcc 	andi	r2,r17,255
 800acd0:	00c02004 	movi	r3,128
 800acd4:	10c02926 	beq	r2,r3,800ad7c <__pack_d+0x118>
 800acd8:	88801fc4 	addi	r2,r17,127
 800acdc:	1463803a 	cmpltu	r17,r2,r17
 800ace0:	8c21883a 	add	r16,r17,r16
 800ace4:	1023883a 	mov	r17,r2
 800ace8:	00880034 	movhi	r2,8192
 800acec:	10bfffc4 	addi	r2,r2,-1
 800acf0:	14001c36 	bltu	r2,r16,800ad64 <__pack_d+0x100>
 800acf4:	2100ffc4 	addi	r4,r4,1023
 800acf8:	8006963a 	slli	r3,r16,24
 800acfc:	8804d23a 	srli	r2,r17,8
 800ad00:	8020913a 	slli	r16,r16,4
 800ad04:	2101ffcc 	andi	r4,r4,2047
 800ad08:	1884b03a 	or	r2,r3,r2
 800ad0c:	8020d33a 	srli	r16,r16,12
 800ad10:	00000306 	br	800ad20 <__pack_d+0xbc>
 800ad14:	0009883a 	mov	r4,zero
 800ad18:	0005883a 	mov	r2,zero
 800ad1c:	0021883a 	mov	r16,zero
 800ad20:	2008953a 	slli	r4,r4,20
 800ad24:	982697fa 	slli	r19,r19,31
 800ad28:	00c00434 	movhi	r3,16
 800ad2c:	18ffffc4 	addi	r3,r3,-1
 800ad30:	80e0703a 	and	r16,r16,r3
 800ad34:	8106b03a 	or	r3,r16,r4
 800ad38:	1cc6b03a 	or	r3,r3,r19
 800ad3c:	dfc00717 	ldw	ra,28(sp)
 800ad40:	dd800617 	ldw	r22,24(sp)
 800ad44:	dd400517 	ldw	r21,20(sp)
 800ad48:	dd000417 	ldw	r20,16(sp)
 800ad4c:	dcc00317 	ldw	r19,12(sp)
 800ad50:	dc800217 	ldw	r18,8(sp)
 800ad54:	dc400117 	ldw	r17,4(sp)
 800ad58:	dc000017 	ldw	r16,0(sp)
 800ad5c:	dec00804 	addi	sp,sp,32
 800ad60:	f800283a 	ret
 800ad64:	800697fa 	slli	r3,r16,31
 800ad68:	8804d07a 	srli	r2,r17,1
 800ad6c:	21010004 	addi	r4,r4,1024
 800ad70:	8020d07a 	srli	r16,r16,1
 800ad74:	18a2b03a 	or	r17,r3,r2
 800ad78:	003fdf06 	br	800acf8 <__pack_d+0x94>
 800ad7c:	88c0400c 	andi	r3,r17,256
 800ad80:	183fd926 	beq	r3,zero,800ace8 <__pack_d+0x84>
 800ad84:	8885883a 	add	r2,r17,r2
 800ad88:	1463803a 	cmpltu	r17,r2,r17
 800ad8c:	8c21883a 	add	r16,r17,r16
 800ad90:	1023883a 	mov	r17,r2
 800ad94:	003fd406 	br	800ace8 <__pack_d+0x84>
 800ad98:	0101ffc4 	movi	r4,2047
 800ad9c:	0005883a 	mov	r2,zero
 800ada0:	0021883a 	mov	r16,zero
 800ada4:	003fde06 	br	800ad20 <__pack_d+0xbc>
 800ada8:	84000234 	orhi	r16,r16,8
 800adac:	00c00434 	movhi	r3,16
 800adb0:	18ffffc4 	addi	r3,r3,-1
 800adb4:	8805883a 	mov	r2,r17
 800adb8:	80e0703a 	and	r16,r16,r3
 800adbc:	0101ffc4 	movi	r4,2047
 800adc0:	003fd706 	br	800ad20 <__pack_d+0xbc>
 800adc4:	1129c83a 	sub	r20,r2,r4
 800adc8:	00800e04 	movi	r2,56
 800adcc:	15002716 	blt	r2,r20,800ae6c <__pack_d+0x208>
 800add0:	800b883a 	mov	r5,r16
 800add4:	a00d883a 	mov	r6,r20
 800add8:	8809883a 	mov	r4,r17
 800addc:	800b05c0 	call	800b05c <__lshrdi3>
 800ade0:	9009883a 	mov	r4,r18
 800ade4:	000b883a 	mov	r5,zero
 800ade8:	a00d883a 	mov	r6,r20
 800adec:	102d883a 	mov	r22,r2
 800adf0:	182b883a 	mov	r21,r3
 800adf4:	800b0a00 	call	800b0a0 <__ashldi3>
 800adf8:	1009003a 	cmpeq	r4,r2,zero
 800adfc:	1907c83a 	sub	r3,r3,r4
 800ae00:	10bfffc4 	addi	r2,r2,-1
 800ae04:	1c20703a 	and	r16,r3,r16
 800ae08:	1444703a 	and	r2,r2,r17
 800ae0c:	1404b03a 	or	r2,r2,r16
 800ae10:	1004c03a 	cmpne	r2,r2,zero
 800ae14:	1584b03a 	or	r2,r2,r22
 800ae18:	11003fcc 	andi	r4,r2,255
 800ae1c:	01402004 	movi	r5,128
 800ae20:	a807883a 	mov	r3,r21
 800ae24:	2140131e 	bne	r4,r5,800ae74 <__pack_d+0x210>
 800ae28:	1140400c 	andi	r5,r2,256
 800ae2c:	28000426 	beq	r5,zero,800ae40 <__pack_d+0x1dc>
 800ae30:	1109883a 	add	r4,r2,r4
 800ae34:	2085803a 	cmpltu	r2,r4,r2
 800ae38:	1547883a 	add	r3,r2,r21
 800ae3c:	2005883a 	mov	r2,r4
 800ae40:	1808963a 	slli	r4,r3,24
 800ae44:	1004d23a 	srli	r2,r2,8
 800ae48:	1820913a 	slli	r16,r3,4
 800ae4c:	01440034 	movhi	r5,4096
 800ae50:	297fffc4 	addi	r5,r5,-1
 800ae54:	2084b03a 	or	r2,r4,r2
 800ae58:	8020d33a 	srli	r16,r16,12
 800ae5c:	01000044 	movi	r4,1
 800ae60:	28ffaf36 	bltu	r5,r3,800ad20 <__pack_d+0xbc>
 800ae64:	0009883a 	mov	r4,zero
 800ae68:	003fad06 	br	800ad20 <__pack_d+0xbc>
 800ae6c:	0005883a 	mov	r2,zero
 800ae70:	0007883a 	mov	r3,zero
 800ae74:	11001fc4 	addi	r4,r2,127
 800ae78:	2085803a 	cmpltu	r2,r4,r2
 800ae7c:	10c7883a 	add	r3,r2,r3
 800ae80:	2005883a 	mov	r2,r4
 800ae84:	003fee06 	br	800ae40 <__pack_d+0x1dc>

0800ae88 <__unpack_d>:
 800ae88:	21800117 	ldw	r6,4(r4)
 800ae8c:	20c00017 	ldw	r3,0(r4)
 800ae90:	3004d7fa 	srli	r2,r6,31
 800ae94:	3008d53a 	srli	r4,r6,20
 800ae98:	28800115 	stw	r2,4(r5)
 800ae9c:	2101ffcc 	andi	r4,r4,2047
 800aea0:	00800434 	movhi	r2,16
 800aea4:	10bfffc4 	addi	r2,r2,-1
 800aea8:	3084703a 	and	r2,r6,r2
 800aeac:	20001a1e 	bne	r4,zero,800af18 <__unpack_d+0x90>
 800aeb0:	1888b03a 	or	r4,r3,r2
 800aeb4:	20002626 	beq	r4,zero,800af50 <__unpack_d+0xc8>
 800aeb8:	1808d63a 	srli	r4,r3,24
 800aebc:	1004923a 	slli	r2,r2,8
 800aec0:	01bf0084 	movi	r6,-1022
 800aec4:	29800215 	stw	r6,8(r5)
 800aec8:	2084b03a 	or	r2,r4,r2
 800aecc:	010000c4 	movi	r4,3
 800aed0:	29000015 	stw	r4,0(r5)
 800aed4:	02040034 	movhi	r8,4096
 800aed8:	423fffc4 	addi	r8,r8,-1
 800aedc:	1806923a 	slli	r3,r3,8
 800aee0:	40801836 	bltu	r8,r2,800af44 <__unpack_d+0xbc>
 800aee4:	013f0044 	movi	r4,-1023
 800aee8:	18cd883a 	add	r6,r3,r3
 800aeec:	30c7803a 	cmpltu	r3,r6,r3
 800aef0:	1085883a 	add	r2,r2,r2
 800aef4:	1885883a 	add	r2,r3,r2
 800aef8:	200f883a 	mov	r7,r4
 800aefc:	3007883a 	mov	r3,r6
 800af00:	213fffc4 	addi	r4,r4,-1
 800af04:	40bff82e 	bgeu	r8,r2,800aee8 <__unpack_d+0x60>
 800af08:	29c00215 	stw	r7,8(r5)
 800af0c:	28c00315 	stw	r3,12(r5)
 800af10:	28800415 	stw	r2,16(r5)
 800af14:	f800283a 	ret
 800af18:	01c1ffc4 	movi	r7,2047
 800af1c:	21c00f26 	beq	r4,r7,800af5c <__unpack_d+0xd4>
 800af20:	180cd63a 	srli	r6,r3,24
 800af24:	1004923a 	slli	r2,r2,8
 800af28:	213f0044 	addi	r4,r4,-1023
 800af2c:	1806923a 	slli	r3,r3,8
 800af30:	3084b03a 	or	r2,r6,r2
 800af34:	29000215 	stw	r4,8(r5)
 800af38:	010000c4 	movi	r4,3
 800af3c:	10840034 	orhi	r2,r2,4096
 800af40:	29000015 	stw	r4,0(r5)
 800af44:	28c00315 	stw	r3,12(r5)
 800af48:	28800415 	stw	r2,16(r5)
 800af4c:	f800283a 	ret
 800af50:	00800084 	movi	r2,2
 800af54:	28800015 	stw	r2,0(r5)
 800af58:	f800283a 	ret
 800af5c:	1888b03a 	or	r4,r3,r2
 800af60:	20000526 	beq	r4,zero,800af78 <__unpack_d+0xf0>
 800af64:	3180022c 	andhi	r6,r6,8
 800af68:	30000626 	beq	r6,zero,800af84 <__unpack_d+0xfc>
 800af6c:	01000044 	movi	r4,1
 800af70:	29000015 	stw	r4,0(r5)
 800af74:	003ff306 	br	800af44 <__unpack_d+0xbc>
 800af78:	00800104 	movi	r2,4
 800af7c:	28800015 	stw	r2,0(r5)
 800af80:	f800283a 	ret
 800af84:	28000015 	stw	zero,0(r5)
 800af88:	003fee06 	br	800af44 <__unpack_d+0xbc>

0800af8c <__fpcmp_parts_d>:
 800af8c:	20c00017 	ldw	r3,0(r4)
 800af90:	00800044 	movi	r2,1
 800af94:	10c0142e 	bgeu	r2,r3,800afe8 <__fpcmp_parts_d+0x5c>
 800af98:	29800017 	ldw	r6,0(r5)
 800af9c:	1180122e 	bgeu	r2,r6,800afe8 <__fpcmp_parts_d+0x5c>
 800afa0:	01c00104 	movi	r7,4
 800afa4:	19c02826 	beq	r3,r7,800b048 <__fpcmp_parts_d+0xbc>
 800afa8:	31c00926 	beq	r6,r7,800afd0 <__fpcmp_parts_d+0x44>
 800afac:	01c00084 	movi	r7,2
 800afb0:	19c00626 	beq	r3,r7,800afcc <__fpcmp_parts_d+0x40>
 800afb4:	31c00a26 	beq	r6,r7,800afe0 <__fpcmp_parts_d+0x54>
 800afb8:	20c00117 	ldw	r3,4(r4)
 800afbc:	29800117 	ldw	r6,4(r5)
 800afc0:	19800b26 	beq	r3,r6,800aff0 <__fpcmp_parts_d+0x64>
 800afc4:	1800041e 	bne	r3,zero,800afd8 <__fpcmp_parts_d+0x4c>
 800afc8:	f800283a 	ret
 800afcc:	30c01a26 	beq	r6,r3,800b038 <__fpcmp_parts_d+0xac>
 800afd0:	28800117 	ldw	r2,4(r5)
 800afd4:	1000041e 	bne	r2,zero,800afe8 <__fpcmp_parts_d+0x5c>
 800afd8:	00bfffc4 	movi	r2,-1
 800afdc:	f800283a 	ret
 800afe0:	20800117 	ldw	r2,4(r4)
 800afe4:	103ffc1e 	bne	r2,zero,800afd8 <__fpcmp_parts_d+0x4c>
 800afe8:	00800044 	movi	r2,1
 800afec:	f800283a 	ret
 800aff0:	21c00217 	ldw	r7,8(r4)
 800aff4:	29800217 	ldw	r6,8(r5)
 800aff8:	31c0020e 	bge	r6,r7,800b004 <__fpcmp_parts_d+0x78>
 800affc:	183ff61e 	bne	r3,zero,800afd8 <__fpcmp_parts_d+0x4c>
 800b000:	f800283a 	ret
 800b004:	39800a16 	blt	r7,r6,800b030 <__fpcmp_parts_d+0xa4>
 800b008:	20800417 	ldw	r2,16(r4)
 800b00c:	29800417 	ldw	r6,16(r5)
 800b010:	21c00317 	ldw	r7,12(r4)
 800b014:	29000317 	ldw	r4,12(r5)
 800b018:	30800936 	bltu	r6,r2,800b040 <__fpcmp_parts_d+0xb4>
 800b01c:	1180011e 	bne	r2,r6,800b024 <__fpcmp_parts_d+0x98>
 800b020:	21c00736 	bltu	r4,r7,800b040 <__fpcmp_parts_d+0xb4>
 800b024:	11800236 	bltu	r2,r6,800b030 <__fpcmp_parts_d+0xa4>
 800b028:	3080031e 	bne	r6,r2,800b038 <__fpcmp_parts_d+0xac>
 800b02c:	3900022e 	bgeu	r7,r4,800b038 <__fpcmp_parts_d+0xac>
 800b030:	183fe926 	beq	r3,zero,800afd8 <__fpcmp_parts_d+0x4c>
 800b034:	003fec06 	br	800afe8 <__fpcmp_parts_d+0x5c>
 800b038:	0005883a 	mov	r2,zero
 800b03c:	f800283a 	ret
 800b040:	183fe926 	beq	r3,zero,800afe8 <__fpcmp_parts_d+0x5c>
 800b044:	003fe406 	br	800afd8 <__fpcmp_parts_d+0x4c>
 800b048:	30ffe51e 	bne	r6,r3,800afe0 <__fpcmp_parts_d+0x54>
 800b04c:	28c00117 	ldw	r3,4(r5)
 800b050:	20800117 	ldw	r2,4(r4)
 800b054:	1885c83a 	sub	r2,r3,r2
 800b058:	f800283a 	ret

0800b05c <__lshrdi3>:
 800b05c:	2005883a 	mov	r2,r4
 800b060:	2807883a 	mov	r3,r5
 800b064:	30000826 	beq	r6,zero,800b088 <__lshrdi3+0x2c>
 800b068:	01000804 	movi	r4,32
 800b06c:	2189c83a 	sub	r4,r4,r6
 800b070:	0100060e 	bge	zero,r4,800b08c <__lshrdi3+0x30>
 800b074:	1184d83a 	srl	r2,r2,r6
 800b078:	2908983a 	sll	r4,r5,r4
 800b07c:	298cd83a 	srl	r6,r5,r6
 800b080:	2084b03a 	or	r2,r4,r2
 800b084:	3007883a 	mov	r3,r6
 800b088:	f800283a 	ret
 800b08c:	0105c83a 	sub	r2,zero,r4
 800b090:	000d883a 	mov	r6,zero
 800b094:	2884d83a 	srl	r2,r5,r2
 800b098:	3007883a 	mov	r3,r6
 800b09c:	003ffa06 	br	800b088 <__lshrdi3+0x2c>

0800b0a0 <__ashldi3>:
 800b0a0:	2005883a 	mov	r2,r4
 800b0a4:	2807883a 	mov	r3,r5
 800b0a8:	30000826 	beq	r6,zero,800b0cc <__ashldi3+0x2c>
 800b0ac:	01000804 	movi	r4,32
 800b0b0:	2189c83a 	sub	r4,r4,r6
 800b0b4:	0100060e 	bge	zero,r4,800b0d0 <__ashldi3+0x30>
 800b0b8:	1108d83a 	srl	r4,r2,r4
 800b0bc:	2986983a 	sll	r3,r5,r6
 800b0c0:	118c983a 	sll	r6,r2,r6
 800b0c4:	20c6b03a 	or	r3,r4,r3
 800b0c8:	3005883a 	mov	r2,r6
 800b0cc:	f800283a 	ret
 800b0d0:	0107c83a 	sub	r3,zero,r4
 800b0d4:	000d883a 	mov	r6,zero
 800b0d8:	10c6983a 	sll	r3,r2,r3
 800b0dc:	3005883a 	mov	r2,r6
 800b0e0:	003ffa06 	br	800b0cc <__ashldi3+0x2c>

0800b0e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800b0e4:	defffe04 	addi	sp,sp,-8
 800b0e8:	dfc00115 	stw	ra,4(sp)
 800b0ec:	df000015 	stw	fp,0(sp)
 800b0f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800b0f4:	00820074 	movhi	r2,2049
 800b0f8:	10ba7604 	addi	r2,r2,-5672
 800b0fc:	10800017 	ldw	r2,0(r2)
 800b100:	10000526 	beq	r2,zero,800b118 <alt_get_errno+0x34>
 800b104:	00820074 	movhi	r2,2049
 800b108:	10ba7604 	addi	r2,r2,-5672
 800b10c:	10800017 	ldw	r2,0(r2)
 800b110:	103ee83a 	callr	r2
 800b114:	00000206 	br	800b120 <alt_get_errno+0x3c>
 800b118:	00820074 	movhi	r2,2049
 800b11c:	10bd7304 	addi	r2,r2,-2612
}
 800b120:	e037883a 	mov	sp,fp
 800b124:	dfc00117 	ldw	ra,4(sp)
 800b128:	df000017 	ldw	fp,0(sp)
 800b12c:	dec00204 	addi	sp,sp,8
 800b130:	f800283a 	ret

0800b134 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800b134:	defffb04 	addi	sp,sp,-20
 800b138:	dfc00415 	stw	ra,16(sp)
 800b13c:	df000315 	stw	fp,12(sp)
 800b140:	df000304 	addi	fp,sp,12
 800b144:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800b148:	e0bfff17 	ldw	r2,-4(fp)
 800b14c:	10000716 	blt	r2,zero,800b16c <close+0x38>
 800b150:	e13fff17 	ldw	r4,-4(fp)
 800b154:	01400304 	movi	r5,12
 800b158:	8001a0c0 	call	8001a0c <__mulsi3>
 800b15c:	00c20074 	movhi	r3,2049
 800b160:	18f9ce04 	addi	r3,r3,-6344
 800b164:	10c5883a 	add	r2,r2,r3
 800b168:	00000106 	br	800b170 <close+0x3c>
 800b16c:	0005883a 	mov	r2,zero
 800b170:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 800b174:	e0bffd17 	ldw	r2,-12(fp)
 800b178:	10001826 	beq	r2,zero,800b1dc <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800b17c:	e0bffd17 	ldw	r2,-12(fp)
 800b180:	10800017 	ldw	r2,0(r2)
 800b184:	10800417 	ldw	r2,16(r2)
 800b188:	10000626 	beq	r2,zero,800b1a4 <close+0x70>
 800b18c:	e0bffd17 	ldw	r2,-12(fp)
 800b190:	10800017 	ldw	r2,0(r2)
 800b194:	10800417 	ldw	r2,16(r2)
 800b198:	e13ffd17 	ldw	r4,-12(fp)
 800b19c:	103ee83a 	callr	r2
 800b1a0:	00000106 	br	800b1a8 <close+0x74>
 800b1a4:	0005883a 	mov	r2,zero
 800b1a8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800b1ac:	e13fff17 	ldw	r4,-4(fp)
 800b1b0:	800b8100 	call	800b810 <alt_release_fd>
    if (rval < 0)
 800b1b4:	e0bffe17 	ldw	r2,-8(fp)
 800b1b8:	1000060e 	bge	r2,zero,800b1d4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 800b1bc:	800b0e40 	call	800b0e4 <alt_get_errno>
 800b1c0:	e0fffe17 	ldw	r3,-8(fp)
 800b1c4:	00c7c83a 	sub	r3,zero,r3
 800b1c8:	10c00015 	stw	r3,0(r2)
      return -1;
 800b1cc:	00bfffc4 	movi	r2,-1
 800b1d0:	00000606 	br	800b1ec <close+0xb8>
    }
    return 0;
 800b1d4:	0005883a 	mov	r2,zero
 800b1d8:	00000406 	br	800b1ec <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800b1dc:	800b0e40 	call	800b0e4 <alt_get_errno>
 800b1e0:	00c01444 	movi	r3,81
 800b1e4:	10c00015 	stw	r3,0(r2)
    return -1;
 800b1e8:	00bfffc4 	movi	r2,-1
  }
}
 800b1ec:	e037883a 	mov	sp,fp
 800b1f0:	dfc00117 	ldw	ra,4(sp)
 800b1f4:	df000017 	ldw	fp,0(sp)
 800b1f8:	dec00204 	addi	sp,sp,8
 800b1fc:	f800283a 	ret

0800b200 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800b200:	defffc04 	addi	sp,sp,-16
 800b204:	df000315 	stw	fp,12(sp)
 800b208:	df000304 	addi	fp,sp,12
 800b20c:	e13ffd15 	stw	r4,-12(fp)
 800b210:	e17ffe15 	stw	r5,-8(fp)
 800b214:	e1bfff15 	stw	r6,-4(fp)
  return len;
 800b218:	e0bfff17 	ldw	r2,-4(fp)
}
 800b21c:	e037883a 	mov	sp,fp
 800b220:	df000017 	ldw	fp,0(sp)
 800b224:	dec00104 	addi	sp,sp,4
 800b228:	f800283a 	ret

0800b22c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800b22c:	defffe04 	addi	sp,sp,-8
 800b230:	dfc00115 	stw	ra,4(sp)
 800b234:	df000015 	stw	fp,0(sp)
 800b238:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800b23c:	00820074 	movhi	r2,2049
 800b240:	10ba7604 	addi	r2,r2,-5672
 800b244:	10800017 	ldw	r2,0(r2)
 800b248:	10000526 	beq	r2,zero,800b260 <alt_get_errno+0x34>
 800b24c:	00820074 	movhi	r2,2049
 800b250:	10ba7604 	addi	r2,r2,-5672
 800b254:	10800017 	ldw	r2,0(r2)
 800b258:	103ee83a 	callr	r2
 800b25c:	00000206 	br	800b268 <alt_get_errno+0x3c>
 800b260:	00820074 	movhi	r2,2049
 800b264:	10bd7304 	addi	r2,r2,-2612
}
 800b268:	e037883a 	mov	sp,fp
 800b26c:	dfc00117 	ldw	ra,4(sp)
 800b270:	df000017 	ldw	fp,0(sp)
 800b274:	dec00204 	addi	sp,sp,8
 800b278:	f800283a 	ret

0800b27c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 800b27c:	defffb04 	addi	sp,sp,-20
 800b280:	dfc00415 	stw	ra,16(sp)
 800b284:	df000315 	stw	fp,12(sp)
 800b288:	df000304 	addi	fp,sp,12
 800b28c:	e13ffe15 	stw	r4,-8(fp)
 800b290:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800b294:	e0bffe17 	ldw	r2,-8(fp)
 800b298:	10000716 	blt	r2,zero,800b2b8 <fstat+0x3c>
 800b29c:	e13ffe17 	ldw	r4,-8(fp)
 800b2a0:	01400304 	movi	r5,12
 800b2a4:	8001a0c0 	call	8001a0c <__mulsi3>
 800b2a8:	00c20074 	movhi	r3,2049
 800b2ac:	18f9ce04 	addi	r3,r3,-6344
 800b2b0:	10c5883a 	add	r2,r2,r3
 800b2b4:	00000106 	br	800b2bc <fstat+0x40>
 800b2b8:	0005883a 	mov	r2,zero
 800b2bc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 800b2c0:	e0bffd17 	ldw	r2,-12(fp)
 800b2c4:	10001026 	beq	r2,zero,800b308 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 800b2c8:	e0bffd17 	ldw	r2,-12(fp)
 800b2cc:	10800017 	ldw	r2,0(r2)
 800b2d0:	10800817 	ldw	r2,32(r2)
 800b2d4:	10000726 	beq	r2,zero,800b2f4 <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
 800b2d8:	e0bffd17 	ldw	r2,-12(fp)
 800b2dc:	10800017 	ldw	r2,0(r2)
 800b2e0:	10800817 	ldw	r2,32(r2)
 800b2e4:	e13ffd17 	ldw	r4,-12(fp)
 800b2e8:	e17fff17 	ldw	r5,-4(fp)
 800b2ec:	103ee83a 	callr	r2
 800b2f0:	00000906 	br	800b318 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 800b2f4:	e0bfff17 	ldw	r2,-4(fp)
 800b2f8:	00c80004 	movi	r3,8192
 800b2fc:	10c00115 	stw	r3,4(r2)
      return 0;
 800b300:	0005883a 	mov	r2,zero
 800b304:	00000406 	br	800b318 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800b308:	800b22c0 	call	800b22c <alt_get_errno>
 800b30c:	00c01444 	movi	r3,81
 800b310:	10c00015 	stw	r3,0(r2)
    return -1;
 800b314:	00bfffc4 	movi	r2,-1
  }
}
 800b318:	e037883a 	mov	sp,fp
 800b31c:	dfc00117 	ldw	ra,4(sp)
 800b320:	df000017 	ldw	fp,0(sp)
 800b324:	dec00204 	addi	sp,sp,8
 800b328:	f800283a 	ret

0800b32c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800b32c:	defffe04 	addi	sp,sp,-8
 800b330:	dfc00115 	stw	ra,4(sp)
 800b334:	df000015 	stw	fp,0(sp)
 800b338:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800b33c:	00820074 	movhi	r2,2049
 800b340:	10ba7604 	addi	r2,r2,-5672
 800b344:	10800017 	ldw	r2,0(r2)
 800b348:	10000526 	beq	r2,zero,800b360 <alt_get_errno+0x34>
 800b34c:	00820074 	movhi	r2,2049
 800b350:	10ba7604 	addi	r2,r2,-5672
 800b354:	10800017 	ldw	r2,0(r2)
 800b358:	103ee83a 	callr	r2
 800b35c:	00000206 	br	800b368 <alt_get_errno+0x3c>
 800b360:	00820074 	movhi	r2,2049
 800b364:	10bd7304 	addi	r2,r2,-2612
}
 800b368:	e037883a 	mov	sp,fp
 800b36c:	dfc00117 	ldw	ra,4(sp)
 800b370:	df000017 	ldw	fp,0(sp)
 800b374:	dec00204 	addi	sp,sp,8
 800b378:	f800283a 	ret

0800b37c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 800b37c:	deffed04 	addi	sp,sp,-76
 800b380:	dfc01215 	stw	ra,72(sp)
 800b384:	df001115 	stw	fp,68(sp)
 800b388:	df001104 	addi	fp,sp,68
 800b38c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800b390:	e0bfff17 	ldw	r2,-4(fp)
 800b394:	10000716 	blt	r2,zero,800b3b4 <isatty+0x38>
 800b398:	e13fff17 	ldw	r4,-4(fp)
 800b39c:	01400304 	movi	r5,12
 800b3a0:	8001a0c0 	call	8001a0c <__mulsi3>
 800b3a4:	00c20074 	movhi	r3,2049
 800b3a8:	18f9ce04 	addi	r3,r3,-6344
 800b3ac:	10c5883a 	add	r2,r2,r3
 800b3b0:	00000106 	br	800b3b8 <isatty+0x3c>
 800b3b4:	0005883a 	mov	r2,zero
 800b3b8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 800b3bc:	e0bfef17 	ldw	r2,-68(fp)
 800b3c0:	10000e26 	beq	r2,zero,800b3fc <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 800b3c4:	e0bfef17 	ldw	r2,-68(fp)
 800b3c8:	10800017 	ldw	r2,0(r2)
 800b3cc:	10800817 	ldw	r2,32(r2)
 800b3d0:	1000021e 	bne	r2,zero,800b3dc <isatty+0x60>
    {
      return 1;
 800b3d4:	00800044 	movi	r2,1
 800b3d8:	00000c06 	br	800b40c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 800b3dc:	e0bff004 	addi	r2,fp,-64
 800b3e0:	e13fff17 	ldw	r4,-4(fp)
 800b3e4:	100b883a 	mov	r5,r2
 800b3e8:	800b27c0 	call	800b27c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 800b3ec:	e0bff117 	ldw	r2,-60(fp)
 800b3f0:	10880020 	cmpeqi	r2,r2,8192
 800b3f4:	10803fcc 	andi	r2,r2,255
 800b3f8:	00000406 	br	800b40c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800b3fc:	800b32c0 	call	800b32c <alt_get_errno>
 800b400:	00c01444 	movi	r3,81
 800b404:	10c00015 	stw	r3,0(r2)
    return 0;
 800b408:	0005883a 	mov	r2,zero
  }
}
 800b40c:	e037883a 	mov	sp,fp
 800b410:	dfc00117 	ldw	ra,4(sp)
 800b414:	df000017 	ldw	fp,0(sp)
 800b418:	dec00204 	addi	sp,sp,8
 800b41c:	f800283a 	ret

0800b420 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800b420:	defffc04 	addi	sp,sp,-16
 800b424:	df000315 	stw	fp,12(sp)
 800b428:	df000304 	addi	fp,sp,12
 800b42c:	e13ffd15 	stw	r4,-12(fp)
 800b430:	e17ffe15 	stw	r5,-8(fp)
 800b434:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 800b438:	e0fffe17 	ldw	r3,-8(fp)
 800b43c:	e0bffd17 	ldw	r2,-12(fp)
 800b440:	18800e26 	beq	r3,r2,800b47c <alt_load_section+0x5c>
  {
    while( to != end )
 800b444:	00000a06 	br	800b470 <alt_load_section+0x50>
    {
      *to++ = *from++;
 800b448:	e0bffd17 	ldw	r2,-12(fp)
 800b44c:	10c00017 	ldw	r3,0(r2)
 800b450:	e0bffe17 	ldw	r2,-8(fp)
 800b454:	10c00015 	stw	r3,0(r2)
 800b458:	e0bffe17 	ldw	r2,-8(fp)
 800b45c:	10800104 	addi	r2,r2,4
 800b460:	e0bffe15 	stw	r2,-8(fp)
 800b464:	e0bffd17 	ldw	r2,-12(fp)
 800b468:	10800104 	addi	r2,r2,4
 800b46c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 800b470:	e0fffe17 	ldw	r3,-8(fp)
 800b474:	e0bfff17 	ldw	r2,-4(fp)
 800b478:	18bff31e 	bne	r3,r2,800b448 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 800b47c:	e037883a 	mov	sp,fp
 800b480:	df000017 	ldw	fp,0(sp)
 800b484:	dec00104 	addi	sp,sp,4
 800b488:	f800283a 	ret

0800b48c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800b48c:	defffe04 	addi	sp,sp,-8
 800b490:	dfc00115 	stw	ra,4(sp)
 800b494:	df000015 	stw	fp,0(sp)
 800b498:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 800b49c:	01020074 	movhi	r4,2049
 800b4a0:	213a7804 	addi	r4,r4,-5664
 800b4a4:	01420074 	movhi	r5,2049
 800b4a8:	29778504 	addi	r5,r5,-8684
 800b4ac:	01820074 	movhi	r6,2049
 800b4b0:	31ba7804 	addi	r6,r6,-5664
 800b4b4:	800b4200 	call	800b420 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 800b4b8:	01020034 	movhi	r4,2048
 800b4bc:	21000804 	addi	r4,r4,32
 800b4c0:	01420034 	movhi	r5,2048
 800b4c4:	29400804 	addi	r5,r5,32
 800b4c8:	01820034 	movhi	r6,2048
 800b4cc:	31800804 	addi	r6,r6,32
 800b4d0:	800b4200 	call	800b420 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 800b4d4:	01020074 	movhi	r4,2049
 800b4d8:	2131ba04 	addi	r4,r4,-14616
 800b4dc:	01420074 	movhi	r5,2049
 800b4e0:	2971ba04 	addi	r5,r5,-14616
 800b4e4:	01820074 	movhi	r6,2049
 800b4e8:	31b78504 	addi	r6,r6,-8684
 800b4ec:	800b4200 	call	800b420 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 800b4f0:	800c0840 	call	800c084 <alt_dcache_flush_all>
  alt_icache_flush_all();
 800b4f4:	800c2d80 	call	800c2d8 <alt_icache_flush_all>
}
 800b4f8:	e037883a 	mov	sp,fp
 800b4fc:	dfc00117 	ldw	ra,4(sp)
 800b500:	df000017 	ldw	fp,0(sp)
 800b504:	dec00204 	addi	sp,sp,8
 800b508:	f800283a 	ret

0800b50c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800b50c:	defffe04 	addi	sp,sp,-8
 800b510:	dfc00115 	stw	ra,4(sp)
 800b514:	df000015 	stw	fp,0(sp)
 800b518:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800b51c:	00820074 	movhi	r2,2049
 800b520:	10ba7604 	addi	r2,r2,-5672
 800b524:	10800017 	ldw	r2,0(r2)
 800b528:	10000526 	beq	r2,zero,800b540 <alt_get_errno+0x34>
 800b52c:	00820074 	movhi	r2,2049
 800b530:	10ba7604 	addi	r2,r2,-5672
 800b534:	10800017 	ldw	r2,0(r2)
 800b538:	103ee83a 	callr	r2
 800b53c:	00000206 	br	800b548 <alt_get_errno+0x3c>
 800b540:	00820074 	movhi	r2,2049
 800b544:	10bd7304 	addi	r2,r2,-2612
}
 800b548:	e037883a 	mov	sp,fp
 800b54c:	dfc00117 	ldw	ra,4(sp)
 800b550:	df000017 	ldw	fp,0(sp)
 800b554:	dec00204 	addi	sp,sp,8
 800b558:	f800283a 	ret

0800b55c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 800b55c:	defff904 	addi	sp,sp,-28
 800b560:	dfc00615 	stw	ra,24(sp)
 800b564:	df000515 	stw	fp,20(sp)
 800b568:	df000504 	addi	fp,sp,20
 800b56c:	e13ffd15 	stw	r4,-12(fp)
 800b570:	e17ffe15 	stw	r5,-8(fp)
 800b574:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 800b578:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800b57c:	e0bffd17 	ldw	r2,-12(fp)
 800b580:	10000716 	blt	r2,zero,800b5a0 <lseek+0x44>
 800b584:	e13ffd17 	ldw	r4,-12(fp)
 800b588:	01400304 	movi	r5,12
 800b58c:	8001a0c0 	call	8001a0c <__mulsi3>
 800b590:	00c20074 	movhi	r3,2049
 800b594:	18f9ce04 	addi	r3,r3,-6344
 800b598:	10c5883a 	add	r2,r2,r3
 800b59c:	00000106 	br	800b5a4 <lseek+0x48>
 800b5a0:	0005883a 	mov	r2,zero
 800b5a4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 800b5a8:	e0bffc17 	ldw	r2,-16(fp)
 800b5ac:	10001026 	beq	r2,zero,800b5f0 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 800b5b0:	e0bffc17 	ldw	r2,-16(fp)
 800b5b4:	10800017 	ldw	r2,0(r2)
 800b5b8:	10800717 	ldw	r2,28(r2)
 800b5bc:	10000926 	beq	r2,zero,800b5e4 <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 800b5c0:	e0bffc17 	ldw	r2,-16(fp)
 800b5c4:	10800017 	ldw	r2,0(r2)
 800b5c8:	10800717 	ldw	r2,28(r2)
 800b5cc:	e13ffc17 	ldw	r4,-16(fp)
 800b5d0:	e17ffe17 	ldw	r5,-8(fp)
 800b5d4:	e1bfff17 	ldw	r6,-4(fp)
 800b5d8:	103ee83a 	callr	r2
 800b5dc:	e0bffb15 	stw	r2,-20(fp)
 800b5e0:	00000506 	br	800b5f8 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 800b5e4:	00bfde84 	movi	r2,-134
 800b5e8:	e0bffb15 	stw	r2,-20(fp)
 800b5ec:	00000206 	br	800b5f8 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
 800b5f0:	00bfebc4 	movi	r2,-81
 800b5f4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 800b5f8:	e0bffb17 	ldw	r2,-20(fp)
 800b5fc:	1000060e 	bge	r2,zero,800b618 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 800b600:	800b50c0 	call	800b50c <alt_get_errno>
 800b604:	e0fffb17 	ldw	r3,-20(fp)
 800b608:	00c7c83a 	sub	r3,zero,r3
 800b60c:	10c00015 	stw	r3,0(r2)
    rc = -1;
 800b610:	00bfffc4 	movi	r2,-1
 800b614:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 800b618:	e0bffb17 	ldw	r2,-20(fp)
}
 800b61c:	e037883a 	mov	sp,fp
 800b620:	dfc00117 	ldw	ra,4(sp)
 800b624:	df000017 	ldw	fp,0(sp)
 800b628:	dec00204 	addi	sp,sp,8
 800b62c:	f800283a 	ret

0800b630 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800b630:	defffd04 	addi	sp,sp,-12
 800b634:	dfc00215 	stw	ra,8(sp)
 800b638:	df000115 	stw	fp,4(sp)
 800b63c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800b640:	0009883a 	mov	r4,zero
 800b644:	800bab80 	call	800bab8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 800b648:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800b64c:	800baec0 	call	800baec <alt_sys_init>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 800b650:	800c1900 	call	800c190 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800b654:	01020074 	movhi	r4,2049
 800b658:	21307b04 	addi	r4,r4,-15892
 800b65c:	800c3140 	call	800c314 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 800b660:	d1232217 	ldw	r4,-29560(gp)
 800b664:	d0e32317 	ldw	r3,-29556(gp)
 800b668:	d0a32417 	ldw	r2,-29552(gp)
 800b66c:	180b883a 	mov	r5,r3
 800b670:	100d883a 	mov	r6,r2
 800b674:	800005c0 	call	800005c <main>
 800b678:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 800b67c:	01000044 	movi	r4,1
 800b680:	800b1340 	call	800b134 <close>
  exit (result);
 800b684:	e13fff17 	ldw	r4,-4(fp)
 800b688:	800c3280 	call	800c328 <exit>

0800b68c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 800b68c:	defffe04 	addi	sp,sp,-8
 800b690:	df000115 	stw	fp,4(sp)
 800b694:	df000104 	addi	fp,sp,4
 800b698:	e13fff15 	stw	r4,-4(fp)
}
 800b69c:	e037883a 	mov	sp,fp
 800b6a0:	df000017 	ldw	fp,0(sp)
 800b6a4:	dec00104 	addi	sp,sp,4
 800b6a8:	f800283a 	ret

0800b6ac <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 800b6ac:	defffe04 	addi	sp,sp,-8
 800b6b0:	df000115 	stw	fp,4(sp)
 800b6b4:	df000104 	addi	fp,sp,4
 800b6b8:	e13fff15 	stw	r4,-4(fp)
}
 800b6bc:	e037883a 	mov	sp,fp
 800b6c0:	df000017 	ldw	fp,0(sp)
 800b6c4:	dec00104 	addi	sp,sp,4
 800b6c8:	f800283a 	ret

0800b6cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800b6cc:	defffe04 	addi	sp,sp,-8
 800b6d0:	dfc00115 	stw	ra,4(sp)
 800b6d4:	df000015 	stw	fp,0(sp)
 800b6d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800b6dc:	00820074 	movhi	r2,2049
 800b6e0:	10ba7604 	addi	r2,r2,-5672
 800b6e4:	10800017 	ldw	r2,0(r2)
 800b6e8:	10000526 	beq	r2,zero,800b700 <alt_get_errno+0x34>
 800b6ec:	00820074 	movhi	r2,2049
 800b6f0:	10ba7604 	addi	r2,r2,-5672
 800b6f4:	10800017 	ldw	r2,0(r2)
 800b6f8:	103ee83a 	callr	r2
 800b6fc:	00000206 	br	800b708 <alt_get_errno+0x3c>
 800b700:	00820074 	movhi	r2,2049
 800b704:	10bd7304 	addi	r2,r2,-2612
}
 800b708:	e037883a 	mov	sp,fp
 800b70c:	dfc00117 	ldw	ra,4(sp)
 800b710:	df000017 	ldw	fp,0(sp)
 800b714:	dec00204 	addi	sp,sp,8
 800b718:	f800283a 	ret

0800b71c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 800b71c:	defff904 	addi	sp,sp,-28
 800b720:	dfc00615 	stw	ra,24(sp)
 800b724:	df000515 	stw	fp,20(sp)
 800b728:	df000504 	addi	fp,sp,20
 800b72c:	e13ffd15 	stw	r4,-12(fp)
 800b730:	e17ffe15 	stw	r5,-8(fp)
 800b734:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800b738:	e0bffd17 	ldw	r2,-12(fp)
 800b73c:	10000716 	blt	r2,zero,800b75c <read+0x40>
 800b740:	e13ffd17 	ldw	r4,-12(fp)
 800b744:	01400304 	movi	r5,12
 800b748:	8001a0c0 	call	8001a0c <__mulsi3>
 800b74c:	00c20074 	movhi	r3,2049
 800b750:	18f9ce04 	addi	r3,r3,-6344
 800b754:	10c5883a 	add	r2,r2,r3
 800b758:	00000106 	br	800b760 <read+0x44>
 800b75c:	0005883a 	mov	r2,zero
 800b760:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800b764:	e0bffb17 	ldw	r2,-20(fp)
 800b768:	10002026 	beq	r2,zero,800b7ec <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800b76c:	e0bffb17 	ldw	r2,-20(fp)
 800b770:	10800217 	ldw	r2,8(r2)
 800b774:	108000cc 	andi	r2,r2,3
 800b778:	10800060 	cmpeqi	r2,r2,1
 800b77c:	1000171e 	bne	r2,zero,800b7dc <read+0xc0>
        (fd->dev->read))
 800b780:	e0bffb17 	ldw	r2,-20(fp)
 800b784:	10800017 	ldw	r2,0(r2)
 800b788:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800b78c:	10001326 	beq	r2,zero,800b7dc <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 800b790:	e0bffb17 	ldw	r2,-20(fp)
 800b794:	10800017 	ldw	r2,0(r2)
 800b798:	10c00517 	ldw	r3,20(r2)
 800b79c:	e0bfff17 	ldw	r2,-4(fp)
 800b7a0:	e13ffb17 	ldw	r4,-20(fp)
 800b7a4:	e17ffe17 	ldw	r5,-8(fp)
 800b7a8:	100d883a 	mov	r6,r2
 800b7ac:	183ee83a 	callr	r3
 800b7b0:	e0bffc15 	stw	r2,-16(fp)
 800b7b4:	e0bffc17 	ldw	r2,-16(fp)
 800b7b8:	1000060e 	bge	r2,zero,800b7d4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 800b7bc:	800b6cc0 	call	800b6cc <alt_get_errno>
 800b7c0:	e0fffc17 	ldw	r3,-16(fp)
 800b7c4:	00c7c83a 	sub	r3,zero,r3
 800b7c8:	10c00015 	stw	r3,0(r2)
          return -1;
 800b7cc:	00bfffc4 	movi	r2,-1
 800b7d0:	00000a06 	br	800b7fc <read+0xe0>
        }
        return rval;
 800b7d4:	e0bffc17 	ldw	r2,-16(fp)
 800b7d8:	00000806 	br	800b7fc <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 800b7dc:	800b6cc0 	call	800b6cc <alt_get_errno>
 800b7e0:	00c00344 	movi	r3,13
 800b7e4:	10c00015 	stw	r3,0(r2)
 800b7e8:	00000306 	br	800b7f8 <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 800b7ec:	800b6cc0 	call	800b6cc <alt_get_errno>
 800b7f0:	00c01444 	movi	r3,81
 800b7f4:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 800b7f8:	00bfffc4 	movi	r2,-1
}
 800b7fc:	e037883a 	mov	sp,fp
 800b800:	dfc00117 	ldw	ra,4(sp)
 800b804:	df000017 	ldw	fp,0(sp)
 800b808:	dec00204 	addi	sp,sp,8
 800b80c:	f800283a 	ret

0800b810 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800b810:	defffc04 	addi	sp,sp,-16
 800b814:	dfc00315 	stw	ra,12(sp)
 800b818:	df000215 	stw	fp,8(sp)
 800b81c:	dc000115 	stw	r16,4(sp)
 800b820:	df000104 	addi	fp,sp,4
 800b824:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 800b828:	e0bfff17 	ldw	r2,-4(fp)
 800b82c:	108000d0 	cmplti	r2,r2,3
 800b830:	1000111e 	bne	r2,zero,800b878 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 800b834:	04020074 	movhi	r16,2049
 800b838:	8439ce04 	addi	r16,r16,-6344
 800b83c:	e0bfff17 	ldw	r2,-4(fp)
 800b840:	1009883a 	mov	r4,r2
 800b844:	01400304 	movi	r5,12
 800b848:	8001a0c0 	call	8001a0c <__mulsi3>
 800b84c:	8085883a 	add	r2,r16,r2
 800b850:	10800204 	addi	r2,r2,8
 800b854:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 800b858:	04020074 	movhi	r16,2049
 800b85c:	8439ce04 	addi	r16,r16,-6344
 800b860:	e0bfff17 	ldw	r2,-4(fp)
 800b864:	1009883a 	mov	r4,r2
 800b868:	01400304 	movi	r5,12
 800b86c:	8001a0c0 	call	8001a0c <__mulsi3>
 800b870:	8085883a 	add	r2,r16,r2
 800b874:	10000015 	stw	zero,0(r2)
  }
}
 800b878:	e037883a 	mov	sp,fp
 800b87c:	dfc00217 	ldw	ra,8(sp)
 800b880:	df000117 	ldw	fp,4(sp)
 800b884:	dc000017 	ldw	r16,0(sp)
 800b888:	dec00304 	addi	sp,sp,12
 800b88c:	f800283a 	ret

0800b890 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800b890:	defff904 	addi	sp,sp,-28
 800b894:	df000615 	stw	fp,24(sp)
 800b898:	df000604 	addi	fp,sp,24
 800b89c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800b8a0:	0005303a 	rdctl	r2,status
 800b8a4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800b8a8:	e0fffc17 	ldw	r3,-16(fp)
 800b8ac:	00bfff84 	movi	r2,-2
 800b8b0:	1884703a 	and	r2,r3,r2
 800b8b4:	1001703a 	wrctl	status,r2
  
  return context;
 800b8b8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800b8bc:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800b8c0:	d0a02217 	ldw	r2,-32632(gp)
 800b8c4:	10c000c4 	addi	r3,r2,3
 800b8c8:	00bfff04 	movi	r2,-4
 800b8cc:	1884703a 	and	r2,r3,r2
 800b8d0:	d0a02215 	stw	r2,-32632(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800b8d4:	d0e02217 	ldw	r3,-32632(gp)
 800b8d8:	e0bfff17 	ldw	r2,-4(fp)
 800b8dc:	1885883a 	add	r2,r3,r2
 800b8e0:	00c40034 	movhi	r3,4096
 800b8e4:	18c00004 	addi	r3,r3,0
 800b8e8:	1880062e 	bgeu	r3,r2,800b904 <sbrk+0x74>
 800b8ec:	e0bffa17 	ldw	r2,-24(fp)
 800b8f0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800b8f4:	e0bffd17 	ldw	r2,-12(fp)
 800b8f8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800b8fc:	00bfffc4 	movi	r2,-1
 800b900:	00000b06 	br	800b930 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 800b904:	d0a02217 	ldw	r2,-32632(gp)
 800b908:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 800b90c:	d0e02217 	ldw	r3,-32632(gp)
 800b910:	e0bfff17 	ldw	r2,-4(fp)
 800b914:	1885883a 	add	r2,r3,r2
 800b918:	d0a02215 	stw	r2,-32632(gp)
 800b91c:	e0bffa17 	ldw	r2,-24(fp)
 800b920:	e0bffe15 	stw	r2,-8(fp)
 800b924:	e0bffe17 	ldw	r2,-8(fp)
 800b928:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800b92c:	e0bffb17 	ldw	r2,-20(fp)
} 
 800b930:	e037883a 	mov	sp,fp
 800b934:	df000017 	ldw	fp,0(sp)
 800b938:	dec00104 	addi	sp,sp,4
 800b93c:	f800283a 	ret

0800b940 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800b940:	defffe04 	addi	sp,sp,-8
 800b944:	dfc00115 	stw	ra,4(sp)
 800b948:	df000015 	stw	fp,0(sp)
 800b94c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800b950:	00820074 	movhi	r2,2049
 800b954:	10ba7604 	addi	r2,r2,-5672
 800b958:	10800017 	ldw	r2,0(r2)
 800b95c:	10000526 	beq	r2,zero,800b974 <alt_get_errno+0x34>
 800b960:	00820074 	movhi	r2,2049
 800b964:	10ba7604 	addi	r2,r2,-5672
 800b968:	10800017 	ldw	r2,0(r2)
 800b96c:	103ee83a 	callr	r2
 800b970:	00000206 	br	800b97c <alt_get_errno+0x3c>
 800b974:	00820074 	movhi	r2,2049
 800b978:	10bd7304 	addi	r2,r2,-2612
}
 800b97c:	e037883a 	mov	sp,fp
 800b980:	dfc00117 	ldw	ra,4(sp)
 800b984:	df000017 	ldw	fp,0(sp)
 800b988:	dec00204 	addi	sp,sp,8
 800b98c:	f800283a 	ret

0800b990 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 800b990:	defff904 	addi	sp,sp,-28
 800b994:	dfc00615 	stw	ra,24(sp)
 800b998:	df000515 	stw	fp,20(sp)
 800b99c:	df000504 	addi	fp,sp,20
 800b9a0:	e13ffd15 	stw	r4,-12(fp)
 800b9a4:	e17ffe15 	stw	r5,-8(fp)
 800b9a8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800b9ac:	e0bffd17 	ldw	r2,-12(fp)
 800b9b0:	10000716 	blt	r2,zero,800b9d0 <write+0x40>
 800b9b4:	e13ffd17 	ldw	r4,-12(fp)
 800b9b8:	01400304 	movi	r5,12
 800b9bc:	8001a0c0 	call	8001a0c <__mulsi3>
 800b9c0:	00c20074 	movhi	r3,2049
 800b9c4:	18f9ce04 	addi	r3,r3,-6344
 800b9c8:	10c5883a 	add	r2,r2,r3
 800b9cc:	00000106 	br	800b9d4 <write+0x44>
 800b9d0:	0005883a 	mov	r2,zero
 800b9d4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800b9d8:	e0bffb17 	ldw	r2,-20(fp)
 800b9dc:	10001f26 	beq	r2,zero,800ba5c <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 800b9e0:	e0bffb17 	ldw	r2,-20(fp)
 800b9e4:	10800217 	ldw	r2,8(r2)
 800b9e8:	108000cc 	andi	r2,r2,3
 800b9ec:	10001726 	beq	r2,zero,800ba4c <write+0xbc>
 800b9f0:	e0bffb17 	ldw	r2,-20(fp)
 800b9f4:	10800017 	ldw	r2,0(r2)
 800b9f8:	10800617 	ldw	r2,24(r2)
 800b9fc:	10001326 	beq	r2,zero,800ba4c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 800ba00:	e0bffb17 	ldw	r2,-20(fp)
 800ba04:	10800017 	ldw	r2,0(r2)
 800ba08:	10c00617 	ldw	r3,24(r2)
 800ba0c:	e0bfff17 	ldw	r2,-4(fp)
 800ba10:	e13ffb17 	ldw	r4,-20(fp)
 800ba14:	e17ffe17 	ldw	r5,-8(fp)
 800ba18:	100d883a 	mov	r6,r2
 800ba1c:	183ee83a 	callr	r3
 800ba20:	e0bffc15 	stw	r2,-16(fp)
 800ba24:	e0bffc17 	ldw	r2,-16(fp)
 800ba28:	1000060e 	bge	r2,zero,800ba44 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 800ba2c:	800b9400 	call	800b940 <alt_get_errno>
 800ba30:	e0fffc17 	ldw	r3,-16(fp)
 800ba34:	00c7c83a 	sub	r3,zero,r3
 800ba38:	10c00015 	stw	r3,0(r2)
        return -1;
 800ba3c:	00bfffc4 	movi	r2,-1
 800ba40:	00000a06 	br	800ba6c <write+0xdc>
      }
      return rval;
 800ba44:	e0bffc17 	ldw	r2,-16(fp)
 800ba48:	00000806 	br	800ba6c <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
 800ba4c:	800b9400 	call	800b940 <alt_get_errno>
 800ba50:	00c00344 	movi	r3,13
 800ba54:	10c00015 	stw	r3,0(r2)
 800ba58:	00000306 	br	800ba68 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 800ba5c:	800b9400 	call	800b940 <alt_get_errno>
 800ba60:	00c01444 	movi	r3,81
 800ba64:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 800ba68:	00bfffc4 	movi	r2,-1
}
 800ba6c:	e037883a 	mov	sp,fp
 800ba70:	dfc00117 	ldw	ra,4(sp)
 800ba74:	df000017 	ldw	fp,0(sp)
 800ba78:	dec00204 	addi	sp,sp,8
 800ba7c:	f800283a 	ret

0800ba80 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 800ba80:	defffd04 	addi	sp,sp,-12
 800ba84:	dfc00215 	stw	ra,8(sp)
 800ba88:	df000115 	stw	fp,4(sp)
 800ba8c:	df000104 	addi	fp,sp,4
 800ba90:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 800ba94:	e13fff17 	ldw	r4,-4(fp)
 800ba98:	01420074 	movhi	r5,2049
 800ba9c:	297a7304 	addi	r5,r5,-5684
 800baa0:	800c0f00 	call	800c0f0 <alt_dev_llist_insert>
}
 800baa4:	e037883a 	mov	sp,fp
 800baa8:	dfc00117 	ldw	ra,4(sp)
 800baac:	df000017 	ldw	fp,0(sp)
 800bab0:	dec00204 	addi	sp,sp,8
 800bab4:	f800283a 	ret

0800bab8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 800bab8:	defffd04 	addi	sp,sp,-12
 800babc:	dfc00215 	stw	ra,8(sp)
 800bac0:	df000115 	stw	fp,4(sp)
 800bac4:	df000104 	addi	fp,sp,4
 800bac8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
 800bacc:	800c2f40 	call	800c2f4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 800bad0:	00800044 	movi	r2,1
 800bad4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 800bad8:	e037883a 	mov	sp,fp
 800badc:	dfc00117 	ldw	ra,4(sp)
 800bae0:	df000017 	ldw	fp,0(sp)
 800bae4:	dec00204 	addi	sp,sp,8
 800bae8:	f800283a 	ret

0800baec <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 800baec:	defffd04 	addi	sp,sp,-12
 800baf0:	dfc00215 	stw	ra,8(sp)
 800baf4:	df000115 	stw	fp,4(sp)
 800baf8:	df000104 	addi	fp,sp,4
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( CHAR_BUFFER_WITH_DMA, Char_Buffer_with_DMA);
 800bafc:	00820074 	movhi	r2,2049
 800bb00:	10ba2e04 	addi	r2,r2,-5960
 800bb04:	10800a17 	ldw	r2,40(r2)
 800bb08:	10800104 	addi	r2,r2,4
 800bb0c:	10800017 	ldw	r2,0(r2)
 800bb10:	10ffffcc 	andi	r3,r2,65535
 800bb14:	00820074 	movhi	r2,2049
 800bb18:	10ba2e04 	addi	r2,r2,-5960
 800bb1c:	10c00c15 	stw	r3,48(r2)
 800bb20:	00820074 	movhi	r2,2049
 800bb24:	10ba2e04 	addi	r2,r2,-5960
 800bb28:	10800a17 	ldw	r2,40(r2)
 800bb2c:	10800104 	addi	r2,r2,4
 800bb30:	10800017 	ldw	r2,0(r2)
 800bb34:	1006d43a 	srli	r3,r2,16
 800bb38:	00820074 	movhi	r2,2049
 800bb3c:	10ba2e04 	addi	r2,r2,-5960
 800bb40:	10c00d15 	stw	r3,52(r2)
 800bb44:	00820074 	movhi	r2,2049
 800bb48:	10ba2e04 	addi	r2,r2,-5960
 800bb4c:	10800c17 	ldw	r2,48(r2)
 800bb50:	10801068 	cmpgeui	r2,r2,65
 800bb54:	1000081e 	bne	r2,zero,800bb78 <alt_sys_init+0x8c>
 800bb58:	00820074 	movhi	r2,2049
 800bb5c:	10ba2e04 	addi	r2,r2,-5960
 800bb60:	00c00fc4 	movi	r3,63
 800bb64:	10c00f15 	stw	r3,60(r2)
 800bb68:	00820074 	movhi	r2,2049
 800bb6c:	10ba2e04 	addi	r2,r2,-5960
 800bb70:	00c00184 	movi	r3,6
 800bb74:	10c01015 	stw	r3,64(r2)
 800bb78:	00820074 	movhi	r2,2049
 800bb7c:	10ba2e04 	addi	r2,r2,-5960
 800bb80:	10800d17 	ldw	r2,52(r2)
 800bb84:	10800868 	cmpgeui	r2,r2,33
 800bb88:	1000041e 	bne	r2,zero,800bb9c <alt_sys_init+0xb0>
 800bb8c:	00820074 	movhi	r2,2049
 800bb90:	10ba2e04 	addi	r2,r2,-5960
 800bb94:	00c007c4 	movi	r3,31
 800bb98:	10c01115 	stw	r3,68(r2)
 800bb9c:	01020074 	movhi	r4,2049
 800bba0:	213a2e04 	addi	r4,r4,-5960
 800bba4:	800bda40 	call	800bda4 <alt_up_char_buffer_init>
 800bba8:	01020074 	movhi	r4,2049
 800bbac:	213a2e04 	addi	r4,r4,-5960
 800bbb0:	800ba800 	call	800ba80 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( PIXEL_BUFFER_DMA, Pixel_Buffer_DMA);
 800bbb4:	00820074 	movhi	r2,2049
 800bbb8:	10ba4004 	addi	r2,r2,-5888
 800bbbc:	10800a17 	ldw	r2,40(r2)
 800bbc0:	10800017 	ldw	r2,0(r2)
 800bbc4:	1007883a 	mov	r3,r2
 800bbc8:	00820074 	movhi	r2,2049
 800bbcc:	10ba4004 	addi	r2,r2,-5888
 800bbd0:	10c00b15 	stw	r3,44(r2)
 800bbd4:	00820074 	movhi	r2,2049
 800bbd8:	10ba4004 	addi	r2,r2,-5888
 800bbdc:	10800a17 	ldw	r2,40(r2)
 800bbe0:	10800104 	addi	r2,r2,4
 800bbe4:	10800017 	ldw	r2,0(r2)
 800bbe8:	1007883a 	mov	r3,r2
 800bbec:	00820074 	movhi	r2,2049
 800bbf0:	10ba4004 	addi	r2,r2,-5888
 800bbf4:	10c00c15 	stw	r3,48(r2)
 800bbf8:	00820074 	movhi	r2,2049
 800bbfc:	10ba4004 	addi	r2,r2,-5888
 800bc00:	10800a17 	ldw	r2,40(r2)
 800bc04:	10800204 	addi	r2,r2,8
 800bc08:	10800017 	ldw	r2,0(r2)
 800bc0c:	10ffffcc 	andi	r3,r2,65535
 800bc10:	00820074 	movhi	r2,2049
 800bc14:	10ba4004 	addi	r2,r2,-5888
 800bc18:	10c00f15 	stw	r3,60(r2)
 800bc1c:	00820074 	movhi	r2,2049
 800bc20:	10ba4004 	addi	r2,r2,-5888
 800bc24:	10800a17 	ldw	r2,40(r2)
 800bc28:	10800204 	addi	r2,r2,8
 800bc2c:	10800017 	ldw	r2,0(r2)
 800bc30:	1006d43a 	srli	r3,r2,16
 800bc34:	00820074 	movhi	r2,2049
 800bc38:	10ba4004 	addi	r2,r2,-5888
 800bc3c:	10c01015 	stw	r3,64(r2)
 800bc40:	00820074 	movhi	r2,2049
 800bc44:	10ba4004 	addi	r2,r2,-5888
 800bc48:	10800a17 	ldw	r2,40(r2)
 800bc4c:	10800304 	addi	r2,r2,12
 800bc50:	10800017 	ldw	r2,0(r2)
 800bc54:	1005d07a 	srai	r2,r2,1
 800bc58:	10c0004c 	andi	r3,r2,1
 800bc5c:	00820074 	movhi	r2,2049
 800bc60:	10ba4004 	addi	r2,r2,-5888
 800bc64:	10c00d15 	stw	r3,52(r2)
 800bc68:	00820074 	movhi	r2,2049
 800bc6c:	10ba4004 	addi	r2,r2,-5888
 800bc70:	10800a17 	ldw	r2,40(r2)
 800bc74:	10800304 	addi	r2,r2,12
 800bc78:	10800017 	ldw	r2,0(r2)
 800bc7c:	1005d13a 	srai	r2,r2,4
 800bc80:	10c003cc 	andi	r3,r2,15
 800bc84:	00820074 	movhi	r2,2049
 800bc88:	10ba4004 	addi	r2,r2,-5888
 800bc8c:	10c00e15 	stw	r3,56(r2)
 800bc90:	00820074 	movhi	r2,2049
 800bc94:	10ba4004 	addi	r2,r2,-5888
 800bc98:	10800a17 	ldw	r2,40(r2)
 800bc9c:	10800304 	addi	r2,r2,12
 800bca0:	10800017 	ldw	r2,0(r2)
 800bca4:	1005d43a 	srai	r2,r2,16
 800bca8:	e0bfff05 	stb	r2,-4(fp)
 800bcac:	00820074 	movhi	r2,2049
 800bcb0:	10ba4004 	addi	r2,r2,-5888
 800bcb4:	10800a17 	ldw	r2,40(r2)
 800bcb8:	10800304 	addi	r2,r2,12
 800bcbc:	10800017 	ldw	r2,0(r2)
 800bcc0:	1004d63a 	srli	r2,r2,24
 800bcc4:	e0bfff45 	stb	r2,-3(fp)
 800bcc8:	00820074 	movhi	r2,2049
 800bccc:	10ba4004 	addi	r2,r2,-5888
 800bcd0:	10800e17 	ldw	r2,56(r2)
 800bcd4:	10800058 	cmpnei	r2,r2,1
 800bcd8:	1000041e 	bne	r2,zero,800bcec <alt_sys_init+0x200>
 800bcdc:	00820074 	movhi	r2,2049
 800bce0:	10ba4004 	addi	r2,r2,-5888
 800bce4:	10001115 	stw	zero,68(r2)
 800bce8:	00000e06 	br	800bd24 <alt_sys_init+0x238>
 800bcec:	00820074 	movhi	r2,2049
 800bcf0:	10ba4004 	addi	r2,r2,-5888
 800bcf4:	10800e17 	ldw	r2,56(r2)
 800bcf8:	10800098 	cmpnei	r2,r2,2
 800bcfc:	1000051e 	bne	r2,zero,800bd14 <alt_sys_init+0x228>
 800bd00:	00820074 	movhi	r2,2049
 800bd04:	10ba4004 	addi	r2,r2,-5888
 800bd08:	00c00044 	movi	r3,1
 800bd0c:	10c01115 	stw	r3,68(r2)
 800bd10:	00000406 	br	800bd24 <alt_sys_init+0x238>
 800bd14:	00820074 	movhi	r2,2049
 800bd18:	10ba4004 	addi	r2,r2,-5888
 800bd1c:	00c00084 	movi	r3,2
 800bd20:	10c01115 	stw	r3,68(r2)
 800bd24:	e0bfff03 	ldbu	r2,-4(fp)
 800bd28:	00c00804 	movi	r3,32
 800bd2c:	1885c83a 	sub	r2,r3,r2
 800bd30:	00ffffc4 	movi	r3,-1
 800bd34:	1886d83a 	srl	r3,r3,r2
 800bd38:	00820074 	movhi	r2,2049
 800bd3c:	10ba4004 	addi	r2,r2,-5888
 800bd40:	10c01215 	stw	r3,72(r2)
 800bd44:	e0ffff03 	ldbu	r3,-4(fp)
 800bd48:	00820074 	movhi	r2,2049
 800bd4c:	10ba4004 	addi	r2,r2,-5888
 800bd50:	10801117 	ldw	r2,68(r2)
 800bd54:	1887883a 	add	r3,r3,r2
 800bd58:	00820074 	movhi	r2,2049
 800bd5c:	10ba4004 	addi	r2,r2,-5888
 800bd60:	10c01315 	stw	r3,76(r2)
 800bd64:	e0bfff43 	ldbu	r2,-3(fp)
 800bd68:	00c00804 	movi	r3,32
 800bd6c:	1885c83a 	sub	r2,r3,r2
 800bd70:	00ffffc4 	movi	r3,-1
 800bd74:	1886d83a 	srl	r3,r3,r2
 800bd78:	00820074 	movhi	r2,2049
 800bd7c:	10ba4004 	addi	r2,r2,-5888
 800bd80:	10c01415 	stw	r3,80(r2)
 800bd84:	01020074 	movhi	r4,2049
 800bd88:	213a4004 	addi	r4,r4,-5888
 800bd8c:	800ba800 	call	800ba80 <alt_dev_reg>
}
 800bd90:	e037883a 	mov	sp,fp
 800bd94:	dfc00117 	ldw	ra,4(sp)
 800bd98:	df000017 	ldw	fp,0(sp)
 800bd9c:	dec00204 	addi	sp,sp,8
 800bda0:	f800283a 	ret

0800bda4 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
 800bda4:	defffc04 	addi	sp,sp,-16
 800bda8:	dfc00315 	stw	ra,12(sp)
 800bdac:	df000215 	stw	fp,8(sp)
 800bdb0:	df000204 	addi	fp,sp,8
 800bdb4:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
 800bdb8:	e0bfff17 	ldw	r2,-4(fp)
 800bdbc:	10800217 	ldw	r2,8(r2)
 800bdc0:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
 800bdc4:	00000d06 	br	800bdfc <alt_up_char_buffer_init+0x58>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
 800bdc8:	e13ffe17 	ldw	r4,-8(fp)
 800bdcc:	01420074 	movhi	r5,2049
 800bdd0:	29777e04 	addi	r5,r5,-8712
 800bdd4:	8008a100 	call	8008a10 <strcmp>
 800bdd8:	1000051e 	bne	r2,zero,800bdf0 <alt_up_char_buffer_init+0x4c>
			(*name) = '\0';
 800bddc:	e0bffe17 	ldw	r2,-8(fp)
 800bde0:	10000005 	stb	zero,0(r2)
			break;
 800bde4:	0001883a 	nop
		}
	}
	
	return;
 800bde8:	0001883a 	nop
 800bdec:	00000906 	br	800be14 <alt_up_char_buffer_init+0x70>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
 800bdf0:	e0bffe17 	ldw	r2,-8(fp)
 800bdf4:	10800044 	addi	r2,r2,1
 800bdf8:	e0bffe15 	stw	r2,-8(fp)
 800bdfc:	e0bffe17 	ldw	r2,-8(fp)
 800be00:	10800003 	ldbu	r2,0(r2)
 800be04:	10803fcc 	andi	r2,r2,255
 800be08:	1080201c 	xori	r2,r2,128
 800be0c:	10bfe004 	addi	r2,r2,-128
 800be10:	103fed1e 	bne	r2,zero,800bdc8 <alt_up_char_buffer_init+0x24>
			(*name) = '\0';
			break;
		}
	}
	
	return;
 800be14:	0001883a 	nop
}
 800be18:	e037883a 	mov	sp,fp
 800be1c:	dfc00117 	ldw	ra,4(sp)
 800be20:	df000017 	ldw	fp,0(sp)
 800be24:	dec00204 	addi	sp,sp,8
 800be28:	f800283a 	ret

0800be2c <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
 800be2c:	defffc04 	addi	sp,sp,-16
 800be30:	dfc00315 	stw	ra,12(sp)
 800be34:	df000215 	stw	fp,8(sp)
 800be38:	df000204 	addi	fp,sp,8
 800be3c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
 800be40:	e13fff17 	ldw	r4,-4(fp)
 800be44:	01420074 	movhi	r5,2049
 800be48:	297a7304 	addi	r5,r5,-5684
 800be4c:	800c2480 	call	800c248 <alt_find_dev>
 800be50:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 800be54:	e0bffe17 	ldw	r2,-8(fp)
}
 800be58:	e037883a 	mov	sp,fp
 800be5c:	dfc00117 	ldw	ra,4(sp)
 800be60:	df000017 	ldw	fp,0(sp)
 800be64:	dec00204 	addi	sp,sp,8
 800be68:	f800283a 	ret

0800be6c <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
 800be6c:	defffa04 	addi	sp,sp,-24
 800be70:	df000515 	stw	fp,20(sp)
 800be74:	df000504 	addi	fp,sp,20
 800be78:	e13ffc15 	stw	r4,-16(fp)
 800be7c:	2805883a 	mov	r2,r5
 800be80:	e1bffe15 	stw	r6,-8(fp)
 800be84:	e1ffff15 	stw	r7,-4(fp)
 800be88:	e0bffd05 	stb	r2,-12(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 800be8c:	e0bffc17 	ldw	r2,-16(fp)
 800be90:	10800c17 	ldw	r2,48(r2)
 800be94:	e0fffe17 	ldw	r3,-8(fp)
 800be98:	1880042e 	bgeu	r3,r2,800beac <alt_up_char_buffer_draw+0x40>
 800be9c:	e0bffc17 	ldw	r2,-16(fp)
 800bea0:	10800d17 	ldw	r2,52(r2)
 800bea4:	e0ffff17 	ldw	r3,-4(fp)
 800bea8:	18800236 	bltu	r3,r2,800beb4 <alt_up_char_buffer_draw+0x48>
		return -1;
 800beac:	00bfffc4 	movi	r2,-1
 800beb0:	00001c06 	br	800bf24 <alt_up_char_buffer_draw+0xb8>
	
	unsigned int addr = 0;
 800beb4:	e03ffb15 	stw	zero,-20(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
 800beb8:	e0bffc17 	ldw	r2,-16(fp)
 800bebc:	10c00f17 	ldw	r3,60(r2)
 800bec0:	e0bffe17 	ldw	r2,-8(fp)
 800bec4:	1886703a 	and	r3,r3,r2
 800bec8:	e0bffc17 	ldw	r2,-16(fp)
 800becc:	10800e17 	ldw	r2,56(r2)
 800bed0:	1884983a 	sll	r2,r3,r2
 800bed4:	e0fffb17 	ldw	r3,-20(fp)
 800bed8:	1884b03a 	or	r2,r3,r2
 800bedc:	e0bffb15 	stw	r2,-20(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
 800bee0:	e0bffc17 	ldw	r2,-16(fp)
 800bee4:	10c01117 	ldw	r3,68(r2)
 800bee8:	e0bfff17 	ldw	r2,-4(fp)
 800beec:	1886703a 	and	r3,r3,r2
 800bef0:	e0bffc17 	ldw	r2,-16(fp)
 800bef4:	10801017 	ldw	r2,64(r2)
 800bef8:	1884983a 	sll	r2,r3,r2
 800befc:	e0fffb17 	ldw	r3,-20(fp)
 800bf00:	1884b03a 	or	r2,r3,r2
 800bf04:	e0bffb15 	stw	r2,-20(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
 800bf08:	e0bffc17 	ldw	r2,-16(fp)
 800bf0c:	10c00b17 	ldw	r3,44(r2)
 800bf10:	e0bffb17 	ldw	r2,-20(fp)
 800bf14:	1885883a 	add	r2,r3,r2
 800bf18:	e0fffd03 	ldbu	r3,-12(fp)
 800bf1c:	10c00025 	stbio	r3,0(r2)

	return 0;
 800bf20:	0005883a 	mov	r2,zero
}
 800bf24:	e037883a 	mov	sp,fp
 800bf28:	df000017 	ldw	fp,0(sp)
 800bf2c:	dec00104 	addi	sp,sp,4
 800bf30:	f800283a 	ret

0800bf34 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
 800bf34:	defffa04 	addi	sp,sp,-24
 800bf38:	df000515 	stw	fp,20(sp)
 800bf3c:	df000504 	addi	fp,sp,20
 800bf40:	e13ffc15 	stw	r4,-16(fp)
 800bf44:	e17ffd15 	stw	r5,-12(fp)
 800bf48:	e1bffe15 	stw	r6,-8(fp)
 800bf4c:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 800bf50:	e0bffc17 	ldw	r2,-16(fp)
 800bf54:	10800c17 	ldw	r2,48(r2)
 800bf58:	e0fffe17 	ldw	r3,-8(fp)
 800bf5c:	1880042e 	bgeu	r3,r2,800bf70 <alt_up_char_buffer_string+0x3c>
 800bf60:	e0bffc17 	ldw	r2,-16(fp)
 800bf64:	10800d17 	ldw	r2,52(r2)
 800bf68:	e0ffff17 	ldw	r3,-4(fp)
 800bf6c:	18800236 	bltu	r3,r2,800bf78 <alt_up_char_buffer_string+0x44>
		return -1;
 800bf70:	00bfffc4 	movi	r2,-1
 800bf74:	00002906 	br	800c01c <alt_up_char_buffer_string+0xe8>
	
	unsigned int offset = 0;
 800bf78:	e03ffb15 	stw	zero,-20(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
 800bf7c:	e0bffc17 	ldw	r2,-16(fp)
 800bf80:	10801017 	ldw	r2,64(r2)
 800bf84:	e0ffff17 	ldw	r3,-4(fp)
 800bf88:	1886983a 	sll	r3,r3,r2
 800bf8c:	e0bffe17 	ldw	r2,-8(fp)
 800bf90:	1885883a 	add	r2,r3,r2
 800bf94:	e0bffb15 	stw	r2,-20(fp)

	while ( *ptr )
 800bf98:	00001906 	br	800c000 <alt_up_char_buffer_string+0xcc>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
 800bf9c:	e0bffc17 	ldw	r2,-16(fp)
 800bfa0:	10c00b17 	ldw	r3,44(r2)
 800bfa4:	e0bffb17 	ldw	r2,-20(fp)
 800bfa8:	1885883a 	add	r2,r3,r2
 800bfac:	e0fffd17 	ldw	r3,-12(fp)
 800bfb0:	18c00003 	ldbu	r3,0(r3)
 800bfb4:	18c03fcc 	andi	r3,r3,255
 800bfb8:	18c0201c 	xori	r3,r3,128
 800bfbc:	18ffe004 	addi	r3,r3,-128
 800bfc0:	10c00025 	stbio	r3,0(r2)
		++ptr;
 800bfc4:	e0bffd17 	ldw	r2,-12(fp)
 800bfc8:	10800044 	addi	r2,r2,1
 800bfcc:	e0bffd15 	stw	r2,-12(fp)
		if (++x >= char_buffer->x_resolution)
 800bfd0:	e0bffe17 	ldw	r2,-8(fp)
 800bfd4:	10800044 	addi	r2,r2,1
 800bfd8:	e0bffe15 	stw	r2,-8(fp)
 800bfdc:	e0bffc17 	ldw	r2,-16(fp)
 800bfe0:	10800c17 	ldw	r2,48(r2)
 800bfe4:	e0fffe17 	ldw	r3,-8(fp)
 800bfe8:	18800236 	bltu	r3,r2,800bff4 <alt_up_char_buffer_string+0xc0>
			return -1;
 800bfec:	00bfffc4 	movi	r2,-1
 800bff0:	00000a06 	br	800c01c <alt_up_char_buffer_string+0xe8>
		++offset;
 800bff4:	e0bffb17 	ldw	r2,-20(fp)
 800bff8:	10800044 	addi	r2,r2,1
 800bffc:	e0bffb15 	stw	r2,-20(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
 800c000:	e0bffd17 	ldw	r2,-12(fp)
 800c004:	10800003 	ldbu	r2,0(r2)
 800c008:	10803fcc 	andi	r2,r2,255
 800c00c:	1080201c 	xori	r2,r2,128
 800c010:	10bfe004 	addi	r2,r2,-128
 800c014:	103fe11e 	bne	r2,zero,800bf9c <alt_up_char_buffer_string+0x68>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
 800c018:	0005883a 	mov	r2,zero
}
 800c01c:	e037883a 	mov	sp,fp
 800c020:	df000017 	ldw	fp,0(sp)
 800c024:	dec00104 	addi	sp,sp,4
 800c028:	f800283a 	ret

0800c02c <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
 800c02c:	defffe04 	addi	sp,sp,-8
 800c030:	df000115 	stw	fp,4(sp)
 800c034:	df000104 	addi	fp,sp,4
 800c038:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
 800c03c:	e0bfff17 	ldw	r2,-4(fp)
 800c040:	10800a17 	ldw	r2,40(r2)
 800c044:	10800084 	addi	r2,r2,2
 800c048:	00c00044 	movi	r3,1
 800c04c:	10c00025 	stbio	r3,0(r2)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
 800c050:	0001883a 	nop
 800c054:	e0bfff17 	ldw	r2,-4(fp)
 800c058:	10800a17 	ldw	r2,40(r2)
 800c05c:	10800084 	addi	r2,r2,2
 800c060:	10800023 	ldbuio	r2,0(r2)
 800c064:	10803fcc 	andi	r2,r2,255
 800c068:	1080004c 	andi	r2,r2,1
 800c06c:	103ff91e 	bne	r2,zero,800c054 <alt_up_char_buffer_clear+0x28>
	return 0;
 800c070:	0005883a 	mov	r2,zero
}
 800c074:	e037883a 	mov	sp,fp
 800c078:	df000017 	ldw	fp,0(sp)
 800c07c:	dec00104 	addi	sp,sp,4
 800c080:	f800283a 	ret

0800c084 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 800c084:	deffff04 	addi	sp,sp,-4
 800c088:	df000015 	stw	fp,0(sp)
 800c08c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 800c090:	e037883a 	mov	sp,fp
 800c094:	df000017 	ldw	fp,0(sp)
 800c098:	dec00104 	addi	sp,sp,4
 800c09c:	f800283a 	ret

0800c0a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800c0a0:	defffe04 	addi	sp,sp,-8
 800c0a4:	dfc00115 	stw	ra,4(sp)
 800c0a8:	df000015 	stw	fp,0(sp)
 800c0ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800c0b0:	00820074 	movhi	r2,2049
 800c0b4:	10ba7604 	addi	r2,r2,-5672
 800c0b8:	10800017 	ldw	r2,0(r2)
 800c0bc:	10000526 	beq	r2,zero,800c0d4 <alt_get_errno+0x34>
 800c0c0:	00820074 	movhi	r2,2049
 800c0c4:	10ba7604 	addi	r2,r2,-5672
 800c0c8:	10800017 	ldw	r2,0(r2)
 800c0cc:	103ee83a 	callr	r2
 800c0d0:	00000206 	br	800c0dc <alt_get_errno+0x3c>
 800c0d4:	00820074 	movhi	r2,2049
 800c0d8:	10bd7304 	addi	r2,r2,-2612
}
 800c0dc:	e037883a 	mov	sp,fp
 800c0e0:	dfc00117 	ldw	ra,4(sp)
 800c0e4:	df000017 	ldw	fp,0(sp)
 800c0e8:	dec00204 	addi	sp,sp,8
 800c0ec:	f800283a 	ret

0800c0f0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 800c0f0:	defffa04 	addi	sp,sp,-24
 800c0f4:	dfc00515 	stw	ra,20(sp)
 800c0f8:	df000415 	stw	fp,16(sp)
 800c0fc:	df000404 	addi	fp,sp,16
 800c100:	e13ffe15 	stw	r4,-8(fp)
 800c104:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 800c108:	e0bffe17 	ldw	r2,-8(fp)
 800c10c:	10000326 	beq	r2,zero,800c11c <alt_dev_llist_insert+0x2c>
 800c110:	e0bffe17 	ldw	r2,-8(fp)
 800c114:	10800217 	ldw	r2,8(r2)
 800c118:	1000051e 	bne	r2,zero,800c130 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
 800c11c:	800c0a00 	call	800c0a0 <alt_get_errno>
 800c120:	00c00584 	movi	r3,22
 800c124:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 800c128:	00bffa84 	movi	r2,-22
 800c12c:	00001306 	br	800c17c <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 800c130:	e0bffe17 	ldw	r2,-8(fp)
 800c134:	e0ffff17 	ldw	r3,-4(fp)
 800c138:	e0fffc15 	stw	r3,-16(fp)
 800c13c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800c140:	e0bffd17 	ldw	r2,-12(fp)
 800c144:	e0fffc17 	ldw	r3,-16(fp)
 800c148:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 800c14c:	e0bffc17 	ldw	r2,-16(fp)
 800c150:	10c00017 	ldw	r3,0(r2)
 800c154:	e0bffd17 	ldw	r2,-12(fp)
 800c158:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800c15c:	e0bffc17 	ldw	r2,-16(fp)
 800c160:	10800017 	ldw	r2,0(r2)
 800c164:	e0fffd17 	ldw	r3,-12(fp)
 800c168:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 800c16c:	e0bffc17 	ldw	r2,-16(fp)
 800c170:	e0fffd17 	ldw	r3,-12(fp)
 800c174:	10c00015 	stw	r3,0(r2)

  return 0;  
 800c178:	0005883a 	mov	r2,zero
}
 800c17c:	e037883a 	mov	sp,fp
 800c180:	dfc00117 	ldw	ra,4(sp)
 800c184:	df000017 	ldw	fp,0(sp)
 800c188:	dec00204 	addi	sp,sp,8
 800c18c:	f800283a 	ret

0800c190 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 800c190:	defffd04 	addi	sp,sp,-12
 800c194:	dfc00215 	stw	ra,8(sp)
 800c198:	df000115 	stw	fp,4(sp)
 800c19c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800c1a0:	00820074 	movhi	r2,2049
 800c1a4:	10b1b904 	addi	r2,r2,-14620
 800c1a8:	e0bfff15 	stw	r2,-4(fp)
 800c1ac:	00000606 	br	800c1c8 <_do_ctors+0x38>
        (*ctor) (); 
 800c1b0:	e0bfff17 	ldw	r2,-4(fp)
 800c1b4:	10800017 	ldw	r2,0(r2)
 800c1b8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800c1bc:	e0bfff17 	ldw	r2,-4(fp)
 800c1c0:	10bfff04 	addi	r2,r2,-4
 800c1c4:	e0bfff15 	stw	r2,-4(fp)
 800c1c8:	e0ffff17 	ldw	r3,-4(fp)
 800c1cc:	00820074 	movhi	r2,2049
 800c1d0:	10b1ba04 	addi	r2,r2,-14616
 800c1d4:	18bff62e 	bgeu	r3,r2,800c1b0 <_do_ctors+0x20>
        (*ctor) (); 
}
 800c1d8:	e037883a 	mov	sp,fp
 800c1dc:	dfc00117 	ldw	ra,4(sp)
 800c1e0:	df000017 	ldw	fp,0(sp)
 800c1e4:	dec00204 	addi	sp,sp,8
 800c1e8:	f800283a 	ret

0800c1ec <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 800c1ec:	defffd04 	addi	sp,sp,-12
 800c1f0:	dfc00215 	stw	ra,8(sp)
 800c1f4:	df000115 	stw	fp,4(sp)
 800c1f8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800c1fc:	00820074 	movhi	r2,2049
 800c200:	10b1b904 	addi	r2,r2,-14620
 800c204:	e0bfff15 	stw	r2,-4(fp)
 800c208:	00000606 	br	800c224 <_do_dtors+0x38>
        (*dtor) (); 
 800c20c:	e0bfff17 	ldw	r2,-4(fp)
 800c210:	10800017 	ldw	r2,0(r2)
 800c214:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800c218:	e0bfff17 	ldw	r2,-4(fp)
 800c21c:	10bfff04 	addi	r2,r2,-4
 800c220:	e0bfff15 	stw	r2,-4(fp)
 800c224:	e0ffff17 	ldw	r3,-4(fp)
 800c228:	00820074 	movhi	r2,2049
 800c22c:	10b1ba04 	addi	r2,r2,-14616
 800c230:	18bff62e 	bgeu	r3,r2,800c20c <_do_dtors+0x20>
        (*dtor) (); 
}
 800c234:	e037883a 	mov	sp,fp
 800c238:	dfc00117 	ldw	ra,4(sp)
 800c23c:	df000017 	ldw	fp,0(sp)
 800c240:	dec00204 	addi	sp,sp,8
 800c244:	f800283a 	ret

0800c248 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 800c248:	defffa04 	addi	sp,sp,-24
 800c24c:	dfc00515 	stw	ra,20(sp)
 800c250:	df000415 	stw	fp,16(sp)
 800c254:	df000404 	addi	fp,sp,16
 800c258:	e13ffe15 	stw	r4,-8(fp)
 800c25c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 800c260:	e0bfff17 	ldw	r2,-4(fp)
 800c264:	10800017 	ldw	r2,0(r2)
 800c268:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 800c26c:	e13ffe17 	ldw	r4,-8(fp)
 800c270:	8008ab40 	call	8008ab4 <strlen>
 800c274:	10800044 	addi	r2,r2,1
 800c278:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800c27c:	00000d06 	br	800c2b4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 800c280:	e0bffc17 	ldw	r2,-16(fp)
 800c284:	10c00217 	ldw	r3,8(r2)
 800c288:	e0bffd17 	ldw	r2,-12(fp)
 800c28c:	1809883a 	mov	r4,r3
 800c290:	e17ffe17 	ldw	r5,-8(fp)
 800c294:	100d883a 	mov	r6,r2
 800c298:	800c3600 	call	800c360 <memcmp>
 800c29c:	1000021e 	bne	r2,zero,800c2a8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 800c2a0:	e0bffc17 	ldw	r2,-16(fp)
 800c2a4:	00000706 	br	800c2c4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 800c2a8:	e0bffc17 	ldw	r2,-16(fp)
 800c2ac:	10800017 	ldw	r2,0(r2)
 800c2b0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800c2b4:	e0fffc17 	ldw	r3,-16(fp)
 800c2b8:	e0bfff17 	ldw	r2,-4(fp)
 800c2bc:	18bff01e 	bne	r3,r2,800c280 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 800c2c0:	0005883a 	mov	r2,zero
}
 800c2c4:	e037883a 	mov	sp,fp
 800c2c8:	dfc00117 	ldw	ra,4(sp)
 800c2cc:	df000017 	ldw	fp,0(sp)
 800c2d0:	dec00204 	addi	sp,sp,8
 800c2d4:	f800283a 	ret

0800c2d8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 800c2d8:	deffff04 	addi	sp,sp,-4
 800c2dc:	df000015 	stw	fp,0(sp)
 800c2e0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 800c2e4:	e037883a 	mov	sp,fp
 800c2e8:	df000017 	ldw	fp,0(sp)
 800c2ec:	dec00104 	addi	sp,sp,4
 800c2f0:	f800283a 	ret

0800c2f4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 800c2f4:	deffff04 	addi	sp,sp,-4
 800c2f8:	df000015 	stw	fp,0(sp)
 800c2fc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 800c300:	000170fa 	wrctl	ienable,zero
}
 800c304:	e037883a 	mov	sp,fp
 800c308:	df000017 	ldw	fp,0(sp)
 800c30c:	dec00104 	addi	sp,sp,4
 800c310:	f800283a 	ret

0800c314 <atexit>:
 800c314:	200b883a 	mov	r5,r4
 800c318:	000d883a 	mov	r6,zero
 800c31c:	0009883a 	mov	r4,zero
 800c320:	000f883a 	mov	r7,zero
 800c324:	800c3dc1 	jmpi	800c3dc <__register_exitproc>

0800c328 <exit>:
 800c328:	defffe04 	addi	sp,sp,-8
 800c32c:	000b883a 	mov	r5,zero
 800c330:	dc000015 	stw	r16,0(sp)
 800c334:	dfc00115 	stw	ra,4(sp)
 800c338:	2021883a 	mov	r16,r4
 800c33c:	800c50c0 	call	800c50c <__call_exitprocs>
 800c340:	00820074 	movhi	r2,2049
 800c344:	10ba6e04 	addi	r2,r2,-5704
 800c348:	11000017 	ldw	r4,0(r2)
 800c34c:	20800f17 	ldw	r2,60(r4)
 800c350:	10000126 	beq	r2,zero,800c358 <exit+0x30>
 800c354:	103ee83a 	callr	r2
 800c358:	8009883a 	mov	r4,r16
 800c35c:	800c6ac0 	call	800c6ac <_exit>

0800c360 <memcmp>:
 800c360:	01c000c4 	movi	r7,3
 800c364:	3980192e 	bgeu	r7,r6,800c3cc <memcmp+0x6c>
 800c368:	2904b03a 	or	r2,r5,r4
 800c36c:	11c4703a 	and	r2,r2,r7
 800c370:	10000f26 	beq	r2,zero,800c3b0 <memcmp+0x50>
 800c374:	20c00003 	ldbu	r3,0(r4)
 800c378:	28800003 	ldbu	r2,0(r5)
 800c37c:	1880151e 	bne	r3,r2,800c3d4 <memcmp+0x74>
 800c380:	31bfff84 	addi	r6,r6,-2
 800c384:	01ffffc4 	movi	r7,-1
 800c388:	00000406 	br	800c39c <memcmp+0x3c>
 800c38c:	20c00003 	ldbu	r3,0(r4)
 800c390:	28800003 	ldbu	r2,0(r5)
 800c394:	31bfffc4 	addi	r6,r6,-1
 800c398:	18800e1e 	bne	r3,r2,800c3d4 <memcmp+0x74>
 800c39c:	21000044 	addi	r4,r4,1
 800c3a0:	29400044 	addi	r5,r5,1
 800c3a4:	31fff91e 	bne	r6,r7,800c38c <memcmp+0x2c>
 800c3a8:	0005883a 	mov	r2,zero
 800c3ac:	f800283a 	ret
 800c3b0:	20c00017 	ldw	r3,0(r4)
 800c3b4:	28800017 	ldw	r2,0(r5)
 800c3b8:	1880041e 	bne	r3,r2,800c3cc <memcmp+0x6c>
 800c3bc:	31bfff04 	addi	r6,r6,-4
 800c3c0:	21000104 	addi	r4,r4,4
 800c3c4:	29400104 	addi	r5,r5,4
 800c3c8:	39bff936 	bltu	r7,r6,800c3b0 <memcmp+0x50>
 800c3cc:	303fe91e 	bne	r6,zero,800c374 <memcmp+0x14>
 800c3d0:	003ff506 	br	800c3a8 <memcmp+0x48>
 800c3d4:	1885c83a 	sub	r2,r3,r2
 800c3d8:	f800283a 	ret

0800c3dc <__register_exitproc>:
 800c3dc:	defffa04 	addi	sp,sp,-24
 800c3e0:	00820074 	movhi	r2,2049
 800c3e4:	10ba6e04 	addi	r2,r2,-5704
 800c3e8:	dc000315 	stw	r16,12(sp)
 800c3ec:	14000017 	ldw	r16,0(r2)
 800c3f0:	dc400415 	stw	r17,16(sp)
 800c3f4:	dfc00515 	stw	ra,20(sp)
 800c3f8:	80805217 	ldw	r2,328(r16)
 800c3fc:	2023883a 	mov	r17,r4
 800c400:	10003e26 	beq	r2,zero,800c4fc <__register_exitproc+0x120>
 800c404:	10c00117 	ldw	r3,4(r2)
 800c408:	020007c4 	movi	r8,31
 800c40c:	40c0180e 	bge	r8,r3,800c470 <__register_exitproc+0x94>
 800c410:	00820034 	movhi	r2,2048
 800c414:	10868d04 	addi	r2,r2,6708
 800c418:	1000061e 	bne	r2,zero,800c434 <__register_exitproc+0x58>
 800c41c:	00bfffc4 	movi	r2,-1
 800c420:	dfc00517 	ldw	ra,20(sp)
 800c424:	dc400417 	ldw	r17,16(sp)
 800c428:	dc000317 	ldw	r16,12(sp)
 800c42c:	dec00604 	addi	sp,sp,24
 800c430:	f800283a 	ret
 800c434:	01006404 	movi	r4,400
 800c438:	d9400015 	stw	r5,0(sp)
 800c43c:	d9800115 	stw	r6,4(sp)
 800c440:	d9c00215 	stw	r7,8(sp)
 800c444:	8001a340 	call	8001a34 <malloc>
 800c448:	d9400017 	ldw	r5,0(sp)
 800c44c:	d9800117 	ldw	r6,4(sp)
 800c450:	d9c00217 	ldw	r7,8(sp)
 800c454:	103ff126 	beq	r2,zero,800c41c <__register_exitproc+0x40>
 800c458:	80c05217 	ldw	r3,328(r16)
 800c45c:	10000115 	stw	zero,4(r2)
 800c460:	10c00015 	stw	r3,0(r2)
 800c464:	80805215 	stw	r2,328(r16)
 800c468:	10006215 	stw	zero,392(r2)
 800c46c:	10006315 	stw	zero,396(r2)
 800c470:	10c00117 	ldw	r3,4(r2)
 800c474:	88000d1e 	bne	r17,zero,800c4ac <__register_exitproc+0xd0>
 800c478:	19000084 	addi	r4,r3,2
 800c47c:	2109883a 	add	r4,r4,r4
 800c480:	18c00044 	addi	r3,r3,1
 800c484:	2109883a 	add	r4,r4,r4
 800c488:	1109883a 	add	r4,r2,r4
 800c48c:	10c00115 	stw	r3,4(r2)
 800c490:	0005883a 	mov	r2,zero
 800c494:	21400015 	stw	r5,0(r4)
 800c498:	dfc00517 	ldw	ra,20(sp)
 800c49c:	dc400417 	ldw	r17,16(sp)
 800c4a0:	dc000317 	ldw	r16,12(sp)
 800c4a4:	dec00604 	addi	sp,sp,24
 800c4a8:	f800283a 	ret
 800c4ac:	02400044 	movi	r9,1
 800c4b0:	12806217 	ldw	r10,392(r2)
 800c4b4:	48d2983a 	sll	r9,r9,r3
 800c4b8:	19000804 	addi	r4,r3,32
 800c4bc:	18d1883a 	add	r8,r3,r3
 800c4c0:	2109883a 	add	r4,r4,r4
 800c4c4:	4211883a 	add	r8,r8,r8
 800c4c8:	2109883a 	add	r4,r4,r4
 800c4cc:	1109883a 	add	r4,r2,r4
 800c4d0:	1211883a 	add	r8,r2,r8
 800c4d4:	5254b03a 	or	r10,r10,r9
 800c4d8:	21c02215 	stw	r7,136(r4)
 800c4dc:	41802215 	stw	r6,136(r8)
 800c4e0:	12806215 	stw	r10,392(r2)
 800c4e4:	01000084 	movi	r4,2
 800c4e8:	893fe31e 	bne	r17,r4,800c478 <__register_exitproc+0x9c>
 800c4ec:	11006317 	ldw	r4,396(r2)
 800c4f0:	2252b03a 	or	r9,r4,r9
 800c4f4:	12406315 	stw	r9,396(r2)
 800c4f8:	003fdf06 	br	800c478 <__register_exitproc+0x9c>
 800c4fc:	00820074 	movhi	r2,2049
 800c500:	10bd8e04 	addi	r2,r2,-2504
 800c504:	80805215 	stw	r2,328(r16)
 800c508:	003fbe06 	br	800c404 <__register_exitproc+0x28>

0800c50c <__call_exitprocs>:
 800c50c:	00820074 	movhi	r2,2049
 800c510:	10ba6e04 	addi	r2,r2,-5704
 800c514:	10800017 	ldw	r2,0(r2)
 800c518:	defff304 	addi	sp,sp,-52
 800c51c:	df000b15 	stw	fp,44(sp)
 800c520:	d8800015 	stw	r2,0(sp)
 800c524:	10805204 	addi	r2,r2,328
 800c528:	dd400815 	stw	r21,32(sp)
 800c52c:	dfc00c15 	stw	ra,48(sp)
 800c530:	ddc00a15 	stw	r23,40(sp)
 800c534:	dd800915 	stw	r22,36(sp)
 800c538:	dd000715 	stw	r20,28(sp)
 800c53c:	dcc00615 	stw	r19,24(sp)
 800c540:	dc800515 	stw	r18,20(sp)
 800c544:	dc400415 	stw	r17,16(sp)
 800c548:	dc000315 	stw	r16,12(sp)
 800c54c:	d9000115 	stw	r4,4(sp)
 800c550:	2839883a 	mov	fp,r5
 800c554:	d8800215 	stw	r2,8(sp)
 800c558:	057fffc4 	movi	r21,-1
 800c55c:	d8800017 	ldw	r2,0(sp)
 800c560:	ddc00217 	ldw	r23,8(sp)
 800c564:	14805217 	ldw	r18,328(r2)
 800c568:	90001726 	beq	r18,zero,800c5c8 <__call_exitprocs+0xbc>
 800c56c:	94400117 	ldw	r17,4(r18)
 800c570:	8c3fffc4 	addi	r16,r17,-1
 800c574:	80001116 	blt	r16,zero,800c5bc <__call_exitprocs+0xb0>
 800c578:	8c400044 	addi	r17,r17,1
 800c57c:	8427883a 	add	r19,r16,r16
 800c580:	8c63883a 	add	r17,r17,r17
 800c584:	95802204 	addi	r22,r18,136
 800c588:	9ce7883a 	add	r19,r19,r19
 800c58c:	8c63883a 	add	r17,r17,r17
 800c590:	b4e7883a 	add	r19,r22,r19
 800c594:	9463883a 	add	r17,r18,r17
 800c598:	e0001726 	beq	fp,zero,800c5f8 <__call_exitprocs+0xec>
 800c59c:	8c87c83a 	sub	r3,r17,r18
 800c5a0:	b0c7883a 	add	r3,r22,r3
 800c5a4:	18c01e17 	ldw	r3,120(r3)
 800c5a8:	1f001326 	beq	r3,fp,800c5f8 <__call_exitprocs+0xec>
 800c5ac:	843fffc4 	addi	r16,r16,-1
 800c5b0:	9cffff04 	addi	r19,r19,-4
 800c5b4:	8c7fff04 	addi	r17,r17,-4
 800c5b8:	857ff71e 	bne	r16,r21,800c598 <__call_exitprocs+0x8c>
 800c5bc:	00820034 	movhi	r2,2048
 800c5c0:	10869204 	addi	r2,r2,6728
 800c5c4:	10002a1e 	bne	r2,zero,800c670 <__call_exitprocs+0x164>
 800c5c8:	dfc00c17 	ldw	ra,48(sp)
 800c5cc:	df000b17 	ldw	fp,44(sp)
 800c5d0:	ddc00a17 	ldw	r23,40(sp)
 800c5d4:	dd800917 	ldw	r22,36(sp)
 800c5d8:	dd400817 	ldw	r21,32(sp)
 800c5dc:	dd000717 	ldw	r20,28(sp)
 800c5e0:	dcc00617 	ldw	r19,24(sp)
 800c5e4:	dc800517 	ldw	r18,20(sp)
 800c5e8:	dc400417 	ldw	r17,16(sp)
 800c5ec:	dc000317 	ldw	r16,12(sp)
 800c5f0:	dec00d04 	addi	sp,sp,52
 800c5f4:	f800283a 	ret
 800c5f8:	91000117 	ldw	r4,4(r18)
 800c5fc:	88c00017 	ldw	r3,0(r17)
 800c600:	213fffc4 	addi	r4,r4,-1
 800c604:	24001526 	beq	r4,r16,800c65c <__call_exitprocs+0x150>
 800c608:	88000015 	stw	zero,0(r17)
 800c60c:	183fe726 	beq	r3,zero,800c5ac <__call_exitprocs+0xa0>
 800c610:	00800044 	movi	r2,1
 800c614:	1408983a 	sll	r4,r2,r16
 800c618:	91406217 	ldw	r5,392(r18)
 800c61c:	95000117 	ldw	r20,4(r18)
 800c620:	214a703a 	and	r5,r4,r5
 800c624:	28000b26 	beq	r5,zero,800c654 <__call_exitprocs+0x148>
 800c628:	91406317 	ldw	r5,396(r18)
 800c62c:	2148703a 	and	r4,r4,r5
 800c630:	20000c1e 	bne	r4,zero,800c664 <__call_exitprocs+0x158>
 800c634:	99400017 	ldw	r5,0(r19)
 800c638:	d9000117 	ldw	r4,4(sp)
 800c63c:	183ee83a 	callr	r3
 800c640:	90c00117 	ldw	r3,4(r18)
 800c644:	1d3fc51e 	bne	r3,r20,800c55c <__call_exitprocs+0x50>
 800c648:	b8c00017 	ldw	r3,0(r23)
 800c64c:	1cbfd726 	beq	r3,r18,800c5ac <__call_exitprocs+0xa0>
 800c650:	003fc206 	br	800c55c <__call_exitprocs+0x50>
 800c654:	183ee83a 	callr	r3
 800c658:	003ff906 	br	800c640 <__call_exitprocs+0x134>
 800c65c:	94000115 	stw	r16,4(r18)
 800c660:	003fea06 	br	800c60c <__call_exitprocs+0x100>
 800c664:	99000017 	ldw	r4,0(r19)
 800c668:	183ee83a 	callr	r3
 800c66c:	003ff406 	br	800c640 <__call_exitprocs+0x134>
 800c670:	90c00117 	ldw	r3,4(r18)
 800c674:	1800071e 	bne	r3,zero,800c694 <__call_exitprocs+0x188>
 800c678:	90c00017 	ldw	r3,0(r18)
 800c67c:	18000926 	beq	r3,zero,800c6a4 <__call_exitprocs+0x198>
 800c680:	9009883a 	mov	r4,r18
 800c684:	b8c00015 	stw	r3,0(r23)
 800c688:	8001a480 	call	8001a48 <free>
 800c68c:	bc800017 	ldw	r18,0(r23)
 800c690:	003fb506 	br	800c568 <__call_exitprocs+0x5c>
 800c694:	90c00017 	ldw	r3,0(r18)
 800c698:	902f883a 	mov	r23,r18
 800c69c:	1825883a 	mov	r18,r3
 800c6a0:	003fb106 	br	800c568 <__call_exitprocs+0x5c>
 800c6a4:	0007883a 	mov	r3,zero
 800c6a8:	003ffb06 	br	800c698 <__call_exitprocs+0x18c>

0800c6ac <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 800c6ac:	defffc04 	addi	sp,sp,-16
 800c6b0:	df000315 	stw	fp,12(sp)
 800c6b4:	df000304 	addi	fp,sp,12
 800c6b8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 800c6bc:	0001883a 	nop
 800c6c0:	e0bfff17 	ldw	r2,-4(fp)
 800c6c4:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
 800c6c8:	e0bffd17 	ldw	r2,-12(fp)
 800c6cc:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 800c6d0:	e0bffe17 	ldw	r2,-8(fp)
 800c6d4:	10000226 	beq	r2,zero,800c6e0 <_exit+0x34>
    ALT_SIM_FAIL();
 800c6d8:	002af070 	cmpltui	zero,zero,43969
 800c6dc:	00000106 	br	800c6e4 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
 800c6e0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 800c6e4:	003fff06 	br	800c6e4 <_exit+0x38>
